(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    611281,      11949]
NotebookOptionsPosition[    607154,      11875]
NotebookOutlinePosition[    607538,      11892]
CellTagsIndexPosition[    607495,      11889]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData["x"], "Input",
 CellChangeTimes->{{3.740054991695442*^9, 3.740054992350225*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"d065a3b0-6e3c-4842-a214-43aca7e85a0b"],

Cell[BoxData["x"], "Output",
 CellChangeTimes->{3.740054992631522*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"509e737d-1e79-4838-9ed2-a70e28c61f60"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ImportDataset", "[", "\"\<10_40.mx\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.74005499322193*^9, 3.740055003931921*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"36142c88-8b2d-4037-a5a5-df62e3a30e0a"],

Cell[CellGroupData[{

Cell[BoxData["x"], "Input",
 CellChangeTimes->{3.7400550054195957`*^9},
 CellLabel->"In[50]:=",ExpressionUUID->"791bd827-d7ed-4ece-aecf-6c251c14d3d9"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"k", "[", 
             RowBox[{"k", "[", 
              RowBox[{"k", "[", 
               RowBox[{"k", "[", 
                RowBox[{
                 RowBox[{"k", "[", 
                  RowBox[{"k", "[", 
                   RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", "k", "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"s", "[", "k", "]"}], "[", 
                    RowBox[{"s", "[", 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton"], "]"}], "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "[", "k", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{"k", "[", 
                   RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "[", "s", "]"}], "]"}], "]"}], "]"}],
               "]"}], "]"}], "\[Rule]", "True"}], ",", 
           TemplateBox[{"4998"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"k", "[", 
              RowBox[{"s", "[", 
               RowBox[{"s", "[", 
                RowBox[{
                 TemplateBox[{"1"},
                  "OutputSizeLimit`Skeleton"], "[", 
                 TemplateBox[{"1"},
                  "OutputSizeLimit`Skeleton"], "]"}], "]"}], "]"}], "]"}], 
             "[", "k", "]"}], "\[Rule]", "False"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{73., {3., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{61., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{61., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 50, 19906108128387131619, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{68., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{68., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 50, 19906108128387131619, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{51., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 50, 19906108128387131619, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{92., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[19906108128387131619 === $SessionID, 
   Out[50], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740055007072667*^9, 3.740058638877611*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"11423e24-7a72-4f91-8f96-405e42e5988f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "Subsection",ExpressionUUID->"347ef978-102c-446c-aebb-3e07cac1d6c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lengths", " ", "=", " ", "x"}], ";"}]], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"aa95c0db-44c0-4376-9b41-6081f4b252e3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"NoHalt", " ", "=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"lengths", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "False"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Halt", " ", "=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"lengths", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "True"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "NoHalt", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "Halt", "]"}]}], "Input",
 CellChangeTimes->{{3.7400551295596123`*^9, 3.740055130429797*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"3a8561dd-d3cc-45c7-be4c-cbec212850e0"],

Cell[BoxData["862"], "Output",
 CellChangeTimes->{
  3.740055130970943*^9, 3.740058615237425*^9, 3.740058653640601*^9, {
   3.740060727234399*^9, 3.740060731621752*^9}, 3.740060766709722*^9, 
   3.74006276141543*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"845c695f-148a-4c3c-8b09-d62ef68e7ed8"],

Cell[BoxData["4138"], "Output",
 CellChangeTimes->{
  3.740055130970943*^9, 3.740058615237425*^9, 3.740058653640601*^9, {
   3.740060727234399*^9, 3.740060731621752*^9}, 3.740060766709722*^9, 
   3.740062761427731*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"dd156b13-caaa-4a1f-9f64-318dc602cda2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HaltTrain", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Halt", ",", 
     RowBox[{"Length", "[", "NoHalt", "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"62d2b983-19f2-42a8-b5ff-e8eb67107879"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HaltTrain", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7400551446473207`*^9, 3.740055147115458*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"0a7c6f10-292d-4185-b2d1-8ceef08298db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "[", 
   RowBox[{"k", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"k", "[", 
         RowBox[{"s", "[", 
          RowBox[{"k", "[", 
           RowBox[{"k", "[", "s", "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
       RowBox[{"k", "[", 
        RowBox[{
         RowBox[{"s", "[", 
          RowBox[{"k", "[", "s", "]"}], "]"}], "[", 
         RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "]"}], "[", 
      RowBox[{
       RowBox[{
        RowBox[{"s", "[", "k", "]"}], "[", 
        RowBox[{"s", "[", "k", "]"}], "]"}], "[", "k", "]"}], "]"}], "[", 
     RowBox[{
      RowBox[{"k", "[", 
       RowBox[{"s", "[", "s", "]"}], "]"}], "[", "k", "]"}], "]"}], "]"}], 
   "]"}], "\[Rule]", "True"}]], "Output",
 CellChangeTimes->{3.740055147352844*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"b9c19ef2-d226-4172-bd47-75873c231f37"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HaltTrainRaster", "=", 
   RowBox[{"Monitor", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"SKRasterize", "[", 
         RowBox[{
          RowBox[{"HaltTrain", "[", 
           RowBox[{"[", 
            RowBox[{"x", ",", "1"}], "]"}], "]"}], ",", "5"}], "]"}], 
        "\[Rule]", " ", 
        RowBox[{"HaltTrain", "[", 
         RowBox[{"[", 
          RowBox[{"x", ",", "2"}], "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", 
         RowBox[{"Length", "[", "HaltTrain", "]"}]}], "}"}]}], "]"}], ",", 
     "x"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.74005515129959*^9, 3.740055214505303*^9}, 
   3.7400552791784077`*^9, {3.740060901340098*^9, 3.740060902235196*^9}, {
   3.740061282393218*^9, 3.740061288499894*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"22416634-4d0e-4bd7-b709-13ae60b07756"],

Cell[BoxData[
 RowBox[{
  RowBox[{"NoHaltTrainRaster", "=", 
   RowBox[{"Monitor", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"SKRasterize", "[", 
         RowBox[{
          RowBox[{"NoHalt", "[", 
           RowBox[{"[", 
            RowBox[{"x", ",", "1"}], "]"}], "]"}], ",", "5"}], "]"}], 
        "\[Rule]", " ", 
        RowBox[{"NoHalt", "[", 
         RowBox[{"[", 
          RowBox[{"x", ",", "2"}], "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", 
         RowBox[{"Length", "[", "NoHalt", "]"}]}], "}"}]}], "]"}], ",", "x"}],
     "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740055043357615*^9, 3.7400550580901823`*^9}, {
  3.740055257367535*^9, 3.740055288255136*^9}, {3.740061300377823*^9, 
  3.740061300777479*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"f7de1c0f-cbd2-4f02-b4ee-964e9ec022bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RasterTrain", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"HaltTrainRaster", ",", "NoHaltTrainRaster"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.74005535634354*^9, 3.740055374430488*^9}, {
  3.740061094295961*^9, 3.740061095143002*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"a14ad5af-e780-4a85-b5e7-48e1b99e2e65"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RasterClassify", " ", "=", " ", 
  RowBox[{"Classify", "[", "RasterTrain", "]"}]}]], "Input",
 CellChangeTimes->{{3.740055061397656*^9, 3.74005506177491*^9}, {
  3.7400553772676487`*^9, 3.7400553902337313`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"6aece15b-8a30-4e27-ba06-1cea0014de0d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Image\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Image\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1724", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1724, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Image"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Image"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Fill" -> 
             Image[CompressedData["
1:eJzsvU/IrVue33WJMbQSpQcVqStXOR6u4kAlkKTJQKnrTCSCdDsQUUiiCaIB
IS2I6KBAZ0omkcC1oSdCsM5AHIl1BqI2BOsQQ2lDkw4GTltU0Z22B4qTSA+s
8771Ofusz/N893c9f/Z73lO1D1Ttu5/vXuv3/7fWevZ+n+8/9mf/vV/883/g
s88+++Wf+/H//eKf+Q/++b/4F//Mf/hLf+jdmz/3Z/7CL/zxP/f3/Pg//8iP
//fXfvwff/DHr//ww79X3xpfX3/rs8d/X52Dv/6WPzfib771X/zld/9+7f3r
I/xznzzu63z+U8Ft34j//DTuz83i//LDv+8H/BuHccsf9T8f/43HfwscPbfi
XE/4g7l/+dff47yfxZnPcs7Cj+rX7Lf/Pn94/7dOx5Fr/cC5nvRLuO2y/87C
kb/Vv7P+b/bv9f9R/Wbzz587C5/1/1781vnPdT5nHH1S/5vFbxWfWf/urS/n
f+sPLX5tfJOf8DS/6yfZfxS3nmfhtq/ZvxX3dT7/1DjXt+K+nuyfxZP/U384
itu+1P+P4rP9I+HMm/x/a3xv/W/F0/rO67/+b7z797enccfnVutPsu/W689Z
61fy/8fGnR9b929nxedW8Z/1j+OY6jP5j+tpfMPT/E2/o/is//fiT5Xfe+M3
659U376+F7eeW/E0v68n/8z2h4TP+v+5482+vfje/no0/7fmr8cjL+VXw9v8
zu+9/SXtL7jOa9rfpPjM4kf7f8PRm/dn447j2fXV+o/n2Yqn/JvFU308FT7b
n4/6t9WPx8/iSf7ZeOoPrb+0+bHvY92//Fj2G3d+3jq+t64vy3X/s37N/r3+
ma2/tH9I+Wl87/n9Vvl9dP/gddHx43qK/yze8vOnHT9afy3/b11fe3Hn1Vac
eVP9Hp1/q/ytuOc/Gp/nhjtvU/8/y79b+3vD3b/34q0+nAefGt7yN+H2X+qP
s/5/rt+fpPi7PlL9JP8fxa3X2fXf8K3x34ofzc+teJJ/a/+l/Gr4Wfrdyr/O
25S/nyru6ym+Z+FH++tW3PbvXd/35mfbf8z231n5R/cvW3HHPcV/L+7rKb+P
4il/b41vrY9b+7/N3/aXW/cf9s/Z+2f37737n1m81fdW3HJTfjX/tvjy+tz2
r7eOn+8/tfgczY8Uv2TfWXiSf3b/aPnZ8jvhzrNb4S0+yf7k/08Fb/F1Ht8K
T+vLUdz3kZP9e/FmH/Kdf7P4rf1/1P6UX0fraxY/2l9a/t8aT/Y1/56FH40/
+K32h7Pj0/4hzX9r3NfPxo/633lxq/63F7fcVL9HcV4T7jpKeNL/rPp+rvdH
Eu51zf47ijuu9q/xVL+z/rnV9+9p/oY3/e2/FB/XATjyUn2089NR3Hql+tqL
Oz6t/vbiTf5ZeKrPo/5L9m3F0/o8W59b57ddzT9bceuV4nMW7vp4KvzW+evP
PRXu/LH9nzru60+9vziKz/aXlF8Nd93Zf0fxo/rN2j/rv+b/W/0+PuFcx65k
317c8UnxT/2v4Za/N757cfs31fcs3uY/iu/Vr62Pt9b/qdbXW+F+TXiyfxZv
68tR/Oj60s5PqX/sxX3+sv+O4mevTy2/Plb97c0f2+X5Pzbu/EnxOUt+88/W
/UPDrdfR9Wnv+tDW57a+285b4UfjtxV33m3tn2flT4qv8TZ+L47cJP8svOXf
VtxyU361+Zv/b90fUn7N4rPxT+u3P7cVT/4/ilvu2bj92/rDc8f3rj+pPoy3
8Q2/Vf9p+T87/rnjjs9R3HF/6vrz9aR/wp3/W/Gnil+qr+eGH62/TxV/Lv7/
2PFrf/9/Nm673L+P4sjjc8a535v803DP/9Q49iT7ZnFeHZ/ngnM96f+p4379
WPhzjf+t8bPi2+Z/rvhT+ee54n694z+b+HPtT7z6++mz8I/Vf3zd8XkqPPn/
KP5U8duLH7WP+SznU8Ftn3Ff/9j1/9z3P88V/9j+vTW+1z9cp05S/X9sfHb9
uON3/I7f8b142h996vjH7t9PtT48V//f43df3/fg3v+1/a1xf2/Qvv9J3y89
V/zBXfH3vUv+znPxn7vjzwKHv/fy+oib3/dj4a++Nb6ejd/5i58rP/FPO38x
64k/94h/s/Tv8/Fx/fzm4vcPW3Gvm8ZZb8HH9feb5f7pF+X+5HG8yW+45x33
p198Zbsf/fn2dHx9/3jB1/fPHbdd9t9Z+Pr+rvt31v/N/r3+P6rfbP75c2fh
s/7fi986/7k+9tm3C/tdJ1vxW8Vn1r9768v53/pDi18b3+QnPM3v+kn2H8XX
16/juO1r9m/FfZ3PPzXOdeOO+6j/i/L9zXZ8rN8l/v/83+/+/dZpuO0b+895
+Pr63nGuo/eIv3w//tY4do3xebnQf7R/Oz7G5+Wi//7Cn3j374fTuP36uL//
wTSOPnxuxL98j2PXqP887s89Fc57Xm3fx8adN2N8+/iz4nOr+M/6x3G0f7ie
/Mf1NL7haf6m31F81v978afK773xm/VPq3/ruRVf78/zeJrf15N/ZvtDwmf9
/9zxZt9efG9/PZr/W/PX45GX8qvhZ/X/1l/A7V+u8/o3H7aRP5qOzyx+tP83
HL3H/eF5uON4dn21/pP62yye8m8WT/XxVPhsfz7q31Y/af/Q8CT/bPxW+8PU
P5r8p9LvVvMf3T8cxW9dX5br/mf9mv17/TNbf2n/cHR9S/it8/vo/sHrouN3
1vm95edPO36r9eup6msvfvT8xbyz+9dby9+Ke/6j8XluuPM29f+z/Lu1vze8
7d9m8VYfbX187njL34RvPX8cXZ+34mflV4r/7P2p2fV3K269zq7/hp91/pzt
D1vzcyt+6/U3+S/l11PtD27lX+dt6z+fGu7rKb5n4Uf761bc9h+9v7E1P9v+
Y7b/zso/e3/Y8Nn7a3txX2/n9734U/XnZP/R9ecs/7f5t34/tDU/z94/z56v
kn+24q2+t+KWm/Kr+bfF97nuX28dP99/Ors/z/bvW/Xnlj+fSv9+qv1Ri0+y
/1bnh6fCW3xvdX/e+K2+f2/fr6LXre6fIj/tvxt+a/8ftX+2P22tr1n8aH9p
+X9r/GP3l6PxB7/V/nB2/K2/H92K+/rZ+FH/Oy8+1vdH7f7fre8f8/rc9w/P
9f5Iwr2u2X9H8fb91dbv1271+7KEt/kb3vS3/1J8XAfgyEv10c5PR3Hrlepr
L/5c9tdn4be+v37296Nb63Pv/aNZ/+y9f/JU56N2PrgVfuv8nV0fz8adP0fX
/+eGf+z9xVPtT1J+Nfy53b9t+Xn2/fPZ/Qvz7P19fMK5fqvz0ez92dT/Gm75
e+O7F589n83ibf6j+K3Ol7fW/6nW11vhs+tDsn8Wv/X966PrSzs/bd1/Ntzn
L/vvKH72+vSx9n8N35s/tsvzf2zc+dP2d0fln71/aPjZ69PZ5y/Pu7U+zsaP
xm8rfrR/npU/Kb7Gn/rvx8/GW/5txc/en36s/pDyaxafjf/e80HD954fZuNn
P56FP/X+7WPtD1P8t64fbXzDb9V/Wv7Pjn/uuONzFD+6Pz4L37u/O3p+e6r4
3Wr9Oxs/Wn+fKv5c/P+x49f+/v9s3Ha1369sxZGX1h/u9yb/NNzzPzXu3/Wl
778bzqvj81xwrif9P3Xcrx8Lf67x/1Tyq83/XPF7/Y2vd/xnE3+u/YlXfz99
Fv6x+o+vOz5PhSf/H8WfKn578aP2MV+qr+eO275PvT98auu7zyXj+eblafj6
+eenB7+N/148G3z9/Pvp474/Mt7f+eKO3/E7/oT4WJ8/Pfj6/eOfHvxj+/ce
v3Pi99OGX//96Tcrfp3fuOPmJ+IV/GHbFfmNb48/+uvOX3zHj+Afm5+48xf/
5P1nev9EeOI3tv+W+OO57Ne+ZTkeP8p/vZj/On6ZF3mz+vl6mt/zgNtvlj+L
j59b5meyf5zP+M8v/D/q//PBvtcb8YtfRn2+Ifn236X/+nOP+Dc1/s0C570/
txVHL68vlrs+fh73/Lbb66v9k/ghwcf17YJzfYxPx5EPPur/xUK/Uf8vFvzb
1h+7mT+NvxVu+U2/dfzN+3nH+B/HZ+1jnPVrOPOCO768X8/Pjo/zv47+S/nh
vEzybYfze6zDN3F8yv/kn08Lz/7fi9vv7j/Wy/6fw+f7g+2fxbm+7r/XkZ8W
vI2frd+kX8v/9fVtWT+ev8Wvybd/0/iGp/jP+me2Pizf9if/7cVdP8n/6/59
UdbXF4v1ebRviY/yl3iTb/7fhjs/Pb/3L3vxZP8sjp7j/C+/sl+MY/86/3jH
HRfzG1vv8f5Ox10Xj597G+Vvxd33LN944m/GLyP+5eL+1Ji/Xy747Uf/frng
r/d4x91/X+C4n43bL7a/4c7PMT5fLuLn788bbr+nv39K8Wm4/WP7XJ/Jv3vx
ln9b47f+9ymX+Kz/fj773/o7vtY76X8Ub/IbnvLz+v3njnte3tu/1/9+53Ku
a/q3/LH8WXy9P9o+9/el/1P/aHjK/4bbf60/tfpI9TVbf1v75yye8rfhrb5b
/5jFU/47bglP8W352fK7zd/qy/md/M+r++s47vsLfKz7ZX01vOl/NH98nc+v
6/dW+9uOt/w/u36dH47fVtz1tRdv+jkPE763f7b8nfVvyt9Uv7Zr6/7J/mvr
Z6v/rfsT25Xi13DsaP1lK976I/5M+bV1/2Dc8ybccdyLt/1Ly3/Pb7n2T8Nn
63dv/5n1717c/kn+S+tbw53/xq3f1v4ym99p/Oz+osl3HBN+q/jM4lvX163r
b+u/yf6E269b5c/is/vjrfv72fzDz2l9TOvH0frZun63899W/WbzZ/b+XMJn
82sr7nmJUxpv/WbxtD4exd2/U/03vOVP8o/xFj/jtivZl/JjFm/yk/1b11fX
z1P159n+k+ZP9e31Oa2faf+MPxI+e/8u9Xfnzdb7t7N48o/zqvVP47P3z1P+
NXz2/vXR+79jni3PP+n+acMd9635M2t/8v/s/jWtL21/efb6fqv7z7P+25r/
xtP5ot1/b/mV7u+3/J3FW320/E3fP27N79YfW/8xbr1af9qaf76+9/5Pm/9W
+0/ez64Pe/Gj/rnV9xetfzPO+4SU//bvbH63/pHwlr/Yk+LfcNuV7Dva/2fj
n/zXzs98bqt/j/p/Nj7JP7P717Pw1P+Sfxvu+N7q/kCyz/E/+/tXX2/rX8Kt
R8q/rXib/+j+7Kj/zsL3xrflj68n/ye8rS/Wbytu+a0+jv5+K41P699R3Hm3
F0/xncVn62Nr/TR89nwze3+i5WervzY+xdd2JvvT+IQ7Pg3fGl/j7f5TOx/u
vf/iOkn50danlB9tfMJ9vfWHdr5M/l//++/j92fO6q9n4Sn/Z+O3N76tf6X8
a/HfGp/0/e1e3Pan+wd7cZ+f7D/0Sf2p4bPng9Q/Gu747q2fdn5u9cU8KX7N
vuT/dr5FnvVI/vf4s+5vN3y2vo23/ub1K9VXwu33vevP7P7hqf9+Yev6uPf+
4uz+Ye/95bR+Ntx67V2fZ/E0v+v4bHx2/Tp6f7Pld9Kv4al/OH+S/JSfW+3b
e3+kjU+47W/rz977j3vlz+rX8KPna69jxo/e37AeyX9Hzz+p/83i6e+/0viz
8NZ/sXsr7vlT/RzF0/p+9v6nnc/a78eT/5v+zvNZ3Pm1d/+8d320Xkfxvevz
7Pn+Vv3nrPUv4X5N+bf3/vhZ69fW/avt37o+uX7Xf5/9Nu4vZvG2fzh6/zP5
x3mVxh/Fk/0Nd3ye+vv3s/Ivjfe4hqf8vRW+tX9vxe2Xretzw1t8j/b/Wfta
/GfxJD+NN753fz6bv219vNX6nvxztv/32t/yt51vZvtD0z+tb8m+Wfxj9++j
8Uv+b/GZjV+S7/Wzrc8tv5r8rbjX53Z/YOv6Ptufbr3/b+sf+N7vX5L8pxo/
69+zv9+cjU+qj4a77py/s/fnEm79U/209XMW3/r7CPt97/6o+f/o+rb3/LJ1
f3d0f731+4Ot+Nn727Y+n23/3vqf7Q9b+5fx9PvVhNuvrf8mPMV/tn8nHH1T
/I238al/Jvts11bc93Xb/Y80vuHM6/vf1ivlR8K53vAkf3Z8ws2bsRX39YYn
/zbcfkj+TfnT8OZf8Baf5r+Un3vxrfWT8nPWvq3xMd7ik+qr1d9sfTT9t9bP
bH6l/H7u+Gz8Z/HWP/fiXE/ysS/lZ8M/Vn1Zr7T+tvUv4b7+qeMtPkfjt7c/
7e0vrsuWH3v3Fw1P6/vR/YP1T/ytzxXf6r+9/SfFv/WPWdyfm5U/u/+d3V9t
xbfmf7M/2ZfiY/uP4pZ//fz3suK+Pp7vLvj6+a3j18+vS3yMzzy+Ht+lfZZ/
3f8dv35/4UXFr99feVHWt47bP0n+UXw9vkvc/MMN32rfeP/ui4pfv3/4Rbk/
2XHfH/L81+8/dvzW+s/O3/w76/+EJ/+dhc/6t+F7/Zvwo/kxmz979TM+1v9S
fsv/rfhR/Wbx9f7X+8ssfrS+m//W++f5eIv/Xvyofszb/PPU+PX9xTye7D8b
d3yO4rYryV/P729W3PU91tfz5ydu+KP/7vzFd/wI/rH5ie/8xaP814v5r+N3
/uJ1/M5fPIujl9cXy10ff+cvfq78xaP/38Tx4NZvlv8Xv4zxP44/lf7gju+o
19PzFzf7m/+4bjvTeOf/Wfy4rX5cZ7fBl/E5ituvKX+T/+fw19P5n/zf8Ovx
6fzEXF/3X+Y/t36tf6b6uzV/cfNfqr+z8L3xbfVh/5yNu35S/2W87+8zvuHr
69+Lxfl39M8ST+P38hPz+fX8u3y/sRdn/vX4z+Pr9bnk7/X3X67brbj9//j6
dlr+Vv3S/Ov3jzqO3PX7t0t89P/Lcv+2/3237R7l97/fsf+2Pp+o4eizHv/j
f3+E/uv3Vzs/a8Ov359ffv8+9r+OX8+feX65vTjy1uun41xP8d2aX8n/9lOK
j+uj4a4/+/8s/+ytj9n6OZr/6/2x2+e+Y//O4s4jx299fdrOr3U0flv91/J/
tj7Wv19++ueHpPGtfyf/zNrXcOZ1/jhvUn9q+qX4t/7n+k3+a+Nn+6PHt/pg
PvthFm/9udXXLN7W37393/Ft69dW3PNbf9uf6i/hvn4Ub/Fr+u/tn7z+wp94
9++Hp+0/3dfS+pH0b3ir77PWx5a/bf+4d3/p+Gzlh7Vdzf+pvpN/PH5r/ZyN
t/owbv8lPMlvuK8nPMlvOO8bvte/tq/5L/XnhNu+tj41+1J+p/xt4xve9Pf6
n+oLvO2vW340/RLe7EPuVpzrfk14ik/Cm/72W9t/Jnz2/kU7H3i88zPhzHP2
80eu/37rvOdLzN7f2Xr+nr0/1PCWv3v7w2z/OYrP9setuOur7S+37j/tn63x
abjtOvv+p+W2+LX+2PLL/vO4rfcHWn3Myk+4/W/c/aX1p3R+Trjt2ys/5Q/z
pfgdxZv8hrf14az5W/9O/p/FeU3Pt55dX9bX78vvn53/zq8Uv7Z+7s2frfFp
/XHr/sP+b8/P2ZofW/3X8rfh7e9fk38T7rxq+d/4LRKe5Nvu1P8bnvanTb/Z
/pri4/xv9dHyx/V7dH9r+5P/Z+/v750/5e9R3HJT/2j40fxqONdT//Jzrmb1
a/lr/3n9afhs/u9dX46uP0fXd1/fis/2l5a/CT+rvzT/7d2/bsVT/rf7Cw2f
3f+2/Gr1dav94Wz+7e1vrT6a/Xv999T12/p3W//Oju/s/nXv/tP6782/2fps
+be3fyL3Vvl/dH/T8JS/R/Gt9bs1/2b3l8n+hm+tv63+t958Ptm/Fff1W+O3
zq9W/63/7Y3fWfPf6vyY+o/l793/t/66t/9vXR+O1tfW/dFZ6xfXm//b/Yd0
/tmL22/p/sxe3Hlp/219vnI7f23dvzd8a/1srf/Z/Ev97+j6aP8xzyw+e/6w
H87GZ+u79fcUX17Pvr/jvEj+TfjW893e+5/t/sDs+pDycza/2/Pl0/yp/lzX
KT4Jt123Ol/sPX+fhZ91fmz9OeV/2x/P7p+33h84ev6d9c/s/mVrfc32p6P7
t9n989H9ZcKP1id+2dpfZ+Pf/H8U57V9P5vwtP90X2j9dS/ufWKKz158b/+d
xdv+s/W/hLf4u3624u3+h+tmKz7bn46eT4/ur2fxs9dfz5v6z9H7g7P5tXd9
PLq//ljrVzsfbT1/tf1pej53mn8WT/rbvmb/re6fHcX36nd2/R9dH/bu31p/
b/ePmDfNf2s8rc9H8eb/o/k/u7876/zV8uNo/t6qvmzHrPxZfPZ8tHd9Svob
b+tTil+qT9d9Gp9wz9vub7T9d8KT/nw+5e8snvqf435rfO/9b9tp+/bizf9n
5Y/jkORvxY/ur2fxpzq/tvu77Xyd+FtSfp1VXy3/9s4/m39nnd9bfrTzQfJv
yk/bn86/s/XR9h9Hv39r8Tuq/9H6Pvt8thW/df/ZWx+zeFsf9uJH7Zu1v93/
2Iu3/r+3vtwfbrW+3Cq+W/kRrV/D2/rocVtx18VW/WZxrqf1OfH7NdzXG/9f
uj+0Fzfv51bcejd8r/224yz/O2/8fJWz/Jv0b/bN2j9bH41/sdm3NT5b47dV
v1n9Z/Xbmp+z/j+anx8Ln43/LO768ri9ONeT/MRvPIt/rPqyXtav4Z7fuK//
rONnx9fzHl3/tu4PLH8vzvWj6//Z+4+Pjc+uD41ffZZ/fe/60/Cn2l/dev96
6/1Jwv26F992fuz8vbxfP98dx7fqN9o3j6/752Xx73H8+veHS35d49fvL71Y
+HeU3/Hr9wfOw9fjs8TH+uz4df8v9Rvv3y35H41fj89x/s3r8V3yOyb9E35r
/Wfnb/6d9X/Ck//Owmf92/C9/m35szc/ZvPnaH48F/2fOv/Psm/9+4fj+X19
/T2PP3e9P5/Hf3uWfs0/T41fX9+eHz6u78fx6/cfGr/xNyvu+hjrq+P+fQ6v
zwV/2C7F5xN/o+KP/kv8xj9/GH9w50fn573j1/GPzU985y8e5b9ezH8dv/MX
r+N3/uJZHL3G9eHOX4x88FH/O3+x5x3jfxyfsy/zozac68h1fHm/np93/uKf
df5i+y3513rO4o2/1/nT+lOLz7r/Xuv54BlP86f8ndXfclL9Xffvcrz7frKP
edf1ex3rr+G22/Jn+Z2bf5P+tn8vzvyp/lJ/83h/v2D9x/EXfD3/Xiz626jf
PL9x4ifm84lf2PsTj8eej42v+/9l4Ye48Psy7158jI+/f9s/v+sizb9+/2ce
R+7o3yU+5sfLBb+Mf39uu8bxx/mLXRf+fnn02358PT53/mLbl+I39qm3p+HI
W6/vjnM9xdf17fxwf0n+t59SfFwfDUfv5P+z/JPsb/UxWz9H83+9P/b4HvW/
/d78n/pji4/7xN74bfVfy/+Gz+ZH6o8N3xqfND7hzp+UX+vfX358/uJZfFb/
tr61/pr6d6tP6znq/zbsfzvuvDlavwlP/cH51/LX+Jg/2/kvG+7+0fxj/Rru
60fxvfFxHab5U//j9W8+TPejON6/72w4+iT9va92/Lbinh97k/8b7r6W8iPV
R8PHuPX8Tv0v4dY71W+y3/WLnNn5Pe+t8dTfG+515qz6nu0vSf5Z+F79vO4k
/Pr61vEWn1R/xlP80v7Kfkv6NTzV79b4pf1dwp2/1/dnXb+t+/OGuz/bfuOO
T8MtP8U/xa/h9nvqz21/uf77qPnnEzFPO5+k8Un/67+/2o6385H1v/77z/n9
dbs/tBe3/L146j+tP83iqT7Oxtv+euv5ffb+Upq/4a7vs+9/et7Un/beH3D9
t/pq+dfyP+nf5O+Nv++bp/Uj4cwHnvILPP39VhrfcMtv+hlHH8fprPlvrX9b
H2xXy9+2Prb1o+mX/JO+v7n+9wHHnz/b8vvs8cl/CXd80vi0v2k49iTc/k31
2/BW/01+s4952/qQ9jez+PX9+37+qdn9V8uflp/p74/T+Fl8tj5bfm3tH76e
6r/hbf6j9ctre77h1vqdrY/Z/X/C3Scs3+uocefRrH2t/832x9Z/jubnrP7t
fJjw1j9a/5vtj3vrr/nPdp6FO76tfrfis+v70f7V+qf7yCze1gePa/2r1V/a
/5/ln7Pvn2yt/7S+ztqf8NY/2v4k9efZ8Qk/qv9Z9u3tn1vPD2f3/7POL2n/
Yv/txVN/PQu/1fl06/7w1uv3Xv3T+df2bcW3+n8vPpsf7f5C81/L72T/Ufws
/+y1b9b+lp9b988Nn10fZvvz2ee7W6/v9v/13wcvn1/l8Vv55Y7iPle08/1W
3H21jU/3p46uz3vz0/FL9Qee+kfD2/q8d31p/ePo+tLOT+5/yb8Jb+eXs88P
Tf7e+wspvt63278Nb+cbx//o/vrs89fR/Gnjb31+mcWP9p+j57+j+NHzY4rf
WeejvfnVcNdd039r/Ft/OGt/Mts/9/p3dv062n+8P7JdrT6S/en+6NH63br/
3YqftT9M/jmq36z+rf+g9178Vv2x1cfZ97eP1s/W/svnk34Nn13fj+5vZ9ff
vbjz7Gz/p/3dWetj8v9Z+ZnOB2fFN+l/1vml6d/yl9e2/nr9mt1fJJz3s+v3
re6fWo+z8bP252393Itzva2/W/kNZ3HkJzw9f977gpR/zx2fvb+0FW/zt/3T
Vnzb8+2342fXx+z+L8mfxVN/mD0/JXxrf0z+mbU/9f8W/4T7esrvNn4v3vhz
ZvFWv3tx+7/VV4pPw4/yY8zGr8lv/b3lj/Pf8rfiW/tTi0+rj8Y/dHb+N/kN
t99vVV8Nb/Jn/X+r/UWbf2/9tv5jvZzfDbffPb/HpfydxVv+HNX/aH1vxS03
6TeLN/lH+8/W/rsVT/5p+bU3/472t7Pt37s/2dvfsOdW/Xlr/9uKH62Ps+qn
1UfCW/7O9u/Z/r6Vn7Dhvt7y59b8b0f5+7by+23FU/7t9b/z5s5ffN2+rfHZ
Gr+9/KCz+dn025qfs/4/mp8fC5+N/yx+5y/eVl+Nn7jhbX/h6z/r+Nnx9bxH
17+t+wPL34tz/ej6/9z4h8/e/6T8afzEDT+6/jT8qfZXt96/3np/knC/7sXT
+Wf9fHLnL77u3zt/8Vn4enzu/MXX43vnL77++887f/HR/JjNn6P58Vz0f+r8
P8u+9d9f3fmLz9av+eep8evr2/PDx/X9zl/8sfGH7VJ8/uOdv/iOz+Afm5/4
p5e/ONj12YjP8gdnnBnND7zO77vUb8Q9f7bP8yZ+4oaPn/t0+YtHfMlfPFqb
+IvR75sL/srRXvMPv1b/7bjljuvDkj94jE/Hrbfnt3+a/HH9+2Kx/ozyO79r
w3nPq+U3fJYfGD22zv9U+iX8qH8bfmv+YuRZD+vX8q/h6JH81/A0P/qm/G+4
7R77y8fnL278urN48t8ofzt/sf1q/9qurfis/tf5dzPu/Er6Jf5a46m/NLzF
L+VHy5/Z+Cb7LD/Zvze+xpv9rX+3/n/Mf/vrc67+Mj9xwu1X48Rr3T+dX7jh
yFvPn8v4JN/9eSve5p/FmX/9+73MD4x+vG7FvS48vvf3b4m/Zx5nfuPOm9E/
2/EkP+HWa7S/P99vjN/byP+Qxjs+lu/88/frDUdemt9x89/XNXzsO/v5KxNu
+Z5//fuDJX9xwpnPr8m/LT578fX6nucnbv5lHv9+oeUf8673j/Oeb5zi63Ep
P5r/kv1H52/1MRvf5F+PT/5p+Z3wNr/1S/Yl/Zkv5T94638tf/fGf+v8Sb/1
7xc77nn5fIpfi3+KX/PPUTzZ5/5k/4Ez/9b4Om/T34e3+tmbf228++e6fy5x
d/wb7vmbfXtxf+4sfOwL+/kvEz7GZTt/ZMMdl5afzb9tfU35nfLPfl///efF
f/79vu1P+Z9w9E/5v9U/xj1/wy1/Fm/y9+Itv47mv+dP9dnqI/UfX/d4X0/j
E269kv2p/hp+1P6tOHK2yk+450327e3/s/FJ9bMVb/ol/+2NT5M/iyf/b83P
1r893vv6s/Emf1a/VL++nuLX8JSfvp7kt/zkc21/3Oxr+wPH3/On+z/Mn9bn
JL/d35rFZ+3bmx9+vRW+N79m8XZ/YCvuurD8dj5ouOfdmv/G0/jZ+yetPvbi
e8/vzvvk/xa/hDuv0vkgxa/h+CPhTf5R3H3lKO742r/pfJLGN5z3Sb9ZPN2/
uf779O3Pj7X9139/v/35+0l+W3/2ro/tfNxwxyf5f29+zubfrH+S/S0+yE/P
F2142l9Y7vX9ZcaZt+1PWv61/G3zt/6+FXfepf393vpr+TOLz+Zvq7+t44/2
h639Z29/a/5P8mfxW9Wv8yuN31u/1/++Zr5/JLzNj17u48Znzzft+72t9TuL
p/51FH8u+X2r/UHDZ/vTWfLb/qPtL1J+Oo8c/2TfLN72j2l/Ooun/m/9tuKz
6wt46j8Jn60vrif/zeJn739m96+z8U/5M9s/t+Jb629rf7P8s89Hs/3vLHxv
fSZ8a/y2rn+We3Z/ns3Ptn8/Gp/Z+mr9/Vb4bPzb+Iaf7f9Z+Sm/ZvFb65/W
h635e7S/Hs3fs/fHW9f3s+9veF1N+7tZvK3vaf1pOK/tfNf2D9ueb/V87p8m
fOv62cbvXf+O1i9x4X0af7R/3vr8dav1MdXvUXx2f932fw2frZ+t51vnlfNn
dv+YcPtv7/r/qeBHzwdb728dxZv8rXiyL61/DXfe3yp/eG3r/9nnO19v5++t
/dPrn+uzjZ/tz6m/NNx6tf3f3vjO7p+Pro9N/73334/uvxLufWfLv/b9ZLs/
tnf/2b7/S/tny2/6tfU97S/T+tfwVt/Oj637k7b+uy6S/gmf3X+1+t5b/0f3
J21/elT/2f3x3vtHzT9n679Vv1k8zX/2+nRrPPlvL26/Nf+2/G/50+p37/2x
hB/1/+z+Nq1/s/jR9eko3tbPWdx/v2P5af07ijf5+DXxF6T12c+ntP8azvXk
f+dFu/+39f6cxzf5DW/9YW/+t/1pq4+j9bP3/lvrn2fje89vs/uDvfFr54PZ
/E78fwl3XC3/rPpN+eVxrb/stS/Jn8Wb/L14629Hcfun5ddW/zbc+qX478WP
9v/Z/Gvjj+J789/zN//tza82f1o/z8Kb/ITP5sfe+n3q/tnub7T4JP/sHb8V
v3V+pPi2/jGLH+2vzf9b+9csfmt+paP9a7a+Gp7OH7Pnk7P9Y/mp/vfqP9u/
9ua/8+rW/afl99b6unX+2m8+P/P5dP5uOO/9uRSfo/yEaf6z+PXa/mUrbr1T
/e3FLf/s/d9Z55OW33v9e7b/k/0t/5p/2/i9uO167njj196Lp/5zFt7yay/e
+CuNO38bfuv9w1b8aH9q/t2bn7c6/x+1bxZ/Lutj4udOeMt/Pr8Xv3X9zq4P
Z/m/5W/TL+G37p+31v+p7EvrD6978cZffxQ/ql/C8cts/Mf8flnx6/3vOH5U
v6363xof/d/4lef5fdfn7/y9R/Emf1a/9fP9Uv54/6Dj179ffbH4/nP8/m/J
79nwcf7z+EOT/KO4r4/+X/JnjvGbx7me7DuKH9Uv4dfz6zh+/f75cfx6fR3H
r9fX+fywd/9c98+njp8d3+v3d4/jt86fp87PW+NPnf/X1+/b8w8/bGf/cuL/
XeJt/F6c65b/6Fc/f5bn636j4g/uivy2jX+44+avGvnxfu6O6/rov+M475P8
Rzzx0zb+3gv/763xn7y/8xcHnBlTfq3bd+cvtl89fg7fz1+8Xpf8u/APr8/z
zUV+jP19Fn8d8ev9a8k/PMZvyZ/88PEP1i/jSf46vuSfHPVb8juO+i35F9N4
f259/qTfJS/G9f2CM886fon/6L/t+nm89fP9BcdnXT/zc77e7N8Un1G/JX8o
leJ9jvE03v697r9XC/vn/Pvm/fiEo+f1+Zfy7Tf7d2t8jDs/t/pvzJ8UX/e3
Zfzb/Gm8/Zfii/+TfQlf33/Zf69LfJr9r2P+WG6a33ok/2z13xjXhGf9Z+Pb
9E/9f07+cf2u1898/Jv9Lf6t/1/Pr6Pjk32v4vzGR/teTOLJPy+Kfy78x5/9
5F/DPf/4Po9P8q+vfy/K+m5+Z+ev5bs+m34vF/Ed5zf+WvdvXi78P+4vXi7k
r8//JvTHl4v6HNfHl4v8SThyx/xd4pZP3Lm+Pn/zX+IHX/ITMR+44zbq/+VC
/qi/cfvf+KvF39eN/n21+H2w5x/982WJb8fx/3r8Lnjyr/Hr9i/HX9/fXvS/
Hr9m/6z/XV9flvq44M6z9fmTf/r8TT/m93j3v3X56f7jEl+3L493XFL8r+v3
utTHm1gf1/vjBV9fH6x/qr9Wn71/jP3x1QJv/ctytuHpfLL0f8qv5N85/zT5
x+sTu1t/anjqv6l/grf1pfUPxq3bn/Vv9dfkf/aTf9ftz/G9vn+8jG/119a3
ufxc9v+5/H0T68d1yWvCU36g33X53n+m9e91jL9x693is+7/18U+399d7j/4
l+rPeWj/Jnx87/PFfH9r9l+v39n1dXv+2j9pfQRP8yd8zN9l/Bz3FP/kvza/
18Xr43N9Xdcv1/fc+Ly+jnmZ87/5d8SX9c081/cvqX/0+r6+/3gV8xu90vo+
2t/PF8k+y0n2Nzz5d7zOv2V8Un7YjoRf7x9NvyT/VamPy/kz9d+WP+Nr2v/3
9W/dP2+q/tfrM9s/xmVp34gv9wfG0/5o9nzR6nc9Ppf+nvBk3/X7k/Pr39z+
wPc3+/6k6ef8S/FL54Nt+790PrjYZdzzp/s7fM64/ZPmx67kX8at+y/r77jY
v14X9uZ3yh9fb/fn2v5jbv1f3l+6nn/p+43Z823ub9vOD62/p/39q1K/3T7G
tfnb/at1//T7a1xP45m/nd8d/9H/Kb9yfYx5k/t3y8+Ej3r3/c26/Hz/utWv
/ba1Pxhv9bH3/l4bn+rT8b9u/3L/2+b3vOv586bmb8Jd19f9t13/Nv+YX1l/
65HsM+78S/q3/Lje397E/uXxW+PDdfS6vn6+qfev1v8+/zI+3R9g3uR/9Dbu
vGj6p/xJ+b++P8z7g5afKf6OY4pf6p9p/9byx369nt/t+5d0fzzjrX81+70u
JfmpPrxut/vnt5af7E/4tvpn/Xsb9Uv7f+Sk+kdu8g/Xk/1t/Wn+53PX82+Z
P7xP8ed6qk/7J9Vn0m9u/ernv9n5k3+S/70upv44u/5Y/xb/2frwa8rvpn9b
fz2/r7f5W/4m+9P+23jSr8nfq1/Dm/8ct3b+SPV1DL/0x4an/W2T3/pXyv92
/8R1l8Zzfev+0PnV+vPW+mj+AWf8Uf9ej+/x801bf87uj82+2f0xerX1LdXv
3P3lvn4l/Kz+leJ31H8tfxPuuF6//5bvX1+vz/79eprf+Hr8c3+d64/59ylz
+Zd/3zeLz86f4pv2P7P5f9T+1h+u2z9/vmr9y/q1/PX1dP8mna9mz9dt/ULO
9fgtz6+z5z/0Wo/fm9h/Z8djV4oPeFuffP5z32r96/HVz2fLOPMl/S3X8u2X
ND7Fx/JTfbb7U54n+b/VZ8qv5J/Z/R9xtf6z+6Ok/1Y8zd/yL8XXfrF9lpvs
H/X080Mz7vg3/RKe4j+b39Yjze/48L59/+B59uIpP1N+t/621f62/2v3R5J+
qf7t1739N+Ho0/pjyk/rnb5f4NXyPb7Fp/kv4bbTeOvPLf9S/Xl99/cbtj/5
P+HWa2t/cN+3fe6LxtFn9vvHZl+q/ySf623/3PZXyf7Z+Kf8m11/U/7N3h9n
XPv+LOVf0t9yU36Nr8v9Ga9pfUrrWxtv/z6+/0Gs/9Qf0dvxdV9L/udzyf9j
ni/X//E5Wcv6Svnh+mnxSfmf/O+6bd8ft/1x6i98LtU/r/a/63/v99ttfttx
Pf8znuZ3HJJ9rb97/iZ/Vr+z9G/9N+nX/J/w2fn9Oeev7Uz51fIz9bd0f8Hy
m//b98epPpr/vA+YzX/rZ7zdf5m9/9XqY3Z/Yvv4/N78msW5nuonrf/M631c
wpt+j6/5fJp+HzLKX45P/KnWb+v+YD3/sv7G7TfrZ35r+6/h1jvpn+wHt5xk
X6vvo/nj+nD+tP7ezocJb/mb7Hd+Nv+k/pz8Z7/Yf61/r+fvcnzD2/yz8rfi
s/FN/cNxTefThqf69XjjvG/1nfb/zot2f8P9x+ONM1/KT/cF47YryUc/n1/s
X49v/nHdJf1m9W94Wj9SfJyftq/pd1b/n9U/2Z/yfzY/HSfjKX4tf1t+OW8S
f3urz+b/2f5hfORVWJ6v23j7Z+/+Jvm/5e/6+pL4M5f93f3H60+rz9n89edm
cdvX7j80/3v+Fh/P3/p/Wp/a/Km/Oi/37q/b+tbkp/pwXjW87f/27g+Sfz0+
9f/Uv9p41086XyS8ze++kOyfXX8dX/e/VP8tv4/iKX6u65a/1t/1mcYn3H5p
62vCvc7Z/oYzT8vPtP6u80ss+ZXT+pzO976e8HX+oo7bP9fza6m/9bN/Lb/l
Z9Iv4bPyZ/Vr/a/d30j+uRVuu9r45F8+l/I/4c6r5N+WPy0/k/6tfhruuG6t
n9n6vFX92u+J3zPhzh9//3edX+iiH/Om+DY86ddw22f9+HyqX49f3z9lfLZ/
JNz2tf7S8mcrbv3a+L39q+2fzvLfVv+6vzj/PW/qj4xL9jW8zZ/0m+0PyX9n
5f/R/J21L/WvtP40fGv+7+3/s/unvXirj739YRY/qv/R9bfhzf/gbXzaf/Ca
8jPhtr/ld1q/1vPvZcUdl8TPuxffqt8Yn45fz8+OX98fLvEx/i9L/3ixGR/n
X/Lzevz1+ur4Uf2vr79L/cf+2/iHl/IbPs7/xTS+rv9x3HIt/7r/tuOJH3I9
v5b8kOb/9bjEL7m+v5/HZ/Xbqr/7jvW/3l86fpb+Sb+m//X+1fHr/WE7nubf
a/+sf/baf7Z/tup/lv+b/reO/1H5s/lhfLY+Plb+bMWTfQ3fa3/z79b+5Pxo
+PX1f7m+juvn7fmHH/2Rfr+z5A/ei8/Oz/s5/M5f/Knho//u/MV6/9nHwe/8
xck+z2v5s/j4uTt/8eO/O3+x5x/xO3/xVv083vp5/+X4rOt35y++7t/E73Pn
L/b4FP82fxpv/6X44v9kX8LX91/2352/OOk/G9+mf+r/c/Lv/MXnjL/zF6fx
Sf719e/OX+y8Gv3zdPzFf+3h3+Xv1P7Lr3/87/OXXxF3rv99f/+7f3/rPf7v
//K7f8u/vwV33P+Th3/gX37Fe/sJ3HH7//7uu3/fe49b/qj/8vmEo37GL/xz
I345X/wLD//eBvkX/4/jL/H96uHf9xc4dll/16XtB2de/GSceYmz7U/jXZeW
73Hr8cv2j/5r/n/9rT/1L73797cXOHqt+//SF5x/4Oi1nh/L+pvV72/95rt/
330fV493/1uPz5v3+q3n9wXHvj/+x979u8THnwN3XDweHP+iH7jjR32sy3/9
vn+AExfm8fzOO+s31s1yfq4zf8LtJ+PkBfE0jl7IWffP64X/ja/Lf7XIj+R/
22f/XB+f/Pcqxn/M78v6Zxz9mf9//es//venlvX3IObv/uZ7HP3AkW8cv3l+
1zV2GCd+4H/+4d9lfvLwv3v49xvv8X/ll979+zX1t7fvcfzyMM0v//p7+8CR
Zz1m5T/0ga+/8378P/vPvfv3txfyH+PwvQX+Rx/+XerT8yMfPY0z3n1klP/m
fd38yYd/bxfjwemf4MyL/v/UP/3u30/2X9/+8qu/+vDvN75lP4PjN8bzCu66
RR9w7EE/y0ceOP4xbjvAR/+/WeCOn+fnOvFB3mNeXHDm+SsP/37jPY7dr7/7
7t9yPPuHx/cX+z0/eejxg74//ke8wIf9wNcX/1k/5w84/sN+z4/dv/Pw7zcX
8yOfV+vv+Fs+cukDj5/7rff4i4d/l/PVf/wfvfv3g/f4KO877+vT84NbPvag
n/V3/f6bD/+W+ZH81+anH4N7PPWFHMvHv8SR1zF+l7pI8UH/9fGX+rF++JX4
rePfrf4FH+thGT/y0Pnr/mH9+Zz1I7+8jxrHv4r5jV7o6frGfsZb/8d1/rL+
Wn/bP773/uTVIj/W6+sy3n0Vfe0/xls+/qI+U3zRP/UP4mf/j/p9d5GfHpdw
XofzwSK/v/utL/6Rd/+W/ZnXsd8u94epPvGfxxN39Pf6wrqCHPvf+0fLH/Pr
1Xh++2B9Qj77K+PYP5y/PvAfcXJ8nV/D+fhrP3/s1bfefO/dv0v/J5+wYzhf
fuA/xru+8Ne4jr9ZyOf1D/8D7/4t449fPR77uf6g/vcu8hmHHXx+3f7XIT8u
568UP+wc7i99MD/j3Z/c19br43J/xfnBdeb/P3/r4d/Cf+gx3P9Z1M+bxfyM
Y113fftc5f7O+9X7Ayv1Z/96XXB/GNef78X+nfaX3r+iZ8qvtv9wf7B97v/O
y/X8e7W4f5Dw5l/rZ/82/R1/+ir6r6//r96Ps/99/kzjGdfm9/7Vfd/5zXjm
df9iPH5f9+9lf+L9reva8cf/fM7+dX44/r5/Yv3Qy/fBUn9xfjNf2n94f2D/
+vxm/bx+2//Mh52Ov8+/Hs/7JN/57fML8hhv+3w+d//3/T/3f3D6pO1DX+L4
m4//FvYTt7Q+I8f9k/n43Pr+4vK9xP/+v73791uL+KG/x4/31d/E8xnzWH9/
r+T68r7Q/mccfkr7v3S+wP++T7duH+eci374GzvW+/el/rj/Zv8wPvWXZj92
pPWR8cP3Fyv7o3/tX33377ff4+yXkeP9Bde5L+b8dd9M+3vyIu1v8UPavzCu
2e/4G3f90q/T+oK81e+fvl5+v+H+RN6l/VvLH/qZ8xwcv3Ld/YFxD+3/l359
kR9jf3i9WH+xx3ma7Ld/sZv+ZvsYv/r92dfL5295fWV8Wt+9bjb5qf/bD65f
xyGtH9f78+tv/acPdizvz6X8cV9y/PAXdjm/wdHf64Prbn3/drnvkup3zJ9l
/oM7f9CL644/8vBzun+T9PO59rFef7DwD/p5fzHu794s1g+vz7bf/rF875vT
/om88/7J9ef1x33T/mf+tL8Gx6/eH7hvuH5cf+n+pOPo/En3J31u9Pqdvl9O
5+vk/3T/17jt9/dXST54qt+kn3Hbj/+ZP63v+DX137Q/9rkz1V+yf1xflvt3
8LT/97k+rc/u86m/2n/e36T9D30/jUd+q8+0PqKn64fx5EXSj/xI928Zn+7/
Mq/7H98PYHc6H2CHx2N3sn9cP5fnC993HH4fs7J/aftz2+/f9dh/7mspv9r+
nvU7nd+Rn77fpP5S/0vxc/23+5tb+5f3595/uT7cX3xuTv7zOuX6T7jr3v2v
3f9xf7d+yHcfcn3h53T/Mq2vvi+Yzj/t/qPvU6T9FZ9P+rs+6A/on+znutcn
j0/9CT29Pnh/R/z9+wnb799PYD+f9+8j3B/A0Qu76BP+/ce4/r59j6MPetC/
/PsU5kEOOPLQG30sn+ueH/+P3xP91sI/3l+C4zf7cf33L0v52D/+TuvtQn7S
z3F3/HhPX3L8PR59rT/xt/7e31t/1/U/9Efe/fvhwn/41fkLjnzOlwn/Rx/y
8zI/84JTP+DUG3It3+fmNH68D3Oxn/ncn+0fxqX4eX31eJ+vXJ/Mk/KbcbbP
52/XPzi/y6FeLZ86Tb//SvrbPvcX5OHf9Ps25uH7SXDGoQf3D4xz3fHxvtK4
/e/8dH9xfqM3eUMcrB/XE848nM+dv/RVx999IdWn42Tc6zc48fT+L+HJ/+CW
731j61/G3Veb/R7v+nL9MQ47k37ITesv62paH3h1/lt/477v5vghF5w6GX+f
+va9/eQfOPaA00fAkQfu+ZFL/vr3sV63/8K/++7fZX6P43PgY/94+/73IcZt
h3+f6/4L7v0P32/YPua3fuDur+Dum/79svd91o/PM55XcPzG+H/y4Z9/n/z2
/b4j6Ycf+f2P7WNe5CT9rR/Xff8w+d/5iV7+/avnt589f6oP8BQf7yucf3z/
hV3ISfnn/EI+dhonXrzaf5Zr3H777x9ef7SIL3mCncbxi+d3X0r1hfz/5WG9
+9Eifszv/oP+rMuO/9g/3763w/Hhc//EP/7u3w8X8cGOX3w4J/72Qr//9r95
9+9HC/nj+vz2W4/nmWX90T9S/fP6Dz7k1w8X+U/eerzXJ9cP/iMOjo/7O3o6
v/gc+qT8sv/RjzhYPuPQz/Xp+nd92X73P+xJ/dN9w/qzPiEnrW+pv/l87P5r
/9k+54f1s3/S+un9tfGUH/5dSlo/nEfGvU5und+fc/15n5Xyn/WNv59iXn43
SvzA0Yfx//P/9O7fZTzzkSd83vPzSn0n+fgf3HHlvcejN+89nlfqA5x+hf7U
C3//Rt2CY69x1kXyE5xxfI79Hzj6gHs8+jAPcsDRx33W8rlu/cHRI+nPdesP
zvWkP3VH/tj+NN76/1+PgXyPEz/GcX/H45HP+gaOP1k3PN76/9cP+fWj9/i/
9VAXP3iP8+rxvCb56M/+BJz5GP8vPvx+4TKeekr+wy7mQV9wxvGa9Oc68oxz
3eOdPx7vvHN+Mj/68fmEuz54z+fwR8ov445fwrG71U+Sn/xr/9i/XE/+4/P4
wf5jXOpftt/jkefPeX77IfW3Jj/lR+tffM71y3XqwvXvuDo+4Ojl+Lb6/UN/
77t/P4z9i/cpv5DHq3Hnh+f3uuH+Co5/3J+Yj89hDzj+Tv3Rdnl+6/f/Pjw/
/aIfdQ/u8cSL1+Hvez6/jHcfNc4r9hnHP2k8cvEHONcZzzkLnLzmc6wfST/L
t13J/jTe8pnP+vNq//CeeWyfx1Mfxpknyee65ePX5D+uo99f+s/e/fvd9zjx
SvZjj/PA45v/0/xe94zzHrz5v8Uv4S0/Uv04f+gv4OwH+Zzjg389j3HHMfm3
5UerX8eX+exH28+r65/5WnxS/rT42C+p/sBdf+57aX70tn+cl6m/uQ+n+ZP9
Cbf/W35u7X+e1/F1fqT6nl1fUv9P/cvyU32l/uv+5/g5L13f7n/J/tS/nXeO
r/sf/cTzcz3p3/K/jU/xc923/LX+4FxP45Hj+nN/TfWP/mn95Xrqj14HU36w
f0u48xe/ID/lL9fT+sx12+/rCefV8htu/6T8YZz7B++Tfy2/9e+2f0z2Nfmz
+rX+l/yf+ofx5L+949En7T89PvmXz6X8B3f+c65j3uHvSz7AOfcMf//w+fJ8
yOfAfS6z/pzv0I/3xpk/5Tefs3zrl/KP8ZbP/WK+N0s48/P7F+O8Wj/ec3/5
f/wf3v274MwHPvx94I9x9MK/f/ZPv/u3xHm1fPRi3uHvkz7A0cvxB0e+9QdP
+tt++4/5wIfnI634x/rzvSbf6/E9Ijjv/QrucWm8v18F5/fs4H4+KDivW3F+
vzI73vpbPz+f0uOH3+d+4B9/LumX5vfnEp7s5/Wfefge54dR/n/+0P9+sMAZ
Nz6/dok3+9P8vPL9vPOH8X/nYXt7yV/eJ/+BJ/81PPn34fdPn23H8ZNx+wec
+aznLJ7yP8lnHuOMS+MdhzR+L+7XhDf79uJH9Xectvq/4c3/4G28ccc95WfC
bX/Lb/vf10f8ZcXv/MXX+AXv/MUNv/MXX8fv/MVz+J2/eB//6J2/+Jj9d/7i
5yH/zl+8bv+dv3hcN8f1885ffB2/8xd/avjovzt/sd5/9nHwO39xss/zWv4s
nvRf1+/VpH0/H/DET2z9Or7O/7jkL7Yexh/HvRFu/uE3mv8s/uLEL2h+YfMT
Jn7l/fzFxv18yxH/YvF8z3X+RK9P5pfM/K/X+QNn+WmX/G/b8DchPkv+5tH/
S37J9fGX/PD+bsQzvzF2J/+BM59xx9Hzex5wKgV8Xb/MD93yaxZP+TGXP5f4
W785PPN3O+7Jv2N8Xi/8yzwpv2ftT/mZcMtPOHLX7U/8p8v8b/Vr++xX5/eo
95IfeHxv/tPOnzzO733Gdn7jlp/X/ZP82/DGf9z9N2ffXv7izJ/Me+8Drud/
5ge/3p8z/+9sfaX+nPJvFj8nv5b8w8hd798vFvav42n9M/+v47ud3zjh6Hkd
X8q3ftf19/rQ5fP5Mc8u/MDX91dLfuAxfrN4iv/LRf6O9r18nx98zt/feX6P
d17wOXA/nxD88fcPF/ngPCcG/OH16+8s8g/cfh+eb/f58vmVA//J58vnayZ8
zJM3ARf/0eeX5+dgJ/4DH/V/tfj9C9d5fhvxXR+/5G8Gxw8eb73S+NXnk36+
fH6h/e/np47x6/zFfn7smD+df9r+W/f/ZX+wzl984e8y/7HXBc/v/u74Xufn
XvJD+/dXzHudX/mS946v68P5zfvE72u/GycfnEezOHrj/8QPPMd//GYxP/5l
HP4w7vox/y6vlm/9PL+fa8rnkv74w/7h1fzG5p+5Pv/rhX9G/rclfzHXk//p
366PxJ+c5kdP8t/6+znAPP/B/Qf7Ej8x+hu3fuYn9vqV+Iv9/A4/397P/7B9
zAPOe/zk+cHNjwlO3B//Dvf7i+ezPMbvwg/t5yeZX5Pnu4Ezr5/jbPl+Pp/H
g5v/2fnn56vAb4icxF8M/1N6fqP5n8DdN5AHPj6/6fKcVnDzR/H5WZy8xU+e
H7mJP9nz8xwVcM9L/jzmxdJ/6fnJ9AE/X3jQ9zN4IC/8GujP/NhvPPF7oS/2
G0f/xK88Phd3yS87xvW78fny2GkcffA/+W//JH4w84/af9QvOM8H83jiM/z9
wNdLfmHHl3owDya469b+p36Ir3H7b8ynZf4bT/nv8Y3/OOHO7xSf6/l/4Zd1
fph/0flH/0MPjyev/Rz7cfyl/zp+43Ojl/wxY3/47gIf+++r6B/LMY7+nt+8
zuv+gQ91yd88nPc+4FF2/qI/eer+kPgv/fz6dX7Cy/ki9TfyJ+U349v8v/n4
b5Ff2D+cD75e8i+u96cLb3KS3/iHU/y9P7V8nq8OnvL7Ov/4q8gf7Psj9DuP
Jy+G89fXy/Of+YfdVyzf+2P3X/NvWz79jXmG5yd80N9HP2b+vwf1v7fkF8Cv
Hs+41fPnB/5J/LjMd50f9oI7P7wurY+/7B9df9bLOH7HT+ZXcP9i/7xen0v+
Be9vbB/v8YPz330/+R888Q/7fGL/Mn69v1/2l85P31/1+uX9h/X3udn1jd4p
/zx+vX+Yf3DZXxwn59cs7vXD/MFt/U/5Oerp/Lusy2l++l7an6L/en98/b4/
DX+f+fWSfyLx/zC/88P7+7S+J/5s3jvOzu9UX7y/vv68mT4feDz5mfav+Nt9
bF3/ZX15/5bqO+nPe+xP9YX+zg+vGyl/0Cvxv+I381OBs06ZP9J5Z35H5mXd
He7Pfv3l4vev3l/RT9HD4+mH5Kn7L/5E/+v8pJmfa/X+/Qfjue76Jj5p/WA8
8U31m/jnfD5kPudP8g/PjyNPEv9Y4jfCP3wu9Rfsb/zX7q+M4zXFjzywfeyX
0/4Cu5Hv/MXvxDXt74n/+v74su817nWp8QvaP+iT+jtyGe/+MPbv1wv+1/H7
hdfj319/ffn70dT/8Xva/7l/eX6vX44P48Y8frMYT3zsH68Ltt/rk+8Pue69
/js+7h/+/qHtXxN/mvmHnD/okca3+uZzqX6Z3+cv3mO3/dPmxy/o5/0P42f1
J0+Mp/obx31/gWMf49fX3wtvqvMP+7ie1nf6W9r/MC7VN3q6P6I3crh/n/zn
+mM++8H1wXWv774/7v7m+0OOP/6j/tL9b/yS/IefvH67b7X13f53/aX9o/Vw
fvG5pJ/X2dnzmfkznd++75bik+xHL/Ig8dun/PH5M60f6Xxq+xJ/qnlIkn32
P9d9zk/rm/uvvz9N90+Sf9P3t2n+9f3/5dyR+FGT/rxP98fH/cOSX9R57/XD
vx9K9+/wu/VnfuZx//e5Pe3PxzhfxpMPbX1P64/zJo3HL4mf1uuw/ZPG+9zc
8sP6k1/mcbT+XHf+en/j/Z/97/OZ9z3OP/zJda8/3jevx/9iv/ufz22uD//+
yvXt9TWt/6k/+/xn++2/9e9/LuPS9w/uc+Dm32Z+fz/u+gJ3/zK/48g7s+Qn
xJ9en8F9bkMPf7/PdX9/7/vG1t/7cngCwDl/Etfh+T/fXu4PzL+K3DG/3y5+
X8H8tt/7Uubx7xOYJ/F/ep70+wz6g/1L3Zk/0fsiPgdu3iDb57o1/yL5g53N
/4mf1Hqm/DOezhcp/8wPif58zr+vcV0lfsokn/fOc3DizXjyHNy/30n1Oe5P
c/46/xnHvOZfdV05P3nPumb/EC/0T/yu5A+//0j627/gXE/64Uf3J/ctx8f+
dXzQP8XHdW35ntf57fxs+Wf5Xn/dn3yut/3EJfVHcPS3fsxnHtUUX/cX9zfL
d3+0/e47Kb7IT+sTcRier7YSf+vX+od52Vt/TPlnPzr/E/8w9o/3CX5rIT/1
R8ajl+WTV6n+PC79vg885T96cP8i1Z/He/7EH8z85o/2uuT5mdevKT8aP7f7
N/sB4mP70Sf1F/CUP9iX8pfr5Ilxy3V9e//V9kdp/WIe1yd9Bz3d/7w+pP0F
epuf0feNzJ/qvEa+cdtvfkvff0v8luYPJj/4HPOAu+/z+xnzP3Idfa0ffjD/
pveV6GH9+Rx93vyUvCZ+YPSwfPq21xfjiT/T85ufFn3Rj/1Niq/5P4knfjDO
dV4TP6/7l3HWJfLB8cEv/n2848vzw437+dqWj1/4vOUj1/nh+4bp9/vg9Adw
zoeMS/Elr8yPjr6cOx1frw/wH7j+WDdS/SPf9eu+SRztv3EdX/Lfmp805Y/r
w/WX+HPxo8fjH+rE8XV/S/q7jm0/8/D7Qddn6n+Wb/0Zz+eS/uN9lCV/b+pP
Xv+SfVy3feiDnqk/p/xo8bX+xr3+NftS/jmOKb5pfRzPSUt+dK/jxrlu+fgV
3Pyx9AXWx8Q/mvgj6U/Elfik8byfxc3rC18t+O8//Ps/Iv8l15nH/JPg2J/4
Hfkcdpq/03Z4vP1k/yf+Yuuf+IPNY5z4VS3f/K9tvPk3zbuW+F3xq/lDyUfz
oNh/id/VvLuN39X8nMgHh78jjTd/pnlLU/6A237zVyX7uW5+UI9P9if/gSf+
YnDsSvmfcPeNxH9sfq3Ez93sc/46fi0/Ev/sLG79za/a+GOdX+aHTvFL8ec9
ert/27/NvjR/4nfmve0w7j4CDn+OeQTTePdH8ysnflxef/VX3v373cgP7Pia
X8n2z/K7zfJ3GW/8g4w3D5rl8znzD5q3y/xbs/xuyLV+nn8vv1rzn/3g+ZN/
3LfsH/P+JX6zFn/z7Fl+ss/+2coPZ7zFJ81vnjfrj39TfBP/Jfok/kzmm+Xf
bPLNH2f5tp/5Er+m497qP/l/lv9za39p/JJn8ZvO5l/qb4kfd5YfNeWX+V1T
f0v53fglrdfe+j6LX73Fv60fjf99Lz/2LL9vs7/xtzc85ffs+uP+gb/T+uL8
TvLN05r6b+IPnuVnbfYf5Q9t+xvLx97EH+r+a/nO36R/2x/M8pe6/szL3OxP
/anx36b9leUn/t/Wf2f5a5v/tu7vLN8475N/PK7Zl+Qn/uNWv94XtvGOv+O6
l395L+7rjR+68Tu388Mffbg/+nsL/zFv469O/qMvt/xK+5+UP7bb8XddtPwy
zv0o318CN2+x9fe59fcf7hcvceb9Kw+/I/3dRX0hJ8nnNe3PGWd+XMv/k3/i
3b/fW8yPf6w//Lh8r5j4d/mc+Xd93fzBnjfxBzM+8Qfv5U/2vEn/NB6/Wk/b
59dkX8PT/OZZBud7Tb73GJ6f9AHO95aWD47c4e+PP7/wz3J9+PulzzO/Z8L9
fEjjnt/XPZ73zGP70Tvx53p8wnk1f+8sDu9tsp9xCU/8wcTHcX74/cpny/gP
v0+bwHlvOWfhzt+kH9fhR57Fr/OjfvmV/W7+WF/3+IbP8gc3/Kn4eZv8xG/b
+JsTf6/jY/0abr1TfHj9/t949+9Hm3Hssn3o5/o2zrhkf+If9njzZ8/i1hOc
90m+cdvfcMdvnH/JX2z88e+q3r7nrXv8O50fLHB4QRM/MeN4vxVv8mfxX3jY
n/3wPW69rT/vk34NNz/fiL84jPN+nT/wOH6W/pazFZ/VL/EnN/7dxm+b+CGt
d+Nn/Fj8s238uv/Pw3lt/MEJdx3b/0n+9fyex2fl3/E7fg13fh/FeZ/kH8Vv
rb+vJ/lH8bPid8efF359/fxmxa/zI3f81vzIZ+GPfrs8h+QR/0bFec/f2fP6
iC/5icfxHW/8ur6e+FeP4uv8XXec5yP49RE3f+/Hwu/8xQ1nxhT/dfvu/MW2
a/z8nb94jP+dv3j0z52/2HFJ/gNnPuOOo+f3POBUCvidv3g9/5t/x/jc+YuT
/22f/er8HvW+8xdf1//OX3y9P9/5i83Pa/vX8Tt/cZLP58c8u/MXgz81fzH2
8/uTMb56Pvnny+dj4idw94VRvyU/xKjfl4v6N3+t+UHX+Wcv8R+eL/n5kv/E
8u0fj8e/yE3jub4u//J8SPvf/uM5N1v9z7w8L3L8fWHmn7b/1vmh4Tf7zoKf
eMz/V+PzST9fPl/Y8XN/X49v5n92/lOfHo8c20dcvD6m+nB+895xMn+xn88M
zvMLnEfgxBWc/Fjn330V+G8v9uM/464P8xOjB89XMM51Ppf4i7F35P/93mJ/
Yf3Q6yh/MfLGv39drj+Wz6v9n/pT4h+2//Gf+bXTeJ4zA27+JfLf/vF4+INH
+8/nL/a85FniL+Y9z+/w87X9/B0/H9c4eYOf0vNJ8LNxz+/nszz2nwv/mvl/
iQt54uc/8dwT54fH+zltfn4LeOMvtv7mx2z8xX4+Hf5L/MVjf3vzfh6PBze/
sPkt+fws7v7M85iNm/8VfIzf9+LzgZFP/jzmhevr1Wb+4mE9/zFu/gbkNf4v
5IzyOn+t+bnIP+PE1XjTDzzxq5nfwvOfzV9sfuKRj/U7C35j6i7xF1PP+JX8
8/gUH9ZT9GjxW38++WVfb37UMT6Z35A62MqfPOrznQW/BPysKf+pG+b3ePx5
/fnul/7n/MOvif/Y/JwPH/+lX1/Id58BH/cd3134x/np/LX91g885U8bb370
4fzxtfmLvxP5m2yHx+NH57/rdyt/MflNHSd+9sRf3PiHx/67lD/yMi/7o/mx
r8tf1tfIb535hxO/8SxuHjXnj8+R4L4/wnNkXF+8Jv4q82TYP97nuH6Yx/IZ
N8tfzPOwwOkXs/zFrj/ntcczDv1T/aX1zX2n4a5fr68eb35Y6+e8SP2L646v
+y9/B+T+gJ8a/9i6fy/n9998/LfID/xi+9L5Y31/92ZRHz7Xev1x/0v8can/
uf9af5+b0/4h8V97/Pr6c/F/6i9cv97flvyI5A/jvX64v25d/8GZ1/tD8tPn
L4/38+kdX/TiPGT/IMf8cu7Lrh/sRq7jh1zkXM/v14v8HfvbMj72u/PD+9P1
+LyJ+Wv9Pf94flz23/H8+WqRf3w+1ZfPb+l8kvTnPfp5/Fjf3xvvD6/0D69v
+JW8bvzFiX+Y/H/U5+1CPnp5PP0U3Pr7uvsv9nsecNZr3z+1f/HDVv5i7Gde
81MxzjwuKf/T+jvLX5z4I1N/c3+2/DH/Xy/6h8+fKX/4XLKPV++vfP97eD7A
10t+isRvhl6Jn5D8t3/T/U/3X/rK+vpw8Vs6nyDX/cXr5lb+Yt8fc39Bru8f
pv4z/H36B/U59mfXx1v1n+X9C17tP69Pjb847e/I47R/Nf+D42P+F8/v+5/2
T1rfHB/7399/Jf508+BZP66n9Qf/p/Gr338t1tcl/yXzUsf2L9epj7S+c932
k0+Jv5hxfC7lB35c31+9ifXnvHb/9b7P8zNv8o/PrR4PTt9M/MOM83jyAflb
+Yvtn2Q/djn/vS56ffd9d/eXxl/sc8V6f/p+rH+f65yfzu92PkzrN/PY/+b/
aucr4pH23z5fEP92vk/83/7+1fsn7z9T/tN3vP6hL3bY/7xHjv3Hde5bp/NL
Gu/7ou18n84vyb/ITf3H5550/yStH6xf/n7YeOrfvj+T+q/ryOtfyk9wrjf+
6rR+8bn0/VhaP7w+2P+ue8snbuM6sFyfW/0n/amHFF/3D+vv9d354/HWn/yg
r6X88Tru/oDe6f4W19P6O56zl+dP/Nv4i93/wBmf+gv6pfoD9/4PnDxP63fa
n43r1tI/rT+jb7v/xnX3X9+33stvjB5tfPp+JPGv+/6T68NxS/vL8ZyT7//y
nHzXp/dxzm/iC18JOOsSeqf1k3m9v/H+xOMZl+6fUA+z9en+gD89j+WPfTbz
uzt/vT+1/tSDz1GW3/bX6fzs+0bub/Z/uj/H9bS/xP52/836ef1L51P0s3/d
X9zfff+s7d/T+p/ij1+Yt+Vvyn/kDs/v+0A/5k364ffUP9Hf83vfMjyf74Px
yPH65H2V9eM94+1/xqf1y/Xn/KX+ZvfnXj95D+789rrT7h9YP68Laf/CvPYP
9Z3WZ9/3SvtD80s7vt5npPXV+xfGg9v+dn/E+dXONz6/u/7tH/c3829734F/
wD2e+gcnf9xfwX3f1OM5r7l/Wz72+feH6IUcy7dd6OvfJ/JqflvzFt6av9j8
xIynLs1vzHX8cJS/2Py8I2/lkj+a+cA9Hn28zoNT9yl/sI/XxK9KXI2Tb8yf
+DGZBz3NT8irf7/L+ISTf7bD/IWJv9b51fiLza9qv9t+5KIX/jJ/ovuffz+N
fI93Xfn3y+QH82OP5+d64rcEN3+l71vav7y3HSm+zi/6w/X8u+ybGn9xwpmf
5zwn/cxv7HnNv0y/xf7kP3Dz847xWfIHO29dX/Z/4y/m+cDGsYv+CY7dZ/EX
u77Ri3EJ57rzDzzxFxNf6rDxF/P8eXB4ZRxn1yfyXb/4L/Uf7DbPIX/fAY5d
2GOcPOV8Ds55m1f0Mz9g4hfFb4xvuPn1mB9+VOPMxzyJ35R5eG+8jU8419HP
/HvgvJof0Pol/7p/GWd+j+d64s+1fWl8wok7eOPvtf/xZ+Lf9XV4pBJ/cOIv
TfEDdx4l/Vv8t/IXMy7F3+PNP8z7Wf7ihHPd+s3mN/M0/uLET9zw1l/QL/lv
lr849R/GNf7iNt78ncyHX80/Co5ft+L4w/xZZ/EXmxd1K38x181jmviHrb/5
j7fy03r+xu/b+KGdX+DEPeV34i82r3nit278vtbzVvzFKb+S/pZrfm9w83Qn
/mLnn3mBzX/NepLifzZ/sfmzbV/jL7b++Nt9xPzFaf0xf3GKL+M53yT74U/y
/Km+zb/k/EEf6ifFJ/HDm7fc8nmf8s/8YB7v/LB/zHvu/mfedY83f9Ze+ea3
8/xpfbJ+KT6z/dv814xP/NXOjxT/2fUv+Y9X1xd5YzlpvP1n/6T+wLzuD+5P
yX/Y6fiij9cZ94eU//gDvMl3fiPP67TlM4/39+iT9iez/if+yf+t/6f5vb55
/XF/Sf0v4a2/mb8y9be0fnlf1NYv7/+877X9rl/vj9zf2vqb9n+z9Wf5zo+E
m1864Sm+yf+tP3h/tRV3/jT77X/XhfuT/ZrsZ7zzh/4CnurHeeL+5jxL+ZfW
R+Zxf/P4rfsD2+/1xfuTtP6l+rf/Un93noHjj1T/zt+tuPOv2dfyL/mf/Gv7
C4/3vrDFz/N7X5L6b+p/zpvmv2Rfws0va35a3s/yFyd+WfPkGk/8xEf5yc1v
3Ph1Ez/1rfiNn5q/2Py5jl/jL044chs/9FH+4hb/W/MXN35g+9fr0u8/fJ/z
O4v5Gz9x4zee5S/+1V959+93o31JP8//+FSJpf68zuKed/h9xWcX/a2ncX9u
Fve8W3H35YT7NdnX8Cbf8Un8xsbNn5xwXsET/zI432sm/lzjid824b7e+G95
PhS4eXkTv2/DefX8szjfmyf7Gdf4fz1/8/+dv/jx96aJ3/bOX3znL77zF9/5
ixve5M/id/7ibfidv/hxvjt/8TH8zl98x+/4nb/4zl98x8/E7/zFc/ij3+78
xQlf5++6449++9j8xHf+4vH1zl98Xb87f/E6fj5/8fX+seQXvo4v5dsvXt/s
lxH/Qs9nWvInrq9v5/EX2370GefP/L+2/6n5i5Gb9ANnfvsf+7i+7t/Xws3v
mvlzrf+6fZn/0/q3+Bh3fNflZ/7U6/n/xaJ/J//az7PyZ/W7nj+dv9pxNt78
7zp1/Nb3rxd8zJ95fmTj6/5r/LCZv3ZbfizzC/uYN/mvxS/Vxyg38ac3fvMc
f/vF+KjPkp95jOuSv9h9h1fP7zybxcf4LeXz+RZ/xzn5/3p/avhyfVjfn7xZ
4GOezeOOX/I/+PX+5P3Vi7K/WOKjfuYvXvL/Xu/PF35g9F/HL/vTsX5elP75
ovTHWf7ljq/X/4tF/o7+ffm+/tbze8kv7PGOq/Hr+Wn+Yef/y6/GvHP/Wsr3
+DH/7L+Xer745XOPv++yfno+6Y9x8/eM/LKX8eg1PB/p8+Xz0ZgH3H2f59QY
X31+4OfL52MOz/f6fPl8xOH5ayvjzT/b+HHtV9t/3f/L5//ZfvRbff74B7j9
5Pmvj3+zqK9kn/Xzc2eTfryaf5jrq/wQH+jv55DZv84jcPcH54f9tq7/pW5T
fiDnen4k+y9+TfFBP175/bbtMu78ZX5w68c84OiV8DG/LzxC4PjFz1Ee5b9e
1A+4+4/lj/y+y/HOz+Q/9Lb+o/1L/mJfN/+xn59q+fYf+eX5XR/r8Xuz8I/t
Xx9/6d/kp8cTx4SjN/LNP0xdmH/Y9Wcc/yOf5+GAMw65ls/8fo4Oz8cxP4Xx
B/U/eP40+oG7b/v5VzyXx/UL7rh5vJ9Pze+gwNfz9+1Cf+KLnCTfz5divONj
+eDJv+hn/mI/f3j4feoHz9/Dz36+HnH1c6bBnZfMB+74+/mD5t3DTnDbb/nY
bX4320cc/Pw/cObx8zPNK5T4S9Av8ZONPAiX8YzDD35+K/oyT+LXRQ+eJ+Xn
0yb+NPAkHzzJ9/MP+bz1S/xzTT8/fxV54OiNHx0f82c2fhXPT19FPs/7Bif/
mcc4fYH50/NhwZv/U/6k5z/7+cb2j+Pn8eiP/R5PPOkf6fnD7l8J9/Nl0Q/c
+YM/raf96/1ben6v48914uD8Ji6p/py/fj6y9w/GvS+zfuiPXca5nuJr/xt3
XK2fz3WpPyKf9dXysb/x7yR+0FT/jPP+wvMzD3/H7edDe/+T5Nv/zsvh/PH1
8vnkqf94nQZnv8l4nqfl/pHG+1yX+OXMY+PxyX/IRY/GDzD8febXy+dvOn74
k/xKOHY4/8C9/7L/U3zdV1r9pudXJxy70cPzIxc72v7F9e3+kdaHZJ/354m/
ENz8h+hlOdaPvPHz26kr4ub85D16uD+7P1i+rxt3/7b9yOdziV8v8YM4//BH
6j9en8DT/sn748SPxryN38L54XXN6zP1kfbX3p+n/du4P1vWD35N62fjTwBP
++/Un1yflm9+I/dHxqX1wfu7tP9O/Yv44D/nJ+OQ384nnr+dX7z/9/y8n10f
nX+8x87E/5rWZ96n/gHu56g7v7DT/cv92fb5/oj9A45/ON9v3d8hN8UXP7v/
eP0d7s9+kF+r9/9X1ofGP5r2f2l9QX/82+LL84HA/fx/j/f+pe3P0/rGeO+/
fN8k9Rf0N7+L97fun9SD739ZPuO9P/e5KOUneeH+7r6Q9ie+f5jyN/kX+a5P
7x/cPx23xq/j/EVv7PT6RD5xf8jrL3olflj08f0964ceqX7S+oY/0vnHdeH8
Z/60Pnrf4PoC53qr3xYf57frr50PnF9eX9L+ETnOb/dvnvNg/dP+Hf2w2/nr
uLBOGk/rE/Jn70+5vr2+Nv6utH9L/nNcLJ/x3sel/X3SD9z54X1/2l+gd9qf
mycl7X9T/qT1x9e9//b+MJ2v0vkE+9P+Db0bvyOfS+tnyg/vv1v/Mu77l2l9
TflN3B0ncPbzXLf/0a/d/0vx9/nN64/lmh8J+91nwF0/fN44r8bJJ8cX3PcH
jXPd8TWe+K+Yn/H+fss4+xtw7OZ60t/nR+vHuMSfxbiEE3fb53OD9Uv14e/v
iJvjx3iu2z70w0/mx3L8/P2j6zN9/5j42Rg3a7/1d34n3Psf54f3T7bf/IjG
03jkO0+Muz+m+nZ+ed+Q+OsY7/ld/4n/zPsXy8d+1x/y+VzKP/xq+eDMgxz7
n/GWb7+0/OH5ctY/jSdf0YvnwHt+9EKO8891atz8alvzP+WPvx9J64vPb9Yv
9efWf1zfnN8tn1f3B8s3/6C/f0jxG/fJS/7Blj97+x9ynUfOb+9DjXudsXz0
43P2v+30+NRf3D9SftgPKX7Wn+u+/5vsa+sHz4+1/+BBGp4Pt1I/7k/OS8ef
/Ryfc37SF9BjeH7gty/PZ0v+xV/oZ/5Or6stP9P6ghznj++7WL9x/Pfj/ir1
j639J9U/49r+q/VX+8fre8Lb/OYPTvITf6z5M1N9p/6Df8wfS3y47vggt+Vf
iq/rw/3X/JqOv/PP6y/jzePq/Ez9xfnl+ndf9P7Y/h+eT/rty/PnuS+R+je4
1wfmx4/Of+/fnB/Yn/Y/zM+6PDyf7wP/IN/9lbxBbtr/MK/jx3vstv3ePyX/
Oj78vtLrsvkviQd+9O83va/170M9Dn3MX2n+Af8+Ftz8pea/xX7Lb/pjp/Vj
furW9nlfav34vPdPyf/mn+W989f+Azd/KL9Hcf9L8TN/KZ83D6njw3jr73XJ
8j0eOcaTfNvv+Hhfl+Kb4sO8vJq/1/0vxWc2v/z7bt4zj+uD+dDb/K7Oe8fH
dWn/+fxg/l77//cf3v9OzH/7D3+5TpP+jr/zN/nHcuxf5nX/c17xfGzbj9+T
fPbV+NP+BU9/H8B1z4/88XvepX9cBym/3D/QHz1tv9dX91/6of0E7vuClk++
It/5Y15m57f7Np9L+cN6a/tdp/Zf6//o3+KT4pvWP66n/uR9v+d33dk+r+sJ
Z37Xj+sr2cf11N+p35S/3qek+nT/5T2fa+u7+7vXh7b+W3/7L62f6Gn/+vyd
1ifG2T7njdfn2fWL17Q/Q67jj/7gbf+Q1ue0/jk/2v7L47me6tfxd//zudL+
8fpr+ezX0/4Fv9gPnt9+TPmf7G/731Z/XLd/nB8+nzAeO5zfrgte//pP/r7P
fQn5xs2v8deHv0+8zMt74/jH48nnhGM313lvHPnsg8HZr7u/2T7zd4Ezn/3k
8bzCN2McPYhP8r/le13DDuPmJ/1jP/n7UvP3wR8Ebt5G9hfgvo5+4Im/NI1H
XhqPvtbPPHLG8YPt5zqfg98FPPGjGjcPjudnPHVinHng77V/kn7mP4MfCtx+
tXzzq9k/yCMO6Gv55tFz/Bwn+495nR+JP9R4ij/zmqcwxQ8eNOdP8h/zv399
qNffW4zHLo9P/MGp/vB3Gm888QPO4p4/1b950Gbx1l/MW9vsd//w/M4/90fH
H/nm10z51/KzjYfHDTzxS6b4pfpxH/X4VH+ue/vX/MZJvvlb7X/wVB98zv3P
cW3+afmT+mNaP8yv7PnR13aCIy+NN3+x+3vrT60/e31o+ev8hC/a/Jepvjwe
u83DmeLT8jvlr/k/Z+vD63fqH16nUv57/XR+t/Gpfswvb9z8jPa/+X9TfaX+
sRe3/an+0/re9pfmtU7rE/7bOr/XhZQf4F5fqB9/Lvlva/+3/tbP151/9k/a
n8/61/nn8e38kfa/qb87Lkl+mt9+T/qRt56ffGK884vPp/h5/+34mV867c+e
yv+WD572vy0+9kvL/+T/tL81/+hWvO2P3R9Sf0z9w+sa/ePh992fX+ZnXTf/
r88fe/mNE7+y+2aav+Gz+v2lB367313Ixy9Nf/NPMw655oc2r+zw94WfZ/5b
454n2Tf8fuKzS39wHPfint/nc/wH7r5v3Plvflzbn/iDEz+vrw+/z/1s2T+M
p/3HVtyvs3g6/yX/tfmTfbPyjafvr4z7/nXC23jj/v7Q/Ln+3tr8teDmoQX3
uIQzT+L35TXpN8uvPPz+bGX+pF+T3/xza7z5N423/xN/dRpv3mT7F9x6gjsu
ls/vxWb5f4ffl3225OdN+Orv0z6Qbz0Sbv1m8aR/w22/+Wttf+L3BU/8uWl+
8+Ym/l/zDM/iTb9mX+P/NW9w0s88v2n+xu/c+IETf3TCzd9t/Y/i9q/5iRt+
nT/0gsMfOPIXLMdvxS338e855/mJG8586/yHHW/8x9f5WZf8weP82/Fb8xc/
d9z+meUvXh/f8aP8xPZ/4j+e5SdO+jf+5fX663jjF278xNfz+/a4+9ZWfuPr
+dfxNv+t5Z/NT/2p2f/U8rfyc8/ydx/l5751ft06/2bz847/LOF3/mKuP9bH
nb844ev8SXf80W8fm5/4zl88vv7s8hc/fu7NtH7r9pmf+E2w/+eDfR4/j4/6
fCPwZ75a4Og54t/ciJv/bRZP/IhLfmKPv84/d+EfbjjxsfxxPdnOb8n49f7X
+X99PeHX+UEvebHO75r5Qe1/29/kN/3xa9IPnHGWD+7n9BtnX4Uds+P5vONo
/Hp8O78rr+vxex3x6/nfx4/+WOa3x6/jb0J9zvIvJ37Lrfm75Me23df9n/mp
0TPJX+enXNo/V/+vYn2N8VriKT95Tf4BX49v56dN8q/vv5f5l/jL0cP9qcXH
fr2ev41fOPPTt/6e5t+Gd/nOn/X8WvIX4+e2PlzHO/96y8+UHwm33ck/2Nfi
M+IvQn97HfDGf+z+/GKxfxz1XeIeP8bb8VvyF4/xebHoX2l+59G+8Ul+Wj9e
hvx+/R73uFG/l0V/8xc7P5f8xWN8Xn41xsX1Yfm2/+WiPj0/z7+xfx9/n9b5
i5HP833pnx6PXsPzbT9fPn95lN/5e82v4/GWb37Zx99DXeY3Py7jwc0va/6X
gf/g8yX/DHaCoxd2reuf+YHRb5a/GH3sP/sRfIzL68V418+6fpfnQ9s/Y369
Hp+v/UF8wMf8WvLDtvzic8axw/GB/xa/rut/qVvnl/1yPT9eL/QHN0+sceeP
+Wdt3x8ffn+8jH/i1zU+yr3sj8xPDG754Ohh3PWFvKS/xyOXcWk88xPnWf7k
pp/jZv5iy+dziX94K3+x6zPFD9z8w/Zr4y+2fMbP8hfzvAJw8yPt5S9O4/Ef
z3dAP56P4Lj7+SMP6m/g7/XzIeD98Ppk+X4OoOW7/8zqz/MXkc/nPH6sn7cL
/PHvl5b8w45P4n9Gvu1L/HUP25dvL/mFjXMdu4bfL688v5DPg6M/+qXnh/o5
sZafnp9r/ljywfIZZ/vG60t+H+Lj55ia38DPD038EvydmnFeG7+H+YP8/M9h
/VvhN0r8Q8hP/GXo7/Hkm1/Nv4P+tm/MuyU/BdfRk/wzjlw+5/gl/yLfdWJ+
F8ZTp0l/8i/xr7T42H+ev/F/OH/B0cP8RlwnvjxfzfxIzDPsL7++8Mcl/lo/
37XxoxlnHPKH/d8H8olT4of2c6QSv4vr0881Gva3H/gX+S3/Gr9nyn/0S/ys
7p/2j+1IeOKP9vppHD0S/7Cfj2z/Iz/xtzK/cfe9xO/F51J+Jfu8brX4p/He
H7m+yYPG3+3x5m1lnbL88flh31/oj/zEX0X+8jnn77iPyetby//E/5riY7+k
8XzO/c/7G49nP+7PuX5S/WE3n0v8QsTJ8XfeWr79k/YHyDG/oc+/iT/P+z/j
2O3+hF7ev6b6G+6/fKBfWh/cH9zfGUccrB/vU/9GL/vB+cvntvIbjnp/f+Hf
Fn/G+fxn/dL6wXj8nPLD54PU/62/1w/71+Nb/0v1y6vz138fZv3xK/7z/obx
qX7pD8xv/mHGcd3+cd1Yvvu7/ePn5qf8Rg/3B/ZL+G+4P/iB/uN9pov/sYf4
JPvHPrPkX8QPyf8pv8CxP/Efo4fHe99o/3I9jXfdp/rFbtcndqf+5vxu/nP9
4h/8b/96fXN+kw/Ww+PT+um+nvpfso/Pp/nxG7j3f8QDOen8gnzj1t/9xetD
ip/z1P3NcfB49EzyeeXvAdN490//fWuaH/3T+Ynraf8Cbv/6vpv5W93XWn9f
vz+w5K9I/X39/svbur9AT+cfn8cPbX9l+5mfPpT6M/oNz//4evn85VSf5J/7
u891tt/57/m9/qT65XraH4Kn9QU9H/Np2R955e+AnZ/++0D3v9T/iSd+aPtj
54f3RTw/Ia1fKf9dB2l/4v0XeLp/h9x0f6Dt/91f7R+eSw1u/iLOreDml/F9
2cR/5Odz+/41n2u4+cGwB/97PP5AL+bx/CMP7pL/z/evbB/+Mf+i9yXku/Vj
vPmDkM/r8Pfl315+P2R+JuYnzuYP8vpu/dHb94dsH/onfjWvA/5+weeD5N/h
+REf6A/u+KGP9UzfbwzPH/r28vn7lu/7Hx6P/1wn6fub5v/E35jyDzzxh9p+
jydv7GfbD974h50/Pl+m+m/5k/i/zOuT8ivp732F+wfymTeNd59yffLq+jdv
T/If49l/gPN8THDzOzKevuL+Yd6w5D/GG/e+3PHFL3zO8fO4xH+HXMt3fNL6
lHCvP17/3N/Nf+f1xfN7X5j4LVN/9Pc76/zVl/GWb7+l9ZPryb9713/jrg+v
Dyk/zQ+R+ofl8578dX3b7yn/HIdU36m/J/s93uuL75sk/kv0t3/sf75/TP7z
/D6XpvpP/vfz0xxf11fK35RfvEcP16frwzj2pv0l7xPufffwfJ+V9bflb8ov
8jf9PiTlr/MujZ/dvzs/Wv93fJw/vMc/5udELvsz+OmMY1/Kf/T2/trnO4/n
OnXo9ZV4p/2Hca9/3nd4PHqn/uK+nc4/bf11n0n9wzjjZuuj9a+0Pvk5jeBc
Z560Pqf6c19z/WAXerfzx/D8sZXz3/B80g/kE5e0PpC3bf/p/Pb6muxP+Tub
fyl/0+9TLB+9nZ9e99r8zT73Z+S29SHtn70v8Xjv24bnz36gH/Fzf/O+O9nH
/MaRz7pv/3pf6/XBfjXuc4/Xb+Ot/uy/1j+ZL+Uv/kvjfS5s+/Oj+zufL9w/
0vrD5+xf70/sP+/fWn67vyLPdeL5U/15f+H68/pr+a77dH8onY9sf+uvCfc8
s/2n1YfPbc5Pn4vS/Tk+9/sPffh3Fjh+9f4Fe4iL53d+GHd9+XxBvvk52uY/
xD70Me51Ehz/un+aH5HXP/un3/377QU/Lf4x/yDX0SPxL7v/zuKen88n3Pyg
Ppezvng8r+b3tV6Jvxfc/JaMpy8m/l705P4VOJ8nrkk+150//t7M9rXx5pVs
8u1/93/Pb//Yf85757evG3d8rZ/PB84P2239kTfrX/qLcfxDf3L8k3z8h59S
fvG5FN/mn1Tfzn/733FP/MnIdfx939f9z/sjj+c687T+Z/9jt/UwPpuf5nf1
c80TfzXXU3/z/tX15zpO+Z/8l9Yf3ruOLT+tH76/5fqxfq4fP7ff8XF+wB9i
/biv4vHeN8Nf4vzEP46v89b+9bnB/vXz7R0/cJ8DU3xSf/T+yvY5D+2/1N/9
/U1b/xN/OPql+vE+CbytX/Zf2n/gR9tn/6X5E/+45fvv67w+kKeOj8+p9g+v
3F+xf4m7689xT/05+d/3tdv+xPo7f5t/W/23+KXxXgdm68f7j+Q/r6OWn8ab
1yX1d+KQ9r+M9/4ffczvBT+1+bXMn2376Z/m73b+gTMfesCTBU4/dx+1fOZB
nvnLzVPu8cyb+NHBza/ucY1f3fzgvHd/8vy8Et/Ez279ZvG985vX3Pnh+Cb/
8znnH/3Qfd7zJ/55X2/89G1+5xf6uc9avvcRlg/e6ovPpfhYvvVyfjn/XZ+W
vzf+4NSz69ty0nj8neo71Sd4so/PcT6wfN+/Me71L9W//e99A+s3uPkjPT/1
ynj3F+ZL+en+7/xs9jv+CU/2WW/3H/dd55fz1vZTr7YT3OuC88u8bK0+PZ73
Kb9dN17/4D90ntr+FH/zyyX/pf7f+iO4949pfKs/y3ffS3jKT/d/ry/4K+nv
+y7u/+adbPlh+Ymf0uO53vLb+ju/U/8yP6Tta/2LV+e/r6f+bj2MOw7Gmbf1
7z/4B979+ztR/l95+B3/Zf+Kv3i1fN+3SfnJeOvndTnVB9eT/eBt/2Wc62l/
5uvw27u/pf2F4+Pzgdd/22/57XyS8rflf8svXq2/+aNTfvj+qfVv+2PPYzzp
h39T/bb4mv+65X/Kr9n9u/eH5pdO9qf8sX/a/iydf1xnKT5pfKtfrpvf2+ci
Pmec+RO/N3qhr8e7T3u81wGP9zrr8Y4DeLp/Au77I7Y/3T/2eN9/B+e97y+D
+/6/cd//5fNpvO1zffA5j7cc2+f7S8k/1s/zpvj6/pzlJ/3NP5rG88rnPd6v
e/Hh79s+v8g3PyW49R/+vvTzZX4lfuKGE5fEr8v3WrxP4xu/cePvHX5/tUG/
hLuuEu550vjED9zwvfPbr43f2PG1fPvXeWd+WPKN31WaXxiccQlv/Mjr/KxL
PPHPpvGz+s3iaX5eGz9x4ted9X+z72z+32afeYc9Hjzpz3W/Jv0TP3KS33Bf
T/5p+s3q3/iVzU/ccP4enNeRn2Ce33idv7DjvE/8wcbNH9xwz7sX5zXxJ6/L
f7EYP9rXcfv9U8cTv/MsPvJbv5jmB13n357HGz9pwtGn8av6c56/2ZfwWfm3
4mdt9s3a/6nw1z43+Wfzw35q9n9s+R/b/7f2z1P5767/Ofp/6vjovyV/sXHz
Eo/zX8Y3fmOe08MruJ+vxCu4r5+NP9p7eT4lr4/4Nyru59Py+ogv+Ym34h+b
n/c6f9txnPfX+YH343f+4nf/7vzFDWfGO3/xh/idv3gOP4+/eFxflvzFxsf3
5g+8rH/ruPktM//kdf7Oy7qV+D+ZN+H4Z9R3yS9pftCGb+Mn3s5vjPzE/8q8
bfwYhyU/MvukrfzGtivh6/nZ+V+Np/Fz/Mdt/sx/jB88v/EUX+bfGj/btW7f
65IfR/Mn8V/Ozt/4jTv/qvtQ8o9x25f05/W6fj1+Sf+GX8/P11G/MS9b/3oV
+xfzrNuf+bdd97yCj32n8+uu+3eW//vNQj7XG3+x/Wz/45+U39f918Zf1l/b
Z7+29eW6fzI/+Ch/6b913PzDS/7i6/zJS3y0b8lPPPq3j3dcR/8bt39ffIXc
xj+83l+W8yd+4/X4Lf2b+IWv8xcn/vklPtqf5n+zwNf95/ndf+b5i6/rf+Hf
4f3j72eW9jX+4kf93y5w8i7xu3J9lH/Bsevh5xwf8Muatxf/geMX5KfxjGMe
j0cP//4InHnMf+x54es0znOw1vl1L/KxY8Qv9WN+ZcfV/vW+n8+P81/4Udf9
e+n/9i/vnZ+OL7h/v4V9yB+ez74Y7/xc8g/Zv+jDeOuPfOZJ/md+y/d4+8/6
W790vjFunlf4Y+1/4ruOX+ww/yy4+XPH/HpV+W0t3/yu1r/ZZ35l62+/mj+Y
94n/2PzIyT7Xp/mDXf/2n8+X6/5/874+jDMv/Qkcuci5nh9vFvpbPnmc+JuN
I5dX8wd7PM/pM/8w45nfuOsf3HnH7/yMP/6s/vIcc/7+Ghw5fA6c97Yf3H3R
zxd4/L3tZf1aH/8myoffzZ8Dd14/pMkvX3DXFX4yzjzExziv689PuPB2++/7
Ldf8y/if58/zd2gP25dvX/j1/BxbcObFv+vPz7vklXHmT+PxBzjPGwV33D3e
ehNfcOw3T5fn5xX/wK9BfhA/fn9ufpg0HvusX+Jn4z04ccfP/L4cHP+CJ/4u
9De/6/hczyV/HvMn/Zx38A3YP7x6vPPXOPGDN9j8KOD4yfYxP+M9P/MxHnut
v/uT5wdP/mWc5Tt/7X+uj3Fe8t/hB/PjgDNP4/f0eOeH5bt+k39X928r/EL2
f+pf9v8sbv3tf8fX+9KUn1xv+Z38n+rbddH4i80f676X+EXZtyT+Yfya/JPy
d/T70n7mZx7zZ9F/U/66Lt3/8A96JP489DA/FL//YPxw/voAH/tU9v9w/vnA
f8l+4sW6YfnM53XO/nWdJvnWn3Fe51L/aPltfkXvr+1/7PM6mfI/rU+Ms3zv
+9L6zrmB9/YPeWD+Z/ffdX6872v/uOxP4IkfzOtw8q/nd39K/OHE0f3J/Efu
D75vlPYnzN/4LRv/sOOPfO9zU/03/b1/4/Pe5zj/k3z8Th7aP17/UnxTfnj9
SvKZh7/fTPu3xi/u9QN/NX5PXl1/fr7/cH/r6yX/YtqfgKf8SvyL5rdM+ZH4
Md33U/0l+8w/m/g3wb2+8B470/4SP1m+89/x8Xj3V/Oyun+gf9qfId/nP8fP
z2dP+dHGW77rxvtj56f7JzjyvT4n/gTrh3/T+SKtv+4P7Xya8pvrls/81Hny
36x848hr+Zvyx/uetL5hp3Hqys+5tfzUP9wfrL95w+x/56/3h+jv5++n/u/6
9bru/Cau7G9sv/MunR9X/z59xX/mb8U+7Dc/M+PQz/7HH+4jxtHD48kncPOD
mHd0K3+S10fzC7juEv+A+9N4f+7y/FXf/0Mu8w9/P71yf8241710f49xCU/8
eZ4Xe8BdN7bf/jM/hvel5u/AX67/pJ/zg/eW4/iAOz98X6HZ7/l9bnH8scd9
JI1HD+c/uO/f8j7Z73Ol+cGoD+Yx/5L3vYk/03/nn/LX/HzoS33b/7xnvPmj
wP0cW8vnc43/dGt9+/nbjp/7W+InBTe/SOPfYr6Uv+RXwq1fG2/78dcsv6b1
B+c18Rc5zuA8tyj1N/NvNX5Snm9sHPmOD/om/h3w1N+2+ifxy8zyL6b+uvp8
lQ/k+zkSzg9eXV+Mx7+tv9t+86tavp9L4vy0/7b2B+8rXB/2X+KPTOuzzyeJ
fw888T+ZhynZ7+ej4y/wxL/Q+E0Sv0PDzSuW+GGSfuY18PPvGefnQFs+cmwf
1xt/DfJZ35J8Pp+ev+7xfr5249fxeD93zfr7uVv2n5+Pmp6/zyvP/7P+bTz+
M78R9rg/gfu5SubvYD7bmcYnfqHEH9LG+3ri50j8AK6fvfwT5ulJ/k/8AY3/
wM8ns31eP8F5n+qb9T3h9l/iJ+Bz5q9AfuLPMW9Y87/lN9zzO35+bmfKL57P
mPITOZ6f946j9QNP/CmJH8V1l/jT+Jz5R9yXeP6u/YueiZ8OvczvRPwT/xX6
Isf56+e72b6WP+jrPgru5/a5Pzh+xtPzNRPe+J/a+pvGp/XZerX6Mj+J87Lx
n6X6Tv7x822Nkw+Jn9HjjZs3y/a1/u++3NYX+9/rjvPX9Wv9sCfJR1/3EeuX
6sf2pfpK65vXl8aP1daXlJ/ITfw8XG/rs/ub9eb54h5PXNL6/u/82+/+/fai
P9juxm/U+LO27o+c341/0OPNj2r7XH/eP7u/tP1v629pf572362/We/Gb5f2
r7P15/07n2dfnfIr5Yfzq9mf+jf+9/xH9y+ev+Vfw9v+JtW/93n2b+ofs+eD
hDtvf//hPl/mF3V+ko9pfWV/k9YH92/rx/uUH7P+T/Xjfdev/sq7f8v+an4F
y2fetL7iN9vv+Lb4p/p3HCw/zd/W14YjN51f3Rfa/YfW/9L+3vwVW/FUn+Dm
L0jj2/6r8Rc3ftAUP8Y5/7yvbvsb17/9/1f/q3f/fncRX/MIzOLedzj+vv/i
+DNfuj/k812rjxS/dP4mLyzH+XF0fUz15/zz+dbrouPr/VM736b+632+5af+
CM59ura/8P3BxC+U8qvVh/dv7n/p/lzaf3h9SfFP65fj2/pP2180/uZ2f3Dr
+tvWb99fsX1eX7bmn/uC8we9yIut9WP70/qMfN+fNi9Ny/90/67tr8wDk+qn
7V9TfSX+d+P+fgK/p/WtnY9cf1vj57xN+0OuW37bX9l/7fuLdP9k7/cLW+8P
OX7t+wnve/CX/ec+7/Ho38639r/Xzbb/8Hivy61+W/zbeN/fZly6f8+4tL+n
/t0nk/3uH7bf+TvbP/b2X+vV6qPtD13/Hv9HH37v83sL/zEP98lsP6++/0a+
MY/zj/fo5f2Hx6X1k/i282fKT/bN6fyQxjsubX+d1vfZ/mf5ntfjrVe6fz/b
nx1f7xvT93fp/ozvG6T6Tvp7X9b6o/Pb9/1dH97f237zC6b+Cp6+f036O3/c
H31uaOOtn+8/OX+o97Q+4i/XSfKf9xfen6X+lNYH896m+kGv1J9T/rXvh51/
rb+n9YPrqf+l8+/s+W12/9q+v2r53c4fqb+k+rB+Xz38DmhZv7z+4Yffef2d
hX5pffD34mn9xy9t/Um/z0jrO/k8mz+uH+/Ltuo3G7/0+xHvn1v/T+tT2p95
XNPf/vH62n7fYNx1x/yJX9b8pPar+U1dlx7v/Z/lG8f/ls9180d7XubzePQz
/7V5480/7/1j8g/41vGWvxW3fPPXbh2f+JWdB8b9/ces/y23ze/8Me78Ma+u
7We+ZF/DmW+2fo7irX6Tf9J4+jlyeYUf1Xqx/wRnPHnP/OA+97D/BHdc+ZzH
E1fr57ijr3HnV8LxF7jz3/oZNz8z1/GTx3vdTLjXwdnxXjc9nvdex2Zx1hvr
kXD7F9zr5K38k3D7yfGzH9r4h79//DzvH4z7c7PjzV+Z5je/ZRrfcPg9jTNu
+PvTD+Sbf9PjzVN69vy8ch5M45t9xi3X+vE++Tfxnybc/tmKOz+26ke9Gmde
++fx76MvvJOe39f5vHFek32WY/m8wm85i5s3NPnHn0v6Jxy5bf6kH68pP9t4
rtt/s/qBN/224vDBpvmP4r7+/b/x7t+PFjh+Zb7Z8R6X5IOn+Rve5NvPj/jL
rxz3Wfzh789W+Hv5/Nm49Tgb36uf/W/+4uvyX5yGz/IjP3d89O9x3OsC7x/x
L07D/bmz8bv+c/rf8Tv+s4yfXb+uO8s/it/1f176f2r4nb/4Ov5o752/eBYf
9bvzF8Mf4ddH/M5fPOp15y/2eM9r+bP4+Lk7f/EjfucvHvW58xfbvia/jUe+
efBG/M5ffD1/7vzFx/Lnzl88G7+kf8Ov5+edv3hu/J2/+Lp/7vzFo//v/MXG
R/s/Hf7iWfvG/Hm5iN+j/m8X+Pr9pQu/ItdH+Uv+4tE/HccvzJ/Gc33035I/
eLRviY/xWfKXjvm1xMf8zPzFI/4qyr8e3yV/sfFxnPOz416/7F/n/3j/8stF
fo/3l5f8qvaP88L+HePi+r3I53PJ/4xLeMtf5Fu/6+ebjl/fPxh3/1/yF6/b
9yb0p2V9Wb7xrfZd759L/uKt/nX9JftSfbb6d94l/3Dd9bFu/9vp/Lbc1J/B
r9fvEh/zY/v81q/hyf/gqT+n/m+8+W/d/telP7wO338s8yPld4rv1vpL+Pr5
tOe/68/5Oxu/6/57U/3H9TZ+K265KX/S/sfjUn61+Zt/0v6ljW/6+XrrD21/
Yvm8T/nH+zTedZHyI+0PZ/tD609tfUj2Ndz+cf3O6pfwlt++nvJntv+m/sA8
W8c3+c0+7Gn5bzmz9bUV36q/5014G9/i1+q75cfR/Er9dav9afxs/jb79/qn
xT/lv/mJbX/Dm/+b/e6rqb4SPpufTX9/blZ/x//xfd5f2/9b+4f19/pl+Q13
XiT54Kl/pfhbfsvPtL6n9dv+bfFJ68dZ+Zn0b/Yn/zk/kvy2Ps/qn+Lf6iPJ
53qKn+dt/W1r/7ZeW+Pf8tvyk/6jHW9jfNP+ZP33efM4coz7930pP5p9aX77
z/bx+RTfhlvv5v/Uf1N/bPFDP8ch6Z/6y17/Wu7W8S3/ZnH7Yat9fk31v3X9
aPPbvq3ynT9N/l58dv1I/Y15t+Kz+ZPi2/qL8zf1j9HPy/1Lw9d//7zc/yQ8
jbf+zX/+fsLzG3dc1v3ztpxv3tb+lPKn4Za7NX7O363r4/Xfp8+vr7P2pfpk
XMJTf27+26r/1vqw/GZ/Oz/avrb+Wf9mv+dv8rfi7k/Wv60Pnp/r7jPGmSf1
h1Y/qX9uza+t+0PLTfk9uz/dWt+uu6TfbP2k/pvqi/mS/xre9o8e3+xv/rP+
jst6/3gb44e/UvytX+s/j/epfxDzZ70+sn5eH4/6J/W/JL+Nt15Jftqf+Hqr
39bfU3yS/r7u+B/tD7N4kj+Lz+Znik/Lr1n7mv9bfiT/N/tbfs7Kb/lxdv7Z
7yn/m38sZyue4mu7W/9o+bO1f8/is/0nrX/Xz09vY3xm/fNUeMufW/t/a/0Y
9/pou4x7/bZ+DbdeXr8d/yTfn0vjm38tv+Ftft4n/WzX9fOR/757uX9J9s/u
P1J8UvwdP+OWOz7/x+ejt9H/CbffWv6l/V/Sv8UXfVL/brjjk/rbbPz29v+z
+kerr5Yfe9eHvfnf+pPHb62Po/ZtXf+39m/nd/Kf/TBb/w1v/nV89vavlp+p
v87ivKb+ltY3xyXNz7xpf+E4zuJH8282v2frc2t/bOfjWXx2/9bmT/U/u362
9b/VX+vvLb+35k9bX7bG/9b7l639+6n6x9HzU9uftv17yj/mm11/rV/Dj65f
s/0XuWn+tv9O+P/f3tnjSpLkSHjEFUdoYYQRGoW5x+55+wh1hJZGHLGBAeYc
i+0CN+FfhIWR/hOZ8cpLSVTYc3e60UhnxMsXrPq/d301/+j5y3VV/u2tP7L3
V45fh4/eX8+qv3rzj8qvVf+7+9d//fkY6j/d9z9V3NmXvX/Lno9VPKsvN97h
ip9sfahwl99pl9Ofio9Z+c/pl3g2/5AHNf+q+rH3/m9WfTarfhi9P3PxW9Vf
Vp+98ZOtP7LxX9W/03c2frP5V62v4sfh7nyr3h9V/cd51fwKr56vDnf+660v
sng1/1Xz46j+ZtcXDqffZuO8rvw/imfPxyo+mn9n35+o/Ozqn8B5/0e7VP2p
/Mv35jv/OX24+z+Fx/qKX7e+8k+1/u71r1qf1xW/WX316sfZ5+JT2Z/NL7P0
7/bn9FEdT15m44w7+ifiXZ2PHO/Ojyq/Wf+q5/tV3OlLje/Fq/E5Wv+sqh9m
8ePik89XHE7dKPtV/s+OV/q6fv+9x7P89NqX9d+n5H9nv3v+VcWp/9H831uf
OP8rnNcVv9n6y+Wfu+8/ZuNKX6vyY5bf7O9P3PxKHwp39TvzJtd3uJvfxU8V
d/Hbi2fzby//Do/r7v7K4co/7nzLni+r/Tsbz96/9uKj8ePwu/jL5p9ePLu/
1fiq/NP7fIPzOn57549P9fxnVn5bHX/kZzbu1nfna1Ufo/m5ev5Wz8csP6P2
u/Nt9Hy96/ydbZ/qPzwL53Xmh1k47VC4G9+7/nn8+f7EDr/23+5ffL3+7l98
ze/uX7ztr9m/8Y3/zPjs+L2+f9j9f7+a/U/Dr79/tfsX/9jv7l+cxVv7dv/i
H+u/uz/x7l/cfn5O/+LceL2+w/+Cfz9+fvcv/oHf1b9Y9T889h/meO6rPV+O
/Y+reLu+6r/p8fP87fsXO5z2t/xl+xe//HOO6/259Zn3z/lhf71jf9Nr/qhP
9qd86eKc31f/Mo6nLtX4a/tcf+J8/2PyG/YF3taHs/nV/iWP5/rp7e+d7X98
XP86vskv+0tl+dP+4frn++P+VX9V5t9s/+Lvhn+nv+z8vj/xdX76DfdHvr8x
z99z/Wv95fSh6uPZ/XWP+Hn9r/Th5z/376s+Uvk/8OvzT/Un5vrH/Hw93uGs
z154ay/rM/afPvYfpv/b8a7/br7/cNjXxsdxfLs/9gc+9i+Oec/z6zjern/s
j0xeiXPelr9v8A/P92N/4Xb/3w756RxX8XHEW/s5P/PTcX3i3L/CY121v8Cv
12d/mRfe/n3dsb9izNv659h/j++n5P5a+33/xxgf487H8/zm9790/9z4/7n+
jv3nzvev/JvF2b9Q96chfu3/fP9N8ny+PvOL3x/5j09lf/z/fP6jf8IuZT/x
Mf6P/YXbfdX7R1/nv+P+lf9jn2p/Cg++lH3cP/llXPDvd4lzfcY99x/rqfxA
3s6/H/5PaV/YwzjjeNrB9a/jT/ePinmVfbSf+2v95/uD9eJhl8oP/D2E4k/l
h8C5f/Lm5idOfpz/qjjzhsPP85Pu38p5FR7zKP6yuPK/Gk9c6dvtX+nD+Z92
MX45XvnXre/4p86U/5Q+ev3H/KHyq/IP40/ZxzqpGj/ufFU49+dwFf/X9cGL
3ypejW+X/6/PZ9+/mOOpe4c7fbv9VfWbzW9Knxyv9K/s53Wlr+z6yn5lH/2q
+Ivx6vxX/Dt98Drjm7jjV/k3xik89qX4c/VHywP/vuPFP79fzvte9feDan88
l7j+uX6Ofz+s/BM/r/Trxrv90X7i5N3tX+kzfk6tz++5cH2lP+Yvxb/yP/Wl
9qf0x/Vd/Dn+1P6V/914t37WPqefXv7pV+f/2fvneIUr+7iu0mfWv1X7nH5d
/nX6dfZz3/QPxyn7Wp0c87fCHT9VfpV+1fsXA4/rSh8qv2X5zfIffCn90z88
H935qfhX+nfxS7tc/vhRJ/+72z8q/4V91fOLfuf+HO78w/0rfTk8qy/FT7Z+
oP2MP+qTuqV91J96PkE/K/9V87uLP+7b1ec8/7L6d/lF1c/0q9ufy69qfy7+
Wj/n5x89H7P+UfFN3Tj+Vf5Vv1+jPlz8qfONcTA7vhTu4iuLK/9k49Pp2/mP
OqrivfxyvIr/rH7d/hSu4sfdf4S9ajzzkvOvuj9X+SXWV/uj3xV/8anuT1o/
Hd8vrOan/qr1SYznPqvzu/cjK/tpl+I3W/8qfXOfanz1/KEuqv7hvqr6Pq9/
9POfqr4dzuvu/FW4i58s/+75isOdvtT54ubP6qPXfrV/6r9an2Tjw+UXZ7+K
b+efrP+U/tz+71o/m/85P/8+UNmn3k9KXK2vxjucdqvzz50fSl9u/xznzh+F
q/1lcbe/+CQ/bnx2/qx/1fzZ9zOq8XG9F3f8xjilD4Vn+YlPPh9yeJU/py81
3umj17+87vh39rv6W/Eb81//fk2/P0vx4/inLp2+XPy7+Fb2O/uy+afK/yz9
9OYv8s79xX6ufz/R339z9fmRzb+z8r/yf+Aq/hTu8nesp/afxV18KP06PJuf
1PvvHF4939z+XH5Q8aPyl8Oz+sn6p5q/qvrtzf+j9Vm2Pqni1frM8evyn1q/
t/5x/nX6c+fLKD/Z/OzOz2z91FufZvXp9u/4des7fnrPx1H9ufzg8q+LT3d+
ZPXv8nO1fua8Cnfnkzvfevmv3l9U43t1/FXvH1fhd8Vf9f4ke3/h/JvFq/l7
dv3u8quK72x97/it5p9sfansY/1drd+z+WvUvt77C8a1808Vn/V8r7e+HM2f
nFfVj9n6wuWvVfyvqg+r9cto/nbPJ0bxu/mv4tX7P/rN5UdVv6nziXWTyi/M
Qyp+VPz13r9mzyfayfHn778+5h/VnyJ+rorTL2r9Xpz7Jn79/lGPO/3M0lc2
v42ev+7+xsWX8q/in/5R/Dlc6TuLq/mdf0brk1n5y/lX7d/Fdzb+s/7t1Z/z
Ty9O3qo4+b07fkftz+IufrL5ReXf0fp+lN9sfMyOH+LUf/Z8yt4/fTV89f1n
Nr578x+vV/Hq+mp/s+bvxZX+iTN+uC8XP6tw578Yp/Q96v+YX/HncNp5l/9H
6+8q7tav4k6fWdzxn72/qfqX83J+hzt9Uvez8Vn8K3w0Pu/GV+UnhZO/6v3H
aPyOrv9u/TAvq/jM4m7+Xrw3P1Tzh9PvKO78U8U3/9f40+3ndZc/e/FPOT9W
nz+fFr/xf7W/UZx+d/Exiu/4Ot/frPP1q+Hs26vioxf/159/rvOf/+bnV8Gv
9/9t44vxa33/uvHF+HV98PeNb3zjG9/4xjf+QJzPN9vns3+z+PX3Kz3O7zW2
32/8m3m/03r8z3JIvn/vF4v/4Eu93/2vw/ifdB36vx37/278nfi7+xPv/sXt
5+5fPGbf7l9cxYOf9nzY/YsdTvtb/nb/YurinN/dvzjH7+5ffD1+9y++nn/3
L77O77t/sbLvGt/9i+OT42Pe8/y6+xdz3nZ/u39xrB/ztv7Z/Yuv/bv7F5P/
+FT2x//P59/9i5X/Y59qfwoPvpR93D/5ZVzw7++Jc33GPfcf66n8QN7O/z5p
9y+Oz1487FL5Ifal8Liu8kPg3D95c/MTJz/Of1WcecPh5/lp9y9W+nD+p12M
X45X/nXrO/6pM+U/pY9e/zF/qPyq/MP4U/axTqrGjztfFc79OVzF/3V9sPsX
Z/Xt9lfVbza/KX1yvNK/sp/Xlb6y6yv7lX30q+IvxqvzX/Hv9MHrjG/ijl/l
3xin8NiX4s/VHy0P/Pu83b9Y7Y/2q/d3Zfev9Bk/p9aPeZX9Sn/MX4p/5X/q
S+1P6Y/ru/hz/Kn9K/+78W79rH1OP73806/O/7P3z/EKV/ZxXaXPrH+r9jn9
uvzr9Ovs577pH45T9rU6OeZvhTt+qvwq/ar3FwYe15U+VH7L8pvlP/hS+qd/
eD6681Pxr/Tv4pd2ufzR/v3F7l+cxbP6Uvxk6wfaz/ijPqlb2kf9qecT9LPy
XzW/u/jjvl19zvMvq3+XX1T9TL+6/bn8qvbn4q/1c37+0fMx6x8V39SN41/l
X/X7NerDxZ863xgHs+NL4S6+srjyTzY+nb6d/6ijKt7LL8er+M/q1+1P4Sp+
3P1H2KvGMy85/6r7c5VfYn21P/pd8Ref6v6k9ZPuX+nyR7U+ifHcZ3V+9/5q
ZT/tUvxm61+lb+5Tja+eP9RF1T/cV1Xf5/WPfv5T1bfDed2dvwp38ZPl3z1f
cbjTlzpf3PxZffTar/ZP/Vfrk2x8uPzi7Ffx7fyT9Z/Sn9v/Xetn8z/n59/1
KfvU+32Jq/XVeIfTbnX+ufND6cvtn+Pc+aNwtb8s7vYXn+THjc/On/Wvmt+9
v9eNj+u9uOM3xil9KDzLT3zy+ZDDq/w5fanxTh+9/uV1x7+z39Xfit+Y//r3
a7t/cXX9Uf1m8d78Rd65v9jP9e8ndv9iF3+Bq/hTuMvfsZ7afxZ38aH06/Bs
forril+FV883tz+XH1T8qPzl8Kx+sv6p5q+qfnvz/2h9lq1Pqni1PnP8uvyn
1u+tf5x/nf7c+TLKTzY/u/MzWz/11qdZfbr9O37d+o6f3vNxVH8uP7j86+LT
nR9Z/bv8XK2fOa/C3fnkzrde/qv3F9X4Xh1/1fvHVfhd8Ve9P8neXzj/ZvFq
/p5dv7v8quI7W987fqv5J1tfKvtYf1fr92z+GrWv9/6Cce38U8VnPd/rrS9H
8yfnVfVjtr5w+WsV/6vqw2r9Mpq/3fOJUfxu/qt49f6PfnP5UdVv6nxi3aTy
C/OQih8Vf733r9nziXZy/Pn7K/P9S+Pndv/iGp7VVza/jZ6/7v7GxdfuX1zD
Z+Uv51+1fxff2fjP+rdXf84/vTh5q+Lk9+74HbU/i7v4yeYXlX9H6/tRfrPx
MTt+iFP/2fMpe//01fDV95/Z+O7Nf9fvD9/9i4nv/sXn/MX8ij+H0867/D9a
f1dxt34Vd/rM4o7/7P1N1b+cl/M73OmTup+Nz+Jf4aPxeTe+Kj8pnPxV7z9G
43d0/Xfrh3lZxWcWd/P34r35oZo/nH5H8d2/+F7+n24/r7v82Yt/yvmx+vz5
tPjd/Yu/dnzNPl+/Gr77F4/h7+7f+7Pj1/p+f3/fr45f1wfv77+48Y1vfOMb
3/jG6zifb7bPZ3f/4j/LIfn+vd2/eOMZ/N39iXf/4vZz9y8es+/u/sWv6609
vwBn/8tZ/YtVf9Yqzv5Yx/7CHN/iz+tfHD8feOs/j9P+lr9s/2KNc13uz63v
xsf6Dm95rvYv1jj9EutxvPJfO/+q/rCqP+Sxf/G5/8fXv/aP60+b7W+r/Ov6
Q2f59/a19e2RHxVfgXP8dX456k/Fd4yLeRR/5/7z/Ct+qQuXf5z+r/OT6l/8
m/XPtX9fcX1tv+6v3drh+uMecTc+hx/7/xI/97/rb/yqj1T+VvvL4mr9dpzu
z549P7g+90/+qOsWV/2LfwP+Xezv2N+3te/Yv7jdH+c/9i9u+WN/ymP/4ZZf
jmd/P9rP/Hzcvxp/7p9j/+KWD/YP5vl87A/czn/EW/s4P/nN9jd2/ZFf/mvr
q28H/RGP9c7Pl+P4Nn++1lc45235Ofb/a/d/7E/Hv78NPOZt+fH9SXn93D7V
n9n3T431z/NLtv+d4tfbx/pe8dPq8Nj/lzwSv/bf69xU89PP57jubxvrKP8G
zvmvz0e/PnH6n3ap+ZX+ru9/fP/i8/P99+L8rH//kOtTf9QF16curvev+2MG
TvuZF8LObPwzvhX/Kr5d/GXtj0/un7oi/8wvCnfj3foK574VHusqftV46kbN
r3COv46vo/64/6r/yK/Tr+NH4e78dePV/omr8zHw9vdfvn8m98/1uS/aP6rv
+D/nUeur+Hf+VfEf8/fWDy6/cF433sWX01cVH+WP9qn6MRvfvfYp/9B+N/91
/aL7I7v6We0/Gx9qfcaN2r/Tj1o/izOOibfvfznyr8bT70o/gSt+svp39z8/
PnV/vtH8qfbn8qvaf8zHz8DpF54P5/m33v9B+Zd+df5V9a/in/tz/LnzUflf
4ay71PvJlH0cT/vIn8LV+7WIu/GKn9iH8h91oPi9nl/3D1PjqTvHr9JPr34d
znkdrp4/0E6FO/0r+1V8EXf1n4pfl78UzvmVPhyu7o9ifXV+Of+59cmrwp3/
aGcWpy6V/Wp92s/7D8Y3ca6r3j/ocMWvy78uvqi7Kn+8rvIP7VD2K32q85n6
U/5R+Zm8O/27+OP6zj8xn4svhVOfarzzn/N/Nv/QP5yf67vzya3vztfZ+U/l
h5aHfP3k9OXiy41nfq3i9Ivan8qfjC8Xfwrnzyn7XH1Uza/Z+HD8K/+Rf+7f
4dy/0reLryzu5ifO/FCtf939l8Npn4s/4tS1Wj/sduen0peLH6Ufpz+Xf7Lx
m7Wv9/4s7LrWz/H9/5y/yq/zr9OHy4/Ma5yfulH7V/6nf50+1P6Ufdn1s/ff
rn53+VfFp7LP8ev0QX7bv6892ndef87r7+vqg977C5U/srjin9eVvlz9ofh1
uPNvNv7deOU/x08Wn8W/i093Prr7WzXezd+L8+/SFP/q/bSMCzW/4t/Fr8v/
vN6b/5R9zj/O/w6nrpy+q/Y5/dK/zO8uvl3+yfrnrvNvVX3MfSj71Xh3vnIf
nF/tL5v/nb7V+4WJK/2p+t7p38Wvw938tIv+YX4i/4yb2faTX+Vfh8+Kr2r9
ns1v2fNHxUf2/mN2fqB+evWdzf93486+rP1Knw4nv6q+cOeryk/E1fPn7Hhn
H+cnzvsj3rdzfPxf8Uec/nE416/uLzve8RvXq7ib39lPXSv/Of3Guqvw3vhx
+iWvVZx2Ud9ZPOZV+lf8UN8ufpR+1f6q66v7H6dPZZ/D3fzcl7Jvlj5747NX
H+RFzX/+fphx/dL/Sj/OP9nxTn+j66vzSfE/C4/1e/uvxbzKf3Hd6UftP64r
/kbx3vxEXlV8uvjozT9VfY7mR8efm9/lr1X5d/R8zManWj+LV+OXuuL8Dq/m
b4UHL6Pn12z/j+qfuLJP+cfhTp+ufiLvbv/Kf7P4d/mJ69N++sftz60/at9o
/VDNL+p8defzqvzg6m+OU/yswrPxl61vVH5fVZ+N+ofXnX0KV/U5r6v1Hd6b
X7K4qr+4b2Wfw119GrjrzzW7P5Szj35ReO/6q/FZ+nb7X40rfY3is/VH+7mu
y1/v0p+z7yn6VP5T98+z9ePyS/V8cP6ZFb9u/ez5VbUvq793xQ/X7dWfwqkr
lz/c/tT8an/sn0T/OnxU/9n4mKWPan05is++f3D47Phx+p+d/3v7O7r4GI1v
t//R+mTW+ezmJ343/7Prf1dfVeuv2fzOOj9HcbU/4r31l6qvsvhofbS6/h3l
z/ln9P561H/x6eK7ev+TxXv5nx2/vedX7MvFRzX/Zes75d9q/bjq/nP0/Fsd
P9nzcfbzE66/un5W/PfG1+zzt5ofOD/35/DZ/q3WL5y3mj9G4zfrv7vyp/LP
6PMX579Z8fWu+qIXH40fh1f1WT3/XHxk8ez9x+rn/y6+evGn6pO8z8Z5XeW/
LK7md/XduT6+WZz8sT+vw6/j85s5H47je/Fz/Y7jXLeG/5rG+bkKb/mbj7f+
n4ef6/fXw/cP2v3/3eK83v7+eh5+/v2acfz6+4Gfj6/m527+N77xEfzT4nPH
78bfiV//fanvLzyK8+9i27+Pdf2D1+M/9K3eb+36E+/+xRv/v3/v7k/8dfsX
/7ifYd+1+Of78+bw3b/4HP8q/YvZ3+mFk9d2vx5v7bu/fzF5U+PP8Wx/3u/g
T/VXPPYfjXFc53y879/a1g/1/p/n87/0zfH0z/n84/1VFX/UDXGOj59X/j33
36vv2vn+XvFX3R/9cz5exc+Rf6cftX/6qWZfvn/yGD+9/XNf+b0vPn6T8XWd
n6r9gbP9uTW/1/xl+ydX+3vr/tfBe/xce/9z7F9L/tvxrr+x1p/yn9OP8y95
4/pZnHGo9FHNf+26Wp/0YxVX9tN/Sh9Zfan9Kbxdn/yo/r3sb+z6E6v67Ni/
+Hz8d8Ev56f/sv2FVfz+avLTcf5r+xXO/tCv/sXX+j/2523nP+Lt/o/9gdv4
PvZPPsdVf1rfXzjmU+MjHwXe5qdvyB9RX/xxWD9+jnhcd+9HbN9vdOw/EOu3
+zv2R1DvBwyc6wd+zv+xPyDXp37a/df753B+6oa/X6fdjh++/468c//UhcKV
/8J+h6v5qS/uj/Gj3l/X6vefB/w8fv9x0L/a/3n8HPfX5o8jzvFuf7SP46kv
7o+8cP7z8//f0j7qk3Gv4jtw8ktd0j6nf45T/lXrkx81nn7g+so/La/H/ufM
L87/vbjKD8SVf5z+3fy9+mB+U/aN4mp/Vf5cfHJ97tvxp3CVXzm/wpV9nFfp
q52H30/V/dG4L/d+XoW3fvhDjuf68X+VnwNX4zm/Wl/t363v3v9Kfh3u9KXq
FxefSp+rcacvp0+nP+Kcn+eOqk+U/fSvy48cz/h1/lPjs/Mr/h2u9OP0l8Wz
779X+lXxQf6dPlR+UvOTF5c/XX5x+uL+6V8VPyq/uv279Xn/psar9elXdX/Y
m1/oH2ef4j8bn9X8VdWH48flr6r+OU7xG9ddfaD44TlaxV1+yfqv6l+XX5z/
RnEXH/S/u/9y+dn518Wf8p/aH/1bXZ/+UbjSh8Oz57/DVf6hflX8OP6y8ev8
5+p7N7+rb1V+VPmTdrv4cc/feuM7mz9682u2P0T8vIp/4m7/Le/H85vjOD/j
lvp3+ZX6d8+veusHFX8ufzn9Z/Fe/h1/1L/bX/X+3unX6TPrfxW/tK96vmXH
t37I12/Z+FXrk1fHr8sPvfvP2u/yo+N3lH9nv9K/0y/3ofbX+/zL4cr/o/xc
f/98Xv8wt746P4jPXn8UZ/yo+Hf29+aHbH4Lu1T+Ddzld8VPVj8qvpT/HL/Z
57/Z+rdav7n6yj0/5P5X359X8z95df5V+THLL39/SX7U3/crfkMvSh/V+HLn
s8KZB7Lru98f8LrbX/X5hsM5v1ufuNOnG+/4yeIq/zj/cl7F3/nfL9b7y1bz
r9OXw7O/38rWn2p+lf94bnH96vNhd3/v4rf3fFb+dXhV386/Tl/q/lnld6eP
qv6q+nf52eHOvmx93Ls/6u76+eOxfuO6xN35zvzu9FnNb+S/qr/s+afsd3jW
v+r3Dy4+qvazvsnijt/zv2/OPx9Q+pyV33r5d/eP3J/CXX7P5n9lX+/zmdH4
WI3Psl/p0+HUJePD4Zxf4aFbhyt9K3zUft63c/74eRW/8fOKX4fPsk+dz279
rP8UPmo/xxOn/aq+UufnKJ71r7M/q68qTruUfxyu4ovXHT/q/X4Kd++n5fvn
yH/go/G38TX6Ie7mr/bvY3yo9y8q+zmeeKyn+HP6q+pz9P3I7v2mo+8/rfZX
yuLZ96u693sq/tz7O5U+s7h6/yrHufzq3q/q9MH5HV5d3+mv9/2xWX06fbj1
q/1NHD77/b/V/Tn9VfXp/OPiu3d+pS+Hc121/2x8VOOP193+FT6qP8WP08+o
/0fPp9H8Oiv+eu3P6rc3vzl81P4sruJ79Pwd9V+Wv/j815+PU/6TPh+yeG/9
Ql6c/kfPj9Xrz87vWdydP6P4qvp5tf6z9Vk2vyp8Vf6p8v9p+XO0PqvWb6vr
Zxefvf1PR/nhOnf5NxtfWdz5b3b8uvlnra/2T79V8/9d+8/6z+1frd+7/6r/
VsWv4sfh2fhaVb9wXeWfUVzt/9PxUX3fjbv99d4/Z/HZ/Rud/rnv3vozrit+
He7u77L7q9a/s+qzrP4/PX/28vepOPmbXT/wOvWdxWfVV9X6/e7nn6P1x2q8
Nz5H759c/I3i2fq2N75iXy4+qufP6PmXPR/V/FncxZeK/9n1Zy/+7vjL5o/V
9Wc1vt79+6NZ9a/LT1ncxYd6fh7zqvEKp66rePxf7S9wFT+Mbxf/ij/aUcXd
/M5/s37/Mqqfu/HR/FvF3fpV/Y7Gz2h8juqf11189eJZ/qt4Nf/14i6+e/HZ
/Ff1fV1f7v7FozjXreG7f/Es/Fy/u3/x9ffnPx9fzc/d/G984yP4p8Xnjt+N
vxO//vvT3b/4h753/+KNj+Dv7k+8+xe3638/zH+N7/7F5/hz+hdH3mznf/UX
jryv8HZ+1Z9Y4ap/5N/+px2n+g97PHghHtfjk+cb7W7te/V/jXnb8S88xrX7
f/WnbPk94ufn27G/pVo/cGV/8EecuujFs/ZVcfJC/uL/it8srvinrmhfFqcd
xNX+HU7+lL7aONT9U9v8cpyf/FTxa30e+RnFW16+o/4ex8mfil/amcWdPom7
8S4+6H/uy8XHuX2vuov3X3E95iG/xM/He31cz+/zv9IveeP+4+dVfMZ46qjX
/8o/yv6sfh1+bf8r71zrox9X+mbebMf/msbjequvXw3/x/69Lf+/Gv16nOty
ffKixrv13fwKj/n4+QP/dnh/GPH4P3+uF2/zxxH/Yf8faZzPbYjHeoHz94sO
53Mj4tyXmj/sct9PavkZf/9JzK/eHzWKh92B8/fbtKuK871Objztc3jMq/jn
OPV+LIVX379G+xx+/fy+/n4ttf/4nP1+vOz7z9T+RnGur/TXi5N/5x+FO32d
f/8gjzv+qJMq7vhX72+7zr/e/k/HXXyOfn+V86v8N4qr9bnvXlzpdxR39jv8
+vtX69/PcP39qfnf33a4+n6bs3/V929p9yr+lb5Gcdrv9teLr9In/c/9jeKr
9b+an6r/3HiFZ+NH8evw1fqdxd/d8VHNr1X9u/w8Oz6U/3vxKr+97xd054vy
fxVX+5ulz2p8Z/FV5+Os/WX3P7t+4HWl7179jOp3lj565ycv7vyv1pd8LwL5
H82fvO78U8U/LX+Onl+z8VH9OXxWfePwrP9768/s+dKLu/Vn6ad6fs46X3vt
J77q/QbZ+rr3fInr7v3i1fM1i7v1e3Huu/p8gXYr/lc/f7irfvu0+nl1fcV5
Z+tnln+y9dXs/Fnlr/d8X5U/V/OfnV+9vyuLq/xD+3rvH5V+eN2t32ufW9/p
mz83Cx+1725+R+3/Weu3VedXNf+tfn5SxWedD59y/q6+v3w3/704dTYL5/VV
+XNVfGXzW3Z8Nb+4+ne0Pp6lf8fvaHw8vX4b5S/L76rnY1l9975/0Olf1b/Z
+/Ps/nrfX+jwu86v6vORu/lXOHWexXl94+/Fv3p+6/39Vvb8dud/tf4Y/f3a
3fXD7PfD3/38cDb/Wf/04uR/Nr66fnb8uN8PO3yfPzX83fd3o/0bZ78fO94H
qvibrU+X/971ftQs7n7/WcV5fTbO9wqr/NOLzzqfPgWv3v9k8VX64frq/b69
+Gp98rq7v6vi5G8Vvko/o/V3tj6/C3/q+5Oz/unFV+v/Lv5n46P1QRZX798f
xXf+/9r4XfE12j8iq8+n1s+rzsfV+efp+dP1TxnF786fs+N39f3XXefjqvrn
rvr8qfX/3favxlfxsyp+767/V9Unq+uHu/w7G7+7fpiN363/p9Y/q+7v7soP
q8/fnT/fg3+V+mFVfX53/lzN/9PuX+6OX+W/Xvyu8+Vd5+co/lXu3++Kr11/
nvt3FU6/KH3Pwt3z7yrO+HDx14vz52bhXHcVflf9tVo/s3Hypvw3C5+tz9Xx
xXXd/V8VXx1fm//P5v+6fv1m8ev6ehwftS+Ln9d34/j1/eXuX0y89c/uX8zr
q/tvqv1/Kr6an7v53/jGR/BPi88dvxt/J777F1/jP/S9+xdvfAR/d3/i3b+4
XX/3Lx6z72n9izUedkdeVXisy/UdTv+058svB/22fFZx9mf9Bfyy/3Eeb9c5
zt/y913Y97vEFX9u/9SPsp9+5vyjeNa+Kk5eyB/93os7/V773+O04xxX/Dhc
5Y+j/xTOddT85/zkcRd/1/vrxXX+GcXJ33X8sv7wePz/Wp/MT3q8woO3c///
lo4PdT7Ev/b+5oXHPOSXOMfX9HGcn+Ov9an0+7v0P8/Vc/7Zf/wYf1n/X9cH
R/tr+tW4sr/137F+mYUrfc/C1fr067l/Wf/r/O78d51fdf7IjXfru/nreDX/
jeKuvlP5QeHUP/FYL3DmL4eHXuKTOPelxgdO++L/bZ566TPmox1ZPOZX/Izi
o/zN4jc+z/WjcT7XIn8cdx6fGqf9Kv8rfTic++P83Bf3R/+p/cfn9fl0nL+K
V/c3inN9pb9enPw7/yjc6Yt5pIo7/qiTKu74V+eDy+/O/k/HXXzSbxzvcM5P
/mbhan3uuxdX+h3Fnf0Oj3n5qcar/NCLc19cfxSP9bI47XM4eVN4XFf2K5x2
r+Jf6WsUp/1uf734Kn3S/9zfKL5a/6v5qfrPjVd4Nn4Uvw5frd9Z/N0dH05f
s+Njtv6JK//34lV+2+9v5HEVH/S72n8WV/ubpc9qfGdxN3+v/mftL7t/5d9s
/iPO60rfvfoZ1e8sffTOT16Iu/zk8OCDPKnxVZzXnX+qOPlR+unFeX12/Dr/
juKj+nM4ryt+R/Gs/6s4ryv/j+Ju/Vn6UftX9jmc8862n/js/JzVl9qfw7m+
sj/WV/aP4m79Xpz7VvwqnHYr/gNX/Cs8qw83fnR+p99efY/qk/uarX/OO1s/
s/zj1ufPKfscf738qvzo8NX5czX/2flZp1ZxlX9on9ufwpV+eN2t32ufW9/p
mz83Cx+1725+R+138Xl3/qnqp2o/5599fnFfvfZl7Xf6quJV/43ys/r87c3v
Wfzd/Pfi1NksnNfV/mfhs+OL+3P6deOr+YV1Bfl1uJt/lv4dv6PxwX3Ott/N
P1q/jfKX5Xc2XtW3yt8KJ+9K//Gp9K9wzjvb/izu1s/q0/mv+nzkbv4VTp1n
cV7f+Hvxr57fqjjji/xl40/h2fXJQxbnusRn+Sc+XX6dzb/bXxZfxX/WP704
+Z+NV+3r9a+a3/1+2OFcnziv/+z4an1V84fD6V9VH6n1Hd6+N6muv6o+Xf5z
9Z/iJ35uNa7ivxfn9dl47EedD6M4rz8dV/4bxVfph+u376cax1frk9fpn1Gc
/K3CV+mH66r99+K8vhp3zx96caWvUZz8rcJ79e3wu/mfjXNfq3Cec7Pw1fqk
f56e/5+G3xVfTl+jeOzrqfUzeVyFz84/q/lfbX/8nz83C1+tH/p9dvyuvv9a
7V/i5G8U53Xn/0/F3f5G8bvsX42v4ic+Z8fvav3H//k5C+e+lH9G8bv8Oxun
f7i/T8d5fbX+n1r/rLq/4/6cvj4Nv1s/q/bHz6fg5G8VTh5X4W79Ks51XfxV
8bv5X4XH59PjV/mvF+e6T7u/Xo1/lfv31bjS7yhO3pS+PxXn9dk4/aL0PQt3
z7+rOOPDxV8vzp+bhXPdVTg/V+Gr9TMbJ2/c32x8tj657uz44rru/q+Kr46v
zf/mfwTf50sO5+cq/Gn1Cdd9evzOxu/279Prh9X8b3zjI/inxafD3x1/O343
vhJ3z3/u/vuge/Hdv/jnwN/dn9j3L24/Z+Oq//Bf/p+/8/5z//V4/Ly/3e+P
wbm/Fv9rGufPVfHIe739exTOvj2t/eM498fzj/ZVcZ4L6nwNnOdrFufPZfGw
R52Po/a5/dMvrK9H8ap9VZz8Ul+zcOWfUfupX4XHZxWnf5T9DufPrcIdP7Pz
A/mjfkfxrD5UfsjisS/Fby8e/2eeIs44quKz+OfzW+quN78p/Yzm52z+V/4f
xbP6HMXV+ozP3vzo5h/Fe+0jP4p/2jEbd+v34lxX5Y9e3OlnFp71X7W+JK7q
o/js/fvUWFfNr3D3/InPL8nPLJx2zsJn8buK/yyufr9Hu8hvFnfzj+JKX1nc
+Vfpaza+en8uP/Tiq+1nHM7GV/vX6SuLr/Lfu/zL66twtb9Z+Cp+7tZ/r//c
91Pi82nfv4r11P5H8bu//7YKv+v7ZbO/H7Wan7t//79aP0/7/hvXJX+z8NX6
z/rn0/B3f//lad+f+TT/ZfGvkv93flvrP4Xz556Cvzs/PS2/rcZX+/9p+YHX
yd8sXPln6/Ne/NPyYxbf9cM1/lXqh83/e/Pz6ucDT6+vVvPzNH1yXfI3C7/r
/mLjG/+Z8X1/9LXP383/Nf+zcV5/Wnyt1udq/3Ld1fcXT7//XYWv5ic+n6b/
r/b9gX2+XPM/G+f1jb8X3/ntvfltNj7bf3fjq/nZ/P9c/G/8Gt/5/735f9e3
5/vb9e3Pge/8c6/+ue4qnJ8bf4/+d334Xv53/jnnf1X9sPn/LP5X4Xedb0/j
5+78+rT7lx2/OTzrn59dn0/Pb6tw5Z+Nt9d3/fne/LkKv8u/T8/Ps/G7+dvP
V7d/f+b8+bT6k9fd/j4V5+dT8R2/Xzt+N//X/K/C1f4+HX93/Ti7PlmN7/z5
teN3Nf5p8e/wu+N7tj657r5/3Pxv/vf5ovy/CufnKvxp9QnXfXr8zsbv9u/T
64fV/G984yP4p8Wnw98dfzt+N74SZ/8Cvt9+dX+i9+K7f/HPgb+7P7HG/xe6
HrTE
               "], "Real", ColorSpace -> "RGB", Interleaving -> True], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Type" -> 
             "Image", "Version" -> {11.3, 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ConformImage", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
             "Example" -> Image[CompressedData["
1:eJztyDEKwkAQBdBJbFJKbuAtbC1tIx4gwXWxWWEjSG6f9RYW78Ef/p/T8p6e
fUSsQzvT/L3UOm+3Yxv3sr5ySY9r+aSc6nk5tOfYEl3ErwMAAAAAAAAAAAAA
AADwn3bpSgxy
               "], "Byte", ColorSpace -> "RGB", Interleaving -> 
               True], "Version" -> {11.3, 0}, "ID" -> 7132986703351890512, 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImageExtractNumericalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "Input" -> Association[
              "f1" -> Association[
                "Type" -> "Image", "Weight" -> 1, "Dimensions" -> {256, 18}, 
                 "Channels" -> 3]], "ExtractorName" -> "ImagePixels", 
             "ExtractorVersion" -> "V1", "FeatureNumber" -> Automatic, 
             "Version" -> {11.3, 0}, "ID" -> 3782479537935091081, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6577660353193586174]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5749777139264552649, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2672999966851599696]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.5, True -> 0.5]], "Prior" -> Automatic, 
    "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11115, 5382, 6834, 3840, 3379, 509, 11450, 
            3844, 12717, 1217, 3623, 11156, 9402, 10907, 8673, 3280, 11241, 
            11040, 4283, 11332, 11877, 8435, 8700, 2699, 6858, 9851, 11975, 
            9009, 4868, 4917, 11821, 10460, 12682, 9664, 8673, 6250, 4304, 
            9569, 5974, 11436, 9474, 9527, 8678, 11051, 5400, 9365, 11116, 
            10758, 7110, 11856, 6278, 11918, 12516, 10965, 12472, 705, 2892, 
            12010, 5601, 1310, 9401, 11788, 925, 11618, 8986, 9593, 10855, 
            2917, 1399, 4667, 8643, 7788, 5317, 7518, 6943, 8505, 12484, 4065,
             6176, 12697, 9731, 1174, 10608, 9623, 4881, 8019, 7975, 9468, 
            10768, 11835, 4454, 13335, 75, 10045, 12375, 12052, 2761, 7508, 
            8801, 4989, 7234, 1723, 11812, 4780, 5196, 4553}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZBcT//tbab9+2
ze7gAQcbIJdh7Rodu4sXAuxB4o0NDPYzpovb79ltbQ+Smz5tml1TIyOYvXCB
gl1/X5/dxAkT7FYsV7cH6fv5o8L++rVrYHGgXruPHz7YTp8mZr9ura59ZwcH
0I4DNg8fPLC7eyfGbuWKFXbfv32ze/ggwXbunDl23V1c9lOnTLEDmT1xgoBt
Y0OD9d07d8B8oF77jRs22P36WWkP0rd1yxaw3pkzJOxfv3plt36dnj3IzosX
LgDtbbA5esQFrG/njh1gc/bv2wd02w+wGAgAxUBusVu9ahXQjBlg94LEQf4G
uQVI2zY3MdkD3WEPNNO2tYUFSAfYQdzFAGLb/v/3z272rFl2Lc3MQD+H2R8+
5GR/4ri7/e5dVvbAsLS7f+8e2E6gG+xOnfS0h9prDVIP8icovP/+qbG/eSMC
5GbrSRMFQeFt8/1bGVgtSA4YtrYgNlCtLQB9qswt
           "], 
          "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCtgYvuw+6EPkA+6Pd2cP8TuVhS7u7u7u7tb
z6cf7rbbxaVNCKRHAROjIwoEJyeFw8EpqTGRSBk/KZQRCscnZP77WRGi/jOU
XOQjN3nQP+blp7/9ZTSNiaEO+alOAcpTkFgKUYzCfLEIRfnhd7/51c9+sjgv
LEFJPvrBUpThvaV551vLUo43vvaVL61AFZ5bkUpU5plPfeJj47hnVe5bjQc+
8qE1qE1NanHXO972lje94XXrUo8L1qcRDWjINa96xcte8qLxBGhCZ5rSiWa0
pzmtSaAl523BOc96xlac9pRtaMtJT3jcdhzzqB3oSCJJHPGwyRzwkAfd7z73
uscudGW3u+xGb1LYbHd6stMe7HC72+zFVre4yT70ZZ39WO9GN5jKINbanwEM
ZI05rnaVg1nuEFaY7UqHMZplDmcEI1nqEkex0MUuMkgaC5zvGMYyz7mGyCCd
Wc5xtpmMY6YzzGKq053mX2W03uE=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 
            1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 
            2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 
            2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 
            2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 
            1, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{12674, 5658, 15, 2484, 2271, 7210, 13073, 
            6507, 5477, 8896, 10470, 9617, 6769, 6347, 8674, 1870, 8621, 2660,
             3845, 20, 6922, 11008, 4641, 3274, 12087, 4953, 1169, 13668, 
            11287, 8865, 7890, 5021, 6170, 3113, 4445, 1890, 4455, 5050, 
            10448, 6273, 3743, 11717, 12582, 8997, 8764, 7607, 11825, 11446, 
            10931, 7031, 10491, 10823, 3948, 4793, 6315, 11002, 6793, 8502, 
            9084, 5794, 12037, 2836, 9030, 9511, 4584, 7280, 3365, 11831, 
            10808, 4106, 11728, 610, 1529, 992, 8136, 6405, 2464, 13129, 2312,
             4888, 5888, 9491, 6596, 7982, 12135, 7164, 2878, 5441, 5004, 
            12596, 11111, 7921, 10948, 8727, 4028, 7203, 4641, 12333, 4331, 
            6705, 7154, 7563, 9534, 9456, 11500, 8004, 9681}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDcTNTUz2c+fI
2E+aKGh/80aE/cMHD2wWLlCwnTNb2r6xocEWyLcDKmP4/euXXVcnp/3BAw52
R4+42HW0s9u3NDMD1TDY79tra9/TzQ02p7+Pz/7jhwLb///+2bW2tNjt3LHD
duIEAfvWFhZ7kDk3b9ywhZpjs3OHhd3KFRpAvMJu9apVdiC7//+rs58yWdge
ZifQDdZv3+TYgdwDEps4YYItiD554oQdyAygXlugHXaTJwnZt7ex2Xd3cYH9
sHvXLjuQ20D+Aslv22pqf/rUKbCep09S7EB2fPzwwQ5k3+xZUvbLl6mB9YHk
QWIPHyTYA91t++d3tf37d+/sQOyNGzbYgsLm65cvIDfbvnzxwrazo8MWZNfp
U16gsLD7/u2b3fp16+yAau22b9sG9FOCLQgvXaICdv+Efn57kL96e3jsp04R
AYcLUJ8NyJ8g+alTpoDDe/48OXuQnn9/a8HxAlIPAEZ80rE=
           "], 
          "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wwO4uVOzCwA5sFOti90UvoG66Xd2c/8PuLsTu7u7u7u7W
49WH821n3+OJTR0fSIsCJkRHJhCclBgOByenxEQkadzEUHooHJ+Q8e8fGyHq
P53IRjuyU4Uc3DUnudA/RlOZGPKTm2/mIS+//WU+vvvTHxagFAV5bSFKUpgS
FOGDRSlOMT771S9+8qPvfedb3/jK0pThgWWpRDnK89IXViCWijz1uc984mMf
+dD73jOO6lSlGne87S1vWoOm3LAmtWhAbS5Yh7pc95pXrUd94rniZS950YY0
oREJNOas5z3nGU97ypM2Y5/NaUMLWnLC47bisK054jGP2pZEDnnQA+63PR3p
wG73usdd7rQz6XRhFEn0oCvJdGObO9zuVruzxc32pC+9CNCbDW5yoyn0Yb3r
XOsas+xHf4YzgEEMZJWrzXQwQ1jpCocyjOUuc6lLHME8g8w3lZEsdpELXWCI
NOY6x9nOMoMpjmaqYyKlZjrD6U7zL4oc4OA=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 
            1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 
            1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 
            2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 
            1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 
            2, 1, 1, 2, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11320, 2454, 10388, 13701, 12660, 12776, 4128,
             9893, 6840, 9576, 4139, 13564, 6147, 12160, 12713, 4893, 12203, 
            11675, 144, 10457, 4475, 968, 4348, 4131, 10467, 11898, 9604, 
            5724, 985, 5450, 8493, 7764, 8818, 8911, 4197, 4972, 9417, 5190, 
            9204, 3268, 9662, 5953, 13792, 963, 8714, 6314, 10755, 6882, 9628,
             10073, 4757, 8529, 7986, 8850, 2786, 10986, 10129, 12177, 7092, 
            10774, 4613, 2974, 8058, 11143, 11086, 11799, 11521, 11590, 10927,
             8081, 11834, 6922, 13568, 10203, 6498, 8554, 5439, 3909, 5120, 
            11568, 8933, 5674, 6456, 6923, 7844, 5673, 9297, 9250, 2667, 9483,
             2975, 9055, 10928, 1165, 10846, 8493, 9241, 11236, 6437, 7397, 
            5450, 9219, 7714}], "NumericalThresholds" -> CompressedData["
1:eJw9kclLglEQwD+DyrZbh4gI+g+iLlHfm8lbx7BLx74guxiBES0UVFCpqRmU
7QVm0HJRu1QWqIHpTW8FBdqhDDSsyMyt3lh0mPdm5v1mfQ29g0pVkSAIQ3J+
KKURhUYjjXWVkNEnqZub1DKu9nPJ5yZxemqKGQ0GeIkP4My0DAN+PzMsVJC/
7TOZhKdHFekix4XjoyNwnbfiqsUCel0ZRsI9LBIOi8TRO+fgwtWGJmMV5rJZ
uL3pLgjFe9zuAmM0VMLZaQtk0mkIBTvhO5+HeCxGDNuzWmFuthg3N2px0WSC
BX05ry0g+Sg2FAzCidMJV14vz3vDqN/7uzvQaeVIwvMx6oHYa5+P5xREmjGX
nYCvVIo57I2wslwN62s13B7FTHocd3fq8SEiUR0gjvh4TE08JD+GkfqkuSmX
w25nAX8HeD0K1M6X/u/lNZFglxci7NtshXlof1SPeqNa728a3N6qw78dicQt
mc2M7t8/EBi9PUej7PDgADzudvEHFXnVIg==
           "], 
          "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwETsFuwWAztQQME+7D70OJ905nTG8U/sTsQO7O7u7u7u
Wk8fdmd2NjFnSiA3BpgaG1UgOD01EgnOyI6LRubkaaFwKJKcMunfD0eJ+U8P
ClGKwhSnCLEU5ZfF+K3+8adx/PC7JfhsSb74za+Wpi5lqEo8lShLeT6ZQDne
+9EPVqAi73zrG19bmSq88qUvfG41alKdGjzzqU98bC1q88iHJlKHJO75wPve
9Y71aEF9mtKAJjSkEbe9ZWOue9MbXvOqV2xGcy562Uu2pDMXTKYVHWlNe9pw
yracNoV2nPecZz3jSTtwwuN24ojHPGoXunHYrhzyoN1J5YD73edeezKGNEaR
zkAy6EcvCuxNXzLpwx6z2O0ud7rD7W5zq/3Z4gA2u8lBjCTAULIZzEY3OIS1
rnedwxjOGvNd7QjyXOVKV7jc0SxzqWPJYYnjGM8CFxtkkQudwETmO88Qucx1
jrMNM8uZ/gUBTdjk
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 
            1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 
            1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 
            1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 
            2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 
            2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9558, 12060, 10457, 5651, 10762, 10760, 8430, 
            5002, 5403, 3868, 8700, 9527, 5142, 4282, 2805, 10873, 11934, 
            3492, 2132, 10773, 4709, 4279, 2930, 896, 9508, 36, 10949, 5998, 
            5091, 9790, 11824, 7841, 11636, 12173, 5909, 11650, 4311, 9524, 
            7542, 928, 2568, 6007, 11119, 5470, 4633, 11670, 6183, 10928, 
            12010, 2104, 12360, 7550, 2820, 4135, 8907, 8083, 11991, 10458, 
            5394, 10240, 6837, 3280, 12612, 8546, 7313, 11747, 2160, 3051, 
            9435, 5571, 6958, 4483, 1728, 8017, 8178, 7614, 9022, 2586, 5580, 
            6210, 8023, 11775, 10168, 5278, 4182, 3981, 4908, 7232, 8637, 
            7313, 9748, 6916, 12517, 7833, 8636, 10182, 12139, 2793, 6671, 
            7381, 2190, 4463, 6129, 10954, 12253, 7635, 12473, 8668}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZA8RHj7jYP36U
ZN/fx2d//949u1kzJe0/fvhg19jAYAPEdgvmy9tv22pq//ZNjt3sWbNA4rb/
/tbaA7UyLF60yG76tGl2IHZ/X5/d/3//7N6+eWP3+lUWWL6xocHu969fdlOn
iAD1NdiAcE83t/3CBQtsd+7YYbd50yY7ED2hnx+qnsGms4PDHiT2+VOR/dYt
W+zmzpGxA6q3OX/unN36devsWltY7A8ecLABmTt3zhy7iRMEbEF6//75Y9fb
02O3ccMGuy+fi+2B/rJ7+eKFLUgvAxSA9P3/V2cPck93FxfYzuamJrvr18Ls
QWqB4va7d1nZX7wQYAs0xxak/uWLDDuI3gO2QLfZwcyaPUvKvreHB+hGE7DY
9WvXgPbzgMIHHFZPn6SA/GwNMqejnd3+5AkPuxPH3e2PHXW1375tm93SJSr2
ILV//9TYA/0ENuPd21ywmyZOmGC3epWWfWdHh+3ePTZ2d+/E2EH8WGMPANvr
yFg=
           "], "Children" -> CompressedData["
1:eJwdkcVuFAAABSfFWrS4S3GHIsWleHG2uG9h2yKBZCEhfAeuxd3d3d3d3d1t
WDjMSybvOHEpYwOpUcC46MgEghMSw+HgxOSYiCSNGR9KC4XjE9L//aMjRP1n
EJlIIDPxZKEyWalENkoRTQz6x+w8MwfPzUk+chHLb3OThx/+8qd5+ep3v5mf
ghTgk1/8bCFKUJjiFKEoH/1gMd763ne+8bWvLMlLX1iaspThkXE89qlPLEdF
ylOBhz7wvve86x1ve8sqVOOmVbnhdatTmxrUoiZXvOZVL3vJi16wDnU57znr
UZ+znvG0p2xAPxqSSCOa0pgmnPSExz1mM1pw1OYc8bAtOeAhD9qK7rRmo21o
x37bss+9tqcDe9xtEp3ZZUd22okdbnebXdhqV7bYjc1usgd9CdCTDSaz3nX2
ojdrXWMfVrraVa5wucvsz1IHsMSBLHaRgxnJEIYzlGEESWGhC5zvPDOca4h0
UkljjrOd5UxHMM0ZTneqoyK9JjnFyf4Fq2Hi3w==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 
            2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 
            1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 
            2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 
            2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 
            1, 2, 2, 1, 1, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{12621, 9258, 6289, 11637, 5682, 10865, 4239, 
            11090, 7711, 13770, 6480, 4895, 10417, 3353, 9481, 12014, 10028, 
            10588, 8485, 5568, 9408, 12467, 4109, 9787, 9646, 10429, 2116, 
            5652, 10059, 12786, 1069, 5948, 8769, 12221, 8248, 9012, 2889, 
            8295, 12342, 7374, 12440, 9985, 10960, 2657, 9099, 13684, 2095, 
            5853, 2679, 1959, 571, 10917, 12651, 7672, 12076, 10335, 6995, 
            5893, 8496, 7138, 9041, 8432, 10327, 7660, 7557, 6934, 13698, 
            8340, 12537, 5614, 3869, 8849, 3867, 9863, 12518, 3935, 6182, 
            9924, 8192, 2982, 1357, 6331, 408, 4060, 12556, 6412, 12399, 7435,
             12320, 3969, 12422, 6373, 10282, 3055, 12607, 9219, 1773, 12423, 
            11741, 10824, 6687, 13190, 9435, 3327, 7851, 7117, 11107}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDcTLlqraL1yg
YP/xwwfbSRMF7RsbGGw7OzrsGKBg6hQR+69fSuxh/IMHDtju3GFht3fPHrvP
nz7Ztbex2fd0c4Plv3/7ZtfcxGT/+9cvOxB74gQB+4cPHtgCzQTLg/i9PT12
X798AasDie3dY2P372+t/d8/f8DqDx5wsHv96pVdRzu7/csXL+yA+m02bzIC
q926ZYvd3z81QPEMuHtAdvf18oLV9vbw2E+eJGQPMvPEcXegWQdsgObZgNQt
X7bMDuSv///q7J8+SbED+Qsk3tnBYdfdxWV/8cIFW5AbQPaBxK9fuwZi27a2
sMDU2W/csMEWZN7/f//sPn4osPv1s9L+1ElPsD0/f/ywBZm9epUWyC227W1t
dksWK4PC0wbk16NHjtg1NjRYr161Chy2ID/v3LHD7sb1cKC5BnYrlquD/QCS
A6qznThhgh0oLID67UB2//xRYQ8ACI3LfA==
           "], 
          "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYHcXdisGtoJiYPuw+6EPUDbdnm7O/2E3dnd3d3d3d7ee
Tz/cbbeLTR0XSIsCxkdHFAhOTAyHg5NSYiKRPHZCKD0UjovP+PczI0T9pw/Z
6EV24shBPXJSkFzkI5oY9I+5+e5v8/DLvPz0h/kpwDe/+sXPFqIyhalEEUpR
lOIU44Of/GgJ3liSt773naUpTxnK8dqyvPKlL3xuBSryzKc+MZbHPvKhD6xC
LapSg2pU5773vOsda3LT296yNnWpwzVveN2rXrE+DbjsJS96wYa0pRGtaUxT
mnDGeM563nM2oxXNacFpT9mS4570hMc8ahsOecTDJrDBRNpx0AO2pzv7TaID
yeyzI3vtRGd2ucfddqEbO+3KDre7za32oCdb3OwmN9qbAOtdZwqrXesa+zKa
foygP0MYwGAGMohVrnSFy13mUocynGEscomLXegCg6STZSojSWMUIeY7z7nO
cbaznGkGM5zuNMcw1UymONm/IT/g4A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 
            2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 
            1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 
            2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 
            2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 
            1, 2, 2, 2, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9599, 11302, 72, 5397, 1745, 7843, 3311, 4799,
             6231, 9180, 595, 873, 3293, 7314, 13104, 6281, 4221, 12566, 7531,
             12684, 7344, 7684, 4874, 99, 5446, 1115, 703, 13715, 11576, 
            10457, 2363, 3957, 11959, 1367, 1314, 11557, 10102, 4837, 9260, 
            13254, 1791, 10318, 10986, 10839, 8298, 10050, 12939, 11082, 3234,
             9180, 10046, 9279, 6520, 6997, 11426, 5914, 12907, 9656, 7644, 
            8557, 11952, 10576, 12698, 11187, 9301, 6911, 9073, 8690, 4727, 
            4213, 1293, 10840, 13655, 6306, 1201, 9340, 4359, 7291, 11883, 
            9436, 8558, 1812, 4556, 9944, 4879, 5503, 8976, 9233, 8733, 7217, 
            7346, 12525, 3893, 1835, 13391, 1048, 864, 8703, 8901, 11042, 
            9482, 6458, 7365, 9452, 5568, 10989, 5328}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDcS3b0XZ//ld
bb9yhYb9i+fp9mfPnLHraGe3nzpFxP75s2d2jQ0N1rNnSdnfvXPH7umTFLvu
Li77nz8q7Net1bXfvGmT3auXmfb///2z27nDwn77tm12a9fo2C1csMDm65cS
u+XLltk9fJAAxgcPHLD7/avKvrGBwQZkFkjvyxcvbDdu2GD7+NEjoD0MYPsm
Tphgd/PGDbv79+6B7Tp4wMGmv48P7J69e2xAZtuB7GtvYwO64weYBtoNNg9k
Vlcnp/3SJSpANXX2QO8xzJgubt/ZwWEP4oP0g/SCxI8eOWI3e9YsO6C/7f7+
qQH53+7ihQBboH12V6+E2O3ba2vf3NRk9/1bGdgekJ79+/bZrV61Cqhnhd20
qaL2IL+CwmfhAgV7EA0yB0jbfPzwAeQP28+fPtmB3AISe/smBxx+IDs+fSy0
//e3FuwuBigAhdnECQK2IDXr160D+qvNDuT3hw8egMSBbmGyBwC3TuUj
           "], 
          "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYHcXdisGtoJiYPuw+6EPUDbdnm7O/2E3dnd3d3d3d7ee
Tz/cbbeLTR0XSIsCxkdHFAhOTAyHg5NSYiKRPHZCKD0UjovP+PczI0T9ZxjZ
aEd2qpCDu+akArkoSzQvjKEUucmH5iEvv/zjb/NTggJ8sCAfLUQxClOUnxbh
h9/95le/WJzPfrIkb33vO0tThje+9pUvLUd5nvvMpz6xIpV5bCyPrMRDH3jf
e1alKdWIozr1qUEdalKLO962Nje85U3rUo/rXvOqV7xsAy550Qs25LyNaEw8
52zCWc942lM2ozXNacFJT9iSIx63Fcc8ahsSOGxbDnnQAyay3322pwdJdGCv
e+xINzrRlc50IZmd7naXO9zuNrfanU1ucbM96U8v+tGbvgTow0ZT2OB617nW
Na52lStd4QAGMpRBDGEwS13uMpe42EUudDjpjGAkQea5wFSynO9cRzHHEGnM
dLazzGA0M5zuNMcw1UymONm//S3g4A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
            2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 
            2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 
            1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 
            2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 
            2, 1, 1, 2, 1, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9522, 11304, 4305, 1354, 3332, 7078, 12791, 
            7040, 1567, 13520, 5409, 4122, 11042, 4854, 11607, 4870, 3932, 
            6159, 7830, 7658, 9540, 10080, 5748, 11140, 4820, 9075, 5057, 
            12958, 11988, 4107, 7902, 4652, 8831, 7997, 10428, 12014, 10951, 
            8900, 12003, 4372, 11564, 10353, 9403, 6607, 4385, 7807, 8168, 
            9402, 3085, 13385, 8794, 2913, 6479, 1602, 3928, 9306, 8787, 
            12612, 9048, 8768, 7762, 4363, 4715, 885, 7040, 6858, 9729, 3498, 
            4411, 2875, 1814, 12659, 3849, 6875, 5070, 9351, 10825, 4983, 
            7035, 7744, 6683, 4667, 9825, 9810, 11095, 11801, 4795, 6429, 
            6216, 10908, 9079, 7037, 13140, 4250, 7089, 10194, 5482, 8236, 
            13278, 12117, 3885, 7650, 4795, 9305, 6297, 7675, 3907, 9847, 
            5342, 7856, 10755}], "NumericalThresholds" -> CompressedData["
1:eJw1kN0rw2EUx39eYuKScuGCG5E73MjvOYe/QI1rmZALRfMuajJsXorZtBU1
N2yIG2oTM0VRZGooykt5vfOyzcw2zvmVi+fpPM9zzuf7fb559a3qpkRJktpV
tKk13ZVaraa3OoUPjZqWkuKWBCpbaa2uFGE8NoBul0ss2O3y0eGhGNTpyq+v
ruA73AN73goxPTUFs5Ys5DWok3ByIgNj0SgEAwGgs7y+tgbDej2MGdPw5PgY
7u/qBPcQXtrzeuWdbZk5MGMyAWkAv11eXIBhNBXP/X6YGE9nrsz1TyQCmxul
yB6Ys2DPha9QCJadhUrPwf4+aepkZgcDHXDm8wmLOZN9wPxcDvAdM2LRfnA6
ChQ/3Esz4vnpiWcF6537axS/FrMZbNZsNBpU+B0OC6fDAZ4dgTarFYiLzCL/
uLSYj6MjKcgZ/cbjwPlwzT7pj7DlLmPPMmkqeu9vbeA7rcJdjwc+Pz7IUx++
vjSDfihJyZHzY8bjQwO9azEU7ETOmhn0b6TMxbA+GW9vapV+o8FAOXT9Zwqc
+R8SVOkZ
           "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wwO4u7FYM7MDGFuy+6AUs2NDN+S/s7u7u7u7u7u7W49WH
821n3+OJTEiNSwwDRoWHJi4wJiYtLTA2PiIksSmjg0nBtKjo5H9/aoiw/wwm
HS1JT24ykBH9YyayEM53I8jMb3/50x9m5b3Z+GB2cpGDz+bki9/86ic/moeC
5CUf73xrfgrwxte+8qWFKE9hSlGEorzwucUoSXFK8MynPvGxkTzwkQ8tzS3v
W4ay3LYcd7znXStQmYpU4qY3vO41q7DHqtSmGjWpThRXrcEVL3vJi16wFuc9
Zx3qEc0p63Las56xPnttQGNO2pATNuK4x2xCDE1pxlGPeNhDHrQ5B2zBfvfZ
irbstjVt2OEudxpLL9rRge22Z5tb7Uh3OhFHZ7rShU1ucbMb3WA8a+zGWte7
zh70ZLWrXOkKe5NAHwbQl34sd5n9WexSlziQAIscxEIXON95znWOQxjGbIPM
MpEkkpnpDIcy1elOczgjGcEkpzjZlFC5iU5wvOP8C4xC6Nw=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 
            2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 
            2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 
            2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 
            1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11943, 774, 2766, 6783, 8401, 10348, 1320, 
            6709, 5670, 13121, 12861, 1190, 7841, 13231, 4649, 10799, 6459, 
            1763, 8619, 12334, 3637, 2589, 12345, 3438, 12163, 11670, 13147, 
            6236, 9681, 4002, 6287, 3867, 4331, 4731, 8703, 5362, 5186, 11362,
             8626, 7391, 9798, 2728, 195, 11281, 3130, 1024, 7502, 5182, 7492,
             4478, 8364, 7405, 10155, 8537, 7671, 11521, 7876, 12558, 8668, 
            3843, 11901, 10934, 7992, 10509, 12170, 11460, 5716, 10877, 7145, 
            3977, 13501, 11822, 6958, 7615, 1652, 11717, 5297, 5788, 8861, 
            3167, 10159, 163, 12988, 7624, 12500, 7024, 12463, 10138, 5134, 
            5738, 4573, 4609, 9362, 7521, 8261, 7154, 10871, 9725, 9713}], 
          "NumericalThresholds" -> CompressedData["
1:eJw1kM1LAmEQxreokKCICOoUBB07Zbd2Zyq6dbN/IAs7CYUVZYcw0Cgl86PU
LmVQYFBmZGY3P8HUwP4DOxR2U0jTAmvmhQ7v7ruzz/N7ZmZofkmz2CpJ0oqK
Hhrt+qTBoDXOdvCHTqtXj+pb6LpA5/1Nh/b9Ljz2+ZTwnRpfi0Vwu1zQqNfh
+moEtk2SHI9NyJXyMiQTCTjz+4G0dAbwJhiE05NB3NtVodvVK96/zSY4HT1w
Hx6D21AIKEKyWTuZq1jMZnjO54lpGn+MRoG1XP8olThHecpkFPon26xWZiiX
gYDCfsoXde6lUi5DPjdDvDmofq7Cgb1bZLKONVRX0qlpkcEzMePf63Q44CES
EdpGfUN4+Z5MTOHF+TB75JdCgfrawp/vTfR6PGIW4uF3w4gWcxvSXBiPxWTW
cO+8m1p1DYmHvDPaD2WZ4OiwD3Ys7chM5qRTKeYrX7Wa2Av1gz5vv/CxPpfN
wh/+6M4S
           "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wALs7MDERBWwFBRHbiygqiheH+qTb1c35X+zuxgI7sAu7
UOwu7DhefTjfdvY9npi8uYGZEcC8yPAEggtSQqHgwsyosGTMmZ8/Kz8UnzT7
3z8jTMR/hlKBNlQkikpUoTK/1T/+MpKf/jCamlSlGt/9ZnVq8NUvfrbcWpRa
m+bU4Zl1eW49XlifpnyyAQ1pTCPe+9EPvrMJb31jM1762le2oBVPbckTHxtD
ax5Z5kMf2JZOtKM9971nBzpy11jueNtb3rQzcXShKze8bjdKvOZVu9OPeHrT
g7P25JwJJHLFyybRi0te9ILn7UNfznjaUxbbn8EMYCAnPeEgUjhuMsc86hEP
O4Q0UjngIQ9aZKHpTGcYI8hgOPvd5173OJIsRrHZ0WQyhrHstsBxBNjlTne4
3W2OZ6tbnMAUJjKZbCaxyY1ucL3rXOsac1jtVKax3FXmstIVBllkXrjEMpe6
xMX+BaFc0Og=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 
            2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 
            2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 
            1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 
            2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{12603, 8733, 12726, 1112, 6183, 4781, 6159, 
            8170, 9991, 2519, 7101, 5010, 4276, 1154, 920, 9500, 7627, 5516, 
            13067, 6403, 11523, 5418, 10509, 5334, 8500, 11127, 10461, 8817, 
            7450, 4515, 4666, 9023, 11670, 7848, 6297, 5726, 11151, 13503, 
            4784, 5374, 9333, 8926, 8691, 6345, 7021, 6874, 3085, 11636, 4679,
             3318, 4854, 5834, 5931, 7540, 9473, 7051, 5365, 7485, 7716, 6562,
             8791, 10345, 3285, 11555, 4122, 13317, 2669, 6985, 9534, 11094, 
            6201, 10498, 7812, 11859, 5398, 3196, 9620, 10846, 11505, 10952, 
            84, 8772, 9672, 5589, 6571, 7956, 13491, 3989, 3086, 6609, 13069, 
            9923, 4559, 10783, 4234, 7572, 7385, 5472, 11004, 12392, 4735}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZCsSrVmraz58n
Z39gv73950+f7H7++GF78MABm79//tg9fPDAprGhwXrhggU2ILHdu3bZgdj/
/tbaNzcx2U/o57cHitu9f/fOrquT0/7mjRt2W7dssZs4QcAeaDTDxw8F9v19
fGA1J094gMy2A4n39vTYPX/2zO7pkxS7nm5u+8YGBvuNGzbYrl2jY///Xx2I
bzNlsrD9zx8V9iA9a1ZrA81wsDl+7Jgd0D02///9s+vt4QGqa7A7e+YM0NwK
u+4uLvu9e2zA4t1dXSB11lA3gO08e8bHbueOHbZAebuPHz7Ynj93Duy/79++
2YH8AXLL3Tt37ED2zJwxw661hQVkvjXIL3//1NiD/DV1yhS779/K7IFitiB3
3rwRYQcKJ6B5dqCw+/2ryv7P72r7nTss7EBh9PBBgu3pU6fAciB9IHNAbl24
QMFu7hwZcBiB/N/Z0QHWC+JPnyZmDwBM6dyU
           "], 
          "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YhC3YhY2NgR3Y2D6wwHroUz/p9nRz/hW7uxMLVLBQsbtb
7G49n364226XmD07MD0KmBMdUSA4LzUcDs5Pj4lE2qy5oRmhcHLKzH8/FCHq
PyMowVBK0p1S1KY0MZQhGv3jb38ZS3niKMdPy/LD737zqxV4bkVqUYmaVKYq
VfhgPB9N4JNf/Gw1XludGrz3nW994ytf+sJi69CWujSiHvV55lMTaUgDHvnE
xz70gY1pQxOuet+mNOOa90yiOS25awvueNtWtOaWN73hda942WS60I4ULtme
i3bggh057zk70Zkiz3rG0xbalVN246Qn7EF/etKH4/aiN6kcs8B8j9qXfhzx
sHnmOoCBHPKggxjCAdMYTI773ede9ziM4ex2lzvd4UjGMop0Amx1u9vMYAyj
2eQWN7vRDY4ji/Fkst51rnWNE5jERFa62lVOJsgUlrnC5WYzlaUucbHTWGSI
hS7wLy/i1OY=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 
            2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 
            2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 
            2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 
            2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9515, 13494, 8451, 4183, 11402, 529, 459, 
            2474, 3254, 416, 9816, 9391, 13625, 9621, 5717, 8889, 1727, 1828, 
            6409, 844, 11499, 7199, 1763, 312, 11584, 12822, 10781, 13506, 
            2124, 12077, 11908, 2835, 10994, 8546, 4289, 3582, 7671, 2389, 
            11870, 10381, 6148, 2188, 6882, 8557, 3189, 1864, 4003, 2214, 
            1653, 2754, 6791, 4637, 8862, 9729, 12789, 7344, 8333, 6450, 
            11783, 9436, 8915, 6378, 11999, 8977, 11640, 6668, 8949, 8659, 
            10777, 8451, 12798, 4236, 13304, 5534, 10018, 5700, 5636, 11151, 
            4109, 5602, 12579, 10476, 12295, 9746, 6593, 4708, 9392, 12292, 
            8616, 6336, 4502, 11727, 4188, 12019, 291, 6052, 9079, 7111, 
            11114, 6948, 9110, 11787, 4135, 5814, 5256, 1844, 6824, 9487, 
            4818}], "NumericalThresholds" -> CompressedData["
1:eJw1UFsow1EY/5PcH8irB1JeZR79z/elPHjUvHjwYIo8TK7lFm1zGdvUhuaF
2kXMk9sL5VoUM0XNUMz2RjGbtmI3znfKqXM633e+3+2Ut3UrOzIlSerP5YdS
NVjX16cabsqmol2lrlGoM/i1i++d7Wp8fmpBrUYj2202mbekRHwEd3cUGAn3
MKp12gy0mIuY0WCAy4sGmDMV4pXbDedn9WgyFuBvOg2LCyU4bynGwwMZjIZ8
nJrMwlVnBRpm84gHPt7V8PM9BG+vnWAxmxnng3ufDx4fmoHuwUCA6aezkc+Q
l9pgoBVI+zMUgg2Xi3FedDocEAmHBQ/nh69IL9LMktUKv+lxgVtZLkW7rYyR
R55LcJyenMgcx2LRAVFTDs7PtBpJfvH7RY/w5CMRjwPpTOh0cOf1wv875yOP
EItGgfLQHOE5Bknr2uMB+sPbm0bqC8yMPgf39/YY7wmtVDIJ5C2dGhO+aR0f
Aa6vVYp6a7MKjw6Z+FOuRdyMclJ2ek8mRpE4/gCr1tHM
           "], 
          "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYHcXdisGdmBj+7D7oYSBbk8359+wC7u7u7u7u7u7z6cf
7rbbRSeOCSRHAGMjwwoEx8eFQsEJCVHhiB89LiklKRQTm/rvp4WJ+E8yGahC
RrKSiSxoZv7420ii+OVPf/jdbJQlOznJwRe/+dVcRJObEuShOHl5YT6Kkp83
FuCtny1IId5ZmPcW4YOf/Ohri/HKlz73mSUpxVOfWJqHPvaRZbjnA+9bjvLc
9Y4VqMRtK3LLm1bmmje8blViqUZNqlODq17xspesRR1iOGdtznvRC9bllGet
xxlPW59mNKAJJ21IIxpzwuMe86hHbMphD9mcbrSgNXG05KAH3G8r9rnXNnSk
LR1oR3v2uNt4drjLnW53m53ozFa32IUNbrYrm9xod/oRYJkJ9KEHvelJL9a7
zrWucbWr7MtyV7rC/gxiAANZ6hIXu8jBDGGhC5xvkHkmMpQk5jqMOaY721mm
MIJUpjnT4cxwuiMZxVSnONk0JjnRv94Q5N4=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 
            1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 
            1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 
            2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 
            1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 
            2, 2, 1, 2, 2, 2, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11181, 8475, 5946, 12978, 4845, 4765, 5662, 
            7987, 5084, 10944, 8996, 9213, 791, 7368, 8919, 738, 12364, 13384,
             496, 9534, 13233, 2483, 11909, 8418, 9524, 5592, 13281, 11941, 
            10127, 10236, 11237, 11839, 7483, 5522, 7350, 4569, 10374, 6639, 
            4288, 7392, 4987, 11688, 7354, 12608, 7428, 6358, 10170, 7245, 
            10746, 7899, 8204, 7533, 7193, 8325, 7943, 13736, 13728, 4708, 
            6273, 7697, 9953, 11296, 8655, 5358, 4773, 4946, 9611, 5427, 5290,
             11187, 5601, 9396, 2415, 5390, 13116, 12081, 7215, 9552, 9041, 
            12686, 12409, 991, 12683, 2065, 6491, 9485, 8700, 8428, 6019, 
            11167, 2992, 9283, 9504, 5670, 3555, 12295, 9348, 12251, 8942, 
            9549, 10052, 12540, 5307}], 
          "NumericalThresholds" -> CompressedData["
1:eJwdkUsvQ1EQxy/xWoiQSBALmlhaCJb3zvAFRFgTlXgsmkhqIR4Rr1YlHiVo
PdKHtFUJiUdbtaHYFx9AtUkVSZF4VLXVmrmLc3Jm5vzm/z9zFN0Dbb3ZgiAM
FtDWphxqVquVw+15HPQoVQ31qiw69tH6S43hjlWBR4d10m88DttblfgTi4Fm
JgcnJwRRN5uPC/OF+JdKwVMkAmaTCSiPWk0uXl9dgdViEVeWS3DP6QSLuQqt
lmqZ//76ArerEd7f3uA1GgXmSU4483rh8+MDdh0O2DCW49rqKvcTuWZYX4fp
qWxMJhLAXtgT9ZN1L31N0mM4DJn0OIaCXdKyvpjYUvI4wTyEgkGRvEh0T2Rt
4iSqcU58ee4H9svemefc5kYFsibfd7tcMp9KjuLBfi3M6XRSJp0Go6EML30+
kTxLzJAe0DtJWy9dnANri3abDW78LXIvjtlb4L4D7bYaWFoskud2clwv15lh
LX7Hjd8vz4PmDPwHd7et8BDoxFmtFpKJETz1eOAfCzzaOA==
           "], 
          "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwETsFuwWAztQQME+7D70OJ905nTG8U/sTsQO7O7u7u7u
Wk8fdmd2NjFnSiA3BpgaG1UgOD01EgnOyI6LRubkaaFwKJKcMunfD0eJ+c9Q
CjGIwpSlCMUoym/1j7HEE0cJivPDX/60JGUoRWm++82vfvGzn/zoBxNoTjlq
U56qVOClFXllJV5bmTe+twrvfGs1alGdmrywBs995lOf+NhHJtKMJBpQh3o8
tC4PvO8963PXOzakMbdtxC1v2oSm3PC617zqFS/bgm60pCvJdKEVrbnkRdvQ
gQu25bwptKM95zzrGU97yo6ctBOdOeYJj3vUIx72kN0ZyEFT6UEaPdnnAfeb
ziYz6M1ee7HH3WYygCz6sMud9qUfO9xuf7a6zQK3uNmNbjDAYNabzTrXusYh
5LvaYYQYzhhGMJI8V7nSUaxwNMtd5liCLHUcSxzPYhe50BwWOIH5TmSec51j
LrMNM8uZ/gXs0Njk
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 
            1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 
            2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 
            1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 
            2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 
            2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11260, 9348, 9991, 12009, 8958, 12837, 1688, 
            10714, 11553, 10986, 9177, 12070, 5986, 7915, 11959, 12643, 4502, 
            5323, 8851, 7826, 4977, 12363, 4592, 5660, 4970, 13228, 10016, 
            8970, 7056, 13493, 10418, 8073, 8552, 783, 2715, 11386, 13095, 
            8907, 6559, 10269, 11080, 10896, 11692, 9260, 4689, 7026, 12289, 
            4882, 13176, 4337, 13761, 10828, 10719, 9272, 12128, 8943, 7073, 
            9917, 10749, 1584, 11216, 11616, 3934, 11617, 3247, 7610, 342, 
            1683, 13441, 5167, 13613, 5770, 6182, 6962, 11829, 4948, 10071, 
            5704, 7224, 5731, 5968, 6207, 7005, 7739, 10147, 8966, 10276, 
            12561, 4426, 6031, 9985, 6006, 6150, 8220, 3353, 7273, 4967, 
            11648, 11665, 8151, 2177, 10263, 5344, 4201, 7562, 9994}], 
          "NumericalThresholds" -> CompressedData["
1:eJwdkMsvA1EUxscjJfEIYmPHCokVSzPnsPAP1NamEhYiISURgrRRWn1piwSL
mhbRCjuPjUebtFKbStrakdQ/UFW0TNupe+7i3DuT+53v/L7TNT6jnawWBGGu
nh1a3cKwXq9bHNXQz4RueqB/uop9TrFSyyt4sN+BRoNh8OK8Dx/uAR32RjAa
BJE9C+XSMhQVBQKn3Xh1eQmkDYdCok+WxUI+DxV1Fd2uFimZ0OJnNgubFotU
LpVYv0GMRiKwbqpF8iL/k+NjYFp4SaVgd6edz7XbGtC8oUHlbxFpBtOiT+6U
nmIxXl+5HNBN/VTE8hyPw/7enkSzgoEeYCwQDg1JRWUJnY4m9LhbkdiJ4eb6
mt5FloO44SzYy/xl7veRyXC+u1sRfwsLPMfP9zzTDfHslG3b04ZsFjxGR1i+
WenI76fdoM1qBWKjjFvOZs5NbOTLPIiPc5OO8lPvodcLFnMdvqfTfEc0IxgI
SKa1Gtq/mEwkeA7yqqgqULldLnh7HcN/k8jfLQ==
           "], 
          "Children" -> CompressedData["
1:eJwdkVVTFAAABnewwMTuQLETAztQDGwPuw89QB905nTG8YfY3WAndnd3d3d3
rqcP+83sfI8blzYxkB4FTIqOTCA4JSkcDk5NjYlIyoTJoYxQOCEx898/PkLU
f3qQi2RyU5w8FCUvseQjBo3mj7/NTwF++dOCFKYQ3/zhd4vw2a9+8ZMfLcY7
P/jeEnSkJC0pRSVKU563lqEsLy3HK9/42gpU5IXPfeZTK1ODKlQnjvtW5YHV
iOeJj33kQ+9515rUpRZ1uGNtbnvLm96wHgnUpwHXvWZDLnnVRlzxso1pwkUv
eN6mNOOk50ykOadswWnPesZWJNGaNpzwuG1pxzGP2p4OHPGwhzzoAfe7z07s
dY+d6UYXdrjbruxypynkuN3ubHOrPRlFLwbSmz5scbN9CdCPDW5yo6mstj8D
WO8617rGQQxmlSsdwlCyzXIYI1jhcJa7zKWOZImLHU0aQRa4yIWOidQYSzrz
DTHPuWaQyRxnO44ZznKm053mXxrS3uE=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 
            2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 
            2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 
            2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 
            1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 
            2, 1, 1, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11262, 8940, 12079, 12322, 4999, 10277, 5845, 
            7546, 6310, 12605, 10839, 6334, 9042, 7894, 4681, 7535, 4648, 
            7936, 9480, 7728, 13493, 3082, 5079, 6252, 3404, 8871, 13429, 
            6423, 1149, 1807, 12574, 1040, 10806, 10734, 2387, 11274, 8837, 
            1453, 12300, 13208, 11492, 5522, 3426, 7450, 9966, 11906, 7986, 
            3095, 69, 9263, 4376, 4612, 10386, 6852, 10559, 12332, 8907, 
            12778, 4197, 5337, 9150, 5378, 2439, 9743, 9330, 10380, 8050, 
            5693, 5010, 10458, 4152, 6577, 6381, 11067, 12612, 661, 9900, 
            5686, 4543, 12591, 12510, 13478, 3976, 6483, 6724, 12596, 9533, 
            2505, 3678, 8824, 7649, 11306, 12461, 6149, 9305, 6401, 8400, 
            5164, 13491, 1857, 12333, 10161, 7345, 6215, 8379}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZCcT//tba//zx
w/bmjQj7ly9e2B49csSusaHBprenx+7hgwTbzo4Ou+PHjtkdPOBgA1TOAJJr
b2sDqbEF8WfPmmX38cMH2+3bzOwnThCwv37tGkjOGqSnrZXV/u6dGCCfwf7k
CQ+72bOk7Lu7uOzPnztnN6Gf3/77t292/X18IH0g88HqQGYC7QWzN2/aZHdg
v709yLyfPyrsfv2stL94IcBuxnRxe5h7YPoOHjhg8/FDgV1TI6N9a0uL3e9f
v+yam5pA5toC5W1AGKQe5A6gWWAzQfZ//fIFiEvsLl64YAsSX7lCww6kbu6c
OXbtbWz2IP+BzF62VNV+4YIFNk8eJ9uDzFq4QMEW5B+Q/p5ubvvXr16Bw2jq
FBGQe2yA4Wm3c8cOO5B5oDAD+tEWFNYgf79/9w7kBrvp06YB/d9nd/VKiN2P
7+X2oLC/fOkSOLwnTphgB/H3D1sAAbLXyg==
           "], 
          "Children" -> CompressedData["
1:eJwdkFVTFAAABnfAALu7sFsxsOMMFNvD7kMP8EVnTmcc/4gFdndhd3d3d3e3
68nDfjM739smpE0OpscAU+KiEwxNC0Qioemp8VFJmTQ1nBGOJCZl/v8nRonJ
pTexlCQPRclLQfJRgPzEoX+N55d//O1Pf1iIwnz3m18twhc/W4zifPKjJXjn
B99bil6UJpky1KMslShHed76xgpU5LWvfOkLK3PLKtShKjWpxiMTqEF1nvrc
Zz7xsbWozUMfeN971uW2d71jfZrSgEbctCE3vO41G9OEy171iok045IXbU4X
WtCelrQhidZcsBXnPedZz9iWdpz2lCc94XE7cMyOdKIzRz1igIMe9pBd6cYB
99udPe5zr7vtQU9S2OVOd7jdbW61D6PoSz+2mGN/BjOAIAPZ6GY3ucFUBrHW
9a5zCMMZyjDWuNpVrnQEI1nhcpe51CWOZky0/FjSGccEQqSx2EUudDwLnG+Y
bOc51wwyyXKOs53lTGf4D/ch3OI=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 
            2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 
            2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 
            1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 
            1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 
            2, 1, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10755, 12183, 8893, 9579, 12580, 6439, 2707, 
            13130, 3015, 2208, 4417, 11328, 5367, 11188, 11835, 5823, 11889, 
            11880, 992, 5446, 6856, 13505, 1595, 12007, 7395, 3772, 8449, 
            12461, 5226, 7799, 6639, 4935, 4720, 6330, 7507, 6209, 176, 3122, 
            1592, 3526, 4198, 1598, 5460, 7820, 9241, 11775, 13061, 1867, 
            2924, 838, 6826, 6249, 8658, 10012, 11096, 12567, 7890, 11110, 
            4891, 9462, 8120, 7698, 6809, 2428, 3894, 8616, 6326, 10796, 3075,
             10387, 6679, 3504, 7481, 7589, 6022, 6703, 4937, 12319, 12469, 
            8206, 12019, 6479, 10989, 7359, 9787, 3564, 9997, 12085, 9365, 
            11786, 8477, 7034, 11196, 6445, 3967, 10091, 10997, 7133, 11777, 
            10814, 11773, 9076, 7168, 5446, 6920, 8219, 8632, 10115}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZA8R378TYnTzh
YdfYwGDz9EmK3c0bEfbTp02ze/8uz/7Tx0L7iRMEbD9+KLA9e8bHDqicAcR/
9DDR/uKFANvDhw7ZHTzgYNPZ0WF76qSn/d49NnZ//9TYv3yRYd/awmIH1GN/
88YNW5B5G9br23d3cdn/+V1tD9KzbKmq/dUrIWAz29vY7Ht7eEB6gW45YQfi
g8RBbKC7QHbY9vfx2fd0c9tPmSxs///fP7vODg775iYmoFkHbBYuWGALtNv+
44cPdlOniNg/fPDAprGhAeQuu58/ftiB2EePHLED6Xv4IMEWRK9coQHW+/3b
NzuQmSC1c+fI2G3dsgXspiOHne1nzpCw27XTEuy2tWt07D5/+mQHCw+gu8D+
AKkF+hXsJpB7IO4GhWeD9b+/tfagcAXaCfYbyI0gPsi9IHUgNd1dXWD7QGH4
+1eVPUjs548KUFja//pZab90iYo9RC0D2C4AEVHSFg==
           "], 
          "Children" -> CompressedData["
1:eJwdkcVuFAAABSfFWrS4S3GHIsWleHG2uG9h2yKBZCEhfAeuxd3d3d3d3d1t
WDjMSybvOHEpYwOpUcC46MgEghMSw+HgxOSYiCSNGR9KC4XjE9L//aMjRP2n
EJnIgmbmj7/NSn6ykYdoPhlDbrKTk1/m4Kc//G4uvvnVL342lrx89IPvzcc7
3/rGAhTkpa99ZWHqU4SyFOWexSjOC59bgjhK8tBnlqI0ZXjqEx/7yAfetxx1
KU81KlCVilShEre8a2XueNub3vC616zOWWtwzpqctxZ1qE08V73iZS950QvW
45RnPG0CI2lABxrSgkY05qQnbEJTjnvMZjTnqEc87CFb0pqDJnLAVux3n23Y
YVvas9d27HG3u9xpEp3oyFa3u83O9KYLPelKgG50Z4ub7cEGN7nRZNa63nX2
YpVrXO1K+9CXgfRjACvsz3KXudQlDmKagxnCYhc5lOEEGUYK813oAueZYYjp
ppLGXOeYzgxHMNPZznKqoyK9JjnFyf4F7B/i3w==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 
            2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 
            2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 
            1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 
            1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 
            1, 1, 1, 2, 1, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11252, 8763, 10453, 12787, 8451, 12298, 13551,
             430, 6621, 1990, 8018, 7617, 2328, 10907, 8138, 11475, 8652, 
            3210, 10337, 4041, 8531, 7836, 11307, 11034, 7529, 6184, 9628, 
            9232, 8351, 8834, 5535, 9687, 5387, 11266, 11048, 6755, 6995, 
            11757, 4420, 9997, 11943, 12754, 7955, 12792, 13486, 2055, 5049, 
            2296, 6039, 10442, 6924, 5919, 13326, 6521, 11437, 10057, 11823, 
            257, 10276, 13327, 3496, 3653, 9676, 5078, 5586, 10189, 10128, 
            6194, 11072, 7010, 5408, 13128, 2409, 1049, 12297, 11836, 4611, 
            7161, 774, 10963, 9285, 6439, 12709, 12507, 2498, 4646, 12156, 
            2328, 12642, 12006, 6987, 4874, 4088, 4027, 8758, 7905, 4644, 
            7513, 8777, 7177, 2949, 8689, 9669, 9001, 7619, 5411, 2801}], 
          "NumericalThresholds" -> CompressedData["
1:eJwtUDssg2EU/ZFIBQmTReI1WIXR/91LYjQIIhJTJSyaVBAqKakSWo9qLSoh
qhWq3rtHJbVRbeJRYWAn6tlf0uLeL4bvec4995xb0m5s7ExXFKVXR1ujfqC2
p0c/2JTJjw69oarSkEbXLlo/qSH0eUvR5XSKm+sWPAnWwIjFUs3LbrOJq8tm
IJry+PCgnobqYMHtFo6ZXDwNheDzo09ixBWpZBJmpnPw+OgIXM48mLRnSU2q
E4zPOhySP2q1wmu8G56fDHTG5cn4xHgm/v4M4/lZPbAHz3IRexG3sRjYbTrk
GtbnfvxOfH1xH/zWNGEdSUOuPwkGVe7xrZlASwxgNBKBOVc+Ug6YnsrGVV/Z
f71NEFfs7uzI//W1NfKVTjwdbAYC4F8vJ10T9ehHnsPhgYrvb29wf9eGS4uF
sOIpxviLkf2ppEP+FdU9X4C3sVZIJc2ci+Zhlh59Xi//SR32xfhFOAzbW1vA
MxsbzZDYht8vddgf5aLcrZRpHKKRBrG/VyFn8wegZeBt
           "], 
          "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYHcXdisGtoJiYPuw+6EPUDbdnm7O/2E3dnd3d3d3d7ee
Tz/cbbeLTR0XSIsCxkdHFAhOTAyHg5NSYiKRPHZCKD0UjovP+PczI0T9pxvZ
6Ex2apCDSuQkD7mIRv8YQ25++8uf/jAvxfluPr6ZnwK8tSCF+WohvvjZTxah
KO8sxns/+sESlKIkr3zja0tThpe+sCwVKUcFnlueZz71iY+N5YGPfGhlqnDf
e1alOtW47V3veMub1qQxtahPbepxwzrU5arXveYVL9uAhlwyjotesBFnPe85
m9CcM8bTlGac9pQnPWELOtCS1rTiqMc9ZhsSOGJbDnvIRNpx0AO2Z49J7HW/
+9xtR3bZiZ3uMJmubLcL29zqFjfbnVR60IuebHCTG+1NPwL0JYU+rHeda13j
alfZnyGsdAADGcQKl7vMwSx1iUMJMowRDGehi13kArOc7zxHEmIUs53rHNNI
Z5YzzWA0M5zuNMcw1UymONm/b6/g4A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 
            1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 
            1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 
            2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 
            2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 
            2, 2, 1, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9483, 12031, 12799, 3868, 4676, 10284, 10110, 
            9536, 11226, 4452, 4181, 6376, 8797, 10504, 8119, 11841, 5823, 
            9514, 11987, 2610, 8512, 13571, 8892, 7899, 11970, 11151, 4057, 
            7090, 2513, 12949, 5499, 7083, 7090, 4789, 11524, 2503, 8933, 
            6945, 12576, 4536, 9507, 5167, 2315, 12007, 12993, 9079, 2001, 
            1842, 4268, 12846, 6377, 13320, 11432, 6423, 6756, 7364, 8012, 
            6618, 4846, 7698, 12953, 10135, 3914, 11847, 7413, 9364, 11941, 
            9015, 4535, 11208, 996, 10433, 12690, 5267, 5324, 5496, 10756, 
            8414, 4036, 5989, 5472, 7231, 3005, 7598, 11050, 5082, 7955, 7223,
             11386, 10855, 10756, 5791, 8151, 4507, 11763, 7903, 9968, 7163, 
            9541, 2843, 10602, 9670, 12714, 11832, 9425, 7051, 10041}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDcQ7tpvbP3+W
Zn/xQoBtfx+ffW8Pjz1QmGHhggU2IPr7t292b9/k2IHYU6eI2D988MAGhA8e
cADLg/Q0NzXZXbxwwfbggQM2O3fssFu5YoVdRzu7fXcXl31jQ4PN2zdvgGIa
dkA9dnPnyIDU2gHFrUH6GxsYbHp7ekByNidPeNgBzbb9++eP3dYtJnZNjYz2
IPE/v6vBZsHcs2G9vj3QfXYgu1tbWIBsBbDd69ets/vxvdweZObECQJ2XZ2c
9vPnzQPTnz8V2YP0/vxRATYHZO7GDRtsb964YQfUb7d8mZo9yF6QXFsrK9De
A7ZQdWC3fv3yxQ4kD7IH5F6g+bbAsALKMdh3dnCA9X35XAwMCyZ7SFhNsVu7
RscO5HYQ/+mTJyB7bEF2gsLj9KlTYPOOHztmB/LD5EmT7P7/q7NfsVzd/umT
FHuYPkj4QOIEAHS5yxE=
           "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wwO4uVOzCwA5sFOti90UvoG66Xd2c/8PuLsTu7u7u7u7W
49WH821n3+OJTR0fSIsCJkRHJhCclBgOByenxEQkadzEUHooHJ+Q8e8fGyHq
P6PIRguyU5kcVCQn5clFXqKJQf+Ymx/m4ae//WU+npqfEhSgCAUpxHe/WZjP
fvWLRSnGJz9anHd+8L0lKUMpSvPWN772lWUpx0tf+NxnPrECj31kLJV46APv
e88q1CKOalTltne9Y3Vqcssa3PSG171mbRpTh/rUpR5XveJlLxnPGRvQiIac
96IXPOdZE2jKaZtwypM2ozknPO4xj9qSIK1ozxFbc9g2HLItibTjoAfc7z47
0IOOdGavndjjbruQxC532pXNdiOZHW63O1vc5lZ7EqAXvdnkRje43hQG0oe+
rHOt/ejPGrMcwCpXm+kgBrPSFQ5hBEMZxnKXOZzFLnWJi1zoAlOZ70jmOdcQ
o5ljGulkMNtZznSG0x0TaTXFaU71L3nU4OA=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 
            2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 
            2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 
            1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 
            2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 
            1, 2, 2, 1, 2, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11175, 8667, 2307, 12063, 10051, 11596, 11590,
             10862, 11007, 3063, 12456, 11279, 9403, 1328, 3098, 11607, 11789,
             7342, 7187, 7243, 3988, 9989, 9953, 3866, 10248, 3920, 1497, 
            7305, 7783, 8657, 12367, 7935, 1541, 11022, 5601, 13, 7011, 5811, 
            13171, 6362, 11930, 8328, 8875, 4880, 12582, 6119, 9098, 3156, 
            3953, 8739, 4822, 7908, 4275, 7512, 7796, 8639, 11273, 6205, 
            10938, 9393, 11226, 5634, 6450, 3900, 10460, 9099, 2145, 11076, 
            3867, 4411, 5696, 11022, 3946, 7746, 11072, 7110, 8027, 8027, 
            13021, 8577, 10394, 6296, 9463, 5772, 3936, 3930, 11886, 6820, 
            6302, 11815, 9059, 11104, 4827, 5208, 7001, 4692, 8770, 4744, 
            1814, 6809, 5916, 3958}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZBsR//9TYz50j
Y//0SYrdmdPe9kAhhsWLFtndvHHDbuGCBXYTJwjYgcQ+figA05MnCdlv3LDB
7vy5c3aNDQ22QLYtSG7ihAlA9Qpgc7Zu2WI3c4aE3fNnz+xu37pl9/PHD7uN
Gwxs+/v47F++eAEy1+bgAQcboH67hw8SbPfu2WPX1clpv36dnn1jA4PN2jVr
wHbNmytr39PNbb9/3z67zo4Ou////tn19fLaA91sN3fOHKAbI+wOHzpk197G
Zv/1S4nd2jU6dlOniIDVbd+2ze7ihQA7kJ0XL1wAu6G7iwvsP5BZd+/cAfMn
9PMD7WywAbl3+rRpQD8x2G/etAlsT1Mjo/3SJSpgP/z+VWUPdLP9q5eZ9idP
nLAFmbNyxQqgPWb2IP+C3Nrbw2Pf3MRk//vXLztgmNiCzAXZC1K7d48N0M4Y
sD/WrNa2B4VBSzMz2G2XL12yA8UD0G7bL5+L7Y8eOWIHAEzt0Nk=
           "], 
          "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
fzIpwhCKUo5ilKQ4JdA/xhLHb3/50x+WojTf/eZXy/DFsnz2k+VpTAUqU5FK
fPSD731nFW5alQSqUZe3VqcGz6xJLd742lfWpg7PfekL6xFPfR771Cc24IGP
fGgiSTTkjo24633vedtbNmEgTUmjGe1oThtacMmWXLYVrbnhda+ZzFWv2Jbz
XvSC7elKCh0451k70plOnLbQM3bhhKc8aTf60p2eHLcHxzxqKvvtRR+O2JvD
HvKgB+zHHve51/7sNJ1dFjiAfHc7iK0OJoM8d7jdbQ5lGFvMNcAmN5vjcCaT
RZARTGIk49joKDY4mjGscb1jWedaxzOB1a5ypRNZ4XKXudQlZrPYRU4hxEIX
GGau853nX1dK1uU=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 
            1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
            1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 
            2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 
            2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 
            2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{12291, 12932, 7364, 2304, 6561, 7321, 2829, 
            4659, 13459, 2177, 11983, 12574, 7169, 9229, 6901, 6155, 5393, 
            3043, 4645, 3457, 923, 11704, 9158, 8337, 2894, 13332, 6330, 7639,
             4529, 10004, 5612, 7386, 6351, 5538, 2839, 7050, 12461, 6945, 
            1157, 834, 12299, 4009, 6615, 5208, 9605, 2553, 4646, 13286, 7223,
             8594, 13184, 9615, 1592, 528, 4830, 6460, 4160, 11892, 5570, 
            12389, 6060, 8715, 10779, 4557, 4764, 6914, 8961, 6975, 12564, 
            8247, 6079, 10149, 2475, 10099, 5249, 8531, 5201, 7919, 6002, 
            6303, 4858, 10583, 12153, 8458, 6373, 1834, 3880, 7669, 6456, 
            11527, 2739, 6834, 7472, 8551, 4266, 11792, 9755, 7332, 9504}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDMTtbW12P39U
2Dc2MNgAuQwgeuYMCbupU0TsOjs47F++yLDv7uKyv3olxO7vnxr79+/y7Feu
WGE3cYKA7ZvX2fbv3ubanz3jY//1S4kdSP+smZL2ixctsvv+rcwexH/54oXt
7FlS9lMmC9s/fPDApr+vz27mjBl2IDMPHjhg29jQAMQM9mdOe9sD7bTv7eEB
uqXBGmg+WP3rV6/sJvTzA8V77EBmgNS2NDPb///3Dyz+9s0bu5s3IuxWrtCw
A6kF6rfbuWOH7e9fv+zWrtGxW71Ky37eXFmg+6/YgfzW2sJi9/zZMzuQfpCa
/j4++00bDcF2bd2yxQ5I23W0s4PdvnbNGru9e2zAZi9csMAGFFYgO5cuUbGD
hFUDMJym2F2+dAkqz2YPMgPEv37tmh3Ir6Aw7OnmBplve/CAgw3QDba7d+0C
69+4wcD+548fdlu3mNgfP3bMDgBCYsbd
           "], "Children" -> CompressedData["

1:eJwdifdTDgAAQN8llOxNRPYqMrIjOzNfZI+vLvyUu48753+xN2XvkS1kZG/Z
K3uveH388N7duxefNT8wJwJYEBVWILgoNRQKLs6IDkda7sKcuTmhpOR5/352
mIj/NKYCVYmkElqRv/6xMtGUGcVvf1mFb/40hh9+txoNqU4DalCbr9akFp/8
4mfrUI+P1uWD731nfd76xteW2ogXvvKlsfSmCb1oShzPfWYzOtGcm8bTiqe2
oCWPfOJjW3PLNtz2oW1pR0fa04EHlnjfe971jgl0I5GudOaKXbhqEte84XUv
e8nuJFNsDy56wfP25JxFnvWMfQjSl0n0I53+DCWFVAYwkNMWesqTDuKIgznq
EI55wuMOI43hjOCwBR7yoAccySjGMZox7HefY9ntXve4y52OJ4MA29zhdicw
ka1uMZM8N5vvZGYwhalscqPTWOsGp7Pedc5kFmtc7Spns9IVLjeLZWaz1CWW
A+5T0Og=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 
            2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 
            1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 
            1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 
            2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11963, 2310, 2913, 6918, 944, 7350, 4141, 
            4143, 12440, 1198, 12578, 9574, 4017, 11541, 10230, 3156, 74, 
            1356, 1142, 804, 6831, 7086, 4294, 2438, 9656, 9807, 7273, 10848, 
            5522, 6398, 5239, 4210, 12568, 12641, 4328, 3901, 11017, 3887, 
            12435, 4675, 10505, 3909, 3891, 4463, 2046, 10914, 8551, 9562, 
            8704, 4948, 9655, 11982, 5766, 5877, 10868, 7775, 10360, 7434, 
            12648, 107, 5103, 12718, 4104, 4144, 9598, 10595, 4965, 8477, 
            4082, 11761, 6276, 11521, 3880, 12478, 12543, 5689, 6219, 4889, 
            8994, 4043, 7411, 6939, 6934, 4842, 6626, 3026, 6864, 12612, 3198,
             7519, 9266, 12435, 4796, 8464, 11731, 8606, 9020, 9667, 8720, 
            11072, 8939, 11440}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZBsTHj7nZb9+2
ze7/vzr77i4u+9WrVtm1NDPbf/xQYAeUZvj44YPt9Gli9j3d3PaNDQz2/X18
9k2NjPbNTUz2rS0s9gcPONg0NjTYgNTOnzfP7t/fWrA4iAaJb9xgYLd1i4nd
1CkidhMnCNiCxJYuUbF7+ybHDqQXZNbKFStsQfoPHjhg097GZj91yhS7BfPl
gea02H3/Vmb/88cPu8OHDoExSN2kiYL2nR0dYDPPnvEBi4HM/f3rl93DBwm2
CxcogMVmzpCw37hhg+3aNTr2IDkGKLh965bd5EmT7ED2Af0Edn9bK6v98WPH
wOGweJGSfW8Pj/39e3FgP9y9E2MHNAesf/euXXYgPsiezg4OqN0M9iA7Fy5Y
YANTt3KFBpi+euWK3bSpouBwAoUvyLyLFy7YQe21BrnhxvVwUNgC3V9lD3Lz
n9/V9gAILLo8
           "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
f/pShKLoH4vRiOJUpwQViaU0cZTkt78sxXd/+sMyfLAsFSjHZ8vzxW9+9ZMf
rURl3vvOKlTlrW+sxktf+8oa1KYmT31hLZ77zDrUpy71eOJjH/nQeBrSgEQe
mMB973nXO972lkl0pjGdaEIbmpJMM1rSnBbc9IbXvWYrLtmay171ihe9YFtS
aEd7znvOsxbagY6c8bSnPOkJj9uF3nSlB8fsxlG7c8TD9iSVQx70gL3Y7z77
UOBe99iPbNIYQ39Gks4IBpDBQAaT7yB2u8ud5jmETHY4lO0OY5sBtrrF4WSR
62Zz3ORGN7jeUYxmjetc61gmMo4JjGelq13lCpc7iSDLXOoSFzuZuS5yCiHm
udAwC5zvX6YR1uU=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 
            2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 
            1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 
            1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 
            2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 
            1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11261, 7785, 7686, 6425, 8857, 7357, 6582, 
            13263, 13815, 7218, 4830, 8594, 8667, 10151, 4830, 5914, 126, 
            4488, 4716, 11360, 11007, 4756, 10054, 11911, 11276, 8643, 4129, 
            4897, 7316, 8000, 8780, 10509, 9233, 8107, 4186, 11424, 4890, 
            4181, 5546, 9226, 9516, 597, 4431, 11487, 4022, 7949, 7457, 9331, 
            9111, 10430, 6229, 6306, 6793, 11907, 5310, 5470, 11708, 4348, 
            5558, 9387, 9405, 7459, 3051, 4880, 6977, 8057, 11604, 2084, 9550,
             11101, 7105, 3298, 11984, 1524, 9338, 5755, 11796, 9219, 6367, 
            4605, 10887, 8456, 4898, 1989, 4669, 8914, 7484, 11668, 6765, 
            10927, 8725, 10884, 6430, 6775, 8146, 4032, 11011, 3366, 13478, 
            1744, 7534, 10975, 11546, 6417, 4194, 7679}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZBcT//tbaz50j
Y9/TzW0P5DI0NjRYg+iHDx7Y3bwRYff1S4n9wgUKtv///bNra2W17+/js3/8
6JHdtKmi9o0NDDatLSz2ILx40SK7z58+2f388cP26ZMndl2dnPa3b92yA5pn
A8R23799s9u9a5cdyOyXLzLs//75A2YfPOBgs3bNGrvZs2bZTZ0yxQ7EBsrb
/fldbT9zhoQ9VL3doYOO9iD9IH1Ae4FuWmDT3dUF5NfYd3Zw2EPdbAN0q/26
tbr2IP2TJwnZt7ex2a9coWEHU3P92jWQfpspk4XB7gO5a85safu+Xl6w/PZt
ZvYnT5ywm9DPbw9SC3Sf7Z7d1vYgf4Dk79yOBoWXXUszs/3FCwG2v3/9AobR
F7vt27aB3GI3f948u40bNtgePeICtgfk1oMHDtiC9O7ftw8cHj9/VIDNO3vm
DFjP82fPwOF86qQn0M8zgHqPgMMGBj59LLQHABeU0H0=
           "], 
          "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCtgYvuw+6EPkA+6Pd2cP8TuVhS7u7u7u7tb
z6cf7rbbxaVNCKRHAROjIwoEJyeFw8EpqTGRSBk/KZQRCscnZP77WRGi/tOL
XHQjNwnkoSR5KUg+otE/xpCf3/7ypwX44XcL8dbClKAIxSnKJ4vx2Vi++M2v
fvSD731nKSpRmieW4allqUg5yvPG11bgha986XOfWZnTVqEJcVSnKtV47CMf
+sAa1OK+NbnnXWtz0Tpcsi71uWM9bnvLmzagIY244XWv2Zh4LnvVKzalORds
xnnPedYztqAzLUmkFR1oTXva0I62nPCUJz3uMY96xMMeMolOJLPPjuz3oAfc
6x67sMOu7HS3u0yhJ93Z4nZ7sM2tbnaTvRlDH/rRl/VudIMBRpDKUPozmAEM
ZJ1rHcRq15jjKoeQ7UqHMZwVLneZSx3JKJa42NEEWeRC05jnAuc717GESGeO
s81gHLPMZKYznG4W05zqXyO23uE=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 
            2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 
            1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 
            1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 
            2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 
            1, 1, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8752, 795, 11948, 7738, 2368, 3083, 6251, 
            3069, 11008, 12533, 9991, 10006, 10300, 13090, 6200, 2652, 9555, 
            11726, 1122, 12716, 5331, 9230, 12128, 1977, 4616, 8790, 12566, 
            4484, 11506, 6765, 4281, 4623, 13550, 11134, 5593, 12666, 6212, 
            10075, 13172, 13318, 2636, 4585, 5325, 3579, 7352, 13801, 1975, 
            242, 8724, 4903, 12816, 6372, 4836, 4996, 12369, 4955, 8850, 4233,
             4294, 9791, 2413, 11043, 10559, 7247, 11882, 6250, 7150, 2464, 
            5044, 6304, 5399, 8319, 11776, 10927, 3991, 5459, 12415, 965, 
            11851, 10405, 9517, 8687, 4662, 12610, 9330, 6961, 10831, 9738, 
            5720, 8877, 7689, 10134, 7762, 7180, 7725, 5655, 6076, 9173, 4676,
             7113, 9772, 9387, 11491, 9842, 7078, 11498, 4954, 8397, 13386, 
            6313, 6668, 7813}], "NumericalThresholds" -> CompressedData["
1:eJw1kEksQ1EUhp9ZiI0hhg0WtiJEIvHuObWUWEi7sVQJsWhCDEEk0hqrRUpb
2lpoFywNCVIkVGIIqYQQasdCzYk5pTWc08RL3rv33Xv+c/7vz61pUNZFSpLU
HE8fpbqtrKlJ3aGK5Z9ataaoUBNB20Z6Z6bz0GJOwZNjFTrsmdjXG43Bry/Q
D8Th+1sLXF5ciE2PRx41mYROKwmrxQJHh5Vixe2GTY9CnnRkYbcuAj8D7WA0
JGAo2InbW1vQ2xOFvz9dSFpYcZeA3ZYB3Hd5qRhvb+qBNdQPyYKk02rFuc8n
7u/u4MBbAWenp8DnPItX51Q20kwcGU5CqyUVPt5b0X9Vi9d+P7icOeL5qRHn
ZvORPPGe/CrYK/XXlh54vbAwXxDuQywyswwZE3F3ZyfMSDUy32+srwPPJ34g
rcxsVA/MxdqlxUVg1s9AAFhjm0jHQb1evL68gHksmXODx4cHYE9Gg4FrSpnf
5XQK8k45VofPmO2f+//hfuRLcEbfoRCsra4C57i/V47j1rRwpnx/7quiGRrO
TbCuvy8G/wAMZODX
           "], "Children" -> CompressedData["
1:eJwdieVOFgAAAG9YYHcXdisGdmBj+2E3KGEBQzfnU9iB3d3d3d3d3d11oj/u
ttuFxiQF4oKAUcFpCkSPiUhJiR4bFZIWkYmjY+NjU8LCE/795DSC/jOMdNQk
PZXIQEUyUpZMlCCYYoSQhcz8Vv+YlVxkIwfZ+eEvf5qTr373m7l5YR6KkpeC
5OODX8xPAT762U8WogjvLcw73/rG177ypc8tzjOfWpIyhPLAJ5aiNA997CPv
e89yVKA8t73rHW950xtetzLVqMJlq3LFa171ktWpwTkvGsYFz1uLWGrTiTo0
Ipy6nPWM9WhIfRpw2lOe9ITHPWZjWnDUJjSlOc2I4IiHPeRBD7jflrSnFW1o
zR73ude2RLLbXbZjuzvdYQc225EtbnOrm+xMFwbQlR4E6E4U69xoNza43rWu
sSd9WW0vetOHVa50hctdZj+W2p8lLnYgQ1jkIKKJYaELHMxc5zvPOc42jnhm
OdMZJpDqUKY7zeGMYKpTnOxIEklikhNNZpwTHO9f2S7q2w==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 
            2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 
            1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 
            1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 
            1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 
            2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9519, 11899, 6505, 4890, 9963, 6658, 6561, 
            9236, 8133, 5571, 9512, 10688, 5720, 7202, 7488, 12511, 6220, 
            10703, 13716, 3645, 7286, 8901, 11996, 2656, 8369, 6589, 5758, 
            2025, 12420, 8955, 3792, 348, 4356, 6400, 2671, 10490, 4004, 5085,
             5638, 5700, 9585, 3844, 9887, 12133, 9570, 1245, 6793, 7292, 
            2572, 3633, 12643, 4484, 9812, 5872, 11884, 4960, 10759, 8115, 
            9355, 5029, 3207, 8610, 12810, 9696, 10362, 1422, 12819, 7589, 
            12593, 7501, 9223, 10922, 8722, 37, 3851, 7663, 8360, 4382, 9293, 
            6500, 7585, 8677, 3369, 5105, 2977, 7512, 5594, 8696, 10764, 4381,
             9049, 9297, 10060, 12527, 6298, 13585, 780, 4663, 4541, 4887, 
            316, 4014, 11478}], "NumericalThresholds" -> CompressedData["
1:eJwlUN0rw2EU/nEhJYXcKDculORCuLLfnpd/Yf6CKXOjZORbbUP5nK+tbJhR
5LM2tprZ2ChuKIqaGx83PqYmM2z2wXt+Ls7be855znOe8xTVNytU6YIgtGby
R6HsqFWrlV11GZQ0KJsqK5rS+LeRh91WznZ3KphWI2B5qYgtzBcimehlXo8I
p6MKWo1Glkwk8BoM4vurnXAiBR8Vzs/OYJqdBeeQE27ObMbYaBYbHBjA+loJ
lqxW0WgwQKdNY5cXF/LTkxPEop1YXSlmv6kUZqbz2MP9vZy4PsJh4sGey0U7
Ra4B/TodjIZ83N3eIv7Tzfy+GvEmEED4vYVxbtop2m02DA9l4vrqimN+8PSo
YsdHRyDs5kYpIwzln5EIXp6fQbveQiHQftI6PZXLtrfKMKHXI5XsY06HA6SJ
+qMjI5iazJE8+Iy0Sb4cHhxAP55NvLJYNCpp53853Uk1v88n8nlx0WLBvtuN
RLyHEWbfXc3o3n/8v4dmUwHdJGklr3hN6ns9HmnuD+DL1uU=
           "], 
          "Children" -> CompressedData["
1:eJwdkVVTFAAABncQFSwUu0WwEwM7MEBsD7sPPfBJZ05nHP+J3YVio9jd3d3d
3bUePuw3s/M9bkLWtEB2FDA9JjKB4MzUcDg4KzM2IhlTZ4RyQuHklCmFf06E
qP+Mpwj9iKYFRWlOMYqjf42hIrGU5Y8lKEkZSvHD0vz0t7/8bhzf/Go5KhDP
R79Yns9+8oPvrUQzKlOHKlSnKtV451vf+Noa1OKVNXnpC2vz1Oc+M4Ek6pLI
Ex/7yIfWowH1uecD79uQpjSiMXe9YxNuettb3vC617zqFS/bkvYk05ZWtOaS
F23DOS943hTacdYznvaUHcigI104aSc6c8wTHrcr3enGYY96xFR604Ne9OSA
hzzofveZRh/2ms4ed7vLnfalwB1utz+ZDGAwAxnENrea7xaHEGCzm9zoBocy
jPWuM8/hjGAka13jKMYxmjHkutqxrHCVK13uMicwiYkEWeoSF5vFIhc6OVIk
RDYLnO885zrH2f4DC3TY5A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 
            2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 
            2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 
            1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 
            2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 
            1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11289, 13119, 219, 11846, 7737, 4681, 7182, 
            4506, 3436, 9266, 10659, 7289, 11935, 8155, 12360, 2866, 5692, 
            8543, 8554, 10377, 11679, 11223, 12332, 747, 12148, 5119, 11953, 
            133, 12772, 6710, 7240, 2496, 12590, 11170, 4910, 10812, 10922, 
            12200, 12109, 4236, 5405, 11829, 6372, 4909, 4625, 11286, 8664, 
            12360, 8023, 5346, 10858, 7521, 11592, 6948, 7152, 9032, 11446, 
            4479, 10425, 1090, 8831, 7462, 5258, 5302, 7730, 9294, 7183, 7972,
             3901, 8586, 11837, 2698, 8905, 6572, 2231, 12411, 298, 3516, 
            6696, 10185, 6498, 12862, 6147, 5482, 4734, 6258, 6200, 7021, 
            10293, 9588, 4141, 9263, 4778, 10926, 3075, 11571, 9249, 7706, 
            517, 10969, 3579, 4527, 6254, 7640, 12473, 6431}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZBcR//9TY79hu
bv/kcbL98WNu9u/e5tp3tLPb9/fx2QOlGaZOEbFfuULDDsR++iTF7vevX2D2
zBkSdj9/VNg1NjDYgORBcpMnCdk3NTLad3Z02D588MDux/dy+/Xr1oHU2U+c
MMH2/79/YHUg/Y0NDdYg9vJly+yWLlli197WZvf1yxe7jx8K7Hq6ue1B8iB1
GzcY2ILsAPFfv3plB6J//vhh+/HDB7uzZ3zsWltY7EHyMHc9fJBgN3XKFDD7
5YsXdqtXrQKzu7u47Pfstgb7CQRAdp08ccJ2/rx5QDeo2W/dYgJ0q579zRsR
djt3WNgdPuQEcoNtc1OT3cwZM0D+tH375o0dKDxAeoBusJs4QcAeZM72bWbA
MFphCwo3kD1At9levXLFDqS3t4fHfuECBTuoH2yA4WLz988fu4MHHGxBbgWx
gX4Ah92M6eL2ILuePnli9/9fHYhtC3Ir0B5bAPMd0Pw=
           "], 
          "Children" -> CompressedData["
1:eJwdkVVTFAAABnewwMTuQLETAztQDGwPuw89QB905nTG8YfY3WAndnd3d3d3
rqcP+83sfI8blzYxkB4FTIqOTCA4JSkcDk5NjYlIyoTJoYxQOCEx898/PkLU
f7qSi+rkJp48VCMv981HFaKpgMaQn7IUoAgFKcQff/vLwvz0h7GUoCjF+O43
i/PZr36xJG8tRWk++dEyvPOD7y1Hed742le+tCJPrERlXvjcZz41jqo89pEP
feA973rH29agJTWpRy3qcMva3PSG163LNa9an0QakEBDGnHFy17yoo057QWb
0JRmnPecZz3jKZtz0hac8LitaMMxW3PUI7alHYc9ZHuS6MB+D3rAjnSmE7vd
ZzJ73eMuu7DTHXZjJCn0pTs92W4PtrnVXvQmxy32YaOb3WQ/lhhgEBtMZb39
GcBq1zmQta5xMCMYwjCGku0qV5rlcFa43GUudRQZLHY0QcawyDQWusD5jiVE
OvOc6xxnm8k0Zzku0mm6M53hX1Ok3uE=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 
            1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 
            1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 
            2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 
            2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 
            1, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11179, 13059, 12030, 2838, 2320, 8893, 8487, 
            5116, 8593, 10864, 48, 13357, 12725, 3956, 233, 9294, 12405, 
            10362, 11867, 10292, 3071, 7115, 3158, 9318, 11676, 3263, 11659, 
            5133, 2806, 12965, 200, 5216, 12661, 9707, 11955, 11537, 10148, 
            3963, 5721, 5131, 12319, 11001, 4796, 11917, 12179, 12433, 6217, 
            4748, 12629, 7785, 7780, 12223, 11560, 11327, 5125, 7863, 7486, 
            9705, 10479, 7534, 4658, 7290, 5391, 5303, 882, 7994, 6373, 12050,
             5728, 9651, 10302, 5130, 9802, 8239, 11199, 11008, 12652, 7127, 
            9266, 10222, 11269, 8470, 9251, 11709, 1112, 11846, 12641, 9665, 
            8706, 8161, 1910, 6722, 6357, 4512, 5647, 12484, 4758, 7062, 5810,
             4310, 11670, 8443, 7784}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDsR/flfbL1yg
YPvoYaL9xg0Gtrt3Wdk3NjTYrF+nZ88ABadOetrv3LHDds5safu/f/7Yff3y
xW7rli12IHUfP3ywPXrExa65icl+0kRB+84ODruebm77jnZ2+/4+Pvu3b3JA
6qwnThCw+/7tm93PHxV2Bw842LS1stqD7Aaxv34psVu8aJHdxQsXbDdv2gQ2
++aNCLuJEyYA1R6w6+zosOvr5bU/fMgJ5DY7kDtWr9KyB7kDpAZkF8id+/ft
A9ll197WZvf2zRu77i4u+5kzZtgC1dj+/PEDbO/MGRJ29+/dA/th8yYje5C/
QXaA5EAYZM7pU6fAfgP5GSY2e5YU0G4Gm9YWFpAf7RcvUgLbCfIDSF1/X5/d
9m1mILNsQG4FqrNbtVLTfu8eG6AbBexXrlhhCwqHpUuW2D188ABkjh1I//Nn
z8D0xQsBdqDwAtph/+1rKThOACseyg0=
           "], "Children" -> CompressedData["

1:eJwdidVSFAAAAHewwETsFuwWAztQQME+7D70OJ905nTG8U/sTsQO7O7u7u7u
Wk8fdmd2NjFnSiA3BpgaG1UgOD01EgnOyI6LRubkaaFwKJKcMunfD0eJ+c9g
ClGSwhSnCEXRPxYjlt/+8qdx/PC73yzBV79YiiaUpi5lSCKeapSlHJ9N4JMf
Lc8LK/DSD1akElWpTBXe+863vvG1r6xOLWpQk+c+86lPrM0DH5vIIx9ah7ve
9571qM8db9uARtyyITe94XUbc82rNmUAzehLc9rSgrO25JzJnLcVbbhiay57
yYteMIVU2tGJ9nTkjB047SlPesLOdOG4x+xKN456xMN255AH7UFPDrjfNHqR
Tgb73Osed9ubTHa50yz6sMPtbrPAfvRnq1vc7CYHssaNDiLAWrNZ5wbXO4Rc
hjKcYeSZ72pHMIpVjmSlKxzNWJY7hmUudRzjWeJig0wghwUucqETCTHfec51
jmFmOttZ/gXsbdjk
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 
            1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 
            2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 
            1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 
            2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{12611, 10773, 5394, 2472, 2391, 4927, 4697, 
            3378, 1828, 4719, 6170, 1851, 892, 7560, 10207, 11040, 9449, 1314,
             8703, 2375, 7966, 4929, 3436, 4218, 5146, 13580, 4585, 12670, 
            7973, 6859, 1140, 12158, 1549, 5095, 3028, 2802, 4647, 9251, 7320,
             7444, 4109, 6198, 10061, 5835, 6828, 8844, 7698, 8589, 8043, 
            5292, 7488, 2574, 11945, 7888, 11548, 4582, 5429, 11043, 8988, 
            10340, 9929, 11750, 7257, 6136, 12510, 10120, 10399, 7075, 7209, 
            721, 4586, 8743, 11984, 8994, 8916, 5655, 11157, 6374, 954, 4036, 
            11006, 7683, 12663, 12457, 11868, 10210, 12569, 9656, 6353, 550, 
            7006, 9536, 13696, 6859, 5908, 4238, 8481, 9046, 7164}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDMRz58jYT5oo
aD9xgoB9bw+P/c4dFvYHDzjYNjYw2G3cYGC7do2O3cEDB2yfP3tm19jQYAPU
wvDnd7V9awuL/coVK2yvX7tmB6L7+/hA+uy2btlit3CBAki/zdkzZ+y2bTW1
B5pj9/dPjf2/v7VgO0BmzJwxw27Den2wnnVrde07OzrAZjU1MoLNBaq3u3gh
wLalmdn+5YsXYPM/figAucUGxP//759da0uLXU83tz3Irt+/ftldvnQJKO9g
A8IgtwL9ZAuyq7uLC+yGz58+2YHMAMpZd7Sz2///Vwf2x/dv3+xA6kBhAHI/
iA0Sf/ggAWSe7amTnmA3g+wChQcsHED6J0+aBPTvArCehw8egP0OMhsURl8+
F9u/fZMD8js4DEFqvn0ttf/xvdx+2lRRe5BfQW4GmX/6lJc9ACTkwfM=
           "], 
          "Children" -> CompressedData["
1:eJwdifdTDgAAQN8llOxNRPYqMrIjOzNfZI+vLvyUu48753+xN2XvkS1kZG/Z
K3uveH388N7duxefNT8wJwJYEBVWILgoNRQKLs6IDkda7sKcuTmhpOR5/352
mIj/pFOBkUQylIq0ohIPrUw9oqhONDFU4Y/616pUo8zf/vKnNahLTT77w1rU
5ovfrcM3v/rJj9anGR9sQEOa0IjGvPedb43lja9tygvjeGmpr2xOC54bzzOf
2pJHPvGxrWnDA0tsSw/a0Yn2dKQDd73vPe942wQSueVNO9OVLiRxw+te86rd
6M4VL3vJYpNJoSd96UUfenPei17wnEWetR/9KfSMpx1AKgM54SlPOojDDuaI
xx3CMY86jBEM56AFHjKNfR5wv6MYzV73OIZxjGWnu93lDrc7niABZpDBFLY5
gYlMYquZbHGz+U4mz01OZTobncYG17vOta5xJrNY4WxWutpVZrHEbJa63GWW
Aztl0Og=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 
            2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 
            1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 
            2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 
            1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9600, 13494, 1695, 2319, 6438, 8495, 2271, 
            3958, 4748, 9223, 12768, 6848, 6940, 12834, 11165, 8629, 7491, 
            9729, 8706, 3489, 4816, 2165, 8036, 10248, 12618, 4889, 3168, 
            10248, 7748, 804, 8781, 10831, 4138, 10169, 7065, 1785, 12959, 
            6121, 6784, 5791, 3966, 7154, 11873, 11327, 11506, 6944, 7136, 
            8073, 9281, 12756, 8435, 10970, 12326, 5111, 11299, 11730, 5544, 
            3912, 12302, 12103, 10009, 9654, 11413, 11673, 4620, 7215, 6690, 
            4057, 3285, 6355, 6284, 5967, 4363, 6843, 11228, 4885, 6583, 6180,
             12321, 9512, 5007, 9395, 5840, 3480, 7062, 7356, 8606, 9513, 
            2422, 793, 8795, 7179, 4919, 7067, 4541, 7803, 7423, 832, 9108, 
            5554, 2516, 2473, 1529, 9338}], 
          "NumericalThresholds" -> CompressedData["
1:eJwdkEsvQ2EQhg9xvyRuf8DCH9Ad55thIWFF6gfQJoSkCWEhhMSlPW1PS1qt
YkeFVFKVtJW4lFSFULeqXSVVrAgJG5JqxTdn8V1n5nln3lrtgLo3VxCE4SK+
qTUjzUNDmtHOAnr0aHSqel0Ov/bx9fbaj8GACg/2G3DBWQObHg+z22xgNpnY
6sqKeBKJwHE4LO7t7irvn+9vmJoU+JpsNEoF+PU5CEZJgqdUN1yct8JdLMZS
j104b6/Eudly3PJ6waDPQ85gnKHUyeZinLWWcW4TcYFz2WEoxGs7GG9JuIxG
4T4eh4dEQmE6HdV4dMhwze1WcgJ+P1CeY74KP951sLFeh8Qy6PXUm8g1RDqp
juvSHy4vLTHqh2LbPh/8psdQMuSj1VKKJmMhEu/66orPkRLJh51gELKZDCy6
XGCRZeB/SHO/PGvx9uYGZqanqW+R6h+TSYX3m04D+UjapHd22oIWuQRjt+2Y
zYyj3VbBaH7uFePzI3lFuhT7y04g8YgTvWhT/KPYP3vs0lQ=
           "], 
          "Children" -> CompressedData["
1:eJwdkVVTFAAABnfAABM7UbFbMTCwUFQQ87D70AOedOZ0xvGX2F0odnd3d3d3
d60nD/vN7HyPm5A1OZAdBUyJiUwgOC0lHA5Oz4yNSPqkqaGcUDgxKff/nxsh
qoDhRFOXQtxVC1OE0hSlFDHE8tc/FuObxSnBb3/505L88Ltf/WIclShDRcpS
js9+sjzv/GgFPvjet76xMvesQh2qUo3XvrI6NYjnuS99YU0eWosEnvnUJ9bm
sY984H3r0Zg71qcBDbntLW/aiBtetwmDaUpfmtGe5rSkBVe85lUTOW0r2tCa
i172km05YxLtuOB5z3nWDmTQkW4k05VOdOaUJz1hF457zKMeMYV0urPbHvTm
sKn0pBeHPOgB95vGHve51z7scJc73e42+zGQ/mxyqwPY4mYHEWCjG8xkretd
5xqHMJRhrDbfVa50BEFGMoZRLDPP0axwuWMZx1KXOJ6FLnaRWUxggfOdSIh5
zjU7UmaOOcx2ljOd4T9lhNrj
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 
            2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 
            1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 
            2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 
            1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 
            2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11911, 126, 954, 5605, 9319, 4374, 12575, 
            2862, 1863, 7421, 8598, 5808, 788, 2520, 10998, 11379, 2521, 7931,
             10805, 2642, 13080, 10375, 7026, 11682, 11186, 7074, 13222, 
            11119, 4240, 13680, 11959, 9184, 9717, 4912, 6347, 8492, 10075, 
            10159, 4270, 9507, 5264, 10936, 4103, 5706, 6515, 13076, 5536, 
            9287, 3966, 6675, 9146, 10427, 8198, 5675, 10379, 9609, 6735, 
            12449, 8082, 7052, 11473, 9313, 3213, 2834, 6188, 12289, 9358, 
            6800, 7100, 4992, 12858, 8527, 7393, 5121, 6915, 12291, 2380, 
            6191, 1028, 4308, 8781, 4878, 12608, 4032, 6536, 9445, 12321, 
            4372, 12422, 5429, 10128, 8559, 2994, 3507, 526, 10976, 9267, 
            4157, 10907, 5408, 9654, 6919}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZBsSrVmra9/fx
2c+cIWH/9s0buxnTxYHsGbaNDQw2W7eY2L1+9coOxF67Rseuu4vL/vChQ2B+
a0uL3a6dlmC9kyYK2h89csTu/79/diBzJvTzg/HkSZPsNm7YYDd71iy7gwcO
2KxcsQJoboP1j+/l9iBzd+7YYXf0iIs9UMwGJA5yy9kzPnZXr4TYTZwgYL9+
3TqQfrAekJ1AbH/xwgWw20DmAZ3P8PJFht35c+fsFi5YYNPcxGQPEvv96xfQ
rV12IH0gv4D4IPbzZ8/AakF+BIn9/fPHDqQeJHfwgAPQTAfbvXv2gMVAfgHZ
c/NGBNBsBVuQW37++GH7/1+d/ZfPxfYf3ufbd3Z02ILMB8rbbd60ye7ihQDb
06dOAc2tsYeaC3YjyNylS1Tsnj5JsQP5ffGiRSCz7bZv22b38UOB3d07MXa/
f1XZgzBQj92pk572AB9m0ss=
           "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
fwZShESK0oBi1KE4Ty1BKWL5aRwl0T/+9pelqUAZylOWcvzwu9/86hc/W5Fn
VuK5lalJFWpQlXdWozqf/OgH3/vWN9biha+tzStfWpd6PPGx9bnvI+N56APv
mcBd79iQATSiO0l0pDEpNKE1TWlBM5pz21ve9IYtacV1r3nVKybTljZc9LKX
vGA7ztuec561A6ct9Iyd6MwpT9qFI56wK9046nGP2YN0etKLVA562EP2pi99
2OcB99uPNPa6x/7stsB8d7nTPHc4iPEMJkAGmx3CMLY7lG1udYu5ZjKS4WSR
4yZHsN6NbnAUo1nnWsewwrGMY42rXeVKJxBkIpNY7jKXusRsJrPYRU5hriHm
udAwC5zvX7r41uU=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 
            1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 
            2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 
            1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 
            2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 
            1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11289, 1905, 8023, 6528, 11362, 11823, 9723, 
            4592, 2262, 3299, 117, 6448, 12342, 2874, 9263, 6675, 10875, 7556,
             2592, 11400, 11259, 9527, 4006, 1877, 9942, 9302, 8675, 3948, 
            11616, 10985, 10848, 4190, 7587, 12618, 7131, 5115, 10501, 8479, 
            11504, 12526, 8510, 5638, 10129, 6868, 6296, 13162, 2753, 9399, 
            5626, 4343, 6709, 7705, 7992, 1464, 2348, 6183, 8893, 6844, 5257, 
            6955, 4982, 7190, 3207, 3685, 4776, 10805, 5471, 4249, 10854, 
            1837, 4663, 5679, 11871, 9447, 6240, 11878, 9474, 5302, 4099, 
            4729, 5021, 1714, 10766, 10070, 6582, 9506, 4119, 8706, 5106, 139,
             8659, 6896, 8661, 5949, 2671, 4269, 1442, 9806, 4873, 6963, 1793,
             3916, 11663, 5215, 6796, 6973, 114, 7206, 5411, 13301, 8436, 
            5654}], "NumericalThresholds" -> CompressedData["
1:eJwdUUsvQ1EQvhVpGo/ESixICAtLIRKJe2YQP0DqD6ggFhINC4+QaLUefQiV
UAlFkLS1qQqp1qL12LOjKqmEpN21m6K0zJzFnHNm7vfNfN/chsFx/UiJoiiT
Ojr0hqnuiQnDTL+Wk2HDWFvrmIaeRorC7xymUymxaDZDLBqFjfUqYVpQwGop
hWJhHrlOufqWTKrPT0/C5/WK82AQ1pyVGIt2ib9iEX7yeVhd0eGO203cBTWb
yQBjqL3y+NCHe7u1eBZowddEAra3qpGxPm8zHB7Uw2cuB5FwGKg3EFYw5yrU
AZcX7dQ/ylpUxvMM/sY8vrl+ctyE3IM0k84SGfxm3WeBAHNxeUkrc6oDeZDc
m1g38u10OKg2ILjH99e01MT+9z0eiTObNHh704MOezmyX/IgSJNKvlWrxQLZ
jFF49upkL+JLzsf7EJz6/TLsNhtchULS0467hjzMIu+Fd+Z0VMBLPA7XkU7k
f2C3lSHtrpOxx0eNUi/P4nzT5ZIcnst5OjWK93e9UvM/NevTbQ==
           "], 
          "Children" -> CompressedData["
1:eJwdkWVPFgAABm9YYHcXdisGdmBj+2I3KGGBQzfnr7C7u7u7u7u7uzvOVz/c
s92ejxcelxJICAFGhgYnEDs6KjU1dkxMWFCik0fFJ8anRkQm/ftHBAn5TzRp
yEZaMpOODGh6/vjbUML45U8zkokffvebX83CR7+Ylc9+MjvNyUFBcpKfXOQl
N3n44Hvf+dZ8vPKNr31pAV743ELssTB7LUI1ilKVYlShOKUJpxQlKMkzn/rE
xz7yoWWoQFnK8cD73rM8d71jRSpTiZve9pY3vO41r3rFy0awz+rUpwb1qElt
ahHJJS96wfOesw51Oe1Zz3jKkzagEQ055gmP25hmNCGKox6xKQc97CEPuN8W
tGS3u2xFa3a6w+1usw2xtKUv7ehDe7rSgY5sdYud6EJnAmx2kxuNYYPrXeda
u9GT7vRgjatd5UpX2Ivl9maZS13iYhfZj/4MYKELnO884xjEQGY71znGk8As
Z5oYrJNEMoMZygyHMN1pTnUYUxzOZCc50RQmON5xjvUvy5fq2w==
           "], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 
            2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 
            1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 
            2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 
            1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 
            2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9525, 11976, 9990, 7159, 9850, 2307, 6703, 
            2598, 8823, 12004, 7247, 4254, 4095, 12887, 5289, 5681, 8638, 
            10449, 5147, 5328, 467, 11728, 3085, 9614, 291, 2644, 8653, 5664, 
            1706, 8893, 8826, 9542, 264, 295, 10134, 2040, 6493, 10919, 6006, 
            7370, 9436, 6632, 4458, 12083, 9836, 6978, 12380, 11670, 7153, 
            2476, 3120, 4248, 4516, 4094, 5507, 3847, 11885, 12445, 10760, 
            4112, 8202, 13536, 4845, 8451, 9997, 4707, 7096, 4966, 8754, 330, 
            11768, 4727, 7752, 11649, 4133, 12563, 6022, 7479, 4362, 6972, 
            8648, 8861, 10412, 7958, 9243, 8537, 13271, 7698, 10075, 5711, 
            5535, 6972, 13565, 11086, 11744, 3519, 3684, 11895, 5077, 12404, 
            8447, 9987, 6879}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDsRLFivbX78W
Zr9xwwa7pUuW2PV0c9s3NzXZHTzgYHv1yhW7hw8e2Ny8cQPIP2Bz9UqI/fp1
6+x+/qiwv3jhgm1nB4fdpImCQPVM9o0NDdbTp02z6+rktF+4YAFIjy1IzcUL
AXZAaxj+/vlj197GZn/71i27x48e2U2dImIH1G8/fZqY/ZzZ0vYge//+qbEH
qVm6RMUOaIbd/3//7Nau0QGrB9nT3cVlv3LFCjugXbZz58wBmwFSB7Jv/759
YHsaGxhsZs6YYQsyB8i2P3vGB6Te5uGDBFuQ3MsXL+w+f/oE9MMPu+XLloH1
gvSdPHHCrq+X1x5k5/17cfYzZ0jYg9wMchvQ33agMAGpA8l//PAB6Jc2u+/f
vtm1trSAzLcGsYHitvPnyYH8bwtSCwo3EP3rZyXY3Ldv3gDVMtiB3PL0yRNQ
GIPtBPkBpA4WVqC4ANEADNnTVg==
           "], "Children" -> CompressedData["
1:eJwdkVVTFAAABncQFSwUu0WwEwM7MEBsD7sPPfBJZ05nHP+J3YVio9jd3d3d
3bUePuw3s/M9bkLWtEB2FDA9JjKB4MzUcDg4KzM2IhlTZ4RyQuHklCmFf06E
qP+MowjdiaYYRfmj/rU4ccRQglh++ttflqQMpSjND7/7za9+8bNlqUg5KhDP
e8vzwU9+9J1vrUQDKlOHKlSnKtV442tf+dIaPLYmtanFM1/43Kc+MYHb1uWO
idw1ifrU44GPfOh979mQ5jSiGY1pShNueMubXveaV71iC5JpyUUve8lWdKI1
bbjgedvSjnOmcNYztue4p+1AR054ypN2pitdOOIxj3rYbhzyoKkMoQdpHLAn
vejNfve51z3uNp0+DCaDLfYl3370Z5c7HcBAdrjdAgexza1udpMBxpDJUDa6
wWEMZ73rHMEo8hzJWteY62hWu8qxLHelKxzPBJa51ImEWGKQLCax2EUudDIL
nO88syNtZjvXOf4DxpzY5A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 
            1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 
            2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 
            1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 
            1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 
            2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11293, 12298, 8449, 10470, 9243, 10965, 10259,
             1650, 3115, 7168, 5779, 1704, 8875, 5786, 10580, 3950, 7324, 
            4197, 4034, 10198, 12840, 8006, 11701, 7449, 9658, 4885, 4358, 
            5404, 11685, 11887, 10163, 10933, 5564, 3639, 12387, 5162, 7172, 
            8781, 5379, 12794, 9097, 8889, 1133, 4446, 11198, 7491, 4947, 
            4119, 96, 9661, 11114, 5841, 11501, 10891, 11194, 10896, 6667, 
            1719, 1687, 7767, 9157, 5119, 9232, 11019, 13522, 9535, 9376, 
            11978, 6956, 4613, 12593, 6913, 5151, 7282, 8255, 5254, 11158, 
            7330, 10799, 5207, 5258, 10999, 6223, 7258, 10986, 8722, 8910, 
            9606, 10994, 6478, 7050, 9626, 4064, 9434, 10208, 9521, 7731, 
            9373, 7167, 11796, 1425, 7649, 11733, 4306, 7135}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZCcR//9TYP3zw
wGbNam37Cf389tOnidl3tLPb371zx+7pkxS77q4uu6NHXOxAco0NDDa/f/2y
O3jAwebtmzd2W7eY2F26GGg/dcoUu5s3btgB5e17urmB6hpsPn/6ZPf2TY5d
awuL3ccPBbZAMeuNGwzsgFYyfP/2DUzv37cPbP7OHTtA8jY/f/ywA5k/Z7a0
/epVq+x+/qgAuwNk/v59dvYgOQYo+P/vn11vD489iA3Sf/VKCNTsMvu5c2SA
bjxg9+d3tf3/f3X2EydMsAW5BaQe5A4gtm1pZrYHyQPdZAtyN8x9IHeA/Dlv
rqz9/Xtx9kCzQWbZgMyfPWuWXXtbG0iNNdBP4HAA+X/iBAHb06dOgd0OMuv2
rVt2X798sbt4IQCEbS9euGAL8hPE3XX2K1esgPsDGjY2797m2oPUg/wKNNf2
7BkfO5C5fb289gChA9YA
           "], "Children" -> CompressedData["
1:eJwdkFVTFAAABnfAALu7sFsxsOMMFNvD7kMP8EVnTmcc/4gFdndhd3d3d3e3
68nDfjM739smpE0OpscAU+KiEwxNC0Qioemp8VFJmTQ1nBGOJCZl/v8nRonJ
pQexlCMPJchLcfJRjPwUJY4ixFOQAvxR/1qIwvz2lz/94Xe/+dUvfvaTH/1g
SUpTire+951leGlZXvnG15anNhWoTkWq8MJKVOapz31mVR5YjQSe+NhHPrQG
NbnvPWtx27vesQ7dqUsL6tGc+jSmAQ255U1v2IjrXrMJTbnqFRNpxmUvedEL
nvecLWlNEq046xlPe8o27LEtXWhHe056wg4ctCOdOO4xOxPgqEc87CG7stdu
7POA+91tMrvcaU9Gk8ISexGkN/3YYR/6stXtbrM/A9hijpsdyCY3msowBjGU
wax1COvc4HrXuNrhjGSVI1jpCkex1OUuc0y0/FjSGUeIxS4yjfEsdIETyHa+
YeY51ywzyGSWc5ztTGf4D+Fw3OI=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 
            2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 
            1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 
            1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 
            2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 
            2, 2, 2, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6915, 12022, 2550, 6358, 2735, 11277, 9382, 
            13458, 1886, 9660, 8983, 9467, 10945, 6221, 13551, 6346, 8799, 
            8038, 6358, 6261, 2792, 12425, 10639, 1105, 13063, 4676, 6, 11205,
             2867, 5746, 10763, 5291, 13398, 12632, 5460, 1227, 10243, 4331, 
            10134, 561, 6013, 9184, 1751, 4125, 3438, 1801, 1125, 13272, 4513,
             12693, 84, 9542, 3092, 1555, 8776, 6193, 4031, 12433, 10663, 
            8821, 11266, 11595, 9241, 9454, 10924, 6720, 6478, 3171, 10245, 
            9693, 10760, 4779, 7251, 5401, 5405, 11141, 4328, 9730, 8177, 
            3898, 8586, 6059, 7185, 5422, 5144, 9098, 7158, 8625, 7995, 9242, 
            8760, 4461, 5755, 6474, 8946, 1956, 11656, 4650, 3971, 11683, 
            7583, 8268, 8751, 11807, 12519, 5693}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZBcQfPxTYXb4U
ZD9vrqz9rZuR9t+/ldkzQMG7t7n2u3ZagsVmzphhe/CAg01jQ4P1wwcJts+e
poLVgdgbN2ywu3njht3/f3X2QPOA6g7Y/Ptba793j439l8/F9iA9QGwDkv/1
s9IeqN4WaJ4d0Dzb/r4+u5MnPOy6OjntJ/Tz2589c8YOZC5IT3MTE9C8D7Zv
3+TYAfm2EycI2HV2cNj39vAAzTCw3bnDwm72rFl2rS0s9qtWatq/fPHCrr+P
zx6kpqWZ2X7SREGQ3XZXr1yxu3snxg6k5/evX3arV60CmscAlGOwaWpkBPsD
ZPfDBw9sQTRIP0gcJH/50iW7169e2QHlwG5YukTFrqOd3f7njx/g8AC5EeJe
BrAfvn4pAfnH/vQpL/ujR47YHT92DOzG9+/egf0FCpufPyrsfv+qsgf5a+sW
EzugWXYgc0F+/vunBmjGFzAbpL65qQnsVgBBA9Qe
           "], 
          "Children" -> CompressedData["
1:eJwdkVVTFAAABnewwMTuQLETAztQDGwPuw89QB905nTG8YfY3WAndnd3d3d3
rqcP+83sfI8blzYxkB4FTIqOTCA4JSkcDk5NjYlIyoTJoYxQOCEx898/PkLU
fyqQiyLkpiB5+GpevpmPaPSPMRQgPz/97S9/+N1CFOaLn/3kR2MpygffW4zS
FKcUJSjJO9/6xte+8qVlKMsLn/vMcpTnsU99YkWGUYkWVKYBVahJHNV4ZFUe
+sB4bludO9bgrve9Zy1qc8ub1qEuN7xuPepzzate8bINOWEjmpBAYy550Que
tyknbcYpEzltc854zrO2ZCCt6ElrutCGJNrSnnYc9bjH7MAhj3jYjuzxoJ1I
Zq8H7Mx+99mVHnRjuyl0Z7e73OkOt7nVXvSjN33pw2Zz3OImNxpgAKn0Z4Pr
Xeda17jaQQxhMNmucqVDWW6WKxxOGiMYyTKXusRRjCbIYhe50AWOIYOxpDPf
EPOc6xxnO8tMxkUqzXSG053mX1oi3uE=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 
            2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 
            1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 
            1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 
            1, 1, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11302, 4147, 12120, 1213, 11593, 1068, 2409, 
            13673, 10490, 12392, 11883, 10028, 4875, 9339, 12262, 6569, 11849,
             8464, 3669, 3903, 5936, 11263, 6133, 4650, 8213, 9051, 8198, 
            5500, 12387, 3025, 11985, 11858, 8112, 2234, 1182, 7501, 8784, 
            2121, 4155, 4468, 5331, 9987, 3303, 10024, 10023, 11779, 4137, 
            256, 12447, 4085, 3787, 914, 386, 1213, 911, 12539, 8836, 8822, 
            8715, 9056, 10816, 11324, 10506, 12708, 7127, 9897, 6933, 864, 
            7414, 7443, 12592, 11760, 6675, 5339, 12452, 9134, 2689, 6320, 
            4891, 11647, 8937, 9236, 9228, 11733, 7819, 8020, 3946, 8611, 
            11237, 6575, 7172, 9576, 4716, 9712, 3816, 8171, 9528, 6451, 6896,
             12384, 8758, 9248, 6208, 7562, 1226, 9237, 6043}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDcT//tbab9xg
YHv6lJf9yxcvbGfOkLC7f++e3fp1evZfv5TY/f1TY79+3Tq7nTss7Dra2e0b
Gxqsm5uawOLPnqbaL1uqat/dxWUP0vf92zc7kHx/H5/9/391QPzPbveuXXZP
n6TYHTxwwGbqFBG79+/eAdWVgeVWr9KyBzqB4e6dGLuHDxJsJ06YAHTHKTuQ
WFcnJ9j8o0dcwGb09vDYff3yBWjvH7B8Wyur/fFjx+w2b9pkt3CBgi0Qg+3e
uWOHHdAt9r9//QLRdr9/VYHt+Pzpk92xo672nR0dtiA/g9Tv37cPqN8I5Ceb
I4ed7UFuBLkbJL9yhYY9yM8gvRP6+e1B5v76WWm/etUqu3lzZe1bW1hA6m1B
GOhucNg8fPDABuSWiRMEwG45eMDBFuhu+8uXLtn9/FEBEgOGwRSwmSB1wHAH
+c/+5IkTdk2NjPag8AOF58YNG0DhZQsy4/GjJHtQfADV2gEAErHiPA==
           "], 
          "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wwO4uVOzCwA5sFOti90UvoG66Xd2c/8PuLsTu7u7u7u7W
49WH821n3+OJTR0fSIsCJkRHJhCclBgOByenxEQkadzEUHooHJ+Q8e8fGyHq
P53JRhWyU5wc5CUnMeQiGv3jb3+Zm2/m4bs//WE+ipGfgny1AF/8bCHeWph3
FuG9RfngJz/6xteWoCIlKcUrX1qacpShLC987jOfWp4KPPGxj3xoLJV5YCXu
e8+73jGOulSlJretRnWuW4Mb3vKmtajDNWtz1Ste9pL1aEx9GhFPQxpw3ote
8JxnPeNpE2hGE5pyypOe8LjN2WELWtOSVhzzqEc8bBt22pZEDnnQdnTigO3p
QEf2u8+97nG3u+xCkCR605VubHebyfSiOz3Y6hZ7stHNbnKD6w2QwjrX2ocR
9KU//VjtGrMcwBAGMphMB7HKla5wuUMZxjKXusThLHaRC11gKhmMJI1RhJjv
POc6x3RmOttZznA00x0TaTXFaU71L+fS4OA=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 
            1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 
            1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 
            2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 
            2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 
            1, 2, 2, 2, 2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9987, 11864, 8451, 12798, 9736, 3896, 5069, 
            4890, 10011, 7737, 212, 5490, 11777, 3458, 1087, 10783, 12212, 
            10350, 11528, 11106, 8934, 7178, 6914, 4496, 4203, 6558, 7017, 
            5982, 11799, 9159, 11793, 12754, 9516, 10236, 6409, 4905, 10105, 
            11280, 9360, 10284, 8886, 11599, 11047, 10780, 4569, 1929, 11978, 
            11934, 5324, 11687, 5641, 6586, 8034, 7823, 5913, 9301, 6504, 
            13148, 7620, 8731, 1722, 6194, 4781, 8105, 9624, 933, 5928, 6464, 
            11902, 2224, 13231, 5472, 8451, 6221, 4441, 10753, 2422, 797, 
            6300, 1145, 12501, 10023, 13353, 8369, 5233, 10063, 3294, 8801, 
            7297, 4392, 6, 11450, 7840, 11491, 9913, 2531, 8925, 7937, 3567, 
            8670, 6706}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZCsTr162zmzlD
wn7nDgu7Vy8z7Q8ecLA5eOCATWMDg+3UKSL2ly8F2U+ZLGwPYn/8UGAL1MKw
dImK/eNHSfafP32ya2xosAaqtbl544bd+3fv7E6f8rJfuGCB3eJFSvYgtU2N
jPZ9vbz2IDUPHzywAdmzZ7c12J7Wlha7iRME7Cf089v//fPHrq2V1f7tmxy7
kydO2ILYIP3fv32zA6mdPm2a3ccPH+wmTRS0X7lCA6x/w3p9MA1y9+xZUmA7
Vq5YAXbj40eP7K5euWLHgAQWzJe3B5kDcuvqVavsent67H7++AFWf/fOHZBb
7KZPEwO6pcZu44YNtiD/AcMC5EewOUB32e3dY2MHtAPspv6+Pruebm777i4u
e2CYgMRtf3wvt29uarJ7+CDBDuRXUFiCzOloZwfbffFCgN2/v7X2Fy9cAIb7
DLvJkybZwfwPMv//vzp7ALb2yeM=
           "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnewCFuwCxsbAzuwsT2wwDr01CedOZ1x/Ct2dycWqGChYne3
2N26nj7sN7PzPW5i9uzA9ChgTnRkAsF5qeFwcH56TETSZs0NzQiFk1Nm/vtD
EaL+050StKYkFSlFeUoTTRl+q3+MoSyxfPeXcfz0h98sx1e/WIGPfvaTlWhM
ZarwwffGU48EalCV6lTjje9862tfWZO61OKZL63NC+tQ7HOf+sT6JPLYRzbg
rg25ZyPu+9AHNqEFd2xKM5K47S1v2pwbXrcll23FFa951Ta0oy3JXPKiFzxv
e7rRga50JIVzFtmJLpy1M2c8baGnPOkJj3vMHiywJ8PpxRB6M5BU+lJgH/I9
aj/6c8TDDuCQeeY6iMGksd+DHnCfOQ5lGHvd4253OYJxjGQUO91hgLGkM4YM
trjd0Wxzq5vd5EY3OJ5JZDKB9WaxzrWucSKrXeVkpjKFICtd4XKzWeZSp0WK
LHGxi1zoX0Mg1OY=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 
            1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 
            1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 
            2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 
            1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9987, 12838, 8530, 8361, 2841, 871, 13047, 
            5973, 2236, 5462, 10056, 11795, 3390, 6707, 5433, 5423, 13698, 
            6359, 7160, 6861, 7216, 11190, 6860, 11310, 8800, 13196, 2506, 
            9694, 10121, 7718, 5715, 10931, 7748, 12322, 9340, 4944, 5981, 
            9348, 6033, 5066, 6918, 5976, 12425, 10809, 13287, 8890, 9728, 
            7793, 4612, 5025, 5719, 8179, 4679, 8877, 8776, 9742, 4365, 4053, 
            6720, 10932, 12360, 2484, 3043, 9432, 8411, 9217, 6443, 6635, 966,
             8660, 13556, 8767, 5422, 7491, 2464, 8640, 11834, 2425, 4834, 
            5084, 107, 3225, 8772, 6961, 9773, 6261, 13584, 11844, 7883, 68, 
            10833, 8117, 8443, 4910, 11787, 9353, 11887, 5584, 13451, 8667, 
            5488, 4214, 10933}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDsQfPxTYnT1z
xq6xocGms4PD/vSpU3adHR22DFAAEgdi2507LOwePnhg8/TJEzuQ+MEDB8D0
zx8V9kC2zfVr18D8qVNE7A4ecLABsf//q7OfOEEAbNbePXvsHj96ZAfif/zw
wfb/v39g/uRJQvbtbWz2IH5rC4v9jOni9h3t7PYgc3bu2GHb081t//dPjf20
qaL2J0+csPv965fdzx8/bBcuWGDz/NkzJDsP2IDEent47Lq7uED67UHuAIl3
dXLa37kdDXYLyA6gP4BqusBm7d1jY7dura79yhUrbEHunTlDAhgWDHYLFyjY
Hj1yxO78uXN2d+/EAN3YZvf61Su7lSs07FtbWuy+fvkCDI8EsP3fv32zA8mD
7AWGlXVzE5P9j+/l9tu3bbNrbmoCqwHqA9PTp02zA8kD7bAFmQNyA8i/v35W
2sPCHOhOe1C4AgBtRca7
           "], "Children" -> CompressedData["
1:eJwdkVVTFAAABncQFSwUu0WwEwM7MEBsD7sPPfBJZ05nHP+J3YVio9jd3d3d
3bUePuw3s/M9bkLWtEB2FDA9JjKB4MzUcDg4KzM2IhlTZ4RyQuHklCmFf06E
qP9UoQiliCYGLcpfi1GcX/7xt7GU4Kc/LMlXv/vN0lSgDPHEUY4vluWzn/zo
B8vz1ve+syKVeONrX1mZl76wKgOoRkuqU5MaPPW5z6xFfWqTQB0e+cTH1uWO
idQjifs+9IH3vGsDWtCQxty2Ebe8aROacsPrNqM517zqFS97yYsmk04r2tGa
NlzwvG1J4ZxnPeNp27PLDnTllB3pxFE7c8yTduGExz1iNw7bnVR6cMiD9iSN
A/aiN3vd7z73uNs+ZLDTHfalP/3Y5nYL3Gq+A8liEJkMZoND2OgWA2x2k0MZ
xTBGst7hjGCt68xzjbmOZgKrHcNYxrHKla5wPMtd5lInEmSRS1zspEiNhU4m
RDYLnO885zrH2f4DGjLY5A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 
            2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 
            1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 
            2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 
            1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 
            2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11179, 3, 12040, 11003, 10806, 9742, 775, 
            11149, 12000, 12419, 6967, 5646, 4873, 10313, 851, 13, 6973, 7000,
             9263, 9603, 6302, 7943, 9412, 13584, 2658, 6483, 3361, 6164, 
            10150, 12471, 2808, 940, 13173, 12569, 10457, 13263, 2315, 6600, 
            713, 5803, 9400, 5262, 11658, 10656, 10900, 12654, 8832, 9622, 
            11101, 4998, 4619, 11503, 7779, 10759, 6458, 12825, 4936, 8637, 
            10434, 6184, 4798, 5657, 7687, 11121, 11557, 10923, 9304, 8775, 
            6190, 7493, 11933, 13170, 8645, 8451, 982, 7760, 6970, 7797, 7585,
             8096, 10584, 8726, 12607, 8765, 9768, 1740, 11801, 12577, 4192, 
            10048, 7683, 2386, 5310, 10908, 11065, 11113, 7168, 5382, 9377, 
            4013, 2256, 8494, 9303, 8355}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZAcR//9TYHzzg
YHvzRoT9wwcPbGbNlATyD9gwQMHWLSb2mzYa2m/cYGB79UqI/YL58vYgsZMn
TtgtXaJiP3uWlP3UKSL2kyYK2l+/FgbSa9vXy2s/cYKA/cwZM+xmz5pld/nS
JbuTJzzsgPbYNDYw2LS1stofP3bMDminHUhfdxeXfWcHh/2Efn6QG+ymT5tm
x4AEjh5xsQOZ9f/fPzuQuqZGRpDZtiBze3t6wOI/f/ywA7nj7Bkfu8aGBpv3
797ZzZ0jY7dwwQK7nm5ue5C9QGwLpeH++/zpE1g/0E9gGqTn4oULQP4WO6Cf
7a5fu2bX2sJid+yoK9jeFcvVQf63O7DfHuwGEAbZ9/XLF5C91levXLH7/u2b
3do1OvYvX2TYNTcx2ff28Njv3rXLDuQ3kB0g84Bqbf//q7OfPGmS3auXmWD3
AcMH7O/Dhw4B5RnsW1ta7ABIEst2
           "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnfAABM7UbFbMTCwUFQQ87D70AOedOZ0xvGX2F0odnd3d3d3
d60nD/vN7HyPm5A1OZAdBUyJiUwgOC0lHA5Oz4yNSPqkqaGcUDgxKff/nxsh
qoBhRFOaQpSkMCUoQnGKEovG8Nc/FuOnv/3lD7/7za+W4pNf/GwcjSlDI8py
03LcsjwNqcBdK1KbSjy1Ms+sQjxVqU413vvRD77zrTVIoCYvfWMtXvvKFz63
Dg2oS32eWI/HPvKhD7zvPe942xtetwlJNKU512zGVa/Ygra0JJHLXrIVbWjN
eS96wXOe9YynbUdn2tOJU3agI8mc9ITHPeZRj9iFNLrSg8N245ApdGe/Bz1g
Kj3Z51570Zs97naXO91hOn0YTAZ92e42+5FJfwIMYBBbHcgWN7vJjW5wvetc
6xCGssbV5rvK4WQxgrGMZAyjGM1K81zhcpe51CWOYzxBFrvIhS5wAjOcGCkS
Ipv5zjOH2c51jrOc6T9YGNrj
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 
            2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 
            2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 
            2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 
            1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 
            2, 2, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9524, 12032, 11001, 9985, 824, 8430, 7155, 
            5688, 4521, 11341, 7822, 9838, 11042, 2368, 4823, 4626, 13105, 
            11157, 2154, 9507, 12918, 5434, 4216, 1738, 3907, 12826, 5874, 
            6200, 9741, 12014, 11920, 12368, 8548, 11063, 3990, 5472, 1194, 
            12643, 8696, 9136, 8002, 5516, 9393, 3585, 11056, 11313, 8748, 
            10949, 6190, 814, 5127, 10351, 8849, 11086, 7183, 12330, 9964, 
            3843, 11126, 5792, 10218, 4897, 9673, 13063, 9221, 180, 9233, 
            7069, 8637, 8303, 11941, 9063, 2753, 6896, 4647, 10511, 5616, 
            10011, 6276, 6009, 8611, 11744, 1745, 6707, 12404, 10138, 5195, 
            2865, 8987, 4855, 7609, 5219, 11624, 7617, 13364, 8041, 6971, 
            7683, 8849, 6076, 965, 4554, 7247, 10171}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZAcT79traHz3i
Yr9+nZ79xQsB9r9//bIDCjNcvRJi19vDY9/YwGBz8cIFW5AYiAby7VauWGG3
cIGCbVsrq/3UKSL2QL7t3Tt37Pr7+OwPHnCwnThhgu3CBQts9u6xAZvV2NBg
AxS3AdEPHyTYgtiPHz2ym9DPbw/CDFAANNu+p5vbfvIkITANVG89ZbKw/flz
5+z+//tnN3PGDLB5Rw4722/dYmL38UOBHcielSs07G7eiLA7cdzdHqQeJLdz
h4UdiP33T4396lWr7EBmgcydO2eO3exZs8DuX7tmjV1LMzPIHjuQ3ZMmCtr3
9vTYff9WZr98mZr9iuXqYLeB9HV1coLNampkBLutuYnJHmRGd1eX3cEDB2wh
2MEGZDfITUDzbLdv2way1+b+vXtgt0D9aPP61Su7ly8y4P6ePGkSWM/qVVr2
H97n20PCvcEG5BYAbwe8/Q==
           "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uFOzCwA5MQDAOuw89uCedOZ1x/BK7CxW7u7u7u7s7
1tOH3Zmdjc+eFMiJASbHRhUITk2JRILTsuKikTZxSig3FElKDv/74Sgx/xlL
AdpTkOMWoiWFqUYRYtE/xlGVohTjt78sTmlKUJKf/vC7pfjmV8tQhbJUphzl
+eJnK1CJinzwkx997zvf+sbXvvKlL6xObWpQi+fW5JlPfeJj40miDi2oS0MS
SOSRD31gPepzxwbc9b73bMQVG9OMJjTltre86Q2bc9XrXvOyl7zoBVvRmvOe
sw0nTOakZ21LO055xtN2oA8d6UonutCZIx7zqIc9ZDdSOOgBu9OL/fZgnz3Z
6x57s9Pd7jKVAGn0ZYfpbHebGQwkk35sdYv92eAANrrZTa53nVmMYhBDGMxq
17rGoQwn32GscqUrHMFIlpnnckezyKWOYYmLHUc2Qea70AWOJ5cJhJjnXOeY
w2xnOdMwM5zuXxNv2uM=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 
            1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 
            1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 
            2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 
            2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 
            2, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{12597, 12084, 2310, 1656, 7017, 8460, 9662, 
            11246, 1783, 10219, 6420, 7, 978, 11100, 5071, 13081, 3035, 7440, 
            2777, 13153, 12501, 4145, 11957, 12097, 9385, 10218, 11324, 4966, 
            9839, 12353, 8167, 13768, 4712, 10300, 9817, 5890, 4214, 8148, 
            7113, 4976, 8757, 8781, 8125, 6419, 12381, 8466, 7697, 6243, 6197,
             9774, 6246, 5133, 4866, 11095, 4882, 1026, 10024, 7331, 8464, 
            8872, 1184, 10462, 612, 1988, 7366, 2025, 11216, 8081, 7990, 9384,
             9323, 2457, 6296, 8977, 7726, 12304, 7893, 4493, 5696, 10478, 
            4624, 12563, 8228, 9022, 7257, 9483, 5075, 4794, 7642, 7349, 
            11600, 5091, 6710, 9633, 5122, 3989, 9425, 8512, 11235, 7910, 
            9345, 8809, 9876}], "NumericalThresholds" -> CompressedData["
1:eJw1kLtLQnEUx69FVtCLoq3B/oUau/ecgoaWIGxt0egxCIENET3wbYWPa2qD
len/YLaVgkGBmm0GtmiDmYGZTal1zgWHe8/vPH6/7/dzJvVb2vUuQRC2++in
1e3MGY263WU1J2s6w/SUQUXHDfrOguP4VlrFgH8MP6tVuLyYQLNJwFKxCPep
FLwWCvBdrwPV4KtWk6wWC/BcMpEQzSaTmM0s4nt5k/ui3WZTZq9jMXjOLUkf
lQrVTTPRSEQkKSGZmBX9p6Pok2VoNfeB7iHnrWYTfPKI1Jnj3GbtRoe9B2Xv
MB45e5HrrEceoOOVI2tzz+1ywd0tYDSiUVhOjvuVOxx/Gg3iWCG9MgQDAXh8
WIDzUIj45iGTTpPXHLhdA8o8azkdamTWp2wWbuJxxYvFrMKrcBisli5kNuby
eobwr33I+5Kav3vocQ8qe2NO7lOEl3yeuDQS74ffJ0bo7IKZO+d26wApSsxH
XqBU1OM/25PLNw==
           "], "Children" -> CompressedData["
1:eJwdkVVTFAAABncQFSwUu0WwEwM7MEBsD7sPPfBJZ05nHP+J3YVio9jd3d3d
3bUePuw3s/M9bkLWtEB2FDA9JjKB4MzUcDg4KzM2IhlTZ4RyQuHklCmFf06E
qP8MoQjNiaYqRSlHMcpSnDLEUJpYSqIl+Osff1uKX/70h9+N44vf/OpnPxlP
eT76wQpUoiJvfe87K1OFN772lS+tRgLVqcELn1uTOtSiNs986hMf+8iH1uWy
iTQliYbUowH1uecD73vXOzbiuo25YRNuettbNuOK17xqCzbakj4kk04rutKa
Nlzyom3pQgonbEdn2nPaC3agI5047znPesZTnvS4x+xGKkftzhEP24Pe9KQX
hzzoAfebxh73udfd7jKDvux0h/0YSH8GsN0Ct7nVQQwm3y1udpMBJpHJKIYy
jA2udzgjWecI8lzrGnMdzVhWO4ZVrnQc41nhcicwkWUudYlBsljoYhc5mdmG
IlUWmM185znXOf4Dl6XY5A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 
            1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 
            2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 
            1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 
            2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 
            1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8451, 13564, 2918, 12893, 3472, 11142, 5386, 
            8955, 10925, 8485, 13717, 5328, 891, 13470, 795, 1079, 4303, 5313,
             5280, 12398, 7860, 11677, 11204, 1585, 9442, 12494, 11794, 5414, 
            312, 8721, 6541, 3989, 10041, 3157, 6383, 4606, 1255, 3204, 3429, 
            13468, 13185, 2823, 7023, 6659, 196, 8035, 8616, 12022, 3341, 
            3735, 11629, 10188, 197, 5527, 12704, 6500, 10208, 10887, 10924, 
            8558, 5172, 8840, 8498, 11686, 13051, 13162, 10014, 7448, 12914, 
            8751, 8790, 8004, 6686, 12736, 9106, 11019, 11475, 12579, 8988, 
            11702, 9196, 7736, 7906, 10947, 6352, 11565, 4097, 7929, 2377, 
            4216, 4991, 4930, 6396, 4374, 10005, 8059, 7350}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZCMR378TYvX6V
Zf/pY6H9zRs3bBsbGGw+figA0g3W//7W2gNpu4ULFGyB2A4k9/BBgv3CBQts
Wlta7F6+yLAHGsEA1GfX2sICZi9ZrGx/8MABG5DelmZm+ymThe3nzJa2b29j
s58+Tcz+4oULtiC1QNoOqM6OAQqAbNsF8+XBZoPUrFyhAbSvwQbkvp5ubqCZ
DkC7H9i0t7XZ9fXy2k+eJGT//1+d/ayZkmB7QWYC9drdvnXLDqQW5H4gbbdz
xw6wOUC3g9xv+/7dOzugObYgufv37tlt3bLFbuIEAdujR1zsQG4GssHm9fbw
2Hd2dNiC2CD7dmw3t9+7Z4/dn9/VYPnNm4zsN24wsNu7xwZMg8SA4WYPCiuQ
+gn9/PbTporaz5whYQdy1+dPn0D223388MHu6ZMUsJ9A7rp6JcQOAFgjuIc=

           "], "Children" -> CompressedData["
1:eJwdkOdTDgAAh5/LKit7r5CMjIysUBQS4Q1le92FT9y93Dn/TPYeyciMZM+s
7E32nplPbz48v7vnft+emPlLAgsigKWR4QkEl6eEQsEVWVFhSV+8LHdhbigh
cVHVHwwT8Z/mVKMu1YmiBpHUpBb6z7/+8be/rE0dflrhD7/7zXrUpxHRNOCr
X/xsQz750cY0pQnv/OB739qMN762BVNoSSKtuGBrLtqGAbTlsu3oQns604GO
xPDCV760E898brlPjeWJj42jB13pziO78dAH3vee8fSiJ7e96x17c8U+XDWB
/vSlzFv246Y3vO41S73kQEYyiGEMJokhDOW85zzrGU97yuGkMIJkTnrC45Z4
zGKPOoojppJGgNGMpcgxHPaQ6WRw0HEccL/jyWSfEyh0r3ucyCR2utvJ7LLA
fLPY4Xankuc0ZpDNJnPY7HS2uM2tzgzXnsU8ZjOXOax3oxtc51rXuNpVrrQS
7onM6g==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 
            2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 
            2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 
            1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11900, 7997, 10773, 121, 7645, 5206, 11025, 
            2493, 12405, 5549, 1605, 8640, 7854, 13485, 4911, 7035, 8635, 
            9943, 1676, 869, 13382, 11186, 5613, 12861, 12710, 5445, 7795, 
            12876, 13179, 3274, 706, 4957, 4167, 4644, 10637, 9882, 5190, 
            9503, 10137, 5133, 8122, 5143, 4261, 9711, 10787, 9002, 10552, 
            10303, 5482, 9918, 8002, 4694, 8323, 5663, 6369, 4920, 5126, 8258,
             12765, 9116, 5946, 7266, 13470, 3272, 10651, 2961, 2890, 7028, 
            11974, 3364, 2716, 7909, 8712, 6911, 4057, 11724, 7683, 2950, 
            7286, 6461, 7428, 8416, 8992, 4407, 10120, 7098, 12394, 3869, 
            10231, 13185, 8512, 6487, 5072, 934, 11708, 5718, 8942, 8505, 
            9289, 8558}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZAsT79traz5wh
YT9poqD9hH5++zmzpe0nThCwvXjhgu3WLVvsmpuY7OfOmWP38MEDu79/aux6
e3rsNm8ysgdqZehoZ7efPm2aHVC/XVMjo31bK6s9SOzCeX/7rk5O+40bNtg2
NjRYg9QCaZu1a9bYff/2zY4BCg4ecLABmb9yxQo7EPv/v392P3/8sJ0/bx7Y
nrNnfOzevsmxg+hnsAXZf/PGDbj+u3fu2LW2sNhPniRkD9K7cMECG6A6m75e
XrBf2tvY7G/eiLDbu8cGaM4bkB22IPmnT1JA5oL8CXSjgS3UfBsQDXLLhvX6
9idPnLAFuWntGh27yZMm2f3/V2d/+JCTPdAOO5Cfrl+7BqJt/v2tBYfF/Xv3
7ObOkQG7bdpUUXuQfaBwBPH7+/js9+/bB5YDhenzZ2n2ILNBfFC4g/z48sUL
sH4ALxK17g==
           "], "Children" -> CompressedData["
1:eJwdkedXDQAAR+8po+y9RfYmI5uyKiteRrYX4RPnPM5x/C3ZsldWCMneZO+9
Za+MuJ4+3N859/w+3tiMBYE5EcDCqPAEgosTQ6HgkrTosKTMX5Q5NzMUFz/v
/z87TEQpI4hkGGUYSFmaUY4qlCcajeKvf6xAZSpSiRJ/+8uf/rDYqsRQjRpU
56vf/eYXa1KLRtSmIXWoT10++Nl6fPKj723AO99a5Btf25hXvrQJTXnhc58Z
y1Of2JzWtKAlj33kQ1vxwPu2IY62tOee7bjrHTvQmY504ra3vOkNr9uFa161
K33pRjzdueQVe3DZQnvSh16c86K9ueB5z3rGfvTntKc86QBOeNwEBpNIgccc
xFGPeNgh5DuUQx40iRQOmEye+x1Orvvc60iCjGI6o0knlbGMYZd73G2AcaSR
4053OJ4JbHebE9nsVrc4iSlscjIb3eBUsp3GWte7zjXOYLUzWeVKM8IlVjiL
5S5zqVn+A5S70uc=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 
            1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 
            2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 
            2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 
            2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9574, 1539, 12050, 1407, 3609, 4921, 11148, 
            11599, 2554, 11725, 10798, 6373, 4886, 10826, 1183, 9463, 10247, 
            2754, 3349, 6574, 11288, 3262, 8812, 9162, 4968, 11186, 8549, 
            7875, 10771, 13410, 6576, 9309, 12495, 825, 2571, 8601, 7733, 
            8464, 10102, 11489, 1351, 10407, 4191, 6955, 7996, 12819, 10036, 
            10594, 5835, 5290, 3355, 12086, 12532, 5631, 12653, 6430, 7827, 
            6404, 6771, 4679, 5440, 11862, 5767, 2999, 5543, 10711, 12676, 
            11099, 7479, 8804, 8436, 10973, 10657, 9591, 8893, 11916, 2329, 
            988, 7082, 6674, 10768, 7999, 5813, 11168, 11822, 7229, 5681, 
            11787, 11148, 10805, 4609, 12364, 7572, 11799, 8100, 8533, 6269, 
            6989, 7339, 4641, 2727, 10016}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZBsQ3b0TYr1yh
YTdlsrD9jevh9l+/lNjv2mlp39jQYA2UZnj44IHN6VOn7EDs3h4e+7lzZOyn
Tpli9+hhov3lS0H2IPHt27bZzZ0zx+7gAQfbf39r7WfPmmU3a6Yk0AwGOxD7
5IkTdufPnbPraGe3//vnj92ihYr2GzcY2D598sTu548ftv///bNrb2Oz379v
n11rSwvIHJu9e2zs1q5ZA7b37JkzYL1fv3wByh2wuX3rlh3QfTZHjxyx6+vl
tV+4QMF25owZtn//1Ni/fPHCFuT2eXNl7ZubmOwnThCw371rlx1IDcj93799
s1u8aJEdzH8zZ0iA7bh44YLd719V9iC7Hz5IsHv9Ksv+189Ke4i5f+xA8iA3
3rxxwxboH1ugPXY93dxg83bu2GH38cMHu8mThMDhBlRj9/ZNjt2e3db2/X19
IDeD3QsMDxuQXSA3g9wOFLcFmmsLCguQeFMjIzg8QeYBAK6u0ew=
           "], 
          "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uBMVWDOzAQgzUQ+w69E6fdOZ0xvFT7O5ALFSwu7C7
u7tzPX3YndnZ+OwZgXAMMDM2qkBwdmokEpyTGReN9OmzQlNDkeSUaf9+OErM
f8ZThCoUpQzFiKU4vyzBb/WPcZTkpz8sxRe/W5pvfrUslSlHRcpTgc9+8qMf
fG8l3vnWN762KgOoRnOq04wa1OSVL61FErVpSB0aUJf61OOZL3xuPI996hMT
SOSRD33gfRtxx3vetTFNuO0tb9qUG173mldtQS9a0oFWtKE1yVzxspe8aFva
ccHztueMKRR6zrN25ICdSKUzh+1CD07blW4c95TdOekJj9mTox7xkAftTR/2
u8++7HSv/UijP3ssMJ1d5rvbgWQxiACDGUoGQ8hzh9vd5jBy3eoWM9noZoeT
4yZHMIqRrHOD6x3NWNY6hjWudpXjWOkKlzuBiUxmmZMIks1Sl7jYRU4hxEIX
GGau853nXz1V1uU=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 
            2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 
            1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 
            2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 
            2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 
            2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11168, 7681, 8450, 9573, 2117, 4906, 11200, 
            5156, 11151, 4261, 2842, 9177, 11940, 1875, 11600, 5593, 11794, 
            13478, 12769, 4425, 2732, 9050, 5407, 5755, 10240, 11673, 7115, 
            3866, 12491, 1138, 6266, 2327, 6158, 5512, 12666, 3063, 10231, 
            8935, 9823, 5867, 8738, 8524, 12582, 9672, 6983, 11322, 9382, 
            11938, 5429, 6268, 11693, 12964, 6411, 7281, 10109, 8988, 12199, 
            8666, 1193, 10757, 5751, 9321, 10012, 7617, 11964, 8926, 6026, 
            4972, 10113, 6990, 10545, 1259, 8716, 7965, 12092, 8860, 6744, 
            11295, 12064, 3529, 3517, 1783, 4112, 8616, 7086, 4565, 11541, 
            12778, 8665, 5778, 3992, 3043, 10192, 3843, 6542, 8105, 11620, 
            12366, 1375, 4305, 10999, 9703, 7527, 4261, 5589, 2005, 12421, 
            933, 2359, 4359}], "NumericalThresholds" -> CompressedData["
1:eJw1UN0rg2EUf6csJbe4Um6UUr7ueN9z+BeGOxemuNCiNvnI1DaZCx8xZTO1
zRSbyDbUbFMUxc18bhhqbn0U+dy8k+c8cfG8zzm/3/s7v995ilu7VO1ZgiDo
cthHpe6t12rV/Q1KatrUmuoqjYKVnez8ZAYxHKrBgL8SlxZL8DudhqnJSfj8
6OGYdSYfX56fYX9vD06OjyEjyzBiVuKC2w2x80bYjohweHAA4VAI/D6fRMdo
MNRmZD3c3tzAeiAAY6O5+P7WDdeJBK+JnxjPQ2YvsJnS7k6deBSNstl6PDs9
hWmLBegfo0EQnx41QPzqShlQ/adhvhEgnnq6t4JB5tcMV5eXhPOZlJ14xlEm
SKf6Uf4eQMphMirwLtmC8VgT5RHn7Hbuw7TodBThrK2Q96Tf3NjgvjZrARLm
91WAb60c/70ZxvAd8S6Z5DkJm3e5xNRXH3o9HsnpcHA97fhw38Fm2/h+tCfT
SUMmE0TCtZRHuojHYdlbSjXXDJmyuA+9O/OR3l51aB7Oxl8cOty/
           "], 
          "Children" -> CompressedData["
1:eJwdiWOTFQAAAHcu3WVbl10XLuPy5d5lv6tDumZezTT9jGzbtm3btu22Vx92
Z3Y2OnFUIDkCGB0ZViA4Ni4UCo5LiApHfNqYpJSkUExs6r+fFibiP/1JR2fS
E0cGmpKRgmQiN5HkIoqcZOabWchBVrKTjd/qH3/50x9+96tf/Own85CfvOTj
ox987zvfWoA3vrYQMRSmMkWoQFFKU4xoivPMV5agJM996QufWoonPrYM5Xhk
WR76wPLc9b73rEgl7njbW970hlWoSjWue83q1OCqV7zsJWsSSy1qc9ELnrcO
5zxrXepxxtPWpwGnPGlDGnHC4zamCcc86hEP24wDHvKgzelEC1qx35bsc6+t
6UAbttmWePa423a0Z5c73eF2O7LZrW5xkxvtQi+6kkCAdW5wvd3oSXd6sNY1
rnaVK11hb/rRh74sd5lLXeJiFzmAkQwkmUEMYaFBEhnMAuc7z7kmMcs5zjaF
VGY6w6EMY7rTnOpwRjDJKU52omlMcLx/AUYF5t0=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 
            1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 
            2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
            2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 
            1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 
            2, 2, 2, 2, 1, 1, 1, 2, 2, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9494, 11246, 12523, 12585, 11790, 11314, 2645,
             11853, 8106, 2965, 1843, 6412, 5141, 4992, 1800, 1729, 8005, 
            11905, 1966, 7114, 11555, 11238, 1554, 6871, 3896, 6695, 9708, 
            11743, 4948, 8260, 7132, 3018, 11777, 2761, 4971, 12529, 7471, 
            6881, 2691, 676, 1077, 12190, 11808, 12171, 11160, 11556, 12376, 
            168, 8083, 8895, 11084, 5661, 8536, 4110, 10605, 7311, 11029, 
            11544, 11562, 11899, 784, 8119, 5333, 4606, 11356, 8888, 8808, 
            9199, 7017, 7071, 12012, 8220, 5062, 11286, 7235, 9219, 9546, 
            8806, 136, 7149, 4362, 4986, 10894, 8607, 10842, 944, 4495, 6645, 
            4505, 4503, 7997, 12555, 5709, 10186, 4668, 11824, 9423, 8891, 
            10045, 1845, 2066, 9418, 3007, 6852, 5184, 7059, 5689}], 
          "NumericalThresholds" -> CompressedData["
1:eJw1kN8rg2EUx19iuVBcuJIbV8qVuPQ+55DilnHPFDfUapQUeoe9qyEUU0zZ
1Aw3M//AFtlwY0zNle3Gj5lM7YcLNuc8cXGeH+f5Pp/zPadx2GwcLVcUZaKK
FqNpqtNiMU33G/gyYhpvax0vo+MYxfpaLRZ/ZtGqae2bG3WYTAyJzIeZ72oo
2KGGL7oxFAyqJFWsmgIU6m20D917e3TWYMvpBH7jfWF+Hna2t+EhHodSsQiv
Ly+C9IK48Pz0JLWXkYjMsdZ30IQn/hZg/mcmIyLhHry+uiJGPe57PJLLeqol
60dvesWSwwH3sRiwN6ovkomEYO57Og123UC+Ffzjwc/3DLDetliBHMzYdbn4
r7iPDUh+qTiHsbt+XFutwZXlajg/68Ljo2by5RfEEZwnDnI/u64GyGUn5Wy4
p1w2KxmHPh8ceL1QyOelL87xfP4923WdZ9XOs2Z//P8tlZJ9EE/WZO1pIABf
hSn5nngcZK3K89RtlehxN+Ivsc7TYA==
           "], "Children" -> CompressedData["

1:eJwdkVVPFQAARs+wwO4uVOzCwA5sFOti90UvoG66Xd2c/8PuLsTu7u7u7u7W
49WH821n3+OJTR0fSIsCJkRHJhCclBgOByenxEQkadzEUHooHJ+Q8e8fGyHq
PyPIRjeyU5kcVCAnechFbjSaP8bw21/+9Id5KUg+CvDd/Hzzq1/8bCGKUZgi
fPKjRXnnB99bnLKUoBRvLckbX1uaMrzypS98bjnK88ynPvGxFYnlkQ+txD0f
eN8q1CGOK1alFtWozl3veNsa3LImN73hdWtzzavWpSn1aEh94rnsJS/agAue
txFNaMxpEzjjOc96ypM2oy3NaUULjtqSY57wuK1pwxEPe8iDHjCRdnShPTvt
QCf225F97rUzu9zjbneYRFe2ut1tJjOU7vRgi5vtSR822YveBNjoBtebwjrX
2pchrLEf/RlAlqsdyCAyXeVKB7PC5S5zqUscxnAWuthFBgmRykgWON95jmKu
c0xjNOlkMNtZznSGYyKlpjvNqU7xLzM/4OA=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 
            1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 
            1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 
            2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 
            2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 
            2, 2, 2, 2, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11091, 7686, 9255, 13477, 4764, 8429, 12302, 
            8432, 6611, 10079, 11949, 2579, 7743, 7973, 9982, 1122, 12744, 
            2346, 309, 1655, 5987, 10119, 7886, 5530, 11116, 412, 11730, 
            11109, 12017, 1137, 2565, 13530, 13114, 11231, 8836, 8379, 7273, 
            5493, 12551, 5528, 6245, 12610, 8531, 6210, 9478, 12410, 11679, 
            5941, 10174, 6759, 7620, 10887, 11787, 7295, 9656, 9606, 11175, 
            2780, 6188, 11216, 6179, 8345, 11711, 5789, 12134, 10987, 9710, 
            7197, 2385, 13385, 8699, 11287, 10716, 9466, 5622, 12552, 9438, 
            8372, 5205, 6488, 456, 12038, 2956, 8974, 4906, 1873, 5785, 7931, 
            6439, 11781, 11967, 6983, 11172, 9988, 7240, 6267, 13451, 13344, 
            2858, 12605, 7079, 1777, 11722, 7295, 8035, 8655, 4789}], 
          "NumericalThresholds" -> CompressedData["
1:eJwdUDksg3EU/1xViTOORISw2QiDwfe9x26qSAyWSlg0IRWRhqGoFtG6imgd
7eJYKCoMjtprJJWQVBVVR2mr9Er83ze8f/7v+B3vVXX2yrpTOY7rl7JHJh9s
VirlqlYJJV1yRX2dIoV9e1gkE8M4O5OHtr0a/Ar04vpaOd5ct+He7i5MTWbh
iJrjLx1N/IhaDRfn58D+oJ/OBqulEiYnpDg3mw9bm5tw5XTC4cEBMEpufq4A
TSul1MPfSAQiPwNIdZ1WC7eudsbhEOfHRlNx31Yr1gKfn6DTSvDj/Z34cWmx
GBk/aMcz8Oz0FMY16ZSjcaEQDfockY95avz+6hOWl0rwyG4H0komEkDzxE0a
8VgM2A7Co8cDNM+Cp512tquZrgve/H74CYeZnxZ49fkgFAzC/V2H6CEWVSH1
J3SZmIgPibtsrFcguwGaTSZx10VjEYaCSpwx5OKT1yveiLAPbjd/ctyApEn3
o9xqsfDsJgL5e3l+BoYF0giH+mmOJ+y+zSYwHwLxRf/+BMJqxtJw1VyG/3n+
4F8=
           "], "Children" -> CompressedData["
1:eJwdkVVPFQAARs+wwO4uVOzCwA5sFOti90UvoG66Xd2c/8PuLsTu7u7u7u7W
49WH821n3+OJTR0fSIsCJkRHJhCclBgOByenxEQkadzEUHooHJ+Q8e8fGyHq
P0GyESA7vclBHDmpQi4KEE0+YvhhbvKiefjjb3/50+/m55tf/WJBClGBwhSn
CEX57CeL8d6PfrAETy3JM0vx3NKUpwzlKMsb3/nW177ypS+sSCxPfGwlKvPI
hz7wvve8a1U6Uo32VKcdNWhGTZpSi0bUpiF1iKcuN6zHTetzyzvetgFXve41
r3jZxjQhgQte8qLnPedZz9icVpy2BadsyUlP2Jo2HPeYbTlkIoc96hEPesAO
7HW/++xEZ/a42y70Iolu7LIrO91hMpvcbnd6sNmebHGbW93oBte7zhSG0YcB
9KU//chyrWtcbaYDWeIghrLKwax0CCtc7jKXOpwFLnYEi1xoKqMYyVznO88Q
acxxtrNMJyNSaKajmeEYpjvNqU7xL5YY4OA=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 
            1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 
            1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 
            2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 
            2, 2, 1, 2, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11817, 3918, 8451, 12658, 3261, 5162, 13211, 
            5459, 5108, 7244, 11779, 3970, 12668, 5883, 11971, 9377, 8498, 
            10214, 5645, 11289, 3904, 1235, 8313, 8239, 12122, 5662, 7122, 
            6331, 10870, 11367, 3841, 11316, 6514, 9547, 8666, 6916, 394, 56, 
            403, 10215, 4774, 11077, 807, 7578, 343, 4121, 6413, 10240, 8084, 
            12497, 2432, 8142, 6632, 4823, 9441, 8972, 7571, 10030, 5786, 
            8452, 8724, 2011, 8910, 5055, 5403, 6366, 10756, 3881, 9390, 3306,
             5767, 1748, 6230, 6532, 13763, 4362, 3672, 5281, 11605, 7088, 
            4818, 4778, 13490, 10214, 11718, 4261, 8588, 7590, 6593, 12835, 
            5275, 8000, 10235, 11751, 4178, 11770, 5808, 12506, 11562, 4733, 
            6316, 9362, 773, 5148, 9564, 7775, 7838, 8574, 8974, 9812}], 
          "NumericalThresholds" -> CompressedData["
1:eJw1UUksA1EYHj3QIOIicUPi5GK9mff/3ES4lINrJcShQdoDQmTKQVHbQdWl
HVtiOWilbiRtUrXWyb4klstIqFpSFdV6/2CSb972v/9bXl5jm65ZIwiCSct/
On1HpdGo76pLpkWT3lBaYkji01YO22QWEpYWF+H4qB4/IhF4ezXig9KCsjMH
J8YzgZcJ0/ZsnJFz2Yg1Hc2SBN+xHnhQFLYdCIDb5QKzJIibGyJYh9PoXLy+
ugJC8KAGpmw2OD9r4HVFzOf1stOTE1hzF2OfOQkHLRb2/mYiHiSey4sLILhW
C5G4hodS8TkUAprf3tyInAcS8Tjc390B3eeaYUaWGd0lHhr5Wnx6NMDCfD6s
e8o4PEDafN4KcdpuB8LYaAbvb4W52Vm1D3kiDoLw95En6rXl98NntBMT8V78
jEa5V6n891xilBvtU2/y/RJuVzX997AMpPAsFYh9dSNpoL3dnSo1y5dwmO3v
VfMMtGpm/X0adDocapb0FjSuLBeotZQ3eeF64DBYiz/p7NT/
           "], 
          "Children" -> CompressedData["
1:eJwdkVVTFAAABnewwO4u7FYM7MDG9rD70AMsnEFnHH+G3d3d3d3d3d3drqcP
+83sfI8bnTgqkBQBjI4MTyA4Ni4tLTguISos8aljQsmhtJjYlH9/apiI/wRI
R3vSU5YMlCIjmclEFJH8Vv/4y59mIS9ZeW82cpKdr+bgmz/8bi4+mJs8fPGz
n/xoPgqQnze+860FKUohivDawrzypS98bjGiKU5JnlmCpz7xsY986ANLc8cy
3PW+9yxHM8pTnwqctCKxVKIOlalNFS5ZlWrc9pbVuWwNanLTGG543Vpc8ZpX
vegFz3vOutTjrGc87Skb0JATHrcRjTnmUZvQlCMe9pAHjaMlB2xOC/a63322
oh2t2e4e27DbtsSzw13udJtb7UAnOrLJLW62M13Y6AbX25V1rjWBoXSjB91Z
5RpX25MgvRjASnvTh36ssC/LXeZS+7PExQ5kvoscxEIXmEgKg0linkMIMdu5
zjGZGc5yptOd5jDGOzxcawSTnOpIpjjZiU7wL4OV5t0=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 
            2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 
            1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 
            2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 
            2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 
            2, 2, 2, 2, 1, 1, 2, 1, 1, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11311, 9243, 13398, 1035, 6539, 991, 5007, 70,
             1646, 10759, 30, 11564, 1094, 1147, 11244, 313, 3437, 7985, 4775,
             12332, 7393, 11070, 6315, 7956, 4848, 10222, 4163, 5277, 1771, 
            5854, 9076, 10825, 4050, 8000, 8362, 5685, 11752, 6646, 6343, 
            5708, 4651, 5650, 7844, 7180, 5012, 12343, 4903, 5225, 7930, 7186,
             9266, 4622, 6996, 8883, 11163, 10240, 10208, 13502, 2580, 11434, 
            5768, 7715, 12566, 5867, 6454, 6484, 13089, 7076, 7753, 1360, 
            5944, 8961, 11070, 633, 6507, 5652, 11701, 4474, 13465, 4455, 
            12647, 2890, 4367, 4283, 5075, 8031, 8216, 3138, 7589, 4988, 
            10326, 207, 7217, 9510, 5862, 13790, 5412, 8118, 11086, 11628, 
            1508, 3433, 4428, 6272}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZAcT//tba9/fx
2S9epGQ/aaKgfVcnp/3lS5fsGhsYbCZOELB7+OCBDVAZQ0c7u/3CBQvsQGpm
TBe3//O72n7KZGH77i4u+/Y2NvvGhgbrgwccbDo7OOzevsmxu33rFsgMW5D4
1i0mdnfvxNiB1D18kGD3+dMnu+/fvoExzPyLFy7YrV2zxu73r19gvT9//AC7
4fq1a3Yg+e3btgH5DWD2tKmiIPtsWltY7L5++WL35nU22B0gOZAbQXY9fZIC
dK+CLcitIPGTJ07Y/f9XZ//rZ6X9wQMHbObOkbEHuReEe3t67GbOmGEL1GvT
3tZm19nRYbt82TI7kDqY2/v7+oDu0wGJ2YH88ON7Odj/Pd3c9suXqdmDwgek
D6R+6RIVsDuPHXUF2wFif/zwwQ6IbUHsB/fj7YFutweZcfFCgO3qVauA/q4C
++njhwJ7oNvA+kH+BwCNoMtK
           "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwO4uFOzCwA5MQDAOuw89uCedOZ1x/BK7CxW7u7u7u7s7
1tOH3Zmdjc+eFMiJASbHRhUITk2JRILTsuKikTZxSig3FElKDv/74Sgx/+lK
AdpSkOoUohqFqUQRyhFLUeL4rf6xGCUozg9/+dOSfLQUnyzNZ8vwxbJ89bvf
/GB5KlCR977zrW+sTFVeW4VXvvSFz33mU2vQkJrU4omPrU0i8SRQh7o88qEP
vO8971qPG9anAXe87S1v2oiWNKYZTbhiU6563Ws257wtuOBlk7jkRVtx0tac
sg3JnPOsZzxtOzrTno504JgnPG4nDnvUI3bhgIc8aDfGkEIG3elND3qy333u
tRd73O0u+5BKX3aaxg7T2e42t7rFTLLoR4D+DGCzm9zoQDa43nWudRAjGcxw
hjCMNQ5ltfmucqUjWO4K8xzFaJa51CUudiwTGEc2iwyy0AWOZ67znWeIXOaY
w2xnGWa6M53hXxa62uM=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 
            1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 
            1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
            1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 
            1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 
            1, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9617, 9219, 12038, 12367, 547, 3171, 9026, 
            8157, 11671, 11547, 5055, 12500, 4672, 11152, 6892, 11088, 10320, 
            11056, 4755, 7177, 2913, 7341, 11630, 4805, 6180, 10949, 8928, 
            10573, 7251, 12382, 9768, 7410, 8744, 1145, 6433, 4750, 2289, 907,
             5919, 8647, 11781, 10862, 8395, 6007, 8013, 9551, 11279, 8509, 
            6138, 7262, 6278, 3988, 872, 13401, 3378, 6028, 3709, 7319, 13137,
             1161, 3784, 13277, 10424, 12149, 10975, 7167, 6591, 11951, 7959, 
            9726, 6950, 9252, 7880, 9603, 8429, 1942, 6309, 7686, 9471, 7263, 
            9550, 13093, 3044, 11832, 10076, 12485, 5040, 766, 10362, 11113, 
            4362, 3318, 7084, 4992, 6788, 7159, 9400, 5848, 8409, 9219, 11257,
             8454, 5350, 6560, 9948}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZCcRLl6jYb9yw
wW73Liv7hw8e2Fy8cMEWKMzw/1+d/c4dO2xfvnhht3bNGrvGBgb7zg4O+9+/
ftl9/vTJ7uePH7bNTUz23799A8o1WB884GDX3sZm39HObn/6lJc9yAygfjsQ
DVLX081tDzTDZucOC7DY2zc5dhs3GIDtOnfW137VSk17EA3i79ltbT91yhS7
hQsW2Pz/98/u44cCW6C77G7euGHX1Mhof/SIC9j+mTNmgNSAsC3QDTYTJwiA
zZwxXdwe5I+tW7bYgdx3/949u65OTvuJEybYzp41y27pkiV2IDcB/Wt79swZ
u79//oD8YLN1i4ndxQsBdv/+1tovW6oKcq/t0ydP7GbOkLAHueXnjwqw24F2
A8NEx27FcnV7kDzQHLvjx9zsV6/SArt7Qj+/Pch9ID3v3uYC9SrYbd60yQ7k
vtu3boH9AzIHZOfXLyWgsLX59rXUfvmyZXa/f1WBwxAYnjYgc0FuAQBJT9tr

           "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnfAALu7sFsxsOMMFNvD7kMP8EVnTmcc/4gFdndhd3d3d3e3
68nDfjM73+MmpE0OpscAU+KiEwxNC0Qioemp8VFJmTQ1nBGOJCZl/v8nRonJ
ZRCxtCAP1clLOfIRh+bnr3+MpyAF+Olvf1mIUhSmJEUoQVG++MNiFOer3/3m
Zz/50Q+W5rXvLcM7y/LWN5anCq+sQEUq89JKvPC5z3xqVarxxMc+MoGHPrAG
dalJHWpxx9rc9b73vO0t69GY+jSiAQ256Q2ve82rXrEJzWhKIpe95EUv2Jyz
nvecLelKEm1pRRtac8oznvakJ2zHPtvThQ505LjH7MRBO3PIowY44mEPuN9u
JLPX7uxxtz0I0pMB7DKFXvSnN/3oQ192usPtbnOrW8xxswPZ4CY3ut5U1rnW
wYxlCKMZylKHMZw1rnYEoxjJCle50uUucwyLXOJixzGeEGksdIHznecEwsw1
23QyyHKOmdFCs53lTGf4D9E+3OI=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 
            1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 
            1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 
            2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 
            1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 
            2, 2, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9582, 12003, 4662, 4615, 3906, 4901, 3904, 
            9175, 10211, 9273, 3660, 12562, 5247, 2921, 809, 12287, 9432, 
            8545, 4923, 12087, 9219, 10632, 11916, 5007, 11588, 9573, 7718, 
            4791, 10964, 1131, 8661, 4054, 4771, 12498, 8689, 8318, 9868, 
            6648, 5014, 3537, 1553, 11596, 9312, 9607, 33, 12700, 7578, 8703, 
            8239, 12576, 11539, 7149, 9682, 6240, 3175, 12030, 8070, 1848, 
            12531, 6229, 4752, 8569, 7684, 13491, 4428, 5841, 10819, 9047, 
            7496, 1540, 5491, 4912, 7732, 8828, 8814, 13447, 7273, 25, 6859, 
            9796, 10259, 7346, 12385, 6626, 8117, 7126, 8760, 9956, 6935, 
            12358, 6181, 10928, 11169, 9697, 11811, 2307, 8659, 6075, 7459, 
            7281, 2503, 10869, 7007}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5CZDsTPnqbanzvr
a79ooaL9wQMONo0NDPZv3+TYTZ0yxe7IYWf77i4u+/Y2NvuPHz7Ydnd12V26
GGi/cMEC27NnzthNnCBgu3qVlj1Qj01fL6/9xQsBtosXLbLbv2+fXX8fH1gc
aAXD5UuXwPzJk4TsQebu3LHDdu0aHbtJEwVBZtn09/XZNTY02ILUguQXL1Ky
B6kH8UF2Au2xnz5NzH5CPz/YbStXrLB9+iTFbuECBVuQG0DqQO6+feuW3ZfP
xfarV62yA/rF7vmzZ3Ygsa1bTOxevnhhd+a0N9B+EbC+379+2f3/989u7x4b
O4i/G6xB7t24YQPQvgm2Bw8csLl/7x5YDmT+wwcPwPZMnjTJDsi2Afnx4oUL
YDFkADJjzWpt+/fv3tldvXLFDhGuDXagcGtqZLS/eeMGODyAdtjOnDEDxYz/
/+rsQW4FhQsAHtfBBA==
           "], "Children" -> CompressedData["
1:eJwdidVSFAAAAHewwETsFuwWAztQQME+7D70OJ905nTG8U/sTsQO7O7u7u7u
Wk8fdmd2NjFnSiA3BpgaG1UgOD01EgnOyI6LRubkaaFwKJKcMunfD0eJ+c84
CtGFwnSmCGUpSmmKUZJYSqBxFOeXf/ztT39Yiq9+95tliOeLn/3kRxPoRDnq
U566VKASFXnnB99bmTpUoRpvrcobX1udR9bgsTVJpBa1eeVLX/jcZybx1Cc+
9IH3rcc979qA1jSkFY1ozB1v24RLNuWyzUimOS245U1bcs0bXveqV7zoBdvQ
gbakcN5ztqM9Zz3jaU950o6c8LjHPOoRD9uVDLqRSncOeMiD9qAn+93nXtPY
Yzq73WUv+tCbTHa6wywK3O42+9KfrfZji5sdwEA2udFBBNjgerMZymCGsM61
rjHfYYxlOKMZwUhWm+coVrjKlY5hqctd5hIXO56JBMlhkQtd4ATmO8+5hphj
LrMNM8uZ/gWtwdjk
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 
            2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 
            2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 
            2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 
            1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11171, 117, 11863, 9249, 10053, 10960, 5634, 
            6540, 6403, 798, 206, 6482, 8483, 2621, 7150, 7060, 2374, 7140, 
            114, 7750, 8687, 1950, 11564, 13099, 3910, 5474, 5692, 11954, 
            7566, 1834, 10233, 1057, 10540, 12745, 5523, 10143, 9936, 1954, 
            2174, 9869, 11313, 3261, 3928, 2120, 12359, 10753, 10924, 5479, 
            11892, 12737, 7162, 4189, 7028, 4648, 8795, 11549, 7896, 9346, 
            9228, 12612, 10521, 6755, 11713, 5461, 10558, 9786, 7938, 5185, 
            6189, 11734, 11708, 11143, 9968, 2903, 5658, 8586, 7396, 9148, 
            10868, 7787, 4632, 8073, 5436, 8503, 8902, 12571, 2784, 11744, 
            6991, 5052, 1377, 10992, 4747, 11877, 6965, 8036, 11740, 3537, 
            13440, 7237, 6295, 7584, 8355, 9010, 9155, 6149, 4028}], 
          "NumericalThresholds" -> CompressedData["
1:eJwdkF0og2EUx1+fKS5EUUpZ4Yobyo33PYdrLthuXJoiZUWUr6J9EfnabGyI
trEpNpdzQ21zN5SvhruNzNcUxWwz4znvxXmec07P+f9/z5F09Eq70jmOG8hh
h1Q+1NjfLx+RZVPRKVfU1ijSWNrDIvU7hhvrpWizSnBuNg/3XNXo9TTwhwc8
qFVplAsf7++wMD8P14EAfEej8BgOw28yCftuN3g9HsFhr8B9d504PzmRhX+p
cZzQZuL0VA5qNRloWi5Cs6kYyevqUobMlvtJJEClVPK3N21015P++VmLEHnt
wRWzGexb5UDvloxGCD90InlvOxxi7+S4CVVKjievi/NWxuiB2Zlc3LTZwGgo
RNLTqNVw5PNBPBaD+7s70hP5/lIpcDmd5Cm8RRTEz7++vEAo2C7O7u7sUE/0
eX7qhp/EKH5HB/Hr8xOO/X7Q6/LF/STiI+yPWqDdsBCoZvqkC2urJcQApBUK
BsFqsfB6nQ6I2eWsgtOTZjbTB7SbbUclatTpSD7EQMyGxQKa562WMiEeGxaZ
iecf4anhTQ==
           "], "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYHcXdisGtoJiYPuw+6EPUDbdnm7O/2E3dnd3d3d3d7ee
Tz/cbbeLTR0XSIsCxkdHFAhOTAyHg5NSYiKRPHZCKD0UjovP+PczI0T9px/Z
qE52qpGDSuTkgbkoTDR5iSEPufmt/vGXP81HIfLzxQJ8tSDf/OF3P/vJIjy0
KI8sxmOL88QSxFKSipSiAqUpTxneWpZ3frQcH3zvG1/7ype+8LnPfOp9K1OF
qtzzrne87S1vWoMG1KQWN7xubS5Yh3pcsy5XvWJ9LnrZS8bRg4Z0pxFJNKY9
TWhLPG1oSguaccbzNuecZ23JcVtxwtO25pQnPeZRE0jkiIdtxwEPedD97rMD
XdhrRzqxw84ks8fd7nKn2+1KN7a4za1udpMb7Ukv+tCbNW4wQAprXe86+7LS
1a6yPyNY4QAGMpxBLHS5g1nmEIYyjKUucbGLXGCWQUaTShojGcV85xlitnOd
YzoZzHKmM5zuNMcw1UymONm/uWPg4A==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 
            2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
            2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 
            1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 
            2, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11296, 9306, 8513, 11527, 1288, 4926, 3051, 
            9180, 12001, 8612, 7836, 4760, 11284, 11537, 3974, 5670, 9017, 
            7741, 11195, 2693, 10756, 4924, 9684, 11265, 3625, 9241, 6977, 
            6930, 6828, 6574, 12165, 9362, 4763, 3291, 6388, 11729, 6202, 
            4224, 5187, 5785, 6498, 10867, 4953, 10756, 4618, 6192, 488, 954, 
            2735, 7740, 6708, 7086, 9419, 4246, 9738, 1399, 12672, 4968, 
            10314, 5115, 6011, 9152, 2633, 8966, 5907, 4298, 11544, 11070, 
            10626, 11819, 2668, 3415, 6484, 5833, 2138, 13405, 6523, 12866, 
            5451, 10428, 7112, 3554, 7184, 12405, 9315, 6630, 4150, 5519, 
            2548, 8664, 4754, 8235, 11064, 7341, 7092, 13504, 1039, 1062, 
            3078, 10804, 12431, 9520, 7661, 5576, 9616, 12304}], 
          "NumericalThresholds" -> CompressedData["
1:eJwdUEkvg1EU/QyhCTEt7NnYWAgLC9+7l79Qf6AVRISQEmKItFRUDG1J2qSS
KpLWwlArRVVtqnbUztgmVFXUUGNb5d3vJW8699xzz71lTV3y1kxBEHpk/JAr
+xtUKuVAYw59WpQdNdUdGfzZzncqOYQry+Vo0BdiKBgUNWq1uGi1wunJCUsm
BnFzYwO0Y1k4qZMh3TxF+Pn+hqvLS9hxuRjFp6fy8D4cBsIPvfWi0VDEZqbz
4cDjoT/MGYtRoxaQMMq/u22GUFDBtpxOxrl46PXC+lolHPl8QG/uoe7Y72d7
u7sSf8Figb90Gm6ur2Fcmw2P0ShsOavY60s36ZMGj4/gqqMC991uMBoMEs51
qA58vPdK2Kgmgzzg12cfxt9UyPPxIdIm9bRks3G+wObnSvgcFORJJL/7blHy
QItrMLOpFM0mE5wFAuCw26V+L87PJU4ykSD/ItXTTeQixQnnvQCvA/rZAl4v
wkiH5vEe78HYU6e0Xdu1SP0TnzR/U8NIc+AzhudYDP4BWjrZnA==
           "], 
          "Children" -> CompressedData["
1:eJwdiWVPFQAAAG9YYIvdYrdiYCtgYvuw+6EPkA+6Pd2cP8TuVhS7u7u7u7tb
z6cf7rbbxaVNCKRHAROjIwoEJyeFw8EpqTGRSBk/KZQRCscnZP77WRGi/tOF
XHQgN63JQyx5iUHz8cdofvvL/BSiAN8syHd/+sOvFqYIxSjKJ7/42Y9+sDgJ
lKABJYmjFOUoTVneW4Z3vvWNry3PYytQhVdWpBKVeekLn/vMpz6xKvWpRnUe
+dAa1KUmtXjgfe9Zmzrc9q53rMcNb3nT616zIY246hUb04TLxnPJizalGRc8
7zmbc9YztqAVp23JKU96wuO2oS3HPGo72nPEwx7yoIl0JolOJNORA+53n3vd
4253udOujKYbvUihOzvcbg96ss2tbnGzvRlFH/qyyY32oz8BUtngete51gEM
YyCDWGOOg1nhEIay2lVmu9LhjGQES13uMpe42EUudIFB0hjLfMcwz7mGyCCd
Wc5xtjPNZIbjmG4W05zqX33L3uE=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 
            2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 
            2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 
            1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 
            1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 
            2, 1, 2, 2, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9590, 13581, 6989, 13160, 6243, 11564, 10828, 
            13356, 6989, 12644, 9723, 6420, 3864, 4991, 1083, 6294, 4185, 
            12201, 6182, 10006, 9193, 11785, 4610, 8958, 8156, 5550, 3434, 
            10510, 11349, 5729, 3384, 6525, 9987, 10840, 7340, 6015, 11180, 
            10112, 4453, 12431, 524, 9452, 10345, 11902, 5389, 8827, 3705, 
            1130, 10110, 10990, 12569, 10783, 5295, 11638, 6878, 10782, 5799, 
            4358, 11044, 7047, 11822, 10222, 3960, 9896, 9195, 4065, 11222, 
            8571, 9342, 5657, 4743, 7784, 7756, 5127, 2762, 7796, 7876, 10872,
             12617, 5673, 5451, 10441, 7301, 6147, 4129, 4416, 5108, 4639, 
            6147, 13366, 528, 2071, 5289, 7571, 12519, 6473, 10130, 10065, 
            12601, 7765, 6386, 12416}], 
          "NumericalThresholds" -> CompressedData["
1:eJw1kLsvQ3EUx68mGq8BEQkxsFiJ2tx7TvwLtRgM2tCpCalBkEhL3EZbVVXV
t1rY2ooqttpqq60t6tVuJJ4L9TjnRm9y7vk9zvdzvufXo5/SGlSCIMzU0U+r
mx02mXRzI2reTOqMmgFjDS0NFA/3ekzE+3B/rxcD/g5MHmpw2+sFq6ym3I6c
w6EQUKlgMZuhXJqA3WhUtJgF8TiVAnmlFn9/FnHD1QxHyUGgmqGX52mJg/bI
uuUlFcZjMYVxfTUG+VyO6gRYczRBONTFPDhLp8W311dw2BuRtGC3NeBNscg8
kXV89/H+ThoHUC9py+OBy0JBYbAfZlBIXO/eaEH2sROJwHelAqy9ux2XqAec
ZzKkbVO8sO/TkxMIBgLw9TmP606n4r/ytUDzuKRyqUTMbvJiA7/PJ+Vzo3CQ
6KceAm66W5EzsTiLT49G4PewrdbjRTarcHgGqywrbO7FPXlO4f8LBjqR+fwW
1bPqvH/8B7/B
           "], "Children" -> CompressedData["
1:eJwdkVVTFAAABnewwAKxC0WxEwM7EAwQ67D70EOfdOZ0xvGn2B2Y2IXd3d3d
3YHr4cN+Mzvf4ybmTA/kRgEzoiMTCM5KDYeDs7NjIpIxbWZoSiicnDK16M+N
EPWfURSjLsWpQwkSKEltSlGVaCoTQyVK88UyVKAs5dC/lieWQv8Yx09/+8t4
KvLD737zq5/95Eer8MH3VqMm1XntO2vw1jfW4oWvfOlzn/nUJz72kYm0pB5J
PLQ+D7xvAxrTkEbc8653vG0TWnDLpjTjms257k1veNUrtqInrWlDMhe97CXb
0pF2nLY9KVzwvB044znP2okudOaEpzxpV3rQje4c95hHPeJhD5nKQHqRxkEP
mE5/etOH/e6zLzvdaz8y2GWBmexxtzvMYgBb3e42BzGCwQxjCEMJkG82m9zi
Zje6weGsdb3rXONI8lztaIKMYRyrHMtKV7jc8SxzAhNZ7FKXmBMpMYnJLHKh
Cwwx33nOdY7/AIkE1uU=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
            1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 
            2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 
            2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 
            2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 
            1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]]}, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], 
      "OOBConfusionMatrix" -> {{0.7520278096544369, 0.247972190345563}, {
       0.247972190345563, 0.7520278096544369}}, "Method" -> "RandomForest", 
      "Options" -> 
      Association[
       "FeatureFraction" -> 
        Association[
         "Value" -> Rational[1, 48] 6^Rational[-1, 2], "Options" -> 
          Association[]], "LeafSize" -> 
        Association["Value" -> 5, "Options" -> Association[]], "TreeNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "Implementation" -> 
        Association["Value" -> "DAAL", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.5578599427638573, 0.013430882915347005`], "Accuracy" -> 
         PlusMinus[0.7977527328269122, 0.033155240607235556`], 
         "EvaluationTime" -> 0.002574756666666667, "TestSize" -> 300, 
         "TrainingSize" -> 1379, "TrainingTime" -> 1.779723, "TrainingMemory" -> 
         229276120, "ModelMemory" -> 133936, "ExperimentCount" -> 1, 
         "ModelUtility" -> 0.6866241154056103, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.5578599427638573, 0.009497068386764413]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.7977527328269122, 0.023444295465247848`]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 1724], 
        
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 273873027120593]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5313870668901047`*^35, 3.0711819286413725`*^34], 
              "Accuracy" -> 
              PlusMinus[0.46039603960396064`, 0.07042869408830643], 
              "EvaluationTime" -> 0.00043994, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.099239, 
              "TrainingMemory" -> 8220864, "ModelMemory" -> 70520, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              2.711363630174309*^-36, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5313870668901047`*^35, 2.171653567999894*^34]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.46039603960396064`, 0.04980060717995439]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00043994, "MeanCrossEntropy" -> 
             PlusMinus[1.5313870668901047`*^35, 3.0711819286413725`*^34], 
             "ModelMemory" -> 70520, "TrainingMemory" -> 8220864, 
             "TrainingTime" -> 1.8101193599999998`], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9410231892707853, 0.04383767153975552], "Accuracy" -> 
              PlusMinus[0.5755826477466793, 0.02327945872726995], 
              "EvaluationTime" -> 0.000012344444444444442`, "TestSize" -> 900,
               "TrainingSize" -> 10, "TrainingTime" -> 0.057702, 
              "TrainingMemory" -> 2273408, "ModelMemory" -> 5480, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.454706090060847, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9410231892707853, 0.030997914817189647`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5755826477466793, 0.016461063128404934`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.991079379041568, 0.057064402189729836`], "Accuracy" -> 
              PlusMinus[0.6392155322978498, 0.02046153511617244], 
              "EvaluationTime" -> 0.00003209727272727273, "TestSize" -> 1100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.388641, 
              "TrainingMemory" -> 11124664, "ModelMemory" -> 5480, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.43080194752626966`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.991079379041568, 0.040350625752714434`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6392155322978498, 0.014468490234132202`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1572889086790838`, 0.058194400877364355`], 
              "Accuracy" -> 
              PlusMinus[0.6034249564259767, 0.01831948801299593], 
              "EvaluationTime" -> 0.00001230196629213483, "TestSize" -> 1424, 
              "TrainingSize" -> 300, "TrainingTime" -> 4.966393, 
              "TrainingMemory" -> 66518776, "ModelMemory" -> 5736, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.36946302816044924`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1572889086790838`, 0.0411496554874727]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6034249564259767, 0.012953834201855093`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001230196629213483, "MeanCrossEntropy" -> 
             PlusMinus[1.1572889086790838`, 0.058194400877364355`], 
             "ModelMemory" -> 5736, "TrainingMemory" -> 66518776, 
             "TrainingTime" -> 28.597907106666668`], "Index" -> 2], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[637.3811727351164, 168.60656651511462`], "Accuracy" -> 
              PlusMinus[0.6980198019801988, 0.06527921602222528], 
              "EvaluationTime" -> 0.00204035, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.962848, 
              "TrainingMemory" -> 15966240, "ModelMemory" -> 9446880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.00044430632600720734`, "MeanCrossEntropyHistory" -> {
                PlusMinus[637.3811727351164, 119.22284653541821`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6980198019801988, 0.04615937631985702]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00204035, "MeanCrossEntropy" -> 
             PlusMinus[637.3811727351164, 168.60656651511462`], "ModelMemory" -> 
             9446880, "TrainingMemory" -> 15966240, "TrainingTime" -> 
             17.56234752], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5739771370008673, 0.023266755499851136`], 
              "Accuracy" -> 
              PlusMinus[0.7475247524752484, 0.06192185704085586], 
              "EvaluationTime" -> 0.0029807, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.045451, 
              "TrainingMemory" -> 8442864, "ModelMemory" -> 86080, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6534623670945242, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5739771370008673, 0.016452080590154138`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7475247524752484, 0.043785365017253136`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5883461986632815, 0.022427174768859807`], 
              "Accuracy" -> 
              PlusMinus[0.8168316831683179, 0.05543801677019945], 
              "EvaluationTime" -> 0.0024689300000000003`, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.320762, 
              "TrainingMemory" -> 50018048, "ModelMemory" -> 96048, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6525498676481647, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5883461986632815, 0.01585840736191661]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8168316831683179, 0.039200597593741573`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5578599427638573, 0.013430882915347005`], 
              "Accuracy" -> 
              PlusMinus[0.7977527328269122, 0.033155240607235556`], 
              "EvaluationTime" -> 0.002574756666666667, "TestSize" -> 300, 
              "TrainingSize" -> 1379, "TrainingTime" -> 1.779723, 
              "TrainingMemory" -> 229276120, "ModelMemory" -> 133936, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6866241154056103, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5578599427638573, 0.009497068386764413]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7977527328269122, 0.023444295465247848`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.002574756666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.5578599427638573, 0.013430882915347005`], 
             "ModelMemory" -> 133936, "TrainingMemory" -> 229276120, 
             "TrainingTime" -> 2.2704273973894127`], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6635654211827315, 0.021703052713106127`], 
              "Accuracy" -> 
              PlusMinus[0.6261416194624324, 0.01894878342144714], 
              "EvaluationTime" -> 0.00006532846153846154, "TestSize" -> 1300, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.025713, 
              "TrainingMemory" -> 16618720, "ModelMemory" -> 5535912, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5172341494232805, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6635654211827315, 0.015346375745886438`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6261416194624324, 0.013398813252540501`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6101087982148484, 0.03336374259857498], "Accuracy" -> 
              PlusMinus[0.6984344770816425, 0.026487329588974307`], 
              "EvaluationTime" -> 0.00025929333333333333`, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.153238, 
              "TrainingMemory" -> 101014744, "ModelMemory" -> 33186288, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4528709583282185, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6101087982148484, 0.023591728637214853`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6984344770816425, 0.01872937036788682]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.555930169641046, 0.03578945930846447], "Accuracy" -> 
              PlusMinus[0.7058630789942748, 0.03487708010203446], 
              "EvaluationTime" -> 0.0008685188405797101, "TestSize" -> 345, 
              "TrainingSize" -> 1379, "TrainingTime" -> 1.580373, 
              "TrainingMemory" -> 457782376, "ModelMemory" -> 152524920, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4016036679523949, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.555930169641046, 0.02530696937201523]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7058630789942748, 0.02466181984813497]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0008685188405797101, "MeanCrossEntropy" -> 
             PlusMinus[0.555930169641046, 0.03578945930846447], "ModelMemory" -> 
             152524920, "TrainingMemory" -> 457782376, "TrainingTime" -> 
             2.001465757070341], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.419981627686232, 0.5473956428791298], "Accuracy" -> 
              PlusMinus[0.5955577049526072, 0.018514485014729846`], 
              "EvaluationTime" -> 0.00005596928571428571, "TestSize" -> 1400, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.23155, 
              "TrainingMemory" -> 39432232, "ModelMemory" -> 70520, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.050632634327137944`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[8.419981627686232, 0.3870671710718023]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5955577049526072, 0.013091717904092191`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005596928571428571, "MeanCrossEntropy" -> 
             PlusMinus[8.419981627686232, 0.5473956428791298], "ModelMemory" -> 
             70520, "TrainingMemory" -> 39432232, "TrainingTime" -> 
             4.223472000000001], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[16.28918670222541, 0.8011919649664158], "Accuracy" -> 
              PlusMinus[0.5009958770552648, 0.022345464517484995`], 
              "EvaluationTime" -> 0.000067438, "TestSize" -> 1000, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.203221, 
              "TrainingMemory" -> 39424576, "ModelMemory" -> 70520, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.026254356004942532`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[16.28918670222541, 0.5665282714599273]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5009958770552648, 0.015800629489077022`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000067438, "MeanCrossEntropy" -> 
             PlusMinus[16.28918670222541, 0.8011919649664158], "ModelMemory" -> 
             70520, "TrainingMemory" -> 39424576, "TrainingTime" -> 
             3.70675104], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 273868732153297]], "MaxTrainingSize" -> 1724, 
      "LastReportingTime" -> 3.740047054918059`16.325452055414633*^9, 
      "PreprocessorEvaluationTime" -> 4.875`2.*^-6, "PreprocessorMemory" -> 
      676104, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 2.444337217604121, 
          "ElapsedTimes" -> 3.299696, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 3.0554215220051506`, 
          "ElapsedTimes" -> 3.0624029999999998`, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 3.8192769025064393`, 
          "ElapsedTimes" -> 6.818087, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 1379, "TimeBudgets" -> 4.774096128133047, 
          "ElapsedTimes" -> 4.734084, "ExperimentCounts" -> 2]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[273877322087889]], "ID" -> 
         273881617055185]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association["Type" -> "Image", "Weight" -> 1, "Values" -> {
             Graphics[
              Raster[CompressedData["
1:eJztls2tFTEMhQeB6INK6IESkFhTJA1RAmzYXD0/E3mcc5z5RrqLO59PnPgv
8+X7z28/Pl7X9fnv79eH6/p0/Xt+f73efLL3rzz7f5d+9/5W41PlVf/Et8Z3
x6+a3+n6yN7Vf/f+TufT6697f93rq+tT/f2gnj/Tubr/TvOv1kf2p9TX0/oz
49Pn53T97v1F9q7fN6fzu/OT5QMOh8PhcDgcDofD4XA4HA6Hw+FwOBwOh8Ph
cDgcDofD4fAKf32y99F6q/rIvktf5erzV/nd8V89f5V3x+/u/E7XR/au/rv3
dzp3qz+3+ln1f3d97V4/sp+if1p/q/vnNP9qfWR/Sn09rT8zPn1+Ttfv3l9k
7/p9cDq/Oz9ZPuBwOBwOh8PhcDgcDofD4XA4HA6Hw+FwOBwOh8PhcDgcDnfm
r0/2Plvnf/Vq/6v6bq4+n5u+Wh+r+t37i+xV9aP2352/Vf+RvWo+ZNy9f7q5
e392+1fnb/d8213fbvrI3tV/9/5O5+r8Ta//Ku+uz93rR/ZT9KfNh6fHRz0f
1PF386/WR/an1Oe0/sz46fmv8tPm0zT97v1F9qr9PZ3fnZ8sH3A4HA6Hw+Fw
OBwOh8PhcDgcDofD4XA4HA6Hn8Rfn+x9ts4u/bT9d3P1+dz01fpY1e/eX2Sv
qh+1/+78rfqP7FXzIePu/aPm6v5V58dNH9m71k83d6uvVf9Vrp4/6vhX+e7v
C/X8UOsje9f6cuvvVf/d/eW+vjp/GVfPP3euzv/u+2H3/tznSzdXn19d31Wu
zr+6/qt89/0Z2U/RT5svGX96fNTzz02vPr/6/pp2/2VcHR93fnr+M66uD3X8
1P6r/LT7Y5p+9/4ie9X+ns7vzk+WDzgcDofD4XA4HA6Hw+FwOBwOf32y99k6
U/TTzt/N1edz01frY1W/e3+Rvap+1P6787fqP7JXzYeMu/ePmqv7V50fN31k
71o/3dytvlb9V7l6/qjjX+Vu+Vv1P30+naZXx3/a94tb/Hf77+bq+Zbxp+fP
zX9kP7W+3Ll6fpP/97n6fG71odZH9qr8ucVHrY/sXe9vN/+79U/n6vxX+XT/
p80Pt/5Tx9edq+unytX5Ufd/9/rd+XWrH7f8rfp3m79qrr7fpt8/6vmhjn+V
q/vztPp7WvzU/afmnP9trpq/Vf9qvfr86vtv2v2ZcXV83Pnp+c+4uj7U8VP7
r3J1f552f03T795fZH9qfbvzu/OTxfvp/NUu+l9dL9JX/av1087fzdXnc9Nz
f3qt3+1ffb+r41fl7v2j5ur+VefHTR/Zu9ZPN3err1X/Va6eP+r4V7lb/lb9
T59Pp+nV8Z/2/eIW/93+u7l6vmX86flz8x/ZT60vd66e3+T/fa4+n1t9qPWR
vSp/bvFR6yN71/vbzf9u/dO5Ov9VPt3/afPDrf/U8XXn6vqpcnV+1P3fvX53
ft3qxy1/q/7d5q+aq++36fePen6o41/l6v48rf6eFj91/6k553+bq+Zv1b9a
rz6/+v6bdn9mXB0fd356/jOurg91/NT+q1zdn6fdX9P0u/cX2Z9a39O5uj+r
/D7/fwAECEtE
               "], {{0, 0}, 
                Offset[{902, 12}, {0, 0}]}, {0, 1}], ImageSize -> {902, 12}, 
              PlotRange -> {{0, 902}, {0, 12}}, PlotRangeClipping -> True, 
              Frame -> False, FrameLabel -> {None, None}, 
              FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
              Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
                Automatic}]}, "ID" -> 3791095496786132862]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 91.367444, "MaxTrainingMemory" -> 650086384, 
      "DataMemory" -> 162481744, "FunctionMemory" -> 1026328, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 8, 13, 57, 36.852951`8.319047249058373}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740055492571032*^9, 3.740055755408944*^9, 
  3.740061193660914*^9, 3.740061456906011*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"06e26d88-d73a-4e0c-bfc7-6238610cf5e2"]
}, Open  ]],

Cell["\<\
0.818 accuracy (RandomForest) ... but is it just classifying based on the \
lines given?
0.758 accuracy with 5 lines.\
\>", "Text",
 CellChangeTimes->{{3.7400557594309607`*^9, 3.7400557832431087`*^9}, {
  3.740061460174436*^9, 
  3.7400614672375526`*^9}},ExpressionUUID->"d100c8d7-7e1c-4aac-be28-\
927954621db1"],

Cell[CellGroupData[{

Cell["Table of Results", "Subsubsection",
 CellChangeTimes->{{3.74005612267575*^9, 
  3.740056127802916*^9}},ExpressionUUID->"a400c7e4-8612-4f52-b87b-\
31da6ec988a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"TestClassifierRasterize", "[", 
    RowBox[{"RasterClassify", ",", "RasterTrain"}], "]"}], ",", "50"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7400555280377617`*^9, 3.7400555736586323`*^9}, {
  3.740055631904829*^9, 3.74005563693071*^9}, {3.740055775463032*^9, 
  3.740055775839038*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"9386a2b8-0585-4cae-a3c0-afc28e42c09d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyb0KgmAUh/FDk6NDQ4NDRkRKRGpffqWmq4tzLUFzt+AldwmWHhCfF14e
fudvvz7NeyYizu//O7xv1qd95nrQPrSGttaa2rN2Di9gC17CK3gNb+At7MI7
eA8fYA/24QA+wieYvcBXOIQjOIYTOIVvcAbnU7ewFNhhuWOHpcQOS4V9dAfV
NSr0
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 118.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzksOwWAUBeAbI0MDAwMDRAQR8X7TeqyAkRBpKmIi8TbuEizBEizBEiyl
S/C45484TZqTr+f+92/c3Y5XARHJvN9P6uNb3/BONj5oXo9wUNM+wCHN+x4O
a/o7OIL5DRwlxzQdM5/QfJr9SfTm/hTOn+G05uMCZ/G/Zl9O82buy2N+DRew
bwEX0U/hEvoZXEY/hyvoHbgKL+GapufCdeQE2SA3yS1ym9whd8k9skW2/+2R
pU89WQbUk2VIPVlG1P/8Au4nO6s=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 364.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzDsKwkAYReEfK0sLCwsLIyIqIsZnfGZ8FNaxUawUrN1CluaSXILGuSI5
A+Hw5Q4T3B7JvWBm7c+X1Z9X/M3z6PTD1yVy0eX3knpWy9qvckX93a/qvZNc
ky9y3Tc9yA11qTbhFtyBu3AP7sMhPICH8AgewxN4CkfwDJ7DC5hdwWs4hl3e
KWwb7LBtscO2ww7bHvvfb+I4L2o=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 142.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0MsKAWEAhuE/K0sLCwsLJCHJ+XwYh7InooSUBQsmV+BSXIpLcQkuweF/
h3xT09szX/9MTXR7Gu98xpjU637XXo/uJ87e4YHt7YD9tvcjDti6ZxykLg1x
fo3DttcNjtg6KxwTx+mSJqj3vqQ4zfkpzvD9Gc6yz3GOfYHzeIIL1DtfpCNa
okNaFldol1bFNXFd3BA3xS1xW9wRa51/X8SmJ7vY9GUXm4Hs4u9/8vafn0tO
NNI=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 295.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzUkOAUEUgOEXK0sLCwuLJiKISJvn7jacwBGEFaEJYtlHcgRH6SM4guE9
EX8llT9fvVRVbrlfrBMiUn7td3U9/E/iQ2AHWmdnTmqjjTmldUNzWhsezRnz
2ZzV3k5mRxtczXlt/P2vgPeK1ou1ZPe35gruV7X3lbkGu3AdbsBNuAW34Q7c
hXtwHx7AQ3gEj2EP9uHg3xEsE8xhmWIOywxzWOaY//wE8eRNBw==
          
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 388.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdz71KQmEAxvFDk6ODQ0ODSchBIszSNDXfPq6gOzCQisQUGxQXvwOFkCaX
0NGxoQtw8AK6hEbHcwmmz/9dzgH58/PhnPecw4fX+9Ke4zju/29bXV5hF7dt
+EOd93BArVoH1Xgfh9TfId5Xn8b4QA0McFhd2/Mi6qKDjzjf7lHVNLDLedYx
9buGj9VlFZ9w/zOO4zI+VdsvOMH9j/jMt5+zF3GSvYRTvL8978L3Pmn17w1n
1LD1Ja7gLM+335dTJ3WcVz3rKzXYwgXfeYbndSlejNiv1caEHU8/2G/U1Sc7
vvtiv1V/Zux4OTOdujcOvePm3GwAcYlMGQ==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 2108.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyUsKgmAUhuFDo4YOGjhoYCJhEWKa5aXy1gpy6kCExm2hpbSUltQSungg
en/4eXnON+uv58tIRBbv/+nwnvk3967Qw9BHqx5rG62hDbUT2ISnsAXbsAPP
YRdewivYg314DQcwu4EjeAvv4BhO4BTO4D18gI9wDhf/vsFSYoelwg5LjR2W
E/afX40RK2s=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 133.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyUsKglAYhuEfRw0bNGjQwCKiIiTtflO7rMANCJI0dAsuraW4hJZQcT6I
3gOHl+f/+kWVlZ6ZTT7/W/deiesj1cG1KeWWelfb2gu54/rM5a66U3uwDw/g
ITyCx/AUnsEBPIdDOIIX8BJewWt4A29hdg8f4CN8gmM4gdN/17CdscN2wQ7b
FTtsN+w/vwETJC3f
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 184.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyUsOwWAUhuETI8MODAwMEBFEhLpTWpcVWEJTEwZNrKBLsRRLsBRLQM6X
iPdP/rx5ztdI89O5ZGbdz//W3yv2XhIdvMVVLnvvuRx4nze54n1kclWN1Jra
UutwE2bbcAfuwX14AA/hERzCY3gCT+EZPIcX8BJewWs4gjfwFo7h5N8FbDvs
sO2xw3bADtsR+89v1UErXA==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 301.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyVsKggAURdGDs4j8qJCICMmyh/nIV9B3ziDouyk4DRttlheifeGyWZzp
/Xl7OJK8/j99df2Nxrm+11jdoe3VPIFn5ovZs56tc3gBL+EV7MNrOIA38BYO
4R28hw/wEY7gExzDCZzCGczm/25hFdhhldhhVdhh1dh/fgONMyts
          
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 76.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzTsKwkAYReGfVJYWKSwsVERURDTRaHwk8bECcQVCCgVxC1mKS3FJWYKa
uSCegeHwzS2mfXmccs/MBp/7rTtlWuV1z/Tg+rzKNfWm1l2Ls+yrodpQm6j+
sRbcgbtwD+7DQ3gEj+EJPIUDOIRn8ByO4AW8hGN4Ba/hDbyFEziFs38XsO2w
w7bHDtsBO2xH7D+/Ac5VRdo=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 238.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyUsKgmAUhuGDo4YNHDhooCFRIaJWdrG8lOA8dyA0auAWXGpLcAllHoje
H35envM5TXt/GCKy+vyh4+uzb17PXA/aWjvRVtqpttCasAXPYBuewy68gJfw
GvZgHw7gEI7gDbyFd3AM7+EDfIRPcAKf4Qucwhmc/7uD2Y73K3ZYbthhKbH/
/Aar5Cz1
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 223.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0T9LAnEcx/GjyfGGBgcHjRATibPsj5b6y3oETY0Rubhof4wCiV+UhuCg
KBJB2NhD6EE0ODb2ABx8AA2Wn/dv8eB487ovd7/f3cXOqsflJc/z1v7O/+qY
FuexZcMF9fQch2iF+uq4jpfV6Q0OM7/FEbV2iaOq7+Yr3N/Aq+r3A46rgXNC
tU2cVD+ecUo9aeN19nOPA/XT4jR1628wb+FN9beLM2q0h7fUwQveVrsjvMP7
DPGuOnnFWbXzhnPqVx/vqYlHvK8GTzivmiouLLjIfi+wYX9XqsW++z8H6ju2
2Lh5ifVrzPHPNfNDnn/HHBv3/Y/UMe9jsWmbGUxvSic=
          "]]}}, {}, {}, {}, {}},
      
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 2020.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyrsKwkAURdGLnZ2FhYVFFIkiIr6T+BwflYWFliKCkNpfmE/z09TMAXEP
DJvFuY3H85yXzKz9+d8Wz5dd0SgPtYp6VKuh/iTXQl8XuR7qrnKk+5vcxH1L
vsuxOlY7cBfuwX14AA/hEcxO4Ck8gxM4hTN4Di/gJbyC1/AGdv/2sG2xw7bD
DtseO2wH7D+/ATP/LIE=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 169.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzjsOAVEUxvEb1ZQKhUIxRAQR8X4z12MBolIQIkY0MogQ3bACS7AUS7CU
WYLH+Sbiu8nNP785OTcTXTgjO6CUSr3vp3I86xvjqvFBOvRtkIPS+QUOYX6C
w9LbGY5IvSNsSs0DHJM+93BcuvWdkLo7OCnVDpyWPjZwBu+v4Sz2bTgnva/g
PPaXcAGewUXsT+ESOkHL+J8xXCFXyTVyndwgN8ktcpvcIVtk/W+XrLo0J6se
zcmqT3OyGtD85xeN7j+b
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 586.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzz9LAnEYwPHDIRodHIJCNEwiRCzzT/nnfvkKDhctTK7LUCQpQReng8Ox
aHB0E/cb3Dto8z0E9xJ8CWbP1+UOji+f54GHu7j1Vn8JaZp29vfuKs9G/487
VAyksb0PpXYPh6X+3hGp18VHUvWMTwKOYROf0iea4F4fJ/E9Pg/4gntNnKIt
mg44w/884kv8gK+418ZZ9ha+lpodnMMDnJeGx7iAbVzk/iu+kRojfCv1J7gk
fXdwWZr5wBW+b4qr+BPreIaV9GvOHNtL9nfSqMscOyv2NenxtyoujIPfhthb
/6gthK9ANA==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 10133.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyzkKAkEQRuHCyNDAwMBgFBEVkXHfZ8blAGJsIOIIoiDiBfooHs0jeASX
qkF8Dc3j658u7C7rOCUi1ff9VM8z/MZdI3vQrhKntf7NnNHej+as1ovNOe12
b87Dnv0/mIva6Gwuad3JXNY+ElesG2sNrsMN2IebcAtuwx24C/fgPjyAh/AI
HsMTeAoHcAhH/3awzLDDMscOywI7LEvsP78A6kY1hQ==
          "]]}}, {}, {}, {}, {}},
      
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 307.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdz0sKwjAYReEfl1E60BKKiIg2Vq2vxrZTJ44dFMGxW3DpPnJBPIFw+Lhk
kNHtcbkPzMy976fxJOGb0Mdaql7VoXpWM7VSnVqrOTxWvTrBuyk8g+fwAi5g
Dy/hEl7Ba3gD899beAfv4QN8hGs4/PsJ2wk7bA122FrssHXYf34BfZokEw==

          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 130.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdycsKQVEYhuE/I8M9MDAwQBKSnM/sjT3Yk11yBVLGijJel+JSXJJLcFif
5F21env+r3Q47Y4ZM6u//rv+PcJP7pdIB9/911nf21kO1KuaU7dqXk3Vgq9L
5KK6UstwBa7CNbgBN+EW3IY7cBfuwX14AA/hETyGJ/AUnsFzeAEv4RCO/u1g
1vG+xg7bBjtsMfafn2UzLv8=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 352.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzDsKwkAUheGLOxAsLCxUJIiIxPdbx5gqlUTdgGgnuIUsxwXZWLkEt6Bh
Doj/wPDzceDWTrf0UjCz4Pvzvp739/VRdJa/8OxrJV93lMtyKld8s4Nchevq
Xm2oOzXAvaaaqC3di+S22lc7cAh34R7MDuAhPILH8ASewjN4Di/gJbyC17D7
dwbbBjtsEXbYtthhi7H//AFemi64
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 161.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdj7tOAlEURSdUlhQWFhYDMUYNIYM8xCczwBfwBQghkAAij4ZGr39iaUlJ
6WdYWlLyCah7HRPuJJOVdfe555yb6UxavVQQBOc//y/1bWt/aL/FHIgf5gfi
xuFpaPmhuLb8yLt/LEaveChuzbNi+gU/Edtj/BQ+wzPxfYZfiJ9Wn4NzmBfd
FI/ElXlBDBf4JbR+Ra9/Cbf+ZTFa4hXxy95/RW71VfYf4dfevBsvvxXjCX4H
H+E99V38gf36eA2ax2I4EB3+PSRPmMd8l3j71KnvkNe9/o39eof/v6/J/Sdy
POzFO1dhRRc=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 571.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyU0KglAUhuGDo4YNGjRoYBFhEqJWlpX5C41tCUE4dAsuuSVo3APie+Hy
8pxv/WnfX0tE9sP/17xfatpkejDtavVM+9LOta52AS/hFWzDG3gL72AHZg+w
B/twAIfwET7BZziCL/AVjuEbfIcfcAI/4RTOpu5gybHDUmCHpcQOS4V9dA+q
KSkl
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 184.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyTkOglAURuEbK0sKCgoLMMSgIQRwQBwYlBXQ05BQWLmFtxSXyBJkeInx
vOTl5Lu/077rbiEi2+GPnV+fT/m8Cn2YqxrtpW6la8AmbMEr2IbXsAtvYA/e
wT4cwCEcwTG8hw/wET7BCXyGU/gCX+EbfIczOIeLfytYSuywPLDD8sQOs+rn
L9WxLaw=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 205.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyTsKwkAURuGLlWUKixQWRiSoiJhofGvGRyWkidiLktotuJQsxSVlCSaZ
C+IZGA7f/b3HK80aIjIof1X7irhO/jR6sM3v6qatuakd289V3dImWld70bbh
DtyFe7AP9+EhPILH8AQO4BCewjM4gufwAl7CK3gNb+AtvIP3cAybf79hOWCH
5YgdlhN2WM7Yf/4CwSkvyg==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 157.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzrsOAUEYhuE/KqVCoVAgIoiI4zotuw6VQkShEhGx6NzCXopLdAkO84r4
Jpm8eeZrJn+8baKEmVVe9113HsEncRTyQE80Sbc0RXc07Xo/4wy90Kzr4euc
a3zFBddwj4vsK1yiS1oWV+ma1qhP6zSgDerR5v8/rSVuizvirtgT98R98UA8
FI/EvngsnogDcfjvWGxT2cU2k11sc9nFtpD95yfwkyw+
          "]]}}, {}, {}, {}, {}},
      
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 196.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0LkKwkAARdHBSkhjYWFhoSKiIuK+a+LWx4iIYKEBa38hX5Xaz7LUME/F
OzBcDg+mmGJ4D24pY0ztfZNenfjixE/XJMcPPWOPrXeQ0+pJzdg+9nJW9dWc
bbST83BB7wdySftRLqtntaJ9K1fVpVpXu2oDbsItuA13YLYH9+EBPIRH8Bie
wFN4Bs/hBezC3r8j+Puvnx02K+ywWWOHzQb7zy/pYDDs
          "]]}}, {}, {}, {}, {}},
      
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 146.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzj9OAkEYhvGNFSWFBYXFagwBQwiCiIjKAB7AeIINCVHxHxZAJBhHtLDk
CByBI3AUj8ARAN/nK9hNNk9+Ozsz33779bazEwRBdv1uqmdZ/084cnxQC2Oc
UJdfOKnefOBdbPtTqrf1PXVq54Xq7BsfqNEPPozdl8afOKMmJvhIDYc4p/b6
OK/ObZ6C+mc+jv1fZJ53XFKTHp+ov+YyHdBT5nnBFdWbz1h/w1X6TM+531yj
PXrB/I/4UnVP+Epd2P467mK3vd+72P8NdfbAOl7csd7k+z3FgZ3f2rbHke2/
Zl47H0ddtwLd2UWn
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 652.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0jsOgkAYReE/VpYWFhYWagxRY4xvFBTwUVuwBBIbLdwCS3UJLkHIXDCe
ScjJxy1n+tkrvTfMbFx8Zd35xK6PRD9c30+56Zrf5JZ6VdvqSe2oW7UL9+AB
PIQ9eARP4Ck8g+fwAl7CK3gNb2DWh3fwHg7gED7ARziCYzj5dw7X91jtsJ2x
w3bBDtfvptp//gJq/iwK
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 223.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJw90T1OAkEchvENFSUFBYUFGmKAGKLiB4rAAB7AeAJjYmLndhJBGKMQPyg0
MYGSI1BYUHIEjuARKC35eJ+/m2x+eWZ2d2Z3N6/vLm8iQRBkludKHfPKmuGr
Y0C6Nzoqp+90TDae6DjXP9MJOenRG9J/0Enm+/SWTH3SKTm33pbRLzot/6yz
8mJA78jQ9p+TVx16V8ba9J78faT35axJ52XygT6QY+tDObLrj9iPPe+Y9Txd
kGnrE+63PpX/37eIL3gmE/Y/SvLHvleZ9b/pivRd2rGfBuN0SAdVxu+RHtl8
jeZ9Pe1svi6nLebpib3fubxlP54Om24B0XVJHw==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 1492.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyU0KglAUhuFDI4cNGjRwoBGiEZH9mJaplQuQlhAEzaQdtJSW0NJaguk9
Eb0XLi/P+dxLfb72RCT4/LbmvfMur3uhB9Pqa8v0Wav7ps5NPdDa2iHMOvAI
HsMe7MMTeArP4Dkcwgt4Ca/gNRzBGziGE3gL7+AU3sMZnMPFvx+wHLDDcsQO
ywk7LCX2nxvCuyjv
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 283.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0bkKwkAYReEfQbS0sLCwUBGJIu5bXMcNrWNhL1jbWubRfAAfSsNcFU9g
OHzcgRRTvtyia8rMgvdJ+qzfw3Q74yz54rOvZX0fJznn6yI5r/tHuSDv5aJ6
UEvqTq2oVVT/sRocwA24CbfgDtyFe3AfHsBDeASP4QkcwlN4Bs/hBbyEV7D7
dwzbGjtsG+ywbbHD33f/7D+/AHKEKJM=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 94.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0UsOAUEYReE/RoYGPTAwQDqCiLR3e3WXxwpILEBiLGEDlmYJlmIJ6LpN
nEoqJ1/dYdWO592pYGat9/3Un2ea5XFxevB1uYu+0VUu+d73cqAe1LK6Uitq
qFbhOsw24CbchjtwF47gHtyHB/AQHsFjeALH8BSewXN4AS/hBE5h9+8b/P23
fIdtjR22DXbYtth/fgEySCqX
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 307.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzLkJAkEYhuHByHADAwMDFREVEe/7WI8KNhAEBV1ZMBOsYEuxFEuxBEvw
+D8R34Hh5Zl/ZnLhOYgSzrnya79r6zH7JA59HVizkZy0+oHsWW8bOWW9HuW0
9X6SM1bvImet8U7O67+tXNB/e7mortWS+r1f0fuDXIVrcB1uwE24BbfhDtyF
e3AfHsBDeASP4Qk8hWew/+8YdnPMYbfAHHZLzGG3wvznJ5JaS7E=
          
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 289.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyTsOgkAURuEbKksLCgsLNMagIcS3AgoDaEVHZWlIrN0CS3UJLsHHXGM8
k0xOvvsPmlt9dURk8vrv2vfIPrk3Rg+23tcdW3NWd9UXtWvbVuqe+qTuwx48
hEfwGPbhKRzAITyD5/ACXsIreA1v4C28gyM4hhN4Dx/gFM5g8+8Wlhw7LAV2
WErssByx//wEZGxA5Q==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 151.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyjsKwkAYReEf9yBYWKj4QkTi+21idAVaWQkjioUgNtZZiktxaSbMFfEM
Mxw+7pTdfXfOmVktfVld45nefGTZuT58reD7uslF+SKX5JNc8X0f5Kp6VOu+
iZOb6vd/S92rbbgDB3AX7sF9eAAP4RE8hifwFJ7Bc3gBL+EVHMLRvxPY1thh
i7HDtsEO2xb7zx9rozBm
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 278.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyU0KglAUhuGDo4YNHDRoYCJSIWGZ2q/eNGjUJFyB0bgtuGSXoOWB6L1w
eXnON6vfj5clIov+fzq8Nv/GPI0ehjaVeqS9acfau9aGJ/AUdmAX9mAfnsNL
OIBXcAiv4Q0cwVs4hhM4hXfwHj7AR/gEn+EMzmHz7waWC3ZYCuywlNhhuWL/
uQNU1C6W
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 154.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyTkKwmAUReGLjb1YWAhRkSAiwTjPxmEFqS1EEO3iAizcmjtxCVmChv+F
4HnwOHzc5iWJryVJ/u+zpu+y90wrkbJ7JK6qun7u5prr+WauW3M3rCdrC25b
h1Yf7sBduAcHcB8O4QHMjuAxPIGn8Ayewwt4Ca/gNbyBt3D07xesHXZYe+yw
DthhHbEX/gIloCyi
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 251.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzN0KAUEchvF/7kP5SpskrG+L8bERkTjdI8WpW9g7cEtyT87Z5i15pqan
X+80xcv9dM2ZWfl7syaP1ztI8s6y426+VvB9nuWSulcr6lqt+qYbOZBjuaZu
1br+P8oNvT/ITXknt9RIbePfEO7AXbgH9+EBPIRH8BiO4Ak8hWew+3cK2xw7
bAvssC2xw7bC/vMHg4ErUQ==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 178.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzDkOQVEUh/ETlVKhUCgQEUTEPPOeoVIJG3iRqMVYW4IlWYIlWIIlGO7/
RXw3ufnyu+fmpNfb5SZiZoX3/dSdp/dNcPD14Po4ylHX21mOuV5Dx13vJzkh
7+Wk/of7U9q/kzOufiBn1ZWaUxdqXp2rRbgEl+EKXIVrcB1uwE24BbfhDtyF
e3AfHsBDeAR7sP/vC2xjzGGbYA7bFHPYZpj//AJA2DSX
          "]]}}, {}, {}, {}, {}},
      
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 364.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0TkKwlAUheGLlaWFhYVFFBEjInGekzgUgpUW1iJYiYqNQgiYJbgUl5Cl
uASX4HBPFE/g8fPlQF6RzPqw2MRExHydd/V5OJ+sdi5eaIMtHNfe93BCezvC
Sa1xhlNay4fT+J4HG7RntWHknPZ6gvPoBS2gS7SITtAS7pvBZXgOW/AUrqAd
tEqukevkBrlJbpHbZG6X3CP3yQOyTXbI7r8DsgxpJ8uIdrKMaSd//1O0//wE
ol8zyg==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 496.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyb0KgmAUh/GDk2ODQ4NDiUiJRGll9uFHNTW2Nyg4ewteWpfkJZR5IHxe
eHn4nf+8ap61ISLL7+87vC775V3mehjavtSm9qGdaCOtpbW1U5idwQ7swh68
gH04gFfwGt7AIRzBW3gH7+EYPsAJfIRP8Bm+wCmcwfnYLSwFdliu2GG5YYfl
jv3vD2vxJ/E=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 142.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyTkKwlAURuGLlWUKCwsLDSIaRKJxiEMGhwVIliBY2Djs4C3FpbkEl2D0
XhHPg8fhu3/rcCmOFRHplf9dfc/sE3fO7aB9fF3Vhlezp93fzDXt/WSuW9fW
BtyEfbgNd+AuHMB9eACH8BAewRE8hifwFJ7BMTyHF/ASXsEJnMIZnP/bwazj
fYMdli12WHbYf34B6v0vNA==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 277.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzqFPQlEYhvE7Z3AkgsFgQAfOuTt3RRQUlavR5BjJIMpgUwMwNoOBeQqV
mcw30djcNEm5geBGo2nSZCDIn6De97Gcs509+53vC2ep0ijWZhzHSf3ev+pM
C1FO2j4PqneH59TgCsdVU8PzlhfUxCVeVM+rOKF+VPCy5aS1v0Iv6Koa/nsN
l7GLr/E6/7/Bnuo18YblNPsNvMn/6jhjeYv9Ft5Wp7c4y9zgnPrawTvqYxfv
qvcPOK92A7ynxnp4Xy318YHqPuOCOhlgP6qZHcoGv4yYH0YNB2PmshO+MT+K
Gnx/+qdPJv5+JjePv/wfO1JKUA==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 47699.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyssKQVEYhuGVkaGBgYEBkpDkfLb3dhgoJXEHypSdiYHJlhtzKS7BJTj8
X8m7avX2rG9ld8fNPuacK73vp3ae/jfhLdCDNbjIceviKiesj7OctIYnOWW9
h3LaGh3kDPac9qWc176WC/JWLur/Si6rc7UCV+EaXIcbcBNuwW24A3fhHtyH
B/AQHsFj2IN9OPh3BLsJdthNscNuhh1mo59f58I02A==
          "]]}}, {}, {}, {}, {}},
      
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 622.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0jsOgkAURuEbK0sLCwoLNIaoMQZfgKDMKKyAWhsSa7fAkl2CAhcNZ5LJ
yTd/O9PyVTwHIrL83rrteZsm1cPqg/auHdr+PmrrluqxNtc62kA7gV14Bs9h
D17AK3gNb2Af3sI7eA8f4CPMhnAEn+AYTuAzfIFT2MC27wqWK3ZYbthhybDD
v3/S7X9/AP0HK94=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 145.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzjtLA0EYRuFBBFOmsLAQTEQkioREo8bbZrwUlhKCWAuCnTfwhkVAXQRB
7WxX7IO9zQYsbCWIYiCkELER8hM0+55pXFgOz3w7M5tc3ypudBhjhv7edvW0
ClHsoWVBjTvH1NYRjquJY9ytNndwj7ri3Ev3aILznPvVYBcP/DtvkPsOcErN
7ONh9eYEj6ihc1pdPsMZde0UZ9Vv51E1do7H1JSPc+q287i6eYkn1PIFnmR+
hfP4Fk9x/z2eVit3eEZdreBZtfaI59TXJ+yp3gsuRLXpD2yjhp0N/lMuX2Mz
HzUofTGXbZfbv6Dv/XfmclhtMl+Uf2rMZdv3xnxJ+z+fmcum/mB/AWTJU0I=

          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 45733.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[{{6.25, 74.5}, {7., 70.}, {7.3, 74.5}}], 
         LineBox[CompressedData["
1:eJxdydkJg1AURdGDnSgiIkGMQ2aNiRYgr4SA37aQUvIdm7A0FQVxX7gcFtv+
dKa1JDnTz9v/pwvsUvP9zLJylh2a1S7swT4cwAc4hCP4CMdwAqdwBp/gM3yB
r/ANvsMPOIcL+AmXe39hvdBhvdFhVeiwavTNI0kWRBQ=
          "]]}}, {}, {}, {}, {}},
      
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 66.625},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {67., 74.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJw1zj9LQlEYx/FDU1GDQ8MdgiwiSiLsj2ZaeayWtmhyCUIwiEStoMngatHk
4ODY4BS1iS0RDVHgS4jIRWh08SVU/r7nwuXL5z7nPNypTOEgO2SMmf97/6un
nxzEu7F8UBvXeFh9dg6oX+78uGp97Klpd35CLbp5UD0q42nVv8IzzC/xLPvP
8ZwaLuIQ/5vDC2owgxdxFoc5f4KX1De3b1nt5vGK2jzDq9w/xhH2n+KoWrvA
a7REY2r6Fq+zr4rj6kMNJ9RqHW+oY3d4k/sNvKUG7nFSjT9iqx42VR97T8xT
aq/FHO+/MN8e1O+8M5dNhfNmh/97ZY4/P5jv6v5o25Y735N7I/inbX8BYR9N
0Q==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 11719.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0M0KAVEYxvE3K0sLCwuLIQlJvj8GM8fHQkSyEwtNWdsIYzWX4hJcgkua
S0DvM8lz6vTvd95Tp07GO22OMREpfva3ukJX4xscaK07HNc+bnBC+4ruJ7WH
yCnt+gqnyZY2vMBZ7fMM5/C+B+fRLVrA+3u4pDU7uKwNFnAFXsFVeAbX0CVa
R+dog9okt1D8o7TJHXKX3CPb5D55QB6SHbJLNv8OyDKiOVnGNCfLhOZkmdL8
5zced0Q6
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 418.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyUEKglAUheGDCwk1iRAJS7PM0pc1adoSAsdtwamLcF+5GxMfRP+Fy8/H
8V7vZ+NIWn5/6tD1n65fGE1nHnPlzm1ra9/2bBvAK3gNh3AEb+AY3sI7OIFT
eA9n8AE+wjl8gguYvcAlXMHm3y2sK3ZYNXZYN+yw7th/HgEjiCo3
          
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 26.875000000000004`},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {28., 50.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.740055624391067*^9, 3.740055639901511*^9}, 
   3.740055827102695*^9, 3.740061240868432*^9, 3.740061476100369*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"85315bc8-58cd-4d3a-a4b2-fb7660059377"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Thoughts", "Subsubsection",
 CellChangeTimes->{{3.740056130430513*^9, 
  3.74005616312372*^9}},ExpressionUUID->"2681b080-1147-46cf-a18d-\
032eae06a87e"],

Cell["\<\
Perhaps it\[CloseCurlyQuote]s training on the last few lines of the raster. \
Try feature set identification:\
\>", "Text",
 CellChangeTimes->{{3.740056164117978*^9, 
  3.740056215124324*^9}},ExpressionUUID->"3e351c5e-a6e5-4c10-a68d-\
a5344d5366ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rasternet", " ", "=", " ", 
  RowBox[{
  "NetModel", "[", "\"\<VGG-16 Trained on ImageNet Competition Data\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740056249880075*^9, 3.74005625045332*^9}, {
  3.740062941344207*^9, 3.740062941435402*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"d01f1b50-9064-4be9-b73b-e010890b14ef"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["40", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "flatten_0" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]]], 
                    "fc6" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 25088}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{4096}]],
                     "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop6" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc7" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 4096}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{4096}]],
                     "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop7" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1000, 4096}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1000}]],
                     "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "prob" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association["Labels" -> {
                    Entity["Concept", "Tench::q9r2d"], 
                    Entity["Concept", "CarassiusAuratus::f73xs"], 
                    Entity["Concept", "CarcharodonCarcharias::st7pj"], 
                    Entity["Concept", "GaleocerdoCuvieri::h7238"], 
                    Entity["Concept", "HammerheadShark::cky4t"], 
                    Entity["Concept", "Crampfish::6369q"], 
                    Entity["Concept", "Stingray::4cts3"], 
                    Entity["Concept", "Cock::2s2xh"], 
                    Entity["Concept", "Hen::49q38"], 
                    Entity["Concept", "StruthioCamelus::7fgc2"], 
                    Entity["Concept", "Brambling::47bpt"], 
                    Entity["Concept", "CarduelisCarduelis::bv5y9"], 
                    Entity["Concept", "CarpodacusMexicanus::zq6w8"], 
                    Entity["Concept", "Junco::sjqs9"], 
                    Entity["Concept", "IndigoBird::6365d"], 
                    Entity["Concept", "AmericanRobin::wf28w"], 
                    Entity["Concept", "Bulbul::4x6vd"], 
                    Entity["Concept", "Jay::9g7qw"], 
                    Entity["Concept", "Magpie::62kfm"], 
                    Entity["Concept", "Chickadee::qmsc9"], 
                    Entity["Concept", "WaterOuzel::n32d7"], 
                    Entity["Concept", "Kite::y2jjm"], 
                    Entity["Concept", "AmericanEagle::z2fqr"], 
                    Entity["Concept", "Vulture::r2nfy"], 
                    Entity["Concept", "GreatGrayOwl::97vk2"], 
                    Entity["Concept", "EuropeanFireSalamander::t6v33"], 
                    Entity["Concept", "CommonNewt::9nx3s"], 
                    Entity["Concept", "Eft::t3bv7"], 
                    Entity["Concept", "AmbystomaMaculatum::qnd2g"], 
                    Entity["Concept", "AmbystomaMexicanum::k9j45"], 
                    Entity["Concept", "Bullfrog::r9cvc"], 
                    Entity["Concept", "Tree-frog::m988r"], 
                    Entity["Concept", "AscaphusTrui::qr2np"], 
                    Entity["Concept", "CarettaCaretta::768y9"], 
                    Entity["Concept", "DermochelysCoriacea::ypc4b"], 
                    Entity["Concept", "MudTurtle::47p9w"], 
                    Entity["Concept", "Terrapin::5j9b2"], 
                    Entity["Concept", "BoxTortoise::hksb9"], 
                    Entity["Concept", "BandedGecko::38zhr"], 
                    Entity["Concept", "CommonIguana::66q43"], 
                    Entity["Concept", "AmericanChameleon::67k54"], 
                    Entity["Concept", "Whiptail::sb62k"], 
                    Entity["Concept", "Agama::22vdx"], 
                    Entity["Concept", "ChlamydosaurusKingi::stq3k"], 
                    Entity["Concept", "AlligatorLizard::k6335"], 
                    Entity["Concept", "GilaMonster::k8q26"], 
                    Entity["Concept", "GreenLizard::2fkzv"], 
                    Entity["Concept", "AfricanChameleon::x82fs"], 
                    Entity["Concept", "DragonLizard::s68v6"], 
                    Entity["Concept", "AfricanCrocodile::zw55f"], 
                    Entity["Concept", "AlligatorMississipiensis::s7582"], 
                    Entity["Concept", "Triceratops::p997c"], 
                    Entity["Concept", "CarphophisAmoenus::35dfs"], 
                    Entity["Concept", "Ring-neckedSnake::2f823"], 
                    Entity["Concept", "HognoseSnake::k5k58"], 
                    Entity["Concept", "GrassSnake::pv2xf"], 
                    Entity["Concept", "KingSnake::t9m8y"], 
                    Entity["Concept", "GarterSnake::892t9"], 
                    Entity["Concept", "WaterSnake::y627x"], 
                    Entity["Concept", "VineSnake::9kywz"], 
                    Entity["Concept", "HypsiglenaTorquata::6869v"], 
                    Entity["Concept", "BoaConstrictor::qq73z"], 
                    Entity["Concept", "PythonSebae::dmhh6"], 
                    Entity["Concept", "IndianCobra::2sv7h"], 
                    Entity["Concept", "GreenMamba::c9qn3"], 
                    Entity["Concept", "SeaSnake::s529y"], 
                    Entity["Concept", "Cerastes::6575z"], 
                    Entity["Concept", "CrotalusAdamanteus::8ynrx"], 
                    Entity["Concept", "CrotalusCerastes::m382t"], 
                    Entity["Concept", "Trilobite::3qyq3"], 
                    Entity["Concept", "Harvestman::545h3"], 
                    Entity["Concept", "Scorpion::9rx48"], 
                    Entity["Concept", "ArgiopeAurantia::633xv"], 
                    Entity["Concept", "AraneusCavaticus::thm3g"], 
                    Entity["Concept", "AraneaDiademata::4jvj8"], 
                    Entity["Concept", "BlackWidow::4682d"], 
                    Entity["Concept", "Tarantula::mc462"], 
                    Entity["Concept", "HuntingSpider::q7898"], 
                    Entity["Concept", "Tick::xw6hc"], 
                    Entity["Concept", "Centipede::s8w7r"], 
                    Entity["Concept", "BlackGrouse::9w35m"], 
                    Entity["Concept", "Ptarmigan::tv6c8"], 
                    Entity["Concept", "BonasaUmbellus::bpbr3"], 
                    Entity["Concept", "PrairieChicken::2ws9g"], 
                    Entity["Concept", "Peacock::kd2y4"], 
                    Entity["Concept", "Quail::7462f"], 
                    Entity["Concept", "Partridge::t22mp"], 
                    Entity["Concept", "AfricanGray::84css"], 
                    Entity["Concept", "Macaw::ntx97"], 
                    Entity["Concept", "CacatuaGalerita::tfz9w"], 
                    Entity["Concept", "Lorikeet::4f725"], 
                    Entity["Concept", "Coucal::z95g6"], 
                    Entity["Concept", "BeeEater::376h3"], 
                    Entity["Concept", "Hornbill::6389h"], 
                    Entity["Concept", "Hummingbird::vz6gt"], 
                    Entity["Concept", "Jacamar::v7428"], 
                    Entity["Concept", "Toucan::2h2d5"], 
                    Entity["Concept", "Drake::5cdfw"], 
                    Entity["Concept", "MergusSerrator::5t86m"], 
                    Entity["Concept", "Goose::82x27"], 
                    Entity["Concept", "BlackSwan::6ft7p"], 
                    Entity["Concept", "Tusker::dqq7d"], 
                    Entity["Concept", "Anteater::8t864"], 
                    Entity["Concept", "Duck-billedPlatypus::b8867"], 
                    Entity["Concept", "BrushKangaroo::493r2"], 
                    Entity["Concept", "KangarooBear::hvf3s"], 
                    Entity["Concept", "Wombat::m5rqr"], 
                    Entity["Concept", "Jellyfish::fs9rf"], 
                    Entity["Concept", "SeaAnemone::5n98x"], 
                    Entity["Concept", "BrainCoral::v7844"], 
                    Entity["Concept", "Flatworm::h957w"], 
                    Entity["Concept", "Nematode::hz536"], 
                    Entity["Concept", "Conch::44pfv"], 
                    Entity["Concept", "Snail::3r58h"], 
                    Entity["Concept", "Slug::d4638"], 
                    Entity["Concept", "Nudibranch::dq2vh"], 
                    Entity["Concept", "Coat-of-mailShell::h3tp5"], 
                    Entity["Concept", "ChamberedNautilus::tspc6"], 
                    Entity["Concept", "CancerMagister::5r562"], 
                    Entity["Concept", "CancerIrroratus::d69mr"], 
                    Entity["Concept", "FiddlerCrab::4mt9n"], 
                    Entity["Concept", "ParalithodesCamtschatica::pfzy2"], 
                    Entity["Concept", "HomarusAmericanus::n2j65"], 
                    Entity["Concept", "SeaCrawfish::x53g2"], 
                    Entity["Concept", "Crawdaddy::946y4"], 
                    Entity["Concept", "HermitCrab::4k242"], 
                    Entity["Concept", "Isopod::4z747"], 
                    Entity["Concept", "CiconiaCiconia::wkt3m"], 
                    Entity["Concept", "BlackStork::5v349"], 
                    Entity["Concept", "Spoonbill::4939q"], 
                    Entity["Concept", "Flamingo::28r7m"], 
                    Entity["Concept", "EgrettaCaerulea::9965c"], 
                    Entity["Concept", "AmericanEgret::43jz8"], 
                    Entity["Concept", "Bittern::722qw"], 
                    Entity["Concept", "Crane::9wrg8"], 
                    Entity["Concept", "AramusPictus::964mw"], 
                    Entity["Concept", "EuropeanGallinule::c7jfx"], 
                    Entity["Concept", "AmericanCoot::c7452"], 
                    Entity["Concept", "Bustard::p3zj5"], 
                    Entity["Concept", "ArenariaInterpres::3rbq4"], 
                    Entity["Concept", "Dunlin::4mj52"], 
                    Entity["Concept", "Redshank::yvbj8"], 
                    Entity["Concept", "Dowitcher::47w6h"], 
                    Entity["Concept", "OysterCatcher::9drpt"], 
                    Entity["Concept", "Pelican::jpfg7"], 
                    Entity["Concept", "AptenodytesPatagonica::f85wf"], 
                    Entity["Concept", "Mollymawk::r8386"], 
                    Entity["Concept", "EschrichtiusGibbosus::2c8q9"], 
                    Entity["Concept", "KillerWhale::26sj4"], 
                    Entity["Concept", "Dugong::ss39b"], 
                    Entity["Concept", "SeaLion::bs87w"], 
                    Entity["Concept", "Chihuahua::8hmhf"], 
                    Entity["Concept", "JapaneseSpaniel::h55d9"], 
                    Entity["Concept", "MalteseDog::trsv6"], 
                    Entity["Concept", "Peke::b9n5f"], 
                    Entity["Concept", "Shih-Tzu::kc9k8"], 
                    Entity["Concept", "BlenheimSpaniel::cd3nm"], 
                    Entity["Concept", "Papillon::zhn7j"], 
                    Entity["Concept", "ToyTerrier::k3s97"], 
                    Entity["Concept", "RhodesianRidgeback::jph75"], 
                    Entity["Concept", "AfghanHound::6845m"], 
                    Entity["Concept", "Basset::n769x"], 
                    Entity["Concept", "Beagle::2bdvt"], 
                    Entity["Concept", "Bloodhound::pc454"], 
                    Entity["Concept", "Bluetick::fs5sw"], 
                    Entity["Concept", "Black-and-tanCoonhound::84k6y"], 
                    Entity["Concept", "WalkerFoxhound::z3y7p"], 
                    Entity["Concept", "EnglishFoxhound::5v343"], 
                    Entity["Concept", "Redbone::j6h4x"], 
                    Entity["Concept", "Borzoi::v43t8"], 
                    Entity["Concept", "IrishWolfhound::8m3gw"], 
                    Entity["Concept", "ItalianGreyhound::s4gq3"], 
                    Entity["Concept", "Whippet::57r47"], 
                    Entity["Concept", "IbizanHound::987kj"], 
                    Entity["Concept", "Elkhound::62q39"], 
                    Entity["Concept", "OtterHound::3442w"], 
                    Entity["Concept", "GazelleHound::7k449"], 
                    Entity["Concept", "Deerhound::btsv4"], 
                    Entity["Concept", "Weimaraner::476j6"], 
                    Entity["Concept", "StaffordshireBullTerrier::883y3"], 
                    Entity["Concept", "AmericanPitBullTerrier::kw55q"], 
                    Entity["Concept", "BedlingtonTerrier::98h82"], 
                    Entity["Concept", "BorderTerrier::gh5h6"], 
                    Entity["Concept", "KerryBlueTerrier::t9c62"], 
                    Entity["Concept", "IrishTerrier::qmsm4"], 
                    Entity["Concept", "NorfolkTerrier::b7z76"], 
                    Entity["Concept", "NorwichTerrier::9v483"], 
                    Entity["Concept", "YorkshireTerrier::bn4jn"], 
                    Entity["Concept", "Wire-hairedFoxTerrier::pn5qb"], 
                    Entity["Concept", "LakelandTerrier::b729b"], 
                    Entity["Concept", "SealyhamTerrier::5jz56"], 
                    Entity["Concept", "Airedale::w6gf4"], 
                    Entity["Concept", "CairnTerrier::67c37"], 
                    Entity["Concept", "AustralianTerrier::q2h6g"], 
                    Entity["Concept", "DandieDinmont::ff47s"], 
                    Entity["Concept", "BostonBull::6662j"], 
                    Entity["Concept", "MiniatureSchnauzer::848y9"], 
                    Entity["Concept", "GiantSchnauzer::8fwv6"], 
                    Entity["Concept", "StandardSchnauzer::q9j3y"], 
                    Entity["Concept", "ScotchTerrier::2f2jw"], 
                    Entity["Concept", "ChrysanthemumDog::y9tps"], 
                    Entity["Concept", "SilkyTerrier::xyfw3"], 
                    Entity["Concept", "Soft-coatedWheatenTerrier::474j2"], 
                    Entity["Concept", "WestHighlandWhiteTerrier::4h85y"], 
                    Entity["Concept", "LhasaApso::cr28m"], 
                    Entity["Concept", "Flat-coatedRetriever::866mk"], 
                    Entity["Concept", "Curly-coatedRetriever::pb8yt"], 
                    Entity["Concept", "GoldenRetriever::t59tg"], 
                    Entity["Concept", "LabradorRetriever::7g587"], 
                    Entity["Concept", "ChesapeakeBayRetriever::s8567"], 
                    Entity["Concept", "GermanShort-hairedPointer::k3297"], 
                    Entity["Concept", "HungarianPointer::7555p"], 
                    Entity["Concept", "EnglishSetter::ps793"], 
                    Entity["Concept", "IrishSetter::h5pp3"], 
                    Entity["Concept", "GordonSetter::yvx65"], 
                    Entity["Concept", "BrittanySpaniel::435gz"], 
                    Entity["Concept", "Clumber::2ddvk"], 
                    Entity["Concept", "EnglishSpringer::f4dq6"], 
                    Entity["Concept", "WelshSpringerSpaniel::qyng2"], 
                    Entity["Concept", "Cocker::7284r"], 
                    Entity["Concept", "SussexSpaniel::sbv42"], 
                    Entity["Concept", "IrishWaterSpaniel::m9zkp"], 
                    Entity["Concept", "Kuvasz::z4sxp"], 
                    Entity["Concept", "Schipperke::7778z"], 
                    Entity["Concept", "Groenendael::5854s"], 
                    Entity["Concept", "Malinois::k8y57"], 
                    Entity["Concept", "Briard::dtm5k"], 
                    Entity["Concept", "Kelpie::k6795"], 
                    Entity["Concept", "Komondor::p8q9b"], 
                    Entity["Concept", "OldEnglishSheepdog::4zdy3"], 
                    Entity["Concept", "ShetlandSheepDog::sffh8"], 
                    Entity["Concept", "Collie::999kf"], 
                    Entity["Concept", "BorderCollie::463w2"], 
                    Entity["Concept", "BouvierDesFlandres::h7txf"], 
                    Entity["Concept", "Rottweiler::zywt3"], 
                    Entity["Concept", "Alsatian::fh5zw"], 
                    Entity["Concept", "Doberman::zgqf4"], 
                    Entity["Concept", "MiniaturePinscher::jvy9c"], 
                    Entity["Concept", "GreaterSwissMountainDog::t7642"], 
                    Entity["Concept", "BerneseMountainDog::y32v5"], 
                    Entity["Concept", "Appenzeller::j96dj"], 
                    Entity["Concept", "EntleBucher::y43x6"], 
                    Entity["Concept", "Boxer::3966f"], 
                    Entity["Concept", "BullMastiff::6p365"], 
                    Entity["Concept", "TibetanMastiff::4f68b"], 
                    Entity["Concept", "FrenchBulldog::3jg82"], 
                    Entity["Concept", "GreatDane::xg8dn"], 
                    Entity["Concept", "SaintBernard::r5277"], 
                    Entity["Concept", "EskimoDog::2vm97"], 
                    Entity["Concept", "AlaskanMalamute::y6wqq"], 
                    Entity["Concept", "SiberianHusky::k7pkk"], 
                    Entity["Concept", "CarriageDog::jh3w6"], 
                    Entity["Concept", "Affenpinscher::58wr6"], 
                    Entity["Concept", "Basenji::k9yy2"], 
                    Entity["Concept", "Pug::6799h"], 
                    Entity["Concept", "Leonberg::49td5"], 
                    Entity["Concept", "NewfoundlandDog::q787h"], 
                    Entity["Concept", "GreatPyrenees::t8qh7"], 
                    Entity["Concept", "Samoyede::rq827"], 
                    Entity["Concept", "Pomeranian::dx7mr"], 
                    Entity["Concept", "ChowChow::7x292"], 
                    Entity["Concept", "Keeshond::rz734"], 
                    Entity["Concept", "BrabanconGriffon::jh5pt"], 
                    Entity["Concept", "Pembroke::95g54"], 
                    Entity["Concept", "Cardigan::b724j"], 
                    Entity["Concept", "ToyPoodle::732f6"], 
                    Entity["Concept", "MiniaturePoodle::4955p"], 
                    Entity["Concept", "StandardPoodle::w25c4"], 
                    Entity["Concept", "MexicanHairless::m2by7"], 
                    Entity["Concept", "CanisLupus::5gwtc"], 
                    Entity["Concept", "ArcticWolf::4xr47"], 
                    Entity["Concept", "CanisNiger::99p6d"], 
                    Entity["Concept", "BrushWolf::44t57"], 
                    Entity["Concept", "CanisDingo::529k9"], 
                    Entity["Concept", "CuonAlpinus::f5yfn"], 
                    Entity["Concept", "AfricanHuntingDog::d9b86"], 
                    Entity["Concept", "Hyaena::7444d"], 
                    Entity["Concept", "VulpesVulpes::g8mvp"], 
                    Entity["Concept", "VulpesMacrotis::jm64h"], 
                    Entity["Concept", "AlopexLagopus::44cg9"], 
                    Entity["Concept", "GrayFox::vftd5"], 
                    Entity["Concept", "TabbyCat::rvg7f"], 
                    Entity["Concept", "TigerCat::8k84h"], 
                    Entity["Concept", "PersianCat::p69kd"], 
                    Entity["Concept", "SiameseCat::hgg68"], 
                    Entity["Concept", "EgyptianCat::sd6pw"], 
                    Entity["Concept", "Cougar::7bc9f"], 
                    Entity["Concept", "Catamount::q4f63"], 
                    Entity["Concept", "PantheraPardus::r35k5"], 
                    Entity["Concept", "PantheraUncia::z6697"], 
                    Entity["Concept", "FelisOnca::jh7tq"], 
                    Entity["Concept", "KingOfBeasts::vrwm9"], 
                    Entity["Concept", "PantheraTigris::2mpmq"], 
                    Entity["Concept", "GiantAnteater::y96st"], 
                    Entity["Concept", "BrownBear::8374p"], 
                    Entity["Concept", "AmericanBlackBear::763x8"], 
                    Entity["Concept", "IceBear::fnc5j"], 
                    Entity["Concept", "MelursusUrsinus::48x75"], 
                    Entity["Concept", "Mongoose::5hp73"], 
                    Entity["Concept", "Meerkat::q77nd"], 
                    Entity["Concept", "TigerBeetle::8362y"], 
                    Entity["Concept", "LadyBeetle::tx6bz"], 
                    Entity["Concept", "CarabidBeetle::w3hjn"], 
                    Entity["Concept", "Long-hornedBeetle::9zzc8"], 
                    Entity["Concept", "Chrysomelid::y8pqz"], 
                    Entity["Concept", "DungBeetle::bt6hz"], 
                    Entity["Concept", "RhinocerosBeetle::23y53"], 
                    Entity["Concept", "Weevil::r87rt"], 
                    Entity["Concept", "Fly::68s97"], 
                    Entity["Concept", "Bee::d8yym"], 
                    Entity["Concept", "Ant::7tznr"], 
                    Entity["Concept", "Grasshopper::52v2f"], 
                    Entity["Concept", "Cricket::82n55"], 
                    Entity["Concept", "StickInsect::4x983"], 
                    Entity["Concept", "Cockroach::7426w"], 
                    Entity["Concept", "Mantid::93t86"], 
                    Entity["Concept", "Cicada::w2299"], 
                    Entity["Concept", "Leafhopper::8k2k2"], 
                    Entity["Concept", "Lacewing::8v2m6"], 
                    Entity["Concept", "Dragonfly::7s252"], 
                    Entity["Concept", "Damselfly::dh8zj"], 
                    Entity["Concept", "Admiral::j6fvp"], 
                    Entity["Concept", "RingletButterfly::28v7s"], 
                    Entity["Concept", "DanausPlexippus::bfk9c"], 
                    Entity["Concept", "CabbageButterfly::c8v77"], 
                    Entity["Concept", "SulfurButterfly::b9263"], 
                    Entity["Concept", "Lycaenid::4whyw"], 
                    Entity["Concept", "SeaStar::46w97"], 
                    Entity["Concept", "SeaUrchin::7b835"], 
                    Entity["Concept", "Holothurian::7jk5q"], 
                    Entity["Concept", "Cottontail::bsxk4"], 
                    Entity["Concept", "Hare::55m72"], 
                    Entity["Concept", "AngoraRabbit::v6627"], 
                    Entity["Concept", "Hamster::9yy49"], 
                    Entity["Concept", "Porcupine::5r285"], 
                    Entity["Concept", "EasternFoxSquirrel::8g9v6"], 
                    Entity["Concept", "Marmot::7vb94"], 
                    Entity["Concept", "Beaver::qp598"], 
                    Entity["Concept", "CaviaCobaya::b8w85"], 
                    Entity["Concept", "Sorrel::b824z"], 
                    Entity["Concept", "Zebra::nx5qr"], 
                    Entity["Concept", "Grunter::437d2"], 
                    Entity["Concept", "WildBoar::5wjz4"], 
                    Entity["Concept", "Warthog::3q477"], 
                    Entity["Concept", "Hippo::647b2"], 
                    Entity["Concept", "Ox::yhn7j"], 
                    Entity["Concept", "AsiaticBuffalo::532z9"], 
                    Entity["Concept", "Bison::25c86"], 
                    Entity["Concept", "Tup::8y669"], 
                    Entity["Concept", "Bighorn::773z4"], 
                    Entity["Concept", "CapraIbex::p5pmr"], 
                    Entity["Concept", "Hartebeest::r8276"], 
                    Entity["Concept", "AepycerosMelampus::q45p2"], 
                    Entity["Concept", "Gazelle::px427"], 
                    Entity["Concept", "ArabianCamel::98q62"], 
                    Entity["Concept", "Llama::pp4mc"], 
                    Entity["Concept", "Weasel::gcxk7"], 
                    Entity["Concept", "Mink::r5727"], 
                    Entity["Concept", "Fitch::x2w8q"], 
                    Entity["Concept", "Black-footedFerret::r6gqg"], 
                    Entity["Concept", "Otter::63tg7"], 
                    Entity["Concept", "WoodPussy::6886s"], 
                    Entity["Concept", "Badger::vcsk3"], 
                    Entity["Concept", "Armadillo::s9866"], 
                    Entity["Concept", "Ai::z6968"], 
                    Entity["Concept", "Orang::5385s"], 
                    Entity["Concept", "Gorilla::7vrdz"], 
                    Entity["Concept", "Chimp::2t668"], 
                    Entity["Concept", "Gibbon::7yqsr"], 
                    Entity["Concept", "HylobatesSyndactylus::3g4xn"], 
                    Entity["Concept", "Guenon::7y986"], 
                    Entity["Concept", "ErythrocebusPatas::949v6"], 
                    Entity["Concept", "Baboon::28m6v"], 
                    Entity["Concept", "Macaque::m87ss"], 
                    Entity["Concept", "Langur::3w42b"], 
                    Entity["Concept", "Colobus::yqv5q"], 
                    Entity["Concept", "NasalisLarvatus::92p77"], 
                    Entity["Concept", "Marmoset::3j236"], 
                    Entity["Concept", "CebusCapucinus::4r452"], 
                    Entity["Concept", "HowlerMonkey::87c48"], 
                    Entity["Concept", "TitiMonkey::6rqgy"], 
                    Entity["Concept", "AtelesGeoffroyi::8f944"], 
                    Entity["Concept", "SaimiriSciureus::f9528"], 
                    Entity["Concept", "LemurCatta::4z4fy"], 
                    Entity["Concept", "Indri::w2dsm"], 
                    Entity["Concept", "ElephasMaximus::4668g"], 
                    Entity["Concept", "AfricanElephant::634z7"], 
                    Entity["Concept", "AilurusFulgens::m96y6"], 
                    Entity["Concept", "AiluropodaMelanoleuca::xg799"], 
                    Entity["Concept", "Barracouta::dzc32"], 
                    Entity["Concept", "Eel::6yymn"], 
                    Entity["Concept", "BlueJack::8728b"], 
                    Entity["Concept", "HolocanthusTricolor::6t872"], 
                    Entity["Concept", "AnemoneFish::5mdgt"], 
                    Entity["Concept", "Sturgeon::46xyk"], 
                    Entity["Concept", "Garfish::p9w7b"], 
                    Entity["Concept", "Lionfish::45vp5"], 
                    Entity["Concept", "Globefish::z6448"], 
                    Entity["Concept", "Abacus::s322h"], 
                    Entity["Concept", "Abaya::327b3"], 
                    Entity["Concept", "AcademicGown::6vvft"], 
                    Entity["Concept", "Accordion::vx545"], 
                    Entity["Concept", "AcousticGuitar::wp46j"], 
                    Entity["Concept", "AircraftCarrier::74d49"], 
                    Entity["Concept", "Airliner::t7542"], 
                    Entity["Concept", "Airship::dg429"], 
                    Entity["Concept", "Altar::z644x"], 
                    Entity["Concept", "Ambulance::rgts3"], 
                    Entity["Concept", "AmphibiousVehicle::rr85n"], 
                    Entity["Concept", "AnalogClock::3832f"], 
                    Entity["Concept", "Apiary::d939v"], 
                    Entity["Concept", "Apron::qr79c"], 
                    Entity["Concept", "Ash-bin::6sd8p"], 
                    Entity["Concept", "AssaultRifle::d2gst"], 
                    Entity["Concept", "BackPack::2cjsp"], 
                    Entity["Concept", "Bakehouse::6nmsm"], 
                    Entity["Concept", "BalanceBeam::6nyqs"], 
                    Entity["Concept", "Balloon::64p99"], 
                    Entity["Concept", "Ballpen::k35fx"], 
                    Entity["Concept", "BandAid::z727z"], 
                    Entity["Concept", "Banjo::fs3f9"], 
                    Entity["Concept", "Balusters::nt6x4"], 
                    Entity["Concept", "Barbell::295kg"], 
                    Entity["Concept", "BarberChair::mybp2"], 
                    Entity["Concept", "Barbershop::qg6kn"], 
                    Entity["Concept", "Barn::6xw3q"], 
                    Entity["Concept", "Barometer::65g49"], 
                    Entity["Concept", "Barrel::3pzvn"], 
                    Entity["Concept", "GardenCart::7br53"], 
                    Entity["Concept", "Baseball::9f8qz"], 
                    Entity["Concept", "Basketball::jq262"], 
                    Entity["Concept", "Bassinet::yn2td"], 
                    Entity["Concept", "Bassoon::92ky9"], 
                    Entity["Concept", "BathingCap::tsd8r"], 
                    Entity["Concept", "BathTowel::72qcw"], 
                    Entity["Concept", "BathingTub::729f8"], 
                    Entity["Concept", "BeachWaggon::c945g"], 
                    Entity["Concept", "BeaconLight::k282w"], 
                    Entity["Concept", "Beaker::btv5s"], 
                    Entity["Concept", "Busby::448c3"], 
                    Entity["Concept", "BeerBottle::8gz7t"], 
                    Entity["Concept", "BeerGlass::r6xp2"], 
                    Entity["Concept", "BellCot::567d3"], 
                    Entity["Concept", "Bib::5wq8k"], 
                    Entity["Concept", "Bicycle-built-for-two::7h478"], 
                    Entity["Concept", "Bikini::m86f8"], 
                    Entity["Concept", "Ring-binder::848m9"], 
                    Entity["Concept", "Binoculars::yp4ss"], 
                    Entity["Concept", "Birdhouse::n3qgq"], 
                    Entity["Concept", "Boathouse::59rht"], 
                    Entity["Concept", "Bob::n2762"], 
                    Entity["Concept", "BolaTie::g65x6"], 
                    Entity["Concept", "PokeBonnet::f4y42"], 
                    Entity["Concept", "Bookcase::6t56v"], 
                    Entity["Concept", "Bookshop::4rgfr"], 
                    Entity["Concept", "Bottlecap::mgg5c"], 
                    Entity["Concept", "Bow::89mx8"], 
                    Entity["Concept", "Bow-tie::79h37"], 
                    Entity["Concept", "MemorialTablet::66g76"], 
                    Entity["Concept", "Bandeau::4j247"], 
                    Entity["Concept", "Breakwater::nrtz2"], 
                    Entity["Concept", "Breastplate::4fmw7"], 
                    Entity["Concept", "Broom::hgy49"], 
                    Entity["Concept", "Bucket::f9743"], 
                    Entity["Concept", "Buckle::3398s"], 
                    Entity["Concept", "BulletproofVest::djqn3"], 
                    Entity["Concept", "BulletTrain::4dfr5"], 
                    Entity["Concept", "ButcherShop::hfp48"], 
                    Entity["Concept", "Taxi::379w3"], 
                    Entity["Concept", "Caldron::k6c8c"], 
                    Entity["Concept", "WaxLight::d9rqz"], 
                    Entity["Concept", "Cannon::54f56"], 
                    Entity["Concept", "Canoe::nnt95"], 
                    Entity["Concept", "CanOpener::6b885"], 
                    Entity["Concept", "Cardigan::237mv"], 
                    Entity["Concept", "CarMirror::5xccg"], 
                    Entity["Concept", "Carousel::n2992"], 
                    Entity["Concept", "CarpentersKit::37rxx"], 
                    Entity["Concept", "Carton::769gr"], 
                    Entity["Concept", "CarWheel::t6f2y"], 
                    Entity["Concept", "AutomatedTeller::w8746"], 
                    Entity["Concept", "Cassette::2pvzn"], 
                    Entity["Concept", "CassettePlayer::v2ng9"], 
                    Entity["Concept", "Castle::m2pbs"], 
                    Entity["Concept", "Catamaran::7b489"], 
                    Entity["Concept", "CDPlayer::7gq93"], 
                    Entity["Concept", "Cello::hhbp5"], 
                    Entity["Concept", "Cellphone::5k4s4"], 
                    Entity["Concept", "Chain::w9j9s"], 
                    Entity["Concept", "ChainlinkFence::pfv8d"], 
                    Entity["Concept", "ChainArmor::h32y6"], 
                    Entity["Concept", "ChainSaw::f5bt6"], 
                    Entity["Concept", "Chest::fd956"], 
                    Entity["Concept", "Chiffonier::m3jmr"], 
                    Entity["Concept", "Chime::m6623"], 
                    Entity["Concept", "ChinaCabinet::9bmqg"], 
                    Entity["Concept", "ChristmasStocking::867r8"], 
                    Entity["Concept", "ChurchBuilding::2394b"], 
                    Entity["Concept", "MovieHouse::hbj23"], 
                    Entity["Concept", "Cleaver::bk925"], 
                    Entity["Concept", "CliffDwelling::5c9sb"], 
                    Entity["Concept", "Cloak::dj822"], 
                    Entity["Concept", "Geta::3r9c9"], 
                    Entity["Concept", "CocktailShaker::r9655"], 
                    Entity["Concept", "CoffeeMug::gwhm5"], 
                    Entity["Concept", "Coffeepot::32tb2"], 
                    Entity["Concept", "Coil::c7h65"], 
                    Entity["Concept", "CombinationLock::b8rp7"], 
                    Entity["Concept", "ComputerKeyboard::26d5s"], 
                    Entity["Concept", "CandyStore::268x7"], 
                    Entity["Concept", "ContainerShip::tsz7x"], 
                    Entity["Concept", "Convertible::4pxj2"], 
                    Entity["Concept", "BottleScrew::djq6x"], 
                    Entity["Concept", "Cornet::35d97"], 
                    Entity["Concept", "CowboyBoot::5f655"], 
                    Entity["Concept", "CowboyHat::59wk9"], 
                    Entity["Concept", "Cradle::3882z"], 
                    Entity["Concept", "Crane::k29p4"], 
                    Entity["Concept", "CrashHelmet::76cs8"], 
                    Entity["Concept", "Crate::wmc92"], 
                    Entity["Concept", "Cot::3kgws"], 
                    Entity["Concept", "CrockPot::w5t85"], 
                    Entity["Concept", "CroquetBall::g84t5"], 
                    Entity["Concept", "Crutch::3q57h"], 
                    Entity["Concept", "Cuirass::256jq"], 
                    Entity["Concept", "Dam::w9687"], 
                    Entity["Concept", "Desk::q73z7"], 
                    Entity["Concept", "DesktopComputer::f8gmj"], 
                    Entity["Concept", "DialPhone::3j2f6"], 
                    Entity["Concept", "Nappy::6979r"], 
                    Entity["Concept", "DigitalClock::hm3x5"], 
                    Entity["Concept", "DigitalWatch::v274r"], 
                    Entity["Concept", "DiningTable::6ypqf"], 
                    Entity["Concept", "Dishcloth::4t678"], 
                    Entity["Concept", "DishWasher::px58r"], 
                    Entity["Concept", "DiscBrake::bxcw7"], 
                    Entity["Concept", "DockingFacility::f42zy"], 
                    Entity["Concept", "DogSled::34t8q"], 
                    Entity["Concept", "Dome::5j3x2"], 
                    Entity["Concept", "WelcomeMat::jqb5y"], 
                    Entity["Concept", "DrillingPlatform::r792r"], 
                    Entity["Concept", "Membranophone::2x379"], 
                    Entity["Concept", "Drumstick::4j5yw"], 
                    Entity["Concept", "Dumbbell::qjh33"], 
                    Entity["Concept", "DutchOven::qy3dv"], 
                    Entity["Concept", "ElectricFan::n79z5"], 
                    Entity["Concept", "ElectricGuitar::9pkmr"], 
                    Entity["Concept", "ElectricLocomotive::5wv23"], 
                    Entity["Concept", "EntertainmentCenter::mg549"], 
                    Entity["Concept", "Envelope::c722j"], 
                    Entity["Concept", "EspressoMaker::z42xs"], 
                    Entity["Concept", "FacePowder::yzy7x"], 
                    Entity["Concept", "FeatherBoa::c94h7"], 
                    Entity["Concept", "FileCabinet::vsb9c"], 
                    Entity["Concept", "Fireboat::xf64t"], 
                    Entity["Concept", "FireEngine::zsvx8"], 
                    Entity["Concept", "FireScreen::665b5"], 
                    Entity["Concept", "Flagstaff::qz2t6"], 
                    Entity["Concept", "TransverseFlute::8pj76"], 
                    Entity["Concept", "FoldingChair::4vqcr"], 
                    Entity["Concept", "FootballHelmet::c6twc"], 
                    Entity["Concept", "Forklift::b2dfv"], 
                    Entity["Concept", "Fountain::yn972"], 
                    Entity["Concept", "FountainPen::r2vw4"], 
                    Entity["Concept", "Four-poster::8kbhw"], 
                    Entity["Concept", "FreightCar::5pg8s"], 
                    Entity["Concept", "FrenchHorn::rm367"], 
                    Entity["Concept", "FryingPan::23fyh"], 
                    Entity["Concept", "FurCoat::6q374"], 
                    Entity["Concept", "Dustcart::2bbpr"], 
                    Entity["Concept", "GasHelmet::23k79"], 
                    Entity["Concept", "GasolinePump::wk2nk"], 
                    Entity["Concept", "Goblet::h85x9"], 
                    Entity["Concept", "Go-kart::gjsj5"], 
                    Entity["Concept", "GolfBall::63tb2"], 
                    Entity["Concept", "GolfCart::sxmp6"], 
                    Entity["Concept", "Gondola::4ds6k"], 
                    Entity["Concept", "Tam-tam::m962t"], 
                    Entity["Concept", "Gown::76k26"], 
                    Entity["Concept", "GrandPiano::8kk56"], 
                    Entity["Concept", "Glasshouse::qxjm6"], 
                    Entity["Concept", "RadiatorGrille::75d36"], 
                    Entity["Concept", "FoodMarket::4bmts"], 
                    Entity["Concept", "Guillotine::w4656"], 
                    Entity["Concept", "HairSlide::3xwcp"], 
                    Entity["Concept", "HairSpray::9w6z4"], 
                    Entity["Concept", "HalfTrack::59zq4"], 
                    Entity["Concept", "Hammer::cx2fn"], 
                    Entity["Concept", "Hamper::3b93m"], 
                    Entity["Concept", "BlowDrier::t4dpz"], 
                    Entity["Concept", "Hand-heldComputer::zs5zw"], 
                    Entity["Concept", "Handkerchief::84d24"], 
                    Entity["Concept", "FixedDisk::5xfff"], 
                    Entity["Concept", "Harmonica::8t835"], 
                    Entity["Concept", "Harp::zz89k"], 
                    Entity["Concept", "Harvester::472sq"], 
                    Entity["Concept", "Hatchet::7cspp"], 
                    Entity["Concept", "Holster::g2prc"], 
                    Entity["Concept", "HomeTheater::4y845"], 
                    Entity["Concept", "Honeycomb::qq347"], 
                    Entity["Concept", "Claw::7kmg8"], 
                    Entity["Concept", "Hoopskirt::3784g"], 
                    Entity["Concept", "HighBar::n5222"], 
                    Entity["Concept", "Horse-cart::546b9"], 
                    Entity["Concept", "Hourglass::83jnz"], 
                    Entity["Concept", "IPod::366dw"], 
                    Entity["Concept", "SmoothingIron::274h7"], 
                    Entity["Concept", "Jack-o-lantern::yss6v"], 
                    Entity["Concept", "BlueJean::68hww"], 
                    Entity["Concept", "Jeep::5twmt"], 
                    Entity["Concept", "TeeShirt::nk5bs"], 
                    Entity["Concept", "JigsawPuzzle::jgp79"], 
                    Entity["Concept", "Jinrikisha::g7j7m"], 
                    Entity["Concept", "Joystick::nj32z"], 
                    Entity["Concept", "Kimono::284nv"], 
                    Entity["Concept", "KneePad::nh7y5"], 
                    Entity["Concept", "Knot::f4x5y"], 
                    Entity["Concept", "LabCoat::6fg55"], 
                    Entity["Concept", "Ladle::3m7q7"], 
                    Entity["Concept", "LampShade::4b824"], 
                    Entity["Concept", "Laptop::zdd33"], 
                    Entity["Concept", "LawnMower::z97p3"], 
                    Entity["Concept", "LensCap::6j259"], 
                    Entity["Concept", "LetterOpener::sx79v"], 
                    Entity["Concept", "Library::8855f"], 
                    Entity["Concept", "Lifeboat::3r554"], 
                    Entity["Concept", "Igniter::638td"], 
                    Entity["Concept", "Limo::jfrr3"], 
                    Entity["Concept", "OceanLiner::s5fxp"], 
                    Entity["Concept", "LipRouge::4vd22"], 
                    Entity["Concept", "Loafer::br9fk"], 
                    Entity["Concept", "Lotion::79h3v"], 
                    Entity["Concept", "Loudspeaker::44d64"], 
                    Entity["Concept", "JewelersLoupe::kg4bc"], 
                    Entity["Concept", "Lumbermill::94r3y"], 
                    Entity["Concept", "MagneticCompass::5r692"], 
                    Entity["Concept", "Postbag::ck37r"], 
                    Entity["Concept", "LetterBox::pccp7"], 
                    Entity["Concept", "Maillot::d8grj"], 
                    Entity["Concept", "TankSuit::5k74s"], 
                    Entity["Concept", "ManholeCover::4x7fq"], 
                    Entity["Concept", "Maraca::395nq"], 
                    Entity["Concept", "Marimba::kbbq5"], 
                    Entity["Concept", "Mask::798jz"], 
                    Entity["Concept", "Matchstick::266wm"], 
                    Entity["Concept", "Maypole::qc3qr"], 
                    Entity["Concept", "Labyrinth::gc6rg"], 
                    Entity["Concept", "MeasuringCup::7b637"], 
                    Entity["Concept", "MedicineCabinet::m9g7m"], 
                    Entity["Concept", "Megalith::753z9"], 
                    Entity["Concept", "Microphone::7bqww"], 
                    Entity["Concept", "MicrowaveOven::fs7tb"], 
                    Entity["Concept", "MilitaryUniform::r9626"], 
                    Entity["Concept", "MilkCan::d9g72"], 
                    Entity["Concept", "Minibus::y94d9"], 
                    Entity["Concept", "Mini::pn78q"], 
                    Entity["Concept", "Minivan::yfsj9"], 
                    Entity["Concept", "Missile::854m6"], 
                    Entity["Concept", "Mitten::7d534"], 
                    Entity["Concept", "MixingBowl::djy62"], 
                    Entity["Concept", "ManufacturedHome::d7czj"], 
                    Entity["Concept", "ModelT::c44dv"], 
                    Entity["Concept", "Modem::wq8j3"], 
                    Entity["Concept", "Monastery::mkgg8"], 
                    Entity["Concept", "Monitor::nh8d4"], 
                    Entity["Concept", "Moped::p85wp"], 
                    Entity["Concept", "Mortar::jz37q"], 
                    Entity["Concept", "Mortarboard::8r99w"], 
                    Entity["Concept", "Mosque::35k94"], 
                    Entity["Concept", "MosquitoNet::5z562"], 
                    Entity["Concept", "MotorScooter::bbwp9"], 
                    Entity["Concept", "All-terrainBike::7n976"], 
                    Entity["Concept", "MountainTent::k5s7y"], 
                    Entity["Concept", "ComputerMouse::kbzr4"], 
                    Entity["Concept", "Mousetrap::j8542"], 
                    Entity["Concept", "MovingVan::2s387"], 
                    Entity["Concept", "Muzzle::c7f4q"], 
                    Entity["Concept", "Nail::x2828"], 
                    Entity["Concept", "NeckBrace::hxh4p"], 
                    Entity["Concept", "Necklace::58n8w"], 
                    Entity["Concept", "Nipple::jfzc3"], 
                    Entity["Concept", "NotebookComputer::b3h64"], 
                    Entity["Concept", "Obelisk::s7vg6"], 
                    Entity["Concept", "Hautbois::937r3"], 
                    Entity["Concept", "Ocarina::zc9mv"], 
                    Entity["Concept", "Hodometer::jw6kb"], 
                    Entity["Concept", "OilFilter::d8chh"], 
                    Entity["Concept", "PipeOrgan::gq9sr"], 
                    Entity["Concept", "Cathode-rayOscilloscope::z4q77"], 
                    Entity["Concept", "Overskirt::n87sx"], 
                    Entity["Concept", "Oxcart::vwjn2"], 
                    Entity["Concept", "OxygenMask::4k479"], 
                    Entity["Concept", "Packet::r63y2"], 
                    Entity["Concept", "BoatPaddle::843sz"], 
                    Entity["Concept", "PaddleWheel::c59g3"], 
                    Entity["Concept", "Padlock::73c99"], 
                    Entity["Concept", "Paintbrush::2456k"], 
                    Entity["Concept", "Jammies::5vhcb"], 
                    Entity["Concept", "Palace::3556d"], 
                    Entity["Concept", "PandeanPipe::gjck2"], 
                    Entity["Concept", "PaperTowel::j7j8m"], 
                    Entity["Concept", "Parachute::k594d"], 
                    Entity["Concept", "Bars::3m828"], 
                    Entity["Concept", "ParkBench::hq98s"], 
                    Entity["Concept", "ParkingMeter::h445p"], 
                    Entity["Concept", "PassengerCar::b7xgp"], 
                    Entity["Concept", "Patio::65kf2"], 
                    Entity["Concept", "Pay-phone::4h2kc"], 
                    Entity["Concept", "Footstall::b89vf"], 
                    Entity["Concept", "PencilBox::977v9"], 
                    Entity["Concept", "PencilSharpener::23nv4"], 
                    Entity["Concept", "Essence::9m7fx"], 
                    Entity["Concept", "PetriDish::xt977"], 
                    Entity["Concept", "Photocopier::33g75"], 
                    Entity["Concept", "Plectron::5g596"], 
                    Entity["Concept", "Pickelhaube::pgr6y"], 
                    Entity["Concept", "Paling::2brd3"], 
                    Entity["Concept", "PickupTruck::9k58n"], 
                    Entity["Concept", "Pier::36y3h"], 
                    Entity["Concept", "PennyBank::78b56"], 
                    Entity["Concept", "PillBottle::r9pdj"], 
                    Entity["Concept", "Pillow::3y32w"], 
                    Entity["Concept", "Ping-pongBall::3vdwp"], 
                    Entity["Concept", "Pinwheel::85td5"], 
                    Entity["Concept", "PirateShip::386k8"], 
                    Entity["Concept", "Ewer::w6672"], 
                    Entity["Concept", "CarpentersPlane::287kt"], 
                    Entity["Concept", "Planetarium::kq5yg"], 
                    Entity["Concept", "PlasticBag::9x453"], 
                    Entity["Concept", "PlateRack::sxt2r"], 
                    Entity["Concept", "Plough::y6c4t"], 
                    Entity["Concept", "PlumbersHelper::hq4m2"], 
                    Entity["Concept", "PolaroidCamera::38q9k"], 
                    Entity["Concept", "Pole::c4566"], 
                    Entity["Concept", "BlackMaria::5jn8v"], 
                    Entity["Concept", "Poncho::tr389"], 
                    Entity["Concept", "BilliardTable::9c56d"], 
                    Entity["Concept", "PopBottle::6243b"], 
                    Entity["Concept", "Flowerpot::jjb26"], 
                    Entity["Concept", "PottersWheel::zwt32"], 
                    Entity["Concept", "PowerDrill::j44yg"], 
                    Entity["Concept", "PrayerMat::x6rjb"], 
                    Entity["Concept", "Printer::c4244"], 
                    Entity["Concept", "Prison::rsq7c"], 
                    Entity["Concept", "Missile::n28m6"], 
                    Entity["Concept", "Projector::d56q9"], 
                    Entity["Concept", "HockeyPuck::3hj3q"], 
                    Entity["Concept", "PunchBag::wm5qg"], 
                    Entity["Concept", "Purse::n57jd"], 
                    Entity["Concept", "QuillPen::jm57s"], 
                    Entity["Concept", "Quilt::f56w9"], 
                    Entity["Concept", "RaceCar::9m8p9"], 
                    Entity["Concept", "Racquet::53f72"], 
                    Entity["Concept", "Radiator::3959j"], 
                    Entity["Concept", "Radio::8p736"], 
                    Entity["Concept", "RadioReflector::55ckr"], 
                    Entity["Concept", "RainBarrel::65nkh"], 
                    Entity["Concept", "RecreationalVehicle::p93tb"], 
                    Entity["Concept", "Reel::v4rgf"], 
                    Entity["Concept", "ReflexCamera::j67h4"], 
                    Entity["Concept", "Icebox::tnkd4"], 
                    Entity["Concept", "Remote::h4drx"], 
                    Entity["Concept", "Eatery::f73dy"], 
                    Entity["Concept", "Six-gun::ctqb6"], 
                    Entity["Concept", "Rifle::x7pp3"], 
                    Entity["Concept", "RockingChair::ncpd5"], 
                    Entity["Concept", "Rotisserie::c8hjy"], 
                    Entity["Concept", "PencilEraser::7y7dd"], 
                    Entity["Concept", "RugbyBall::34tbp"], 
                    Entity["Concept", "Rule::shrw6"], 
                    Entity["Concept", "RunningShoe::z7fvm"], 
                    Entity["Concept", "Safe::36p67"], 
                    Entity["Concept", "SafetyPin::8h4m3"], 
                    Entity["Concept", "SaltShaker::7k48t"], 
                    Entity["Concept", "Sandal::7f3xr"], 
                    Entity["Concept", "Sarong::96j5v"], 
                    Entity["Concept", "Sax::v45s9"], 
                    Entity["Concept", "Scabbard::77z36"], 
                    Entity["Concept", "WeighingMachine::2xvy7"], 
                    Entity["Concept", "SchoolBus::2983r"], 
                    Entity["Concept", "Schooner::f2t26"], 
                    Entity["Concept", "Scoreboard::z76vk"], 
                    Entity["Concept", "CRTScreen::q6vr6"], 
                    Entity["Concept", "Screw::wwzc4"], 
                    Entity["Concept", "Screwdriver::8ty86"], 
                    Entity["Concept", "SeatBelt::4qg32"], 
                    Entity["Concept", "SewingMachine::23c46"], 
                    Entity["Concept", "Buckler::4m7zq"], 
                    Entity["Concept", "Shoe-shop::7ds48"], 
                    Entity["Concept", "Shoji::x95jt"], 
                    Entity["Concept", "ShoppingBasket::db865"], 
                    Entity["Concept", "ShoppingCart::95g62"], 
                    Entity["Concept", "Shovel::tjpz7"], 
                    Entity["Concept", "ShowerCap::2787m"], 
                    Entity["Concept", "ShowerCurtain::6cs25"], 
                    Entity["Concept", "Ski::5nbj2"], 
                    Entity["Concept", "SkiMask::6hd4m"], 
                    Entity["Concept", "SleepingBag::549k4"], 
                    Entity["Concept", "SlideRule::59p96"], 
                    Entity["Concept", "SlidingDoor::m65qk"], 
                    Entity["Concept", "One-armedBandit::573v8"], 
                    Entity["Concept", "Snorkel::53ncf"], 
                    Entity["Concept", "Snowmobile::y538p"], 
                    Entity["Concept", "Snowplough::h36y5"], 
                    Entity["Concept", "SoapDispenser::c2fjc"], 
                    Entity["Concept", "SoccerBall::25w42"], 
                    Entity["Concept", "Sock::8w379"], 
                    Entity["Concept", "SolarCollector::pw2xw"], 
                    Entity["Concept", "Sombrero::k9893"], 
                    Entity["Concept", "SoupBowl::w86pk"], 
                    Entity["Concept", "SpaceBar::735sr"], 
                    Entity["Concept", "SpaceHeater::spt23"], 
                    Entity["Concept", "SpaceShuttle::72jnc"], 
                    Entity["Concept", "Spatula::r7876"], 
                    Entity["Concept", "Speedboat::r6p4f"], 
                    Entity["Concept", "SpidersWeb::28fz6"], 
                    Entity["Concept", "Spindle::7zh9v"], 
                    Entity["Concept", "SportCar::k9874"], 
                    Entity["Concept", "Spot::q3792"], 
                    Entity["Concept", "Stage::86r83"], 
                    Entity["Concept", "SteamLocomotive::9kv4y"], 
                    Entity["Concept", "SteelArchBridge::46zx5"], 
                    Entity["Concept", "SteelDrum::fqv7s"], 
                    Entity["Concept", "Stethoscope::f829c"], 
                    Entity["Concept", "Stole::g8fqc"], 
                    Entity["Concept", "StoneWall::8489j"], 
                    Entity["Concept", "StopWatch::4vk6s"], 
                    Entity["Concept", "Stove::27vm8"], 
                    Entity["Concept", "Strainer::2c2kx"], 
                    Entity["Concept", "Streetcar::vhm65"], 
                    Entity["Concept", "Stretcher::74r96"], 
                    Entity["Concept", "DayBed::nrph3"], 
                    Entity["Concept", "Stupa::g64q6"], 
                    Entity["Concept", "Pigboat::p7yyy"], 
                    Entity["Concept", "SuitOfClothes::5c67x"], 
                    Entity["Concept", "Sundial::7mj6d"], 
                    Entity["Concept", "Sunglass::xc3yz"], 
                    Entity["Concept", "DarkGlasses::855bw"], 
                    Entity["Concept", "Sunblock::65k7n"], 
                    Entity["Concept", "SuspensionBridge::66qcg"], 
                    Entity["Concept", "Mop::v6xdr"], 
                    Entity["Concept", "Sweatshirt::s5937"], 
                    Entity["Concept", "BathingTrunks::c892w"], 
                    Entity["Concept", "Swing::s5b96"], 
                    Entity["Concept", "ElectricalSwitch::5gnjt"], 
                    Entity["Concept", "Syringe::8j57r"], 
                    Entity["Concept", "TableLamp::6239m"], 
                    Entity["Concept", "ArmoredCombatVehicle::353r5"], 
                    Entity["Concept", "TapePlayer::bf5f8"], 
                    Entity["Concept", "Teapot::c54x7"], 
                    Entity["Concept", "TeddyBear::f56q9"], 
                    Entity["Concept", "TelevisionSystem::5593b"], 
                    Entity["Concept", "TennisBall::xk58h"], 
                    Entity["Concept", "ThatchedRoof::w2cjw"], 
                    Entity["Concept", "TheaterCurtain::5kbhk"], 
                    Entity["Concept", "Thimble::9828b"], 
                    Entity["Concept", "ThreshingMachine::372m3"], 
                    Entity["Concept", "Throne::2t9q6"], 
                    Entity["Concept", "TileRoof::5p749"], 
                    Entity["Concept", "Toaster::rp6v2"], 
                    Entity["Concept", "TobacconistShop::88ncg"], 
                    Entity["Concept", "ToiletSeat::z8wvq"], 
                    Entity["Concept", "Torch::j9rg7"], 
                    Entity["Concept", "TotemPole::gbxn5"], 
                    Entity["Concept", "TowCar::ph6vn"], 
                    Entity["Concept", "Toyshop::74q74"], 
                    Entity["Concept", "Tractor::39j62"], 
                    Entity["Concept", "ArticulatedLorry::ph66j"], 
                    Entity["Concept", "Tray::jyx2n"], 
                    Entity["Concept", "TrenchCoat::rq833"], 
                    Entity["Concept", "Tricycle::3537s"], 
                    Entity["Concept", "Trimaran::2639q"], 
                    Entity["Concept", "Tripod::pqth2"], 
                    Entity["Concept", "TriumphalArch::q79sh"], 
                    Entity["Concept", "TracklessTrolley::78g52"], 
                    Entity["Concept", "Trombone::22z3w"], 
                    Entity["Concept", "Vat::vcpt8"], 
                    Entity["Concept", "Turnstile::82gr4"], 
                    Entity["Concept", "TypewriterKeyboard::z8334"], 
                    Entity["Concept", "Umbrella::3mntq"], 
                    Entity["Concept", "Monocycle::mrm29"], 
                    Entity["Concept", "UprightPiano::286t3"], 
                    Entity["Concept", "VacuumCleaner::7rg56"], 
                    Entity["Concept", "Vase::4x594"], 
                    Entity["Concept", "Vault::7k875"], 
                    Entity["Concept", "Velvet::575z6"], 
                    Entity["Concept", "VendingMachine::96kgg"], 
                    Entity["Concept", "Vestment::334y8"], 
                    Entity["Concept", "Viaduct::p32mt"], 
                    Entity["Concept", "Fiddle::q9djd"], 
                    Entity["Concept", "Volleyball::q7bkw"], 
                    Entity["Concept", "WaffleIron::gpqx8"], 
                    Entity["Concept", "WallClock::w5687"], 
                    Entity["Concept", "Billfold::z7845"], 
                    Entity["Concept", "Closet::588p6"], 
                    Entity["Concept", "MilitaryPlane::whx2r"], 
                    Entity["Concept", "Handbasin::6w875"], 
                    Entity["Concept", "AutomaticWasher::6d32z"], 
                    Entity["Concept", "WaterBottle::5wh67"], 
                    Entity["Concept", "WaterJug::759dt"], 
                    Entity["Concept", "WaterTower::4rr5d"], 
                    Entity["Concept", "WhiskeyJug::5gcrh"], 
                    Entity["Concept", "Whistle::pv275"], 
                    Entity["Concept", "Wig::9msqy"], 
                    Entity["Concept", "WindowScreen::wfk7m"], 
                    Entity["Concept", "WindowShade::3rh75"], 
                    Entity["Concept", "WindsorTie::5tt62"], 
                    Entity["Concept", "WineBottle::g4m78"], 
                    Entity["Concept", "Wing::tbhz7"], 
                    Entity["Concept", "Wok::fv9fj"], 
                    Entity["Concept", "WoodenSpoon::nc2wp"], 
                    Entity["Concept", "Woolen::ns82d"], 
                    Entity["Concept", "SnakeFence::837z2"], 
                    Entity["Concept", "Wreck::qr554"], 
                    Entity["Concept", "Yawl::hggp6"], 
                    Entity["Concept", "Yurt::4bbtv"], 
                    Entity["Concept", "InternetSite::639pp"], 
                    Entity["Concept", "ComicBook::ty3qz"], 
                    Entity["Concept", "Crossword::yqtk6"], 
                    Entity["Concept", "StreetSign::ysx2f"], 
                    Entity["Concept", "TrafficLight::b4966"], 
                    Entity["Concept", "BookJacket::sy4d3"], 
                    Entity["Concept", "Menu::g698m"], 
                    Entity["Concept", "Plate::2244k"], 
                    Entity["Concept", "Guacamole::xc482"], 
                    Entity["Concept", "Consomme::37g8f"], 
                    Entity["Concept", "HotPot::kgb8q"], 
                    Entity["Concept", "Trifle::b4264"], 
                    Entity["Concept", "IceCream::825yn"], 
                    Entity["Concept", "IceLolly::473v3"], 
                    Entity["Concept", "FrenchLoaf::x859t"], 
                    Entity["Concept", "Bagel::x38n5"], 
                    Entity["Concept", "Pretzel::967k7"], 
                    Entity["Concept", "Cheeseburger::3z2z7"], 
                    Entity["Concept", "RedHot::3j848"], 
                    Entity["Concept", "MashedPotato::8ys8w"], 
                    Entity["Concept", "HeadCabbage::9c693"], 
                    Entity["Concept", "Broccoli::spbm9"], 
                    Entity["Concept", "Cauliflower::fmp3m"], 
                    Entity["Concept", "Courgette::44yb5"], 
                    Entity["Concept", "SpaghettiSquash::8j979"], 
                    Entity["Concept", "AcornSquash::8p8y2"], 
                    Entity["Concept", "ButternutSquash::6k466"], 
                    Entity["Concept", "Cuke::nzfb2"], 
                    Entity["Concept", "Artichoke::ntvv7"], 
                    Entity["Concept", "BellPepper::9w646"], 
                    Entity["Concept", "Cardoon::s78dn"], 
                    Entity["Concept", "Mushroom::3xw4j"], 
                    Entity["Concept", "GrannySmith::k3786"], 
                    Entity["Concept", "Strawberry::3csyb"], 
                    Entity["Concept", "Orange::w579d"], 
                    Entity["Concept", "Lemon::743j2"], 
                    Entity["Concept", "Fig::d3p6f"], 
                    Entity["Concept", "Ananas::m6nzv"], 
                    Entity["Concept", "Banana::f6z73"], 
                    Entity["Concept", "Jak::p6r56"], 
                    Entity["Concept", "CustardApple::nx482"], 
                    Entity["Concept", "Pomegranate::dh736"], 
                    Entity["Concept", "Hay::vcd3m"], 
                    Entity["Concept", "Carbonara::9my37"], 
                    Entity["Concept", "ChocolateSauce::y5838"], 
                    Entity["Concept", "Dough::8x86g"], 
                    Entity["Concept", "MeatLoaf::t7nnp"], 
                    Entity["Concept", "Pizza::56w88"], 
                    Entity["Concept", "Potpie::38zh5"], 
                    Entity["Concept", "Burrito::4xwy5"], 
                    Entity["Concept", "RedWine::666g6"], 
                    Entity["Concept", "Espresso::rv2y4"], 
                    Entity["Concept", "Cup::q9zjy"], 
                    Entity["Concept", "Eggnog::9v7t8"], 
                    Entity["Concept", "Alp::m4bkv"], 
                    Entity["Concept", "Bubble::qp224"], 
                    Entity["Concept", "Cliff::q56fy"], 
                    Entity["Concept", "CoralReef::669j5"], 
                    Entity["Concept", "Geyser::5w69b"], 
                    Entity["Concept", "Lakeshore::4483j"], 
                    Entity["Concept", "Headland::8n9c9"], 
                    Entity["Concept", "SandBar::4w689"], 
                    Entity["Concept", "Sea-coast::m3d85"], 
                    Entity["Concept", "Vale::88wm8"], 
                    Entity["Concept", "Volcano::9fcbc"], 
                    Entity["Concept", "Ballplayer::7v976"], 
                    Entity["Concept", "Bridegroom::85m28"], 
                    Entity["Concept", "ScubaDiver::kqb95"], 
                    Entity["Concept", "Rapeseed::5x738"], 
                    Entity["Concept", "Daisy::hypz2"], 
                    Entity["Concept", "CypripediumCalceolus::7tzrs"], 
                    Entity["Concept", "Corn::m7hpj"], 
                    Entity["Concept", "Acorn::f62cf"], 
                    Entity["Concept", "RoseHip::333d2"], 
                    Entity["Concept", "Conker::v8p64"], 
                    Entity["Concept", "CoralFungus::f7fp4"], 
                    Entity["Concept", "Agaric::844w2"], 
                    Entity["Concept", "Gyromitra::3v4zb"], 
                    Entity["Concept", "CarrionFungus::wj2ng"], 
                    Entity["Concept", "Earthstar::678m7"], 
                    Entity["Concept", "GrifolaFrondosa::m7rxd"], 
                    Entity["Concept", "Bolete::9g3s2"], 
                    Entity["Concept", "Capitulum::834z6"], 
                    Entity["Concept", "BathroomTissue::ts4sr"]}, "Dimensions" -> 
                    1000], 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten_0\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"25088\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"prob\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740056253849432*^9, 3.740058574643882*^9, 
  3.7400607108317327`*^9, 3.7400615700336237`*^9, 3.740062948272119*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"d45d19ae-be6c-41c8-bbdc-f42391a42467"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rasterfeatureFunction", "=", 
  RowBox[{"Take", "[", 
   RowBox[{"rasternet", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "\"\<fc7\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740056256008574*^9, 3.740056261030511*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"5fa692e9-c9c9-40ae-a190-da697612ac27"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["36", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "flatten_0" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]]], 
                    "fc6" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 25088}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{4096}]],
                     "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop6" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc7" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 4096}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{4096}]],
                     "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc7", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten_0\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"25088\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.740056256984703*^9, 3.7400562613534603`*^9}, 
   3.740058575743451*^9, 3.7400607139460363`*^9, 3.7400615732345867`*^9, 
   3.740062953012582*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"fcaab4c1-b590-4341-90ee-e11578af7755"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"rastertraining", " ", "=", " ", 
   RowBox[{"Keys", "[", "RasterTrain", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740056264848391*^9, 3.740056288758976*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"687230b3-5a7f-44ae-a0f4-97f16e2797d1"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.740066134178603*^9, 
  3.7400661395797997`*^9}},ExpressionUUID->"50a52e1e-5848-412d-ae99-\
7331c068b07f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rasterfeatures", "=", 
   RowBox[{"Monitor", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"rasterfeatureFunction", "[", 
        RowBox[{"rastertraining", "[", 
         RowBox[{"[", "x", "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", 
         RowBox[{"Length", "[", "rastertraining", "]"}]}], "}"}]}], "]"}], 
     ",", "x"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740056304840906*^9, 3.740056309630623*^9}, {
  3.740058577016293*^9, 3.740058604561167*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"0a063224-ca57-4855-a8bd-347658ac285e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"xyz", " ", "=", " ", 
   RowBox[{"DimensionReduce", "[", 
    RowBox[{"features", ",", "3", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<TSNE\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Graphics3D", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Inset", "[", 
       RowBox[{
        RowBox[{"Thumbnail", "[", 
         RowBox[{
          RowBox[{"RemoveBackground", "@", "#2"}], ",", "32"}], "]"}], ",", 
        "#1"}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"xyz", ",", "rastertraining"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"BoxRatios", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.740058558948906*^9, 3.740058559634666*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"105b0a52-c94b-408a-8f3e-3a1014a91a3a"],

Cell[BoxData[
 TemplateBox[{
  "DimensionReduce","mlmpty",
   "\"The dataset should contain at least one example.\"",2,3,3,
   19906108128387131619,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.740058554206306*^9, 3.7400585598972673`*^9}},
 CellLabel->
  "During evaluation of \
In[3]:=",ExpressionUUID->"d5d1af06-a8a1-4488-a832-40e794b623d7"],

Cell[BoxData[
 TemplateBox[{
  "MapThread","mptd",
   "\"Object \\!\\(\\*RowBox[{\\\"DimensionReduce\\\", \\\"[\\\", \
RowBox[{\\\"features\\\", \\\",\\\", \\\"3\\\", \\\",\\\", RowBox[{\\\"Method\
\\\", \\\"\[Rule]\\\", \\\"\\\\\\\"TSNE\\\\\\\"\\\"}]}], \\\"]\\\"}]\\) at \
position {2, \\!\\(\\*RowBox[{\\\"1\\\"}]\\)} in \
\\!\\(\\*RowBox[{\\\"MapThread\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{\\\"Inset\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"Thumbnail\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"RemoveBackground\\\", \\\"[\\\", \\\"#2\\\", \\\"]\\\"}], \
\\\",\\\", \\\"32\\\"}], \\\"]\\\"}], \\\",\\\", \\\"#1\\\"}], \\\"]\\\"}], \
\\\"&\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"DimensionReduce\\\", \\\"[\\\", RowBox[{\\\"features\\\", \
\\\",\\\", \\\"3\\\", \\\",\\\", RowBox[{\\\"Method\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"TSNE\\\\\\\"\\\"}]}], \\\"]\\\"}], \\\",\\\", \
\\\"rastertraining\\\"}], \\\"}\\\"}]}], \\\"]\\\"}]\\) has only \
\\!\\(\\*RowBox[{\\\"0\\\"}]\\) of required \\!\\(\\*RowBox[{\\\"1\\\"}]\\) \
dimensions.\"",2,4,4,19906108128387131619,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.740058554206306*^9, 3.7400585601790037`*^9}},
 CellLabel->
  "During evaluation of \
In[3]:=",ExpressionUUID->"8210f33d-5a16-4cef-9259-074228c72645"],

Cell[BoxData[
 Graphics3DBox[MapThread[Inset[
    Thumbnail[
     RemoveBackground[#2], 32], #]& , {
    DimensionReduce[$CellContext`features, 3, Method -> 
     "TSNE"], $CellContext`rastertraining}],
  BoxRatios->{1, 1, 1}]], "Output",
 CellChangeTimes->{{3.740058554855171*^9, 3.740058560385186*^9}},
 CellLabel->"Out[4]=",ExpressionUUID->"c1e1cecf-e291-4f98-8b1e-d7387d979d2c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7400562888976603`*^9, 
  3.740056295819421*^9}},ExpressionUUID->"2a5c6e77-c9d3-4061-b5ad-\
fb55ef6b8649"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 855},
WindowMargins->{{Automatic, 42}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 172, 2, 37, "Input",ExpressionUUID->"d065a3b0-6e3c-4842-a214-43aca7e85a0b"],
Cell[758, 26, 149, 2, 42, "Output",ExpressionUUID->"509e737d-1e79-4838-9ed2-a70e28c61f60"]
}, Open  ]],
Cell[922, 31, 225, 3, 37, "Input",ExpressionUUID->"36142c88-8b2d-4037-a5a5-df62e3a30e0a"],
Cell[CellGroupData[{
Cell[1172, 38, 150, 2, 37, "Input",ExpressionUUID->"791bd827-d7ed-4ece-aecf-6c251c14d3d9"],
Cell[1325, 42, 9879, 257, 234, "Output",ExpressionUUID->"11423e24-7a72-4f91-8f96-405e42e5988f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11241, 304, 77, 0, 67, "Subsection",ExpressionUUID->"347ef978-102c-446c-aebb-3e07cac1d6c8"],
Cell[11321, 306, 162, 3, 37, "Input",ExpressionUUID->"aa95c0db-44c0-4376-9b41-6081f4b252e3"],
Cell[CellGroupData[{
Cell[11508, 313, 821, 22, 116, "Input",ExpressionUUID->"3a8561dd-d3cc-45c7-be4c-cbec212850e0"],
Cell[12332, 337, 295, 5, 42, "Output",ExpressionUUID->"845c695f-148a-4c3c-8b09-d62ef68e7ed8"],
Cell[12630, 344, 297, 5, 42, "Output",ExpressionUUID->"dd156b13-caaa-4a1f-9f64-318dc602cda2"]
}, Open  ]],
Cell[12942, 352, 273, 6, 37, "Input",ExpressionUUID->"62d2b983-19f2-42a8-b5ff-e8eb67107879"],
Cell[CellGroupData[{
Cell[13240, 362, 232, 4, 37, "Input",ExpressionUUID->"0a7c6f10-292d-4185-b2d1-8ceef08298db"],
Cell[13475, 368, 911, 26, 69, "Output",ExpressionUUID->"b9c19ef2-d226-4172-bd47-75873c231f37"]
}, Open  ]],
Cell[14401, 397, 926, 24, 90, "Input",ExpressionUUID->"22416634-4d0e-4bd7-b709-13ae60b07756"],
Cell[15330, 423, 895, 24, 90, "Input",ExpressionUUID->"f7de1c0f-cbd2-4f02-b4ee-964e9ec022bb"],
Cell[16228, 449, 370, 8, 37, "Input",ExpressionUUID->"a14ad5af-e780-4a85-b5e7-48e1b99e2e65"],
Cell[CellGroupData[{
Cell[16623, 461, 314, 5, 37, "Input",ExpressionUUID->"6aece15b-8a30-4e27-ba06-1cea0014de0d"],
Cell[16940, 468, 229713, 3863, 79, "Output",ExpressionUUID->"06e26d88-d73a-4e0c-bfc7-6238610cf5e2"]
}, Open  ]],
Cell[246668, 4334, 322, 8, 73, "Text",ExpressionUUID->"d100c8d7-7e1c-4aac-be28-927954621db1"],
Cell[CellGroupData[{
Cell[247015, 4346, 166, 3, 56, "Subsubsection",ExpressionUUID->"a400c7e4-8612-4f52-b87b-31da6ec988a0"],
Cell[CellGroupData[{
Cell[247206, 4353, 430, 9, 64, "Input",ExpressionUUID->"9386a2b8-0585-4cae-a3c0-afc28e42c09d"],
Cell[247639, 4364, 80157, 2090, 21946, "Output",ExpressionUUID->"85315bc8-58cd-4d3a-a4b2-fb7660059377"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[327845, 6460, 158, 3, 56, "Subsubsection",ExpressionUUID->"2681b080-1147-46cf-a18d-032eae06a87e"],
Cell[328006, 6465, 259, 6, 44, "Text",ExpressionUUID->"3e351c5e-a6e5-4c10-a68d-a5344d5366ca"],
Cell[CellGroupData[{
Cell[328290, 6475, 352, 7, 37, "Input",ExpressionUUID->"d01f1b50-9064-4be9-b73b-e010890b14ef"],
Cell[328645, 6484, 171023, 3207, 94, "Output",ExpressionUUID->"d45d19ae-be6c-41c8-bbdc-f42391a42467"]
}, Open  ]],
Cell[CellGroupData[{
Cell[499705, 9696, 338, 7, 37, "Input",ExpressionUUID->"5fa692e9-c9c9-40ae-a190-da697612ac27"],
Cell[500046, 9705, 102740, 2053, 94, "Output",ExpressionUUID->"fcaab4c1-b590-4341-90ee-e11578af7755"]
}, Open  ]],
Cell[602801, 11761, 277, 5, 89, "Input",ExpressionUUID->"687230b3-5a7f-44ae-a0f4-97f16e2797d1"],
Cell[603081, 11768, 154, 3, 89, "Input",ExpressionUUID->"50a52e1e-5848-412d-ae99-7331c068b07f"],
Cell[603238, 11773, 652, 16, 218, "Input",ExpressionUUID->"0a063224-ca57-4855-a8bd-347658ac285e"],
Cell[CellGroupData[{
Cell[603915, 11793, 978, 26, 409, "Input",ExpressionUUID->"105b0a52-c94b-408a-8f3e-3a1014a91a3a"],
Cell[604896, 11821, 370, 9, 70, "Message",ExpressionUUID->"d5d1af06-a8a1-4488-a832-40e794b623d7"],
Cell[605269, 11832, 1303, 23, 171, "Message",ExpressionUUID->"8210f33d-5a16-4cef-9259-074228c72645"],
Cell[606575, 11857, 382, 8, 1242, "Output",ExpressionUUID->"c1e1cecf-e291-4f98-8b1e-d7387d979d2c"]
}, Open  ]],
Cell[606972, 11868, 154, 3, 89, "Input",ExpressionUUID->"2a5c6e77-c9d3-4061-b5ad-fb55ef6b8649"]
}, Open  ]]
}, Open  ]]
}
]
*)

