(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[   1669936,      31404]
NotebookOptionsPosition[   1627008,      30755]
NotebookOutlinePosition[   1627454,      30774]
CellTagsIndexPosition[   1627411,      30771]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
A Machine Learning Analysis of Halting in the SKI Combinator Calculus\
\>", "Title",
 CellChangeTimes->{{3.739710360008836*^9, 3.73971036095286*^9}, {
   3.739710520650638*^9, 3.739710534984561*^9}, 3.739881927697475*^9, {
   3.73989701624303*^9, 3.739897040692593*^9}, {3.739897262296648*^9, 
   3.739897266362566*^9}, {3.739897517339345*^9, 3.7398975434460907`*^9}, {
   3.7399014852423143`*^9, 
   3.7399014856023083`*^9}},ExpressionUUID->"ec14c10b-e02a-4061-ad68-\
7ef17987e975"],

Cell[TextData[StyleBox["Euan Ong", "Author"]], "Authors",
 CellChangeTimes->{{3.73989704547736*^9, 3.7398970466022577`*^9}, 
   3.7403566230059547`*^9},ExpressionUUID->"a94335d6-91f9-437f-9269-\
94002258176a"],

Cell["Wolfram High School Summer Camp 2018", "Text",
 CellChangeTimes->{{3.740496575553135*^9, 3.7404966006005383`*^9}},
 FontSlant->"Italic",ExpressionUUID->"79e5a80f-cf91-4db9-9401-10cc67135514"],

Cell["\<\
Much of machine learning is driven by the question: can we learn what we \
cannot compute? The learnability of the halting problem, the canonical \
undecidable problem, to an arbitrarily high accuracy for Turing machines was \
proven by Lathrop (Lathrop, 1996). The SKI combinator calculus can be seen as \
a reduced form of the untyped lambda calculus, which is Turing-complete \
(Turing, 1937); hence, the SKI combinator calculus forms a universal model of \
computation. In this vein, we analyse the growth and halting times of SKI \
combinator expressions, estimate the probability of an SKI combinator \
expression halting after a given number of steps, and investigate the \
feasibility of a machine learning approach to predicting whether a given SKI \
combinator expression is likely to halt.\
\>", "Abstract",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQfaP26yHPu68dHx9xPgqiTT4JnwPRSlN3g+mMrvPL
vIB0svQ9MN2i/3k9iH62W2wDiJ5yh30riK69/e4ciJ77RfcaiN60MfwGiG7w
vsHtDaQr7tnwgOgDRrXiINrzOYckiF5SvVgJRF8966gKoo9abtIG0SJcvgYg
ep1LgjmI1rOYbwuiP0QFhYDod8LLwTRP4aNEEN0gLZMKoo3F7+SCaP5LS/NA
tImVZjmI5p0hUQWi3Xz4m0D0vwjWbhDNd+joFBD9befOaSDaaZHJahDd/Dv5
MIgutOI8nwOkS+7EXgDRaTbfroLoY5ukr4FojobJt0G0W/XMOyBawu/MdKV7
QHd+Y5oJotf0tJmrAmmfbYvANAAwgMgd
  
  "],ExpressionUUID->"69f9e600-7ff1-45c6-a38f-d2e873195b61"],

Cell[CellGroupData[{

Cell["SK Combinators", "Section",
 CellChangeTimes->{{3.739897465441671*^9, 3.739897467163404*^9}, {
  3.739925236221477*^9, 
  3.7399252403397923`*^9}},ExpressionUUID->"ca42a369-ab26-4492-bbe5-\
539a6af55613"],

Cell["\<\
What we will refer to as \[OpenCurlyQuote]SK Combinators\[CloseCurlyQuote] \
are expressions in the SKI combinator calculus,  a simple Turing-complete \
language introduced by Sch\[ODoubleDot]nfinkel (1924) and Curry (1930). In \
the same way that NAND gates can be used to construct any expression in \
Boolean logic, SK combinators were posed as a way to construct any expression \
in predicate logic, and being a reduced form of the untyped lambda calculus, \
any functional programming language can be implemented by a machine that \
implements SK combinators. While implementations of this language exist, \
these serve little functional purpose - instead, this language, a simple \
idealisation of transformations on symbolic expressions [NKS], provides a \
useful tool for studying complex computational systems.\
\>", "Text",
 CellChangeTimes->{{3.739897469830686*^9, 3.739897493411273*^9}, 
   3.7398975459909277`*^9, {3.739898938700757*^9, 3.7398989389102983`*^9}, {
   3.7403468365201197`*^9, 3.740346879230699*^9}, {3.740356713433547*^9, 
   3.74035674299601*^9}, {3.74035692309785*^9, 3.7403569400135393`*^9}, {
   3.74035705120328*^9, 3.740357175590393*^9}, {3.7403572678137903`*^9, 
   3.740357572440346*^9}, {3.7403576874533854`*^9, 3.7403577100079203`*^9}, {
   3.74035775075948*^9, 3.740357828127983*^9}, {3.7403579200695887`*^9, 
   3.740358151760367*^9}, {3.7403590520009937`*^9, 3.740359060387681*^9}, {
   3.7403593914826612`*^9, 
   3.7403594362438307`*^9}},ExpressionUUID->"7eee9944-15a7-4ef4-b297-\
f91e20a48ecb"],

Cell[CellGroupData[{

Cell["Rules and Expressions", "Subsection",
 CellChangeTimes->{{3.740359065063195*^9, 
  3.740359073201489*^9}},ExpressionUUID->"0073fdca-aba4-41c3-9a29-\
9fd3f83c8d80"],

Cell[TextData[{
 "\nFormally, SK combinator expressions are binary trees whose leaves are \
labelled either '",
 StyleBox["S",
  FontSlant->"Italic"],
 "', '",
 StyleBox["K",
  FontSlant->"Italic"],
 "' or '",
 StyleBox["I",
  FontSlant->"Italic"],
 "': each tree ",
 StyleBox["(xy)",
  FontSlant->"Italic"],
 " represents a function ",
 StyleBox["x",
  FontSlant->"Italic"],
 " applied to an argument ",
 StyleBox["y",
  FontSlant->"Italic"],
 ". When the expression is evaluated (i.e. when the function is applied to \
the argument), the tree is transformed into another tree, the 'value'. The \
basic 'rules' for evaluating combinator expressions are given below:"
}], "Text",
 CellChangeTimes->{{3.739897469830686*^9, 3.739897493411273*^9}, 
   3.7398975459909277`*^9, {3.739898938700757*^9, 3.7398989389102983`*^9}, {
   3.7403468365201197`*^9, 3.740346879230699*^9}, {3.740356713433547*^9, 
   3.74035674299601*^9}, {3.74035692309785*^9, 3.7403569400135393`*^9}, {
   3.74035705120328*^9, 3.740357175590393*^9}, {3.7403572678137903`*^9, 
   3.740357572440346*^9}, {3.7403576874533854`*^9, 3.7403577100079203`*^9}, {
   3.74035775075948*^9, 3.740357828127983*^9}, {3.7403579200695887`*^9, 
   3.740358151760367*^9}, {3.7403590520009937`*^9, 
   3.7403590530980186`*^9}},ExpressionUUID->"a86e485b-1b31-4ab5-956b-\
23f0dd7cdbd4"],

Cell[TextData[StyleBox["k[x_][y_] := x",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.74035828481124*^9, 3.740358295294909*^9}, 
   3.740360508123988*^9},
 CellLabel->"",ExpressionUUID->"b55e4ff2-fd91-4732-9823-aa583e391b54"],

Cell[TextData[{
 "The K combinator or \[OpenCurlyQuote]constant function\[CloseCurlyQuote]: \
when applied to ",
 StyleBox["x",
  FontSlant->"Italic"],
 ", returns the function ",
 StyleBox["k[x]",
  FontSlant->"Italic"],
 ", which when applied to some ",
 StyleBox["y",
  FontSlant->"Italic"],
 " will return ",
 StyleBox["x",
  FontSlant->"Italic"],
 "."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740358425333702*^9, 3.740358448537176*^9}, {
  3.7403585628745327`*^9, 
  3.740358636510193*^9}},ExpressionUUID->"bed0d78a-6101-41f7-8edb-\
8516f9c42f9c"],

Cell[TextData[StyleBox["s[x_][y_][z_] := x[z][y[z]]",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.74035828481124*^9, 3.740358295294909*^9}, 
   3.7403586523625803`*^9, 
   3.740360528307934*^9},ExpressionUUID->"d876a614-d62a-400b-ab76-\
77f795ba7b6b"],

Cell[TextData[{
 "The S combinator or \[OpenCurlyQuote]fusion function\[CloseCurlyQuote]: \
when applied to ",
 StyleBox["x, y, z",
  FontSlant->"Italic"],
 ", returns ",
 StyleBox["x",
  FontSlant->"Italic"],
 " applied to ",
 StyleBox["z",
  FontSlant->"Italic"],
 ", which is in turn applied to the result of ",
 StyleBox["y",
  FontSlant->"Italic"],
 " applied to ",
 StyleBox["z",
  FontSlant->"Italic"],
 "."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740358425333702*^9, 3.740358448537176*^9}, {
  3.7403585628745327`*^9, 
  3.7403587134087687`*^9}},ExpressionUUID->"58783a23-2e05-4fe5-ac38-\
56af59ba2dd4"],

Cell[TextData[StyleBox["i[x_] := x",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.74035828481124*^9, 3.740358295294909*^9}, {
   3.740358716226993*^9, 3.74035873192546*^9}, 
   3.740360538266795*^9},ExpressionUUID->"01348c00-c37d-4106-9c59-\
f82a47732409"],

Cell[TextData[{
 "The I combinator or \[OpenCurlyQuote]identity function\[CloseCurlyQuote]: \
when applied to ",
 StyleBox["x",
  FontSlant->"Italic"],
 ", returns ",
 StyleBox["x",
  FontSlant->"Italic"],
 "."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740358425333702*^9, 3.740358448537176*^9}, {
  3.7403585628745327`*^9, 3.740358636510193*^9}, {3.740358721544074*^9, 
  3.7403587219394007`*^9}, {3.7403587632066507`*^9, 
  3.740358772180724*^9}},ExpressionUUID->"f2226f25-85ff-4924-8a41-\
70aca1d4fa3f"],

Cell[TextData[{
 "Note that the I combinator ",
 StyleBox["I[x]",
  FontSlant->"Italic"],
 " is equivalent to the function ",
 StyleBox["S[K][a][x]",
  FontSlant->"Italic"],
 ", as the latter will evaluate to the former in two steps:"
}], "Text",
 CellChangeTimes->{{3.7403587754213333`*^9, 
  3.740358885389083*^9}},ExpressionUUID->"e1e460a0-bcb6-4a18-8bb1-\
f318a0115346"],

Cell[TextData[StyleBox["S[K][a][x]\n= K[x][a[x]]\n= x",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.7403589053440533`*^9, 
  3.740358958398403*^9}},ExpressionUUID->"257936dd-1048-4817-985e-\
4d9e00bf14dd"],

Cell["\<\
Thus the I combinator is redundant as it is simply \[OpenCurlyQuote]syntactic \
sugar\[CloseCurlyQuote] - for the purposes of this exploration it will be \
ignored.

These rules can be expressed in the Wolfram Language as follows:\
\>", "Text",
 CellChangeTimes->{{3.7403582574213867`*^9, 3.740358260820231*^9}, {
  3.740358965548933*^9, 3.740359029991932*^9}, {3.740359122765504*^9, 
  3.7403591314520397`*^9}},ExpressionUUID->"d6eceea1-b56a-456f-8ef4-\
10a47c10ea3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SKRules", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"k", "[", "x_", "]"}], "[", "y_", "]"}], "\[RuleDelayed]", " ", 
     "x"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"s", "[", "x_", "]"}], "[", "y_", "]"}], "[", "z_", "]"}], 
     "\[RuleDelayed]", " ", 
     RowBox[{
      RowBox[{"x", "[", "z", "]"}], "[", 
      RowBox[{"y", "[", "z", "]"}], "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{3.740359155087339*^9},
 CellLabel->
  "In[111]:=",ExpressionUUID->"35377374-7b86-42ce-aa86-ff7bee5afbc6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"k", "[", "x_", "]"}], "[", "y_", "]"}], "\[RuleDelayed]", "x"}],
    ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"s", "[", "x_", "]"}], "[", "y_", "]"}], "[", "z_", "]"}], 
    "\[RuleDelayed]", 
    RowBox[{
     RowBox[{"x", "[", "z", "]"}], "[", 
     RowBox[{"y", "[", "z", "]"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.74035915893797*^9, 3.740360168625463*^9, 
  3.740419996312909*^9, 3.7404845399138308`*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"f3a140e7-99dc-4614-8ead-a2de53049d66"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluation", "Subsection",
 CellChangeTimes->{{3.739897469830686*^9, 3.739897493411273*^9}, 
   3.7398975459909277`*^9, {3.739898938700757*^9, 3.7398989389102983`*^9}, {
   3.7403468365201197`*^9, 3.740346879230699*^9}, {3.740356713433547*^9, 
   3.74035674299601*^9}, {3.74035692309785*^9, 3.7403569400135393`*^9}, {
   3.74035705120328*^9, 3.740357175590393*^9}, {3.7403572678137903`*^9, 
   3.740357572440346*^9}, {3.7403576874533854`*^9, 3.7403577100079203`*^9}, {
   3.74035775075948*^9, 3.740357828127983*^9}, {3.7403579200695887`*^9, 
   3.74035812237066*^9}, {3.7403590803943872`*^9, 3.7403591011269693`*^9}, {
   3.7403592667728167`*^9, 
   3.740359268484783*^9}},ExpressionUUID->"9760dc58-cb54-4dd2-8e25-\
ccd85499c856"],

Cell["\<\
The result of applying these rules to a given expression is given by the \
following functions:\
\>", "Text",
 CellChangeTimes->{{3.740359269808498*^9, 3.740359293285581*^9}, 
   3.740359808512059*^9},ExpressionUUID->"51ec8012-ee53-424b-9eb2-\
c9b7421aa847"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SKNext", "[", "expr_", "]"}], ":=", 
   RowBox[{"expr", "/.", "SKRules"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7403593273510447`*^9, 3.740359330239264*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"27974881-a153-4b4e-8f44-7af2cb1a093e"],

Cell[TextData[{
 "Returns the next \[OpenCurlyQuote]step\[CloseCurlyQuote] of evaluation of \
the expression ",
 StyleBox["expr",
  FontSlant->"Italic"],
 " - evaluating all functions in ",
 StyleBox["expr",
  FontSlant->"Italic"],
 " according to the rules above without evaluating any \[OpenCurlyQuote]new\
\[CloseCurlyQuote]/transformed functions."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740359343395685*^9, 3.740359350855681*^9}, {
  3.740359525605049*^9, 
  3.740359574371934*^9}},ExpressionUUID->"6374d849-19c2-4454-bfef-\
d5c49a12d618"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SKEvaluate", "[", 
    RowBox[{"expr_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"NestList", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#1", "/.", "SKRules"}], "&"}], ",", "expr", ",", "n"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.740359814226987*^9},
 CellLabel->
  "In[113]:=",ExpressionUUID->"c279123a-d3ca-46d7-88d7-3a3c986ea9d1"],

Cell[TextData[{
 "Returns the next ",
 StyleBox["n",
  FontSlant->"Italic"],
 " steps of evaluation of the expression ",
 StyleBox["expr",
  FontSlant->"Italic"]
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.7403598269691*^9, 
  3.740359843112208*^9}},ExpressionUUID->"44535661-47aa-434c-94f4-\
4a27720262b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SKEvaluateUntilHalt", "[", 
     RowBox[{"expr_", ",", "n_"}], "]"}], " ", ":=", " ", 
    RowBox[{"FixedPointList", "[", 
     RowBox[{"SKNext", ",", "expr", ",", 
      RowBox[{"n", "+", "1"}]}], "]"}]}], ";"}], " "}]], "Input",
 CellChangeTimes->{3.740359814226987*^9, 3.74035986811007*^9},
 CellLabel->
  "In[114]:=",ExpressionUUID->"57744649-8b88-46f4-b647-36d9cfa90adc"],

Cell[TextData[{
 "Returns the steps of evaluation of ",
 StyleBox["expr",
  FontSlant->"Italic"],
 " until either it reaches a fixed point or it has been evaluated for n \
steps, whichever comes first."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.7403598269691*^9, 3.740359843112208*^9}, {
  3.74035988723818*^9, 
  3.740359960201639*^9}},ExpressionUUID->"a8b239ac-2739-4fad-bdc9-\
959467bbe0cd"],

Cell["\<\
Note that, due to the Church-Rosser theorem, the order in which the rules are \
applied does not affect the final result, as long as the combinator evaluates \
to a fixed point / \[OpenCurlyQuote]halts\[CloseCurlyQuote]. For combinators \
with no fixed point, which do not halt, the behaviour demonstrated as they \
evaluate could change based on the order of application of the rules - this \
is not explored here and is a topic for potential future investigation.\
\>", "Text",
 CellChangeTimes->{{3.740359607318737*^9, 
  3.7403597752487907`*^9}},ExpressionUUID->"46fea085-5766-4fc2-b27e-\
5c41587dbe21"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsection",
 CellChangeTimes->{{3.740360002916765*^9, 
  3.740360003953145*^9}},ExpressionUUID->"e5bbda52-67f8-4c08-b99d-\
971bf23caac1"],

Cell["\<\
The functions above can be used to evaluate a number of interesting SK \
combinator expressions:\
\>", "Text",
 CellChangeTimes->{{3.740360005339683*^9, 3.740360005884597*^9}, {
  3.7403600555443573`*^9, 
  3.740360101562024*^9}},ExpressionUUID->"51db2589-f382-440c-863f-\
62ef62f95080"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{"SKEvaluateUntilHalt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"s", "[", "k", "]"}], "[", "a", "]"}], "[", "x", "]"}], ",", 
     "10"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", 
     RowBox[{"-", "2"}]}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740360111945114*^9, 3.7403601378485603`*^9}, {
  3.740360180959793*^9, 3.740360186345509*^9}, {3.740391916386606*^9, 
  3.740391918388006*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"4003d655-b845-4f6b-81cc-0947dfc2e219"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{
       RowBox[{"s", "[", "k", "]"}], "[", "a", "]"}], "[", "x", "]"}]},
    {
     RowBox[{
      RowBox[{"k", "[", "x", "]"}], "[", 
      RowBox[{"a", "[", "x", "]"}], "]"}]},
    {"x"}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.7403601308790216`*^9, 3.74036013822906*^9}, {
   3.740360175524172*^9, 3.740360186727504*^9}, 3.7404200114873857`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"5383ac20-2084-4afe-9ff8-b88f7181bd37"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["I",
  FontSlant->"Italic"],
 " combinator"
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740360210551961*^9, 3.7403602165048637`*^9}, {
  3.7403603554880733`*^9, 
  3.740360358434696*^9}},ExpressionUUID->"62bd2151-9c5f-4d1f-9a53-\
b2d58c503e39"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{"SKEvaluateUntilHalt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"s", "[", 
         RowBox[{"k", "[", 
          RowBox[{"s", "[", "i", "]"}], "]"}], "]"}], "[", "k", "]"}], "[", 
       "a", "]"}], "[", "b", "]"}], ",", "10"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", 
     RowBox[{"-", "2"}]}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740360267043441*^9, 3.7403603037866096`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"f81cc690-546f-4b99-90b3-fc5af930850d"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"s", "[", 
         RowBox[{"k", "[", 
          RowBox[{"s", "[", "i", "]"}], "]"}], "]"}], "[", "k", "]"}], "[", 
       "a", "]"}], "[", "b", "]"}]},
    {
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"k", "[", 
         RowBox[{"s", "[", "i", "]"}], "]"}], "[", "a", "]"}], "[", 
       RowBox[{"k", "[", "a", "]"}], "]"}], "[", "b", "]"}]},
    {
     RowBox[{
      RowBox[{
       RowBox[{"s", "[", "i", "]"}], "[", 
       RowBox[{"k", "[", "a", "]"}], "]"}], "[", "b", "]"}]},
    {
     RowBox[{
      RowBox[{"i", "[", "b", "]"}], "[", 
      RowBox[{
       RowBox[{"k", "[", "a", "]"}], "[", "b", "]"}], "]"}]},
    {
     RowBox[{
      RowBox[{"i", "[", "b", "]"}], "[", "a", "]"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.74036027526198*^9, 3.740360304229006*^9}, 
   3.7404200169530563`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"80a1c84f-1b5b-4a63-9031-ce7dde94ac5a"]
}, Open  ]],

Cell[TextData[{
 "The reversal expression - ",
 StyleBox["s[k][s[i]][k][a][b]",
  FontSlant->"Italic"],
 " takes two terms, ",
 StyleBox["a",
  FontSlant->"Italic"],
 " and ",
 StyleBox["b",
  FontSlant->"Italic"],
 ", and returns ",
 StyleBox["b[a]",
  FontSlant->"Italic"],
 "."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740360322688055*^9, 
  3.740360353084692*^9}},ExpressionUUID->"1712df3a-a0a8-4442-ae57-\
5e907c40de9b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Growth and Halting", "Section",
 CellChangeTimes->{{3.740360425652671*^9, 
  3.740360428971609*^9}},ExpressionUUID->"ea77a23f-3183-490d-a405-\
6f1cf89f3d42"],

Cell[CellGroupData[{

Cell["Halting and Related Works", "Subsection",
 CellChangeTimes->{{3.740360437859543*^9, 3.740360438714745*^9}, {
  3.740389925900474*^9, 3.740389929063024*^9}, {3.740391327234384*^9, 
  3.7403913297854223`*^9}},ExpressionUUID->"257a0f97-6845-4851-a7e4-\
07bd117bea08"],

Cell[TextData[{
 "We will define a combinator expression to have halted if it has reached a \
fixed point - i.e. if no combinators in the expression can be evaluated, or \
if evaluating any of the combinators in the expression returns the original \
expression. As SK combinators are Turing-complete and so computationally \
universal, it is evident that the halting problem - determining whether or \
not a given SK combinator expression will halt - is undecidable for SK \
combinators. There are, however, patterns and trends in the growth of SK \
combinators, and it is arguably possible to speak of the probability of a \
given SK combinator expression halting.\n\nSome investigations \
(https://pdfs.semanticscholar.org/856c/9986e9e4b1dc13bf9c1e2938c7d32d62d1ff.\
pdf, https://www.cs.auckland.ac.nz/~cristian/crispapers/AnytimeHP.pdf) have \
been made into probabilistically determining the halting time of Turing \
machines, with [1] proving that it is possible to compute some value K where \
for some arbitrary predetermined confidence ",
 StyleBox["(1-\[Delta])",
  FontSlant->"Italic"],
 " and accuracy ",
 StyleBox["(1-\[Epsilon]),",
  FontSlant->"Italic"],
 " a program that does\n\nA. Input a Turing machine M and program I.\nB. \
Simulate M on I for K steps.\nC. If M has halted then print 1, else print 0.\n\
D. Halt.\n\nhas a probability greater than ",
 StyleBox["(1-\[Delta])",
  FontSlant->"Italic"],
 " of having an accuracy (when predicting whether or not a program will halt) \
greater than ",
 StyleBox["(1-\[Epsilon]).",
  FontSlant->"Italic"],
 " The key result of this is that, in some cases \[OpenCurlyQuote]we can \
learn what we cannot compute\[CloseCurlyQuote] - \[OpenCurlyQuote]learning\
\[CloseCurlyQuote] referring to Valiant\[CloseCurlyQuote]s formal analysis as \
\[OpenCurlyQuote]the phenomenon of knowledge acquisition in the absence of \
specific programming\[CloseCurlyQuote]. "
}], "Text",
 CellChangeTimes->{{3.7403602636118183`*^9, 3.7403602646134357`*^9}, {
  3.740388478378325*^9, 3.740388553733492*^9}, {3.740388742604101*^9, 
  3.740388758915164*^9}, {3.7403888324863157`*^9, 3.7403889466839113`*^9}, {
  3.740389817657757*^9, 3.740389876269487*^9}, {3.740389923843316*^9, 
  3.740389946709115*^9}, {3.740389982178629*^9, 3.740389982504519*^9}, {
  3.7403900147632008`*^9, 3.7403900794372787`*^9}, {3.740390119408168*^9, 
  3.740390119590084*^9}, {3.740390203679715*^9, 3.740390306272377*^9}, {
  3.740390337937529*^9, 3.740390395307024*^9}, {3.740390459706037*^9, 
  3.7403904841979218`*^9}, {3.740391100545651*^9, 3.7403912322120047`*^9}, {
  3.740391293032034*^9, 3.740391321500585*^9}, {3.740391359755966*^9, 
  3.740391589465364*^9}},ExpressionUUID->"ade51938-3ffe-4fad-8c96-\
ce8651990b4f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Definitions and Functions", "Subsection",
 CellChangeTimes->{{3.7403899884292603`*^9, 3.7403900003574257`*^9}, {
  3.74039164206269*^9, 3.7403916437162724`*^9}, {3.7403954351411324`*^9, 
  3.740395439690755*^9}},ExpressionUUID->"31d33ca0-b090-49aa-a381-\
32c9c64e43f8"],

Cell[TextData[{
 "The size of a combinator expression can either be measured by its length \
(total number of characters including brackets) or by its leaf size (number \
of \[OpenCurlyQuote]s\[CloseCurlyQuote] and \[OpenCurlyQuote]k\
\[CloseCurlyQuote] characters). We use the former in most cases, and the \
latter when randomly generating combinator expressions.\n\nThe number of \
possible combinator expressions with leaf size ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is given by"
}], "Text",
 CellChangeTimes->{{3.740393666904213*^9, 3.740393783380846*^9}, {
  3.74039407558729*^9, 
  3.740394132855027*^9}},ExpressionUUID->"541b2c30-274f-4527-b5d0-\
20b59424ad31"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SKPossibleExpressions", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"2", "^", "n"}], ")"}], "*", 
   RowBox[{
    RowBox[{"Binomial", "[", 
     RowBox[{
      RowBox[{"2", "*", 
       RowBox[{"(", 
        RowBox[{"n", "-", "2"}], ")"}]}], ",", 
      RowBox[{"n", "-", "1"}]}], "]"}], "/", "n"}]}]}]], "Input",
 CellChangeTimes->{{3.740394150923233*^9, 3.740394188773568*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"8a5c7b34-37f6-492f-993d-a432d81bdacc"],

Cell["\<\
(NKS), which grows exponentially.
\
\>", "Text",
 CellChangeTimes->{{3.740394193394272*^9, 
  3.740394238456634*^9}},ExpressionUUID->"d982deb7-f064-4897-9979-\
4bb4204d58e7"],

Cell[CellGroupData[{

Cell["Visualisation", "Subsubsection",
 CellChangeTimes->{{3.74039179199181*^9, 
  3.740391801587439*^9}},ExpressionUUID->"f358130a-07c6-47a0-b199-\
b24899371767"],

Cell[TextData[{
 "We define a function to visualise the growth of a combinator, ",
 StyleBox["SKRasterize",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{{3.74036010597104*^9, 3.740360106404791*^9}, {
  3.740391660752515*^9, 
  3.7403917023432407`*^9}},ExpressionUUID->"5c690fd0-3101-4467-a9d0-\
8fa0fa30956c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SKArray", "[", 
    RowBox[{"expr_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Characters", "/@", 
    RowBox[{"ToString", "/@", 
     RowBox[{"SKEvaluate", "[", 
      RowBox[{"expr", ",", "n"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SKArray", "[", "expr_", "]"}], ":=", 
   RowBox[{"SKArray", "[", 
    RowBox[{"expr", ",", "10"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740391822712311*^9, 3.7403918695836983`*^9}, {
  3.7403919573752737`*^9, 3.740391962360066*^9}, {3.7403920966437607`*^9, 
  3.740392105688113*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"73b625ca-df32-46e5-9b3a-837cad8d863a"],

Cell["\<\
Generates a list of the steps in the growth of a combinator, where each \
expression is itself a list of characters (\[OpenCurlyQuote]s\
\[CloseCurlyQuote], \[OpenCurlyQuote]k\[CloseCurlyQuote], \[OpenCurlyQuote][\
\[OpenCurlyQuote], \[OpenCurlyQuote]]\[CloseCurlyQuote])\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740392113034281*^9, 
  3.740392180457528*^9}},ExpressionUUID->"f13db317-8588-4ce3-9f60-\
d43e74fe9911"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SKGrid", "[", 
    RowBox[{"exp_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{
     RowBox[{"SKArray", "[", 
      RowBox[{"exp", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ColorRules", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<s\>\"", "\[Rule]", 
           RowBox[{"RGBColor", "[", 
            RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], ",", 
          RowBox[{"\"\<k\>\"", "\[Rule]", 
           RowBox[{"RGBColor", "[", 
            RowBox[{"0", ",", "1", ",", "0"}], "]"}]}], ",", 
          RowBox[{"\"\<[\>\"", "\[Rule]", 
           RowBox[{"RGBColor", "[", 
            RowBox[{"0", ",", "0", ",", "1"}], "]"}]}], ",", 
          RowBox[{"\"\<]\>\"", "\[Rule]", 
           RowBox[{"RGBColor", "[", 
            RowBox[{"0", ",", "0", ",", "0"}], "]"}]}]}], "}"}]}], ",", 
       RowBox[{"PixelConstrained", "\[Rule]", "True"}], ",", 
       RowBox[{"Frame", "\[Rule]", "False"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "1000"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SKGrid", "[", "exp_", "]"}], ":=", 
   RowBox[{"SKGrid", "[", 
    RowBox[{"exp", ",", "10"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740391822712311*^9, 3.7403918695836983`*^9}, {
   3.7403919573752737`*^9, 3.740391962360066*^9}, {3.7403920966437607`*^9, 
   3.740392105688113*^9}, 3.740392185214303*^9},
 CellLabel->
  "In[117]:=",ExpressionUUID->"fcb62a70-3be1-4cf5-96a9-5e07dd565acf"],

Cell["\<\
Generates an ArrayPlot of a list given by SKArray, representing the growth of \
a combinator in a similar manner to that of cellular automata up to step n. \
The y axis represents time - each row is the next expression in the \
evaluation of an SK combinator. Red squares indicate \[OpenCurlyQuote]S\
\[CloseCurlyQuote], blue squares indicate \
\[OpenCurlyQuote]K\[CloseCurlyQuote], green squares indicate \
\[OpenCurlyQuote][\[OpenCurlyQuote] and black squares indicate \
\[OpenCurlyQuote]]\[CloseCurlyQuote].\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740392197989161*^9, 3.740392283280428*^9}, {
  3.740394347262082*^9, 
  3.740394350693145*^9}},ExpressionUUID->"173d8197-f063-4f4a-9e4c-\
4ebdc6c1bdd4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SKRasterize", "[", 
    RowBox[{"func_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Image", "[", 
    RowBox[{
     RowBox[{"SKGrid", "[", 
      RowBox[{"func", ",", "n"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SKRasterize", "[", "func_", "]"}], ":=", 
   RowBox[{"SKRasterize", "[", 
    RowBox[{"func", ",", "10"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740391822712311*^9, 3.7403918695836983`*^9}, {
   3.7403919573752737`*^9, 3.740391962360066*^9}, {3.7403920966437607`*^9, 
   3.740392105688113*^9}, 3.740392185214303*^9},
 CellLabel->
  "In[119]:=",ExpressionUUID->"40417448-ddee-43f5-8915-cb59fdb83aab"],

Cell["Generates a rasterized version of the ArrayPlot.", \
"NumberedFigureCaption",
 CellChangeTimes->{{3.740394322319193*^9, 
  3.740394341411488*^9}},ExpressionUUID->"464dea29-b5f6-4cff-a7c7-\
2707d53c7208"],

Cell["\<\
A visualisation of a given combinator can easily be produced, as follows:\
\>", "Text",
 CellChangeTimes->{{3.740391885849018*^9, 3.7403919021492453`*^9}, {
  3.740392091643856*^9, 
  3.74039210131979*^9}},ExpressionUUID->"8aa2ee0f-c8e6-4239-bb59-\
c186a9249bf4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SKRasterize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", "s", "]"}],
      "[", "s", "]"}], "[", "k", "]"}], ",", "15"}], "]"}]], "Input",
 CellChangeTimes->{{3.7403919290470047`*^9, 3.740391935839403*^9}, {
   3.740391996995236*^9, 3.740392016497188*^9}, 3.740392086587318*^9, {
   3.740392494265161*^9, 3.740392495997418*^9}, {3.740393517251746*^9, 
   3.740393518174975*^9}, 3.740393582346493*^9, {3.740393831534726*^9, 
   3.7403938342100143`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"7e212416-e8e2-495d-8403-b97ea6a41acc"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt1T1Ow0AQhmELEKLkCtwB0SJK2nCCIIUKCSkUiFtzBExBs2L0rZndzKz9
jhRC9pmftWM7N89vu5ezaZrer+Y/u/3Hw/G4/3y6/Plw2L/e3R7O53+v59fj
/LqYfuPrfvoz1Hr5fqp6r/eev7b+Vn5tf7VfHMdxHM/sZah1q5+qH71/7/1F
z6+9Tmr7Z7m+cRzHcfw/XoZat/r1rvd69P6jj1957/3VXoe1/bPcPziO4/g6
vQy1bvVT9aP3j673erb5Vn5t/yz3D47jOL5OL0OtW/2y13t99Pmj13s9er7y
2vu0tn+W5wuO4/ioXoZat/r1rvd67/m15zlq/6PXez3bfCu/1fwszxccx/FR
vQy1bvVT9Uv7W/mt+nuPv/X+ls4/9fcXXe/1bPOt/FbzszxfcBzHR/Uy1LrV
b2m9lW/Ve907f/TjV976+Ear93q2+VZ+q/lZnl84juO9vIyo56/a79rrvZ5t
vpWfdX7r73/pfK9HX7/R9V7PNt/K7zXf2kf07xOOR3iZZ322+nnr+f0Zq97r
2eZb+af6/bHWR70+sn2/0fOt/Kj+PH/Hrvd6tvlWftTzt3Y/3F/rrPd6tvlW
fqv56nhxHMfxdXsZal31serVvrKeHxzHcRzHt+dlqHXVx6pX+8p6fnAcx3Ec
356XodZVH6te7Svr+cFxHMdxfHtehlpXfax6ta+s5wfHcRzH8e15GWpd9bHq
1b6ynh8cx3Ecx7fg3ygO8WA=
    "], {{0, 16}, {73, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{563.8625000000001, Automatic},
  ImageSizeRaw->{73, 16},
  PlotRange->{{0, 73}, {0, 16}}]], "Output",
 CellChangeTimes->{3.74039249652911*^9, 3.740393583168792*^9, 
  3.740393834699296*^9, 3.7404200324723454`*^9},
 CellLabel->"Out[14]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztmT1uwjAUgF9gCmKDkUrZepN24hARQoIBtUqZuAhS1cv0CL0FU6/g2iGQ
HzsJhVAl6ccQbOfZ3/ceUjBmHm5Xy024XS/C4DkKX1frxVvw9BLpoaEnMvgU
kfdATFvpZnIZKf3uq7ilh0ZmVJ1fH+YiQhBBBBFEEEGdD9K3kqBjV5RvxqYm
3LpxamXX1teJCU5DsnP1UpMz+QsoUKBdhCZPkNzapznVUBfestFLPeTvVudU
nYmfWarZurnEH02XalEtqkW1qBbVolpUi2pRrXZVS0mhWk3+bLhzOikt/hwO
5Scc5ERO5ERO5ERO5HTfnEp5JduxWZ5yyx4qPavc4YUXXnj1zqv2q8N+yjej
tEcJJZRQQul6JXtirStKKKGEEkotUbpoxd/Ozf6TlJzdYIMNNti0xaa66+T5
DnyB9w0PHjx45Ru+Ispx4goKFKj/hLrk6eTYIDkp8WsMChSoP0TVnvDYXVCg
QPUfJd4Px5r+GQ==\
\>"],ExpressionUUID->"1f401f5b-ab84-4668-90a4-44c4cd0b2424"]
}, Open  ]],

Cell["\<\
The longest running halting expression with leaf size 7, halting in 12 steps \
(NKS http://www.wolframscience.com/nks/notes-11-12--combinator-properties/)\
\>", "NumberedFigureCaption",
 CellChangeTimes->{
  3.740393845324254*^9, {3.740393889154272*^9, 3.740393890912925*^9}, {
   3.740393942453536*^9, 3.740393979712281*^9}, {3.740394029285297*^9, 
   3.7403940654650297`*^9}},ExpressionUUID->"4be04b0b-8059-4e65-b5ac-\
b8c7a6c39873"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Halting graphs", "Subsubsection",
 CellChangeTimes->{{3.7403955848363113`*^9, 
  3.7403955919864817`*^9}},ExpressionUUID->"8a665399-8148-443a-9f01-\
2930013ce71b"],

Cell["\<\
We can create a table of the length (string length) of successive combinator \
expressions as they evaluate as follows:\
\>", "Text",
 CellChangeTimes->{{3.740395594741458*^9, 
  3.740395664144286*^9}},ExpressionUUID->"e89123ae-9be2-4e29-be95-\
ddf3fdcdc561"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SKLengths", "[", 
    RowBox[{"exp_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"StringLength", "/@", 
    RowBox[{"ToString", "/@", 
     RowBox[{"SKEvaluate", "[", 
      RowBox[{"exp", ",", "n"}], "]"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740395643216322*^9, 3.740395644569149*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"8d9b8394-946a-4e7b-b57e-f334df0dfa0b"],

Cell[TextData[{
 "Returns a list of the lengths of successive expressions until step ",
 StyleBox["n",
  FontSlant->"Italic"]
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740396321735919*^9, 
  3.740396331723832*^9}},ExpressionUUID->"9cea0069-f358-40ff-8f4b-\
efda4b291e62"],

Cell["These can be plotted as a graph (x axis :", "Text",
 CellChangeTimes->{{3.740396334656979*^9, 3.740396344927053*^9}, {
  3.7403968133763037`*^9, 
  3.7403968180248203`*^9}},ExpressionUUID->"c4eca345-cbbb-424e-b18a-\
09295be3eac0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SKPlot", "[", 
    RowBox[{"expr_", ",", "limit_"}], "]"}], ":=", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"SKLengths", "[", 
      RowBox[{"expr", ",", "limit"}], "]"}], ",", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}]}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Number of steps\>\"", ",", "\"\<Length of expression\>\""}], 
       "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740396368234694*^9, 3.740396369196514*^9}, {
  3.740396914436194*^9, 3.740396931506383*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"6872964c-fca6-4424-a9b1-357d1f20cf4c"],

Cell["Thus, a graph of the above combinator can be produced:", "Text",
 CellChangeTimes->{{3.740396380291915*^9, 
  3.740396391386496*^9}},ExpressionUUID->"82ccc68a-10a1-4106-9bb6-\
e8d25a157997"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SKPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"s", "[", "s", "]"}], "]"}], "[", "s", "]"}], "[", "s", "]"}],
      "[", "s", "]"}], "[", "k", "]"}], ",", "15"}], "]"}]], "Input",
 CellChangeTimes->{{3.7403964006259813`*^9, 3.7403964012850447`*^9}, {
  3.740396666324894*^9, 3.7403966797056417`*^9}, {3.740396746379438*^9, 
  3.7403967471251574`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"5fc13a4c-4128-4862-9915-554a71764f00"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 19.}, {2., 19.}, {3., 22.}, {4., 22.}, {5., 31.}, {6., 
      31.}, {7., 31.}, {8., 34.}, {9., 49.}, {10., 73.}, {11., 25.}, {12., 
      4.}, {13., 4.}, {14., 4.}, {15., 4.}, {16., 4.}}]}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Number of steps\"", TraditionalForm], 
    FormBox["\"Length of expression\"", TraditionalForm]},
  AxesOrigin->{1., 0.},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 16.}, {0., 73.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.740396747913116*^9, 3.740396918755118*^9, 
  3.740424650779192*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"ba675548-49a6-4269-9e89-97dc20a64843"]
}, Open  ]],

Cell["\<\
It is evident from the graph that this combinator halts at 12 steps.\
\>", "Text",
 CellChangeTimes->{{3.740396790929596*^9, 
  3.740396804248838*^9}},ExpressionUUID->"4774bd54-dc80-4bf1-98c3-\
6b0a39ad499a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random SK combinators", "Subsubsection",
 CellChangeTimes->{{3.739825132754468*^9, 3.7398251387012997`*^9}, {
  3.740394372488182*^9, 
  3.740394373031547*^9}},ExpressionUUID->"4d0b8b23-908c-45ca-a37f-\
5139bc0264f7"],

Cell["\<\
To empirically study SK combinators, we need a function to randomly generate \
them. Two methods to do this were found:\
\>", "Text",
 CellChangeTimes->{{3.7403947174950314`*^9, 
  3.740394762896309*^9}},ExpressionUUID->"ac8de124-505c-46df-8c21-\
7e4566698f79"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"RecursiveRandomSKExpr", "[", 
    RowBox[{"0", ",", "current_"}], "]"}], ":=", "current"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RecursiveRandomSKExpr", "[", 
    RowBox[{"depth_", ",", "current_"}], "]"}], ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"RecursiveRandomSKExpr", "[", 
    RowBox[{
     RowBox[{"depth", "-", "1"}], ",", "\[IndentingNewLine]", 
     RowBox[{"RandomChoice", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"RandomChoice", "[", 
          RowBox[{"{", 
           RowBox[{"s", ",", "k"}], "}"}], "]"}], "[", "current", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"current", "[", 
         RowBox[{"RecursiveRandomSKExpr", "[", 
          RowBox[{
           RowBox[{"depth", "-", "1"}], ",", 
           RowBox[{"RandomChoice", "[", 
            RowBox[{"{", 
             RowBox[{"s", ",", "k"}], "}"}], "]"}]}], "]"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RecursiveRandomSKExpr", "[", "depth_Integer", "]"}], ":=", 
   RowBox[{"RecursiveRandomSKExpr", "[", 
    RowBox[{"depth", ",", 
     RowBox[{"RandomChoice", "[", 
      RowBox[{"{", 
       RowBox[{"s", ",", "k"}], "}"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740394770419677*^9, 3.740394771792149*^9}, {
  3.740396946624428*^9, 3.740396961147064*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"4ec50b61-95f6-4e99-be67-59a47d1902d8"],

Cell["\<\
A recursive method, repeatedly appending either a combinator to the \
\[OpenCurlyQuote]head\[CloseCurlyQuote] of the expression or a randomly \
generated combinator expression to the \
\[OpenCurlyQuote]tail\[CloseCurlyQuote] of the expression. (Hennigan)\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.74039482966675*^9, 
  3.74039488885786*^9}},ExpressionUUID->"e9f76f50-b553-4772-86bc-\
446eb09088c9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"replaceWithList", "[", 
    RowBox[{"expr_", ",", "pattern_", ",", "replaceWith_"}], "]"}], ":=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"expr", ",", "pattern"}], "]"}], "\[Rule]", "replaceWith"}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"treeToFunctions", "[", "tree_", "]"}], ":=", 
   RowBox[{"ReplaceRepeated", "[", 
    RowBox[{"tree", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"x", "[", "y", "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomTree", "[", "leafCount_", "]"}], ":=", 
   RowBox[{"Nest", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ReplacePart", "[", 
       RowBox[{"#", ",", 
        RowBox[{
         RowBox[{"RandomChoice", "[", 
          RowBox[{"Position", "[", 
           RowBox[{"#", ",", "x"}], "]"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"x", ",", "x"}], "}"}]}]}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "x"}], "}"}], ",", 
     RowBox[{"leafCount", "-", "2"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RandomSKExpr", "[", "leafCount_", "]"}], ":=", 
   RowBox[{"treeToFunctions", "[", 
    RowBox[{"replaceWithList", "[", 
     RowBox[{
      RowBox[{"randomTree", "[", "leafCount", "]"}], ",", "x", ",", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"s", ",", "k"}], "}"}], ",", "leafCount"}], "]"}]}], "]"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740395041816888*^9, 3.740395051856318*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"c4f7920c-dadb-422e-bf56-e291a89f76cd"],

Cell["\<\
Random combinator generation based on generation of binary trees - each \
combinator can be expressed as a binary tree with leaves \[OpenCurlyQuote]S\
\[CloseCurlyQuote] or \[OpenCurlyQuote]K\[CloseCurlyQuote]. \
(http://community.wolfram.com/groups/-/m/t/965400)\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.7403950956150417`*^9, 3.740395127207334*^9}, {
  3.740395251811192*^9, 
  3.740395253307767*^9}},ExpressionUUID->"f31413b8-fdd0-4829-b495-\
f928a3a16fe9"],

Cell["\<\
While the first method gives a large spread of combinators with a variety of \
lengths, and is potentially more efficient, for the purposes of this \
exploration the second is more useful, as it limits the combinators generated \
to a smaller, more controllable sample space (for a given leaf size).\
\>", "Text",
 CellChangeTimes->{{3.740395259635462*^9, 
  3.740395359358183*^9}},ExpressionUUID->"b08f3be7-83ee-40af-a6cf-\
1ec03f72862a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Halting Graphs", "Subsection",
 CellChangeTimes->{{3.739925476130082*^9, 
  3.739925477779193*^9}},ExpressionUUID->"e1f31e58-9667-4ec1-9dcf-\
c28137665188"],

Cell["\<\
All combinators of leaf sizes up to size 6 evolve to fixed points (NKS):\
\>", "Text",
 CellChangeTimes->{{3.739825399493352*^9, 3.7398254116955547`*^9}, {
  3.7403969716338577`*^9, 
  3.740397032737629*^9}},ExpressionUUID->"a7bd15c6-9fee-4535-89e8-\
4a9da75c29bb"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"exprs", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomSKExpr", "[", "6", "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ImageCollage", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ListLinePlot", "[", 
      RowBox[{"SKLengths", "[", 
       RowBox[{
        RowBox[{"exprs", "[", 
         RowBox[{"[", "n", "]"}], "]"}], ",", "40"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.740397050835479*^9, 3.740397059208692*^9}, {
  3.7403970914355383`*^9, 3.740397093993432*^9}, {3.740397480862308*^9, 
  3.740397480958428*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"f25c2e86-d100-46c1-8d55-ce4113551fc0"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
U3+zp9vI/gAUN3o/AGwxkT83706uz7H7yBUDFQFwRbb587uljerT70+FXA0A
l5icf01MSJ+6Qa3ZfsbYPgEUL/o/AGwxkT/3h5/o/s+2fRcNVATAFdnmz0sr
mtXKb46HXA0Al5ief/2xpll9uIWcAjA/+j8AbDGRP+n0uO7/fN3QZaAiAK7I
Nn9e/2S/Wrr+cMjVAHCJ6fnXX1fvV2//u93oPgEUJ/o/AGwxlT+/f3e3qt12
0si+ALgh2/x588uYeuOLgyFXA8Alpudf0vv5a+1+o/sEUJxY/xmALaay578/
2qeWbzxqZF8A3JBt/rz39RH12setIVcDwCWm514fbDmu/rSi2eg+ARQnej8A
bDGVP3JsXo7RA0C2ss2fj77t0GtrAIAppudfX24/rZ57e5fRfQIoTvR/ANhi
Kn+WbTiqXl21z8i+ALgh2/z54sfT6rfvNIZcDQCXmJ5/bd7TrddCTD55anS/
AIoP/R8AtpjKn9XfnVAvvLfHyL4AuCHb/Nmwq0vPq9LpsZArAuAK0/OvHW2X
dE7dTTwyul8AxYf+DwBbTOXP+p2dk/OzMeZnALKTbf7UtVzQ+fLwUSrkigC4
wvT8a+/xPp1TV2/dN7pfAMUn0/rPjYevqI2NXWxsbGxT26GzNyPJn1x9t3dy
fvZg5ImBqgC4INv8qT94efK4+r1kBFUBcIHp++8c6+7XOdV5+a6xfQIoHKnU
L8eoJiYmVDqdntpmypQ9S746pHOEjY2NzdtkHQyTTI19pF8t9cUHho3sD0Dx
yzZ/Wo5NHle/1v8g5IoAuML0+T9dvQM6p450xY3uF8DCJv2d6upqVVVVNfVc
TU2NzpjS0lJVUlKi4vHpuZApf9LpcZV6mmZjY2Ob2kyvf2Fq/HPw9A097rl4
bcjI/gAUv2zzJ3bmps6XC33kCwAzTPd/+vof6JySfjUAN8h5PtLjkTyRno+n
vLxcDQwMZHwd6/8AsMVU/py6eFuPe05euG1kfwCKX7b5c+LCZL6cungn5IoA
uML0/GvwflLn1PYDl4zuF8DCV1tbq88B8sg5P941ptIfGh8fn/b19H8A2GIq
f3qu39PjnrZTN4zsD0DxyzZ/uq8O6nxp7+S6CgBmmJ5/PUk91Tm1afc5o/sF
sPDJuT/+/o+c/yPXfHnnB/nPDRJeb8j0OmQAMB9TmXNrYFiPexrbe43sD0Dx
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
    "], {{0, 555}, {1152, 
    0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1152, 555},
  PlotRange->{{0, 1152}, {0, 555}}]], "Output",
 CellChangeTimes->{3.740397065244482*^9, 3.740397098595647*^9, 
  3.7403974844435577`*^9, 3.740424674418561*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"27e0f771-6f2a-4912-a3a5-d5493194a278"]
}, Open  ]],

Cell["\<\
10 randomly generated combinators of size 6, with their lengths plotted until \
n=40.\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.7403971181930532`*^9, 3.740397136594475*^9}, {
  3.7403972613966312`*^9, 3.740397263340559*^9}, {3.740397479485614*^9, 
  3.740397479573565*^9}},ExpressionUUID->"819577ad-6cf0-4afa-8257-\
d1bde2577695"],

Cell["\<\
As the leaf size increases, combinators take longer to halt, and some show \
exponential growth:\
\>", "Text",
 CellChangeTimes->{{3.740397195339624*^9, 3.740397223347375*^9}, {
  3.740397430219926*^9, 3.7403974305865917`*^9}, {3.7403975314949017`*^9, 
  3.740397545244183*^9}},ExpressionUUID->"ed33e74b-43d4-48d5-80ca-\
4a4f2c42c642"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"exprs", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomSKExpr", "[", "10", "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ImageCollage", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ListLinePlot", "[", 
      RowBox[{"SKLengths", "[", 
       RowBox[{
        RowBox[{"exprs", "[", 
         RowBox[{"[", "n", "]"}], "]"}], ",", "40"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.740397245337042*^9, 3.740397287786524*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"b10d12e3-c7f4-462c-a43f-e58817036f9e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3cl3VEfa+Pn3dPeil/wJ9LoXbHvFOb3sc1j9+vSCRdku+7VcdlW5fsh+
/bpcgzDGDAJjbIQHwMgMNgiMwbKQAIEYEiEkMWlAIKEJJBAa0YAmUiKaJ0Qk
V6mc8968mfd+P6duSTldRaash4jnRjzxf7z5t/+R97/8x3/8xwf/+4v/+x9/
/O//Oz//j3//f5e9uPH/vf/Bu++8//Z//j/vf/j2O2/n/19v/q8v7vw/Xzx3
7f/2H//x4n//oQAgxxC6AAAAAAAAvI38DwA7zM/Pq4GBATU5ORm67/nz5yoY
DIYOAMgW9H8AAIDfSP+HPhCAdEjeR+LI6tWr9df8/Hx9f2Fhob69YsUKtWzZ
MtXb27vodcQeAG4h/gAAAL+h/wMgXZLvqays1N/PzMyE4sqqVat0biga4g8A
txB/AABALrOuszBrLeKtv6D/A8AugUBArVy5Us8DEjLnx8wxlDlAskbMivgD
wC3EHwAAkKskz2PGWHKY8RfrLwBkSnFxcSjWCJn/IzFH4pPcL/HIivgDwC2s
fwcAALlqZGREX3cPx/oLAE4rKSlZVPdZ4orM9ZG8j1FfX6/jkZUZfzEOA5Bp
xBwAAJCr5Bq7dRxlanGw/gKA0yS2FBUV6e/Hx8d1XJmamtJfzbpTyU8z/wdA
tiD+AACAXCV1NwoKCvT3ra2tul8j194TWX/B9XcA6QjPP5tckNSFNvdJLjq8
BhkxB4BbiD8AvIr4BnifdZ2FkL97uQ6fyPoLuxQdva42/Fhj2/kA5BbZ+yt8
jqHclvsjoX8CwC3EHwBeRXwDvE/yOmb+j9QCkr/76enpjK6/+HjnBfXOptO2
nQ+AtzHvEIBbko09Dff6Vf72KnWtpc+hFgGAPehbAd5ncj7mKC0t1fdncv3F
37adVW+sO2nb+QB4Wyb6J80dAzo2VTf2xn8yAN9INv6cqe1Ur316Un8FgGxG
/gfwD1lnEb4WLFPrL/I2ntJ9o/D1HwAQSSb6J6dqFsZspZfuOf6zAOSOZOPP
oTMtOpacuNjmUIsAwB7kfwBEY2d8eP1Fv0j6RpPTs7adE4B3ZaJ/UlzWqOPS
4TN3HP9ZAHJHsutPpcahxBLJAwFANiP/AyAau+pvTM880/0iOUbGpmxoGQCv
y0T/RGrSS1z6obTR8Z8FIHckG38+3XNZx5K9pQ0OtQgA7EF9RQDR2BUbJOdj
8j99QxO2nBOAt2Wif/L+F5U6Lu04et3RnwMgtyQbe97/4qyOJUXEEgBZjtwP
4LxLNx+o7r5Rt5uRNLviw8OB8VD+p/tR7n0OADLP6f7J1EwwFJc27rvq6M8C
4L7x8fFFNRAnJyfVwMBAxOcmE3+Cc3Mv4kiZjiVbDtam3U4AcBL5H8BZk9ML
a58OVjS73ZSk2RUf2ntGQuOstvvDtpwTgLc53T/pfDgaikv/+j7g6M8C4C7J
/UhMaW1t1bdLSkr07VWrVumv4XtTJBN/Bp9MhmKJrAMDgGxG/gdwVufDJ7pP
UFnb5XZTkmZXfGhqHwj1jZraB205JwBvc7p/Ut3Qo2PSG+tOqvztVY7+LADu
MutJu7q69Bwg+T4YDOrH8vLyVEFBwZLnJ+pu91Coj/Pxzgt2NhsAbEf+B3BW
TdND3SdoaOt3uylJsys+1Lc8CvWNrrX02XJOAN7mdP/k6Lm7OiYV7A6odzad
dvRnAXCPzPEJBAJqxYoVOv8zMjKyKL7IY5IDskom/phc8pvry3UdIADIZuR/
AGf9dqktZ+se21V/VeofmfyP9JMAIB6n6z/vOHJNvfV5hdrzW4N6bW3Zorog
ALyhsrJSrVy5Un+/bNkynf+RQ7435LbkiKxM/EkkDpVeuhdaR/r2hgr73wQA
2Ij8D+Cs3Sduqddf9AukPmCusSs+nL7aGcr/VF3rtuWcALzN6f7JJ99eVP/8
7pI6dKZFxyap1QbAW8LzOHJ0dHQsii+FhYVprf8q/r1R/WFtmfru15v6a3gt
IQDIJuR/AGetL76Ss7Ul7IoPJy62hfI/FTUdtpwTgLc52T+RuT6yVmPn0euh
OZr9I08d+3kA3DEzM6P3+ZKvElNkPpCp/2NqQcu6sNLS0kWvSyb+bP2pVv15
y5lQLnliatbW9wAAdnJ6fjXgd7IWfPP+3Nxb2K7YcPjMnVD+R3JBABCPk32T
gZGF/XqOnW9VZ+u69PddD5849vMAuG/58uWqt7dXf9/Y2BgaA5n1YVbJxJ+/
f3NR/XtXIHStS+ILAGQrcj+Ac2aeBfVcYJkbnIvsig/FZY2h/M+Rs3dsOScA
b3Py+lTDvX4dj2qaevUh3zd3DDjyswBkJ1mnJXODIkkm9uRtPKW+KrkWWuve
3TdqVxMBwHbkfwDn9PSP6b5AeXW7201JiV3jr2+P3dD1VeWzOFDRbEPLAOQS
GWcNDAwsGWvJbbk/Eif7J6dqFsZpXY9GQ7mg2uaHjv08ALkl0fgjdcMkfhx8
0bcJ3FrYB+xO15DDrQOA1JH/AZxz/U5fTu95bld82PZznXqv8Iz+LGSvHQD+
IfkdiSWrV6/WX/Pz8/X9JSUl+rbsuyNfw2umOtk/kTmJMjdzejao2ntGqE0P
YJFE48+DxwvX+SqudKhrL/t8N+7mZp8PgD+Q/wGcU/6iPyB9Aekf5CK74sPn
xVfUh19X6b2Wd/5yw5ZzAsgNku+RmqvC1GA19VeDwaC+Py8vL639d5K14cca
9bdtZ/X3fUMTOk6XXc7NeZoA7Jdo/LnZ+ljHj7rbj1RL56D+vrqhx+HWAUDq
yP8AzvmxrCl0jTkX2RUfZI/lf30f0HOAth2qs+WcAHJLIBDQdVZlHtDIyMii
+CKPSQ7Iysn+yftfVKpNL+vyjz+d0WO2kkpqkwFYkOj697P13Tp+dPSO6PWk
8n1lXZfzDQSAFJH/AZxTeOCq+uvWSrebkTK74sMHX1XpOUBrvjwXGnMB8Jfi
4mK9z/KyZctUV1eX/mrIbVkHZmXGX3bXgZ6aCeox2r6TTfp2cG5O387VOv0A
7JdozJE9LSR+jE5Mq/7hp/r70kv3HG4dAKSO/A/gHMl7fLa32u1mpMyu+PDn
LWd0DaCPd15Qn+65bMs5AeQGqfNjrfts1n1Z40thYWHG1n91Ply4Rn+mtjN0
39sbKlTR0euO/DwAuSfR+CP7W/zxs3K9pnViclbHlsOVLQ63DgBS5+T+qoCf
zc8/V2+sO6l2Hb/ldlNSZld8eHN9ue4jFewKqE++vWhDywDkCpnzU1RUpL8f
Hx/XMWVubk5/bW1tDT2ntLR00euc6ptIbQ4ZozW1D4buk1pAmw8wNxHAgkTj
z/q91fpan2AuIYBcQO4HcIaZB3ziYpvbTUmZHfFB9vTR/aGyRrXhxyuhfhIA
f+jt7V20jsvkghobG0P3SV2gcE71T36puqtj0tDoqzlJkpeW/DQAiETjj6xr
l3ryBvtcAMh25H8AZzTe69djjJqmXrebosl6C+thyLoM2Z85Ejvig3U+9Naf
anO6HhKA1MneX+F7vMtt69owK6f6JzuOXNNjNFmvYZg9CgFAJBJ/JH7JPO/v
j98M3Sd9HOnrAEC2Iv8DOONsXVdoTwi3mb2WZY2FHLL/jpC6HHK/1F2Vr+Fj
MzviQ//Iq3lQMu7K23gq7XMC8D6n1qfLXB/Zk9Bq++F69e7m07b/LAC5KZHY
Mzw2pfs3MqfQ+KjovFr3Q+7WfQTgDLkGZsi4LNI1eSHX5KNdF4v0WLTr+LHO
Q/4HcMZPp27rfsHTqWduN0XvtRy+vsLkhEzckb2Xnai/er9vodbq6auduhaS
XCsDgHic6J9I3JN6ZDvDaj3vOnFLvf4psQnAgkTyz20PhnX/5vz1+6H71u6+
rP7+DXUOASyQcZaMr/Lz80P3yZ4X5rq87IUq6+TlGrz1mrxcozeiPRbpOn6s
8xjkfwBnfHmoXv1pU3ZcTw6vv1FZWalzQta//0AgoHNAVnbEh7vdQ7p/dOnm
A73fsnwfDM7HfyEAX3OifzIwMqlj0LHzrYvuN/n6yWn38/UA3JdI/Klpeqjj
hqz3N6SOvNSTBwC55iQ5HoknkvMxJDcTPmdHHjfjMJPDMevUIz1mvoZfx491
HoP8D+AMuf7z7yypJyq5HTO3R/bbkb/7zs5OnXM2urq6dDyysuaMUo0VN1sf
6/5RfcsjdehMi/5+Ymo25fcCwB+c6J80RKnLJutT5f7BJ5HnSgPwl0TiT9nl
dh03Hg6Mh+5jnTuAcLLvhXWNhYy/zNhK8kOSp5F1GmZPVCGPmTVjkR7r6+uL
eB0/1nms9wGw31vry1VR2BoDt0TK+46Oji76+5d8sRPrv2ScJf2j5o4B9ev5
Vv398OhU2ucF4G3R8s4yp/DG3b6UznmqplPHoK5Ho4vuP1O7cH9332iUVwLw
k0T6P2ZO8/Tsq/ode35rUK+tLVvS7wLgX+FjLLneLmszzPwgsx5MrsUbkiMa
H1/ILUd6rKmpKeJ1/FjnMey4vg9gsZGXNQGPnrvjdlM0iQcm7ph1X2ZOoMkR
S/wpLS1d9Do7YkLVtW79WbT3jKiT1QvXyh4Njsd/IQBfixZ/ZJ/2VPfqKi5r
VH94MTazjtdEdUOPjk0tnYMpnReAtyTS/9l2qG5J3fhXa0mZ5wxgQXj+x5of
rq+v1+M0qQ8k35vHrfvyRHpM1n1Fuo4f6zwGOR/AfqbmzcUbD9xuimZyPuYw
eZ7GxsbQfeH1oYUd8aG8+tX8aLMnWtfDJ2mfF4C3RYs/ByuadRwZnZhO+pwb
99VErM1hXacKAIn0f/7x3SV9WB2/0MpaUgCLWPM/shbLWrdHxl/yuKwRM/N5
TN1WI9JjJrcTfh0/1nkM8j+A/STvI//+Sx4om0jMCZ+TLDlhJ/cHPFZ1V38W
MidKakBn4+cCIPtEiz+1zQs1V+tuJ5+ref+LSrVp/9Ul95t9fC7cuB/hVQD8
JpH+j8z9kTlAVmaN6YPHY041DUCOCa//I3N0zPV3ydWYXNDy5ctD90vuxirS
Y9Gu48c6jyD/A9hP1n2ZnEcusyM+mGv10zPPQuO2BsteGQAQSbT482R8WscR
WWeRjKmZoH6d1OwIJ/MT5TGZrwgA8fo/soY0UjzhOheARMj19/C6zEKuyYev
14r1WLTr+LHOQ/4HsJ/UfZb6z7nOjrpgu0/c0vU2ZN7Rrbb+lK/bA/CXWPEn
f3uVWrv7clLn63w4quOP1HoOJ2vJsqlmGwB3xev/mJyx7AFmJWtI5X5ZUwoA
2Yj8D2A/2fdd9n/PdXbEhx1Hr6t3Xu6FeqdroS5S4FZP2ucF4G2x4s93v95U
b6w7qWaeBaM+J5yp8dzUvrTGczA4rx/7sWzp3CAA/hOv/9N4b+F6Vk3Tw0X3
N3cM6vuvNC5dcwEA2YD8D2C/P206rb48VO92M9JmR3zYfOBqqN6quf5+rp4a
GwBiixV/JIZILJGccqJ+eVmLbGg0cr2ztz6vUN/8ciPpdgLwnnj9n/PXF2KQ
1A6z6nz4RN9/tr7byeYBQMrI/wD2ejr1LKXaFNnIjvjw6Z7L6uOdF/T3vabG
xpWOtM8LwNtixR+prSqxpPTSvYTPt+PINZ3jCa+Bb0ht6C0Ha5NuJwDvidf/
Mfnk4dHFdR77hib0/b8HEo9NAJBJ5H8Ae93rGVm49lPX5XZT0mZHfJDcz9o9
C3U6ZD9U+WyOX2hL+7wAvC1W/JEcjqwr3fpTXdTnhPvk24tL9mq2ssYqAP4W
r//z/fGFNajh9VXHns7ofs6Rs9QSA5Cd7KjvCuAVsy6h9f5w/CdnOTvig6z9
kjVgYmJyVn82hytb7GgeAA+LF39kro6stY02n8dKnvPm+nK18+j1qM/5bG+1
+mjH+VSaCsBj4vV9NvxYo9Z8eW7J/dQSA5DtyP0A9tr7e6N6bW2Z3ms419kR
H+Qa/Y6XYy6p1Sr9ov3l9IsAv+nt7VUjIyOh25KTCQaDoSNcvPhz4mKbjie9
/eNxf/bAyMLcw2PnW6M+Z9vPderPW87EPRcA74sXfz78ukqt31sd8THJNX97
jFpiALIT+R/AXgW7A+q/PHIN2Y748PqLMdeuE7dCt2Uv+N2W2wC8bWZmRseS
VatWqeXLl6uVK1fq+wsLC/X9K1asUMuWLdP5Iat48aelc2Gfnapr8eusNoT2
6om+J4/ZUwwA4s0/fPOz6Dmev2w5o774OfG1qQCQSeR/APvMzz9Xb60vV0Ux
1hjkknTjw/TswnyfAxXNofve3lDhmc8HQHz5+fkqLy8vdFviiswDknzQwMBA
1NfFiz+zs3M6XyN1OOI5VdOpY1HXo9Goz5E4Jc+RuAXA32LFn9GJ6Zg1fuQa
YLS5QQDgNvI/gH16+sc8te9DuvHhyfhCH0n2yTC4Lgb4i3V9l8zxkbgiNVNl
zo+5xi5zgMLrqCYSfwp2BfQ6jHiKyxr13MNYuZ1fz7dG3M8HgP/Eij8dvSMx
93iXuCT15gEgG5H/AexzuaFH9wka7/W73RRbpBsfHg0u7Pd+sro9dF/+9iq1
cV9Nuk0DkGMKCgp0TAkEAvq2zP+RfJDUAZL8j6wHszK5oVjrMA6+nLMj1+Nj
kX2/ItVqtTJzhGRveQD+Fqv/U3f7kY4VN1sfR3x80/6rceMNALiF/A9gn59O
3dZ9grGJGbebYot09/8y18is9Tn+/s1FtXY3eywDfiH5HTPHx1rn2bpvV319
vc4HWSUSe2qbH+oYI+OxaEydoKPnYu/HHLi1kL+/2z0U9+cCyB0yt1DWmk5O
Ti66X25HW4MaK/5UXOmImSv+uuSaemfT6dQbDAAOIv8D2Ef2A33/i7NuN8M2
6caH5o4B3Ue60viq5qrkfiQHBMAfioqKdN1nyffIOExyQKYmtMkHSU3oSPN/
4jFrTCX3Ho3sEy+1WuPNEbpxt0+f6/qdvgTeFYBcIPkdiSWrV6/WX6UemSgp
KQnVpTdrUq1ixR8z73Byejbi47LnxWufltn3JgDARule3wfwyp82nfZUbZt0
Y8O1lr4lc6Rl7ZesAQPgD2bcZT1krCXjMHNbagGF7wGfaPyReBJtTqFcn5e6
P3t/b4x7Hpn3I/Hq0s0HCf1cANlP4kxlZaX+3uSdzZxEE3OkPr2sT7WKFX++
Krmm8jaeivq4yQ9NzVBLHkD2IfcD2GNgZHJJreNcl258iLSeQvJjUgMaACQP
JGOySBK9PiV7MMs+YDPPlo61ZE/319aWqb6hibjnMfX7K2o64jccQE6RumMy
z1Dy0bL/oDW2yGPWPQpFrNgj9Z1jzWM+Ri15AFmM/A9gj/qWhXqA8tUr0o0P
Z2oX6ql2973ac1n2fpc94AEglkTjj+zBI3HmTtfiuj2DTyZ1XkhqcSRiZGxK
n+eYh3L4ABYUFxfrGmQy17Crq0t/NeR2pPpj0erPyzWsrT/VRv1Zpj6Q5JQB
INuQ/wHsIfN+5N97mQfkFenGh98utenPpH/kaei+3Sduqddf3AcAsSQaf2SN
l8SZ0kv3Ft1v1mC094wkdB6ZPyTP31/elHRbAWQnqfNjrfts1n1Z44vUHkt0
/dfsizgha0qLY6wpvXDjvo4lbQ+G02s8ADiA/A9gD1nX5LX9HtKtD3a4skX3
gSYmX9VIlLGV3BdprQYAGInGHqnl8c7GU2rrT69qrz2deqb+8/MKteHHK0n9
TKkTLevJAHiDzPmRGvRifHxcx5W5uTn9tbW1NfSc0tLSRa+LFn9kLWmkfLOV
2R++oa3fpncBAPYh/wPYQ/b9kv2/vCTd+FBc1qj7QMHgq301IuWEACBcMvFH
9viS+vtmT/kTFxfmHt5Kcvz1l62VnqrhD/hdb2/vonVcJhfU2NgYuk/qAoWL
Fn+aOwZ1bKlu6In6M5vaF/Y+rWl6aM+bAAAbkf8B0jf2dCbuHsTZQq5/mTGS
fJV50OYIl258kOvocj3d6viFhXGZ1OYAgGiSmX9o8j29/eN6buGft5xRn8So
zxrNR0Xn1bofqpN+HYDsJnXmw/d4l9vWtWFW0WKP7A8Yqd6YVUfviH5O1bXu
1BsMAA4h/wOkr/Fev/63/nKM60HZwMx9NnOeZc273DY1EeU6mVW68WHboTr1
XuHivb7KX9ZF7B0YT+vcALwtmfjT0jkYGm+ZetCy/2CyPt1zWX2880LSrwPg
LdHiz/ELrXFrPT4aXFgjVna53anmAUDK0q3vAUCp3wP3cmKvB/P3LntdCNnv
YmBgIObz0yG1Nz74qmrRfefqF+oidj4cjfIqAEgu/szOzum9vmTO4YdfV6m/
bTurgnNzSf9M2dPnr1srk34dAG+JFn/2/Nbwog9TFjO+jE5M637O0XN3nGoe
AKSM3A+QPtnT/M315Wp+/rnbTYlKcj2BQEDP9TH5H5nzY3JCcn/43Oh048O/
vg+of353adF9ck0+3txpAEg2/hTsCugckMSXipqOlH6mXrO6vjz+EwF4WrTr
45v3X9X1HmOZfbmX4L6T7CUIIPuQ/wHS9187zquC3QG3mxFVZWVlqL6h5Hys
839kzZfUAZL8j6wHs7LWTEwlVsh1+PXFi/ffMftiJFuXFYC/JBtzzH7vUgd6
euZZSj9Txmtyjln2JwR8LVr8ket9srY9nj9+Vq6++/Wm3c0CgLSR/wHSI+OM
19aWqb2/N7rdlKjC8zhmDZipAy3q6+t1Pij8den4y5YzS/bSaXhZK6m2mX0x
AESXbN5ZYkq6ay5+qbqrz/FkfDrlcwDIfen2f6T2YSJ5IgDINPI/QHpa7w/r
8YLUtclWsu+F7HEhX+VvXuYDme/Nvl8yPyjS/J90vLW+XH3zy41F993tHtKf
l+yhAQDRJBt/JGcja7ek9kaqKqhPD0Cl3/+R+c+fh81/BoBsQP4HSM+Z2k49
XmjvGXG7KQlZvnx5aJ+v/Pz80DV2WRcWvgd8OvFBagnJ51IcNi+q6+ETff/Z
uq6Uzw3A+1KJP+nut2P2dm67P5zWeQDkNjvqH/4jrP4hAGQD8j9AenafuKVe
fzFemMnRehGSp5G5QJGkEx+eTj3T46jDZxavxXg0OK7vP1nNvqgAoksl/oTX
sE/WtZY+HZ9utj5O6zwAclu646ON+2pU/vaq+E8EgAwj/wOkR/a3+njnBbeb
4YhU6z6LgZFJPY46cbFt0f3Do1P6/l/Pt9rRRAAelU78SVVL18L61MsNPRn9
uQCyS7qxZ/vhevXu5tM2tQYA7ONG/wrwimBwTu/xIHsGe1E6seHB4zE9jjp9
tXPR/RNTs/r+Q2da0m0egBwi605HRhavk5W6ZAMDAxGf70bf5H7faMS4BcBf
0h0ffX/8pnpj3UkbWwQA9iD3A6Su+9HCWKH8SofbTXFEOvHB1MUOr/McDC7U
BZJ9lgF4n6k1L/sLSv0xqTUvSkpKQvfL1/C1W270T4ZGF+YtHr/A/ETAz9KN
PwfKm3UsmZ7NzdoAALyL/A+Quos3FmqF3u4cdLspjkgnPtxqW9jnve72oyWP
vfZpmdp1/FY6TQOQI6TOfF5eXui2xJXh4eFF+w/K4wUFBYte50b/ZHpmoW7Z
wYrmjP9sANkj3fjzS9VdHUtGxqZsahEA2IP8D5C6/eVN+t93WdPkRenEh5qm
h/qzaWpfurYjb+MptePItXSaBiBHSI7H5HlkDZjElaGhoUXxJRAILMoRCbf6
J7JmQ9ZuAPCvdONPeXW77gM9HBi3qUUAcln4XjvR1r/LffJYJJEeS+U85H+A
1H22t1qt2X7O7WY4Jp34UHWtW/d92ntGljz2162VautPtek0DUCOkfk9ElMk
19PV1aWWLVsWekxuyzowK1N/I9N1Ct8rPKO2HarL2M8DkH3SjTnnr9/XfaB7
EfpAAPxDrn9J/0fmQhuR1r/LYb1PnmNEeyzZ8xjkf4DUPH/+XL294ZTe48Gr
0hl3mWtfvRGufX3wVZXa8OOVdJsHIAdIrJQ4smLFitA8INM/MQoLC7Ni/Zf4
rx3n1fpi4hPgZ+nGn6vNC3OgG+/129QiALlG+j/S95F4Iv0cc1+k9e/yuJkH
bfpI8lwR6THzNZnzGOR/gNQ8Gpx4WSe0Lf6Tc1Q68eHY+Vb9+QxHWPv+ybcX
VcGuQDpNA5AjioqKdN1n6X9IX0T6Kqb/09q6UGdZ+kelpaWLXudW/6Rgd0B9
8s1FV342gOyQbvyRvI/0gSQPBMDfpB9krnHJPqiR1r/L3himTyTkOWbNWKTH
+vr6kj6P9T4AyZN9rRbq23iz9rNIJz4cPHVbfz5TM0v3vvh0z2X18c4L6TQN
QI5YvXr1krVckgdqbGwM3TZ7glm51T8pPHBV/W3bWVd+NoDskG78kXVf0geS
dWAA/M06xzna+neJOfK9Ic8ZH19YQxHpsaampqTPY7i1vh7IdXt/b1SvrS1T
k9PP3G6KY9KJCXt+a1B/ePH5hM85FJv2X1VrvvRu3SQAiZE8ULbVJ9x59Lr6
z88rXPnZALJDuuMiqfss+R9ZCw/A36z5n2jr36U+UH39Qk0RM0danisiPSZz
qZM9j0HOB0iNrA+QdUxelk58kP29ZJ+vSKS2qtRYBYBo3LouVVzWqMdtwbm5
jP9sANkh3djzZHxaxxHZBx6Av1nzP9HWv8saMTOfx+yVakR6LJXzGOR/gORN
Ts/quT/Fvze63RRHpRMfZA3F+19EXkOx85cb6i2urwOIwa3+yZGzd/S4bWxi
Jv6TAXhSuvFndnZOx5ED5c02tQhArrLW/xHR1r9LrURzv+RurCI9lsp5BPkf
IHmmrl/gVo/bTXFUOtff1/1Qrf67KHKNH1kbJvkzAIjGrf7JyZd7Fz4aXLp3
IQB/sCP+vLHupPr++E0bWgPAa6Ktf5f7wtdrxXoslfOQ/wGSZ/a26huacLsp
jkonPvz9m4tq7e7LER87UNGsP7/p2aW1oQFAuNU/uXD9vo5P9x6MuPLzAbjP
jvjz7ubTavvhehtaAwD2If8DJG/zgau+qF+TTnz4n1+eU5v3X434WGh9xVPW
VwCIzK3+Sd3tRzo+NbT1u/LzAbjPjvjzwVdVasOPNTa0BgDsQ/4HSI7MpZO6
xl8e8v41nXTiwzubTquvS65FfOzExTY9vhoYibzvDwC4Vf+5uWNQx6crjUvX
zAPwBztizz+/u6T+9X3AhtYAgH3I/wDJefB4TI8Nfg/cc7spjksnPrz+4jPa
dfxWxMcqajr0Z9jTP5by+QF4m1v9k65Hozo+VdZ1ufLzAbjPjvzz58VX9Bwg
AMgm5H+A5JyrX6gNcbd7yO2mOC7V+BBv34uqa9368fYe6msAiMyt/onMS5T4
JPMUAfiTHfFn26E6X9QKAJBb3JpfDeSq7369qfd0mHnm/drFqcaHJ+PTevx0
9NzdiI9XN/Tox1s6B9NtIgCPcqtvMjk9q+PTz6dvu/LzAbjPjvgj/cU/flZu
Q2sAwD7kfoDkfPh1lSrYnbvrucfHx9Xz589Dt2V/wIGBgYjPTTU+PBqc0OOn
ssvtER+/1tKnH7/Z+jil8wPwPreuT0l8fO3TMrX7ROT1qwC8z47Ys+9kk+7r
+OF6IYDcQf4HSJzsV6XXNVVEXteU7ST3I3/zra2t+nZJSYm+vWrVKv1Valtb
pRofOh8u1M+QtXKRNLUv1Fetvf0opfMD8D43+yfs2wx4S29vrxoZWbzm3Inr
X1ZHzy3sdTo6MZ32uQDALuR/gMRdv9OX03kLcz29q6tLX+OW74PBhetSeXl5
qqCgYMnzUxFv/5y2+8P68Ys3HqR0fgDe52b/ZGHf5iuu/XwA9piZmQld51q+
fLlauXKlvt+p619WMgda+joyJxoAsgX5HyBxhytb9L/lQ6O5t2+59HECgYBa
sWKFzv/IdTDr3788Jjkgq1Tjg1nfdeNu5PVd3WZ/ndqulM4PwPvc7J/8e1dA
/eO7S679fAD2yM/PX9S3kbgyPDzs2PUvK7PXRUcve10AyB7kf4DErd9brf62
7azbzUhaZWVl6JrXsmXLdP5HDvnekNuSI7Iy84WSrcMRuLVQ3/lOV+Q90vqG
YtcHAgA3+yeb9l9Va74859rPB2APyfGYPI+sAZO4MjQ05Nj1L6uapoe6r9PU
HnmNGQC4gfwPkJjg3Jx6c3252nHkuttNSVp4HkeOjo6ORX//hYWFtl3/knk9
0ueReT6RjIxN6cePVUXeHwwA3NyfdMeRaypv4ylXfjYA+0n/RuKJ5HqcvP5l
1dDWr/s6dTlaMwCAN5H/ARIj83fl3/FTNZ1uNyVpsv5d6hyadfAyH8jU/zG1
oGVdWGlp6aLXpRofSi/d059V//DTiI+zvzLgTxKDDIlB5tq8uT5v5Wb/ZG9p
g/rD2rIlNUEA5BbT15E+jokz8nft1PUvq7YHC7UOL9yIvBcGALjBzetrQC6R
vI8X1nFL/UOZAy0aGxtDMcCsD7NKNTaUVC7seTH+dCbi48HgnH68uKwxpfMD
yC0y7pLxldTiMGTMZcZlci3exCXDzb6JqfU2MTnrWhsApK+oqEj3eyQPJHkf
iUVOXv+y6u0f13Gk4kpH2ucCALuQ+wESI+u+ZP2X5C68RPpDMjcoklTjw49l
TbrPEwxGv3b+xrqT6rtfb6Z0fgC5Q8ZaMr6SeCI5H0PWW0Tbe1m42T/5PbAw
h1FqlQHIXatXr16ylkv6PU5d/7IaNmvdz7emfS4AsAv5HyAxUvdZ6j/7Sarx
QfI6f/ysPOZz3tl0Wn1dci2l8wPIPXId3rrGQub8mPGX5Iec2H85VezbA3if
E9e/rKZnnuk4crCiOe1zAYBdyP8A8cl+7/JvuKwJ8JNU14d+eahevVd4JuZz
3v/irNpysDbVpgHIMeE1NmT+j6z5MvODrHODhB31V1N1tXlh357Ge/0Z/bkA
soNdMee1T8vUrhO3bDkXANiB/A8QX+3tR3oscP1On9tNyahU48OGH2vUB19V
xXzOh1+fV+uLr6R0fgC5Jzz/I3kfo76+PuL+O26R/Zol5teybw/gS3bFnz9t
Oq2+Yq4zgCxC/geI70BFsx4LjEWpZ+xVqcaHf30fUP/47lLM58jj8jwA/mDN
/5i9CM1+PFJ/I9L8H7d0PhzVMf9cPfv2AH5k17zDNdvPqY37rtrQIgCwB/kf
IL6CXQH14dex57N4UarxQc/tiVMrad0P1eqjovMpnR9A7gmv/yN7gZkxltQC
Ct8D3s3+Sf/wwprf0kC7a20A4B674s8n315U/97FtS4A2YP8DxCb1O/z615V
qcaHv2ytVFt/qov5nM0Hruqa2gD8S+qvylygSNyo+2M8nVqo23r4zB1Xfj4A
d9kVe+RamFwTA4Bs4Wb/CsgFcv1XxgF1PqwDkWpseOvzCrXzlxsxn7P9cL16
d/PplM4PwPvc7JtIXuoPa8vUD6WNrrUBgHvsij9f/Fyn/rwl9n4YAJBJ5H6A
6CanZ3XtPpm/a61V6hep5Idl3CT5sr2/xx43fXvshnpzfew94gH4l9v9k3c2
nlI7jl53tQ0A3GFX/NF9nc/o6wDIHm73r4Bsdqzqrs5l3Ljrr32/jFTiw8TU
rP7MDp1pifm8vaUN+vq6H/NqAOJzu39C3VbAv+yKPz+WNek+UTA4Z8v5ACBd
bvevgGw1/nRGvb3hlCrY7d+6fanEh8EnC3VTT1xsi/m8g6du6+dNzQRjPg+A
P7ndP/knexQCvmVX/Dly9o4v948FkL3c7l8B2Urmr8i/2U3tA243xTWpxIcH
j8f053aqpjPm846eW+gTjU5Mp9o8AB7mdn3Cjftq1Adf+W/fRwD2jY9+D9zT
fZ2+oQlbzgcA6SL/Ayz1ZHxavbW+XH1efMXtprgqlfjQdn9Y93Uu3ngQ83ml
lxb6RP3DT1NtHgAPc7t/InU7/vhZua5pBsBf7Mo/n63v1n2dzodPbGgVAKTP
7f4VkI32nVxYr916f9jtprgqlf5PQ1t/Qvulnb7aqZ8n84UAIJzb/RNZw7qQ
o550tR0AMs+u+HOlsVfHkeaOQVvOBwDpcrt/BWQbqV/zxrqTasvBWreb4rpU
4kPt7Ucv183F7utcuH5fP+/eg5FUmwfAw9zun1xtfqhj1M3Wx662A0Dm2RV/
JH5IHKlviX1NDAAyxe319UC22X3ilt6Xirm6qfV/zpu8Tk/svA7XxADE4nbf
5H7fqI5R5Vc6XG0HgMyzK/60vlwTf+lm7DXxAJApbvevgGwi9flef/Hv9Fcl
19xuSlZIJT7IWEn6Or394zGfd/1On37ejbt9qTYPgIe5fX1q5llQvba2TO0t
bXCtDQDcYVfsSXRPDADIFPI/wCs7f7mh+/s9/dSkEanEh1/Pt+q+zvDoVMzn
NXcM6OfVNPWm2jwAHpYN/ZM128+p9T7fBwDwI7viz9DopO7rHL/Qasv5ACBd
2dC/ArJB471+ve5L9nzBglTiw0+nbuu+zuT0s5jPk7o/8jypAwQA4bKhf1J4
4Kr6y5YzbjcDQIbZFX+kLyR9HekbAYARDAYXHcbk5KQaGBiI+jp5TJ5jFe01
kZ4rsqF/BbhN9nv/84s+/l+2VqrRiWm3m5M1Ull/see3Bp1He/78ecznmdoa
sg8YAITLhv7JgYrml/nsWbebAiCD7Fp/Kn0hmVcufSMAEBIXJL6sWLFCH6tX
r9b3l5SU6PtXrVqlv87Pz4deI99bH5PnRntNtOca2dC/AtwkfyMb913V/z5T
i3ixVOLDjiPX1dsbTsV9nuypLOOq0kB7Kk0D4HFu1/8RZ+u6EqpnD8Bb7Iw9
72w8pXYcvW7b+QDktpGREbVy5cpF95mckJkLlJeXpwoKCkKPFxYW6vuEye+Y
r+GvifRc63V5t/tWgNtOXGzT/ftfqu663RRHyd9/+DxAiQWR5h4aqcSHLQdr
1ftfVMZ9nsy5ks/96Dlvf+4AXpmZmVl0O9Y852zon9zuHNRxKnCrx+2mAMgg
O+PP37adVZv3X7XtfAByW29vb+galxyVlZU6J2SNO4FAIJTDEZIvam19VUdM
ntvX1xfxNZGea+1/ZUP/CnDL3e6hF337Ml3fc34+9nqlXCbjK/lbl/mF8jU/
P1/fL/lhM/9w2bJlOh5ZpRIf1v1QrT4qOh/3eVMzQT2uOsiaeMDzJL8s16RM
7BGx5jmLbOifjIxN6Th15Owdt5sCIIPsjD9//+aiKtgdsO18AHKb5GnM3B7J
00i86ezs1GMxo6urS/ePDHmO3GfIc5uamiK+JtJzx8fHF53LegB+Mf50Rr3/
xVn17ubTangs9l5VuU7GXJJbFpL/NX/rEiNi1RhLJSZ8kmA/R/JtMq7a+3tj
0j8DQO6QeYaSY5Z4Ijlnc1+sec4iW/oksp71q5JrbjcDQAbZGX/kuphca/zT
ptMcHBwePIrLkhvLhNdIlXgzOjq6KO5If8naL5KxXH19fej1pg8V6TWRnmu9
xpYt/Ssg07b+VKfrFN9sfex2UzJG8s0yJ9DUGZN8sMn9yvjMjuvva748pzYl
OM/5zc/K2W8N8ImioqJQXybePGeRLf2Tf+8KqI93XnC7GQAyyM74I3UGJIfM
wcHhzSPZvWzk+nt4f8jU6THrtmRcVlpaGnqN9KHMXB+zfszkdsJfE+m5VtnS
vwIyqfxKh5578vNpf609Ki4uDq31EhJ/JC6Y6/Pm2ryRyvxAyYNLLEyEzL3a
frg+uTcBICdZr2XJvORY85xFtsxPlhz1Hz8rX5IfB+BdjI8AOMXkfMxh8jyN
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
8y+OuYVjbk7Nzz8PraUCvCJa/0fGerL/lx3k7/ovWys5ODhy/Nhf3mRLTDAY
fwFwC/EHgFcR3wBEQ3wA4BbiDwC3EH8AeJXX41swuHSd1OTkpBoYGHCpRc6R
9xT+vuT99/b2em5ukvkdhr+vkZERfXiR/C5nZmYW3Xb6d+v1+AAge1F/A4Bb
iD18BoLPgM9A8BnkDhkrL1u2TLW2tobuKykp0b/DVatW6a9eyYusWLFCLV++
XK1cuVK/L8kNSH5Evl+9erX+KrkCLygtLV30vurr6/X98juVz0A+C/nea+S9
FhQU6O8z9bsl3gFwC/GHz0DwGfAZiEx/Bqn8PF7Da3gNr4F7ZHwsuQD5fXV1
den7ZB6QyY2IvLy80Hg6l8n7s/53KTkgyZFI7quxsVHfJ1+98t+uvA8zD6ay
slL/HiX/YX1/1t+7F8h7lPdUWFiob2fqd+uV/2bSwWfAZyD4DBh/8Rpew2ty
6zXpyOb3xWt4Da/J/tfAPTJONnkAWRdk/f0FAgE9rs51kteS9VBCclsm92HN
dUm+xGv/7RYXF+v3JDkgmdeVn58fekzmxZh5QbnO5Ljk/Zp8ZaZ+t6msv8jm
WMxreA2vyexr0pHN74vX8Bpek/2vSfS8HBwcHHYfcI81/yNf5bYht720Tkjy
BPLfm+RBZF2bfG/Wt5nbXiK5EPl9yvuV761zueR7mQOV68bHx0O/N5n7I+8r
k7/bVM7La3gNr+E1yZ6Xg4ODw+4j3bgEAMg91vxP+DjZjKe9wNSBsdZ/lvdu
1kmFr4/KZUVFRaHvTX5EajzJZ2BYf++5TP77lPcn78f0Z+T92/27dbuPxsHB
4c0j3bgEAG4g/gBAbrLmAUz9H1MPWuoEe2GOiKkFLPkAeY9mXZDUPzL5LVk7
JHWBvEDeq6l3LGv45Lb5DOS9mzyfF/YBk/cia/vkfckaMDnkd5yp3y39HwBu
If4AcAvxBwByk4yTrfNATK1cObySDzH7YVkPec+SN7De55W9zsLfr6mDbObK
yCE5Ea+ReT+m/rNXf7cAYDD+AuAWv8YfU0/USq6neuGaaiLkeqtcYw7/HPz0
GciYQq6rh38Gctu6zsQP5L8Hs97C3Jb/Phh35R4zp8IvvPhe5Xdo/Xs05L5I
93uVF3+3ACAYf73ip7EH4y/GX1aMvzJD5pabufTWz1bqpMq1dFkz4aWaqZHI
+hB5/6amhqk34afPwPw3YD4Ds7eO7LMjt+X9++m6s7xXs94i/LMxa1EAALmP
8RfjL8ZfrzD+ygzGX4y/BOOvxRh/ZYbMrTe1Js1/W+H1Jc36Aq+yrikw8+z9
9hlIvJH9hITZX9jUTzH1RaQWhVfq58Yi71Pet1l7IX8f5r8Ps54IAJDbGH8x
/hKMvxZj/JUZjL8YfwnGX68w/so8a/yRf/PMv39C4n59fb1bTXOc9XqP1JGQ
z8Jvn4Eh9VWlToq8X7nuZ/1bk8fkb9PLJAbLe5T/DkystcZgE5sBALmN8Rfj
L8H46xXGX5nH+GsB4y/GX4y/Msv8O2fij3zu1n/n5Hsv7JsTi/z3Jde5zD4y
fvwMhPzdyedg9lGSr4bc9vJ1QLO3tDB7hZu9hczfRvie4gCA3Mb4awHjL8Zf
jL8yi/EX4y+D8Rfjr0wLjz8yH1j+/TOseyp7kfl33hpv/PYZSH/P2g80/+Zb
/9bM36RXmf2EzPVgMxdebpu18OHXRQEAuYvxF+Mvg/EX469MY/zF+IvxF+Mv
t4THH7PeV/77M/HeyzUAZY27WfMu79fUAfTTZyB9HvMZmH7A3Nyc/iqx2DzH
y31As0+U/M7lGpgc8rch/32YuCv9Q6/sIw4Afsf4i/EX4y/GX25h/MX4i/EX
4y+3hMcfYf4tkEM+cy8z79Mc5pqPnz4D8++69d99YdZ7y+Gnvzt5/2b9u6mJ
YA6/1IAEAK9j/MX4i/EX4y+3MP5i/MX4azHGX+6TnL91D0g/8ttnIO81/O/L
9Av8js8AALyF8RfjL8ZfizH+cp/fxh6R+O0zYPwVHZ8BAAAAnOS3sUckfvsM
GH9Fx2cAAAAAAAAAAAAAAAAAAACyEbXtAbiF+APALcQfAG4h/gBwC/EHgFuI
PwDcQvwB4BbiDwC3EH8AuMXssQEAmUb8AeAW4g8AtxB7ALiF+APALcQfAG4h
/gBwC/EHgFuIPwDcQvwB4BbiDwC3EH8AuIX4A8AtxB8AbiH+AHAL8QeAW4g/
ANxC/AHgFuIPALcQfwC4hfgDwC3EHwBuIf4AcAv15wG4hfgDwC3R4s/vgXvq
+IVWF1oEwC+IPwDcYufY69M9l/UBAIkg9wPALdHiz/riK+q/dpzPbGMA+Eqs
+PPh11UZbg0AP7Fr/DU980y99mmZemfTaVvOB8D7yP8AcEu0+PPloXr1XuGZ
DLcGgJ8QfwC4xa7x152uIfXapyfVG+tO2nI+AN5H/geAW6LFn++P31R//Kw8
w60B4Cex4g9jKQBOsmv8dbK6Xed/5Jifn7flnAC8jfwPALdEiz8HKpp1X2Z2
di7DLQLgF/Hij6yrAAAn2DX+2nHkWij/Mzk9a8s5AXgb+R8AbokWf34936r7
MiNjUxluEQC/iBd/hkeJPwCcYdf4a82X50L5H/pMABLB/l8A3BIt/pyq6dR9
mZ7+MRdaBcAP4sWfB4+JPwCcYcfYa2xiJlT7R772DU3Y0DIAXkfuB4BbosWf
Szcf6L5M6/3hDLcIgF/Eiz93u4cy3CIAfmHH+OvG3cc6Vn22t1p/7X40akPL
AHgd+R8AbokWf67d6dN9mZutjzPcIgB+ES/+3Ljbl+EWAfALO8Zfx6ru6lj1
y8uvbVwzA5AA8j8A3BIt/rS83M+0uqEnwy0C4Bfx4k/gFvEHgDPsGH9tOVir
3t18WtXefqRjVlP7oA0tA+B15H8AuCVa/LnfN6r7MpW1XZltEADfiBd/Tl/t
zHCLAPiFHfVXJfcjOSCZKy0x61oLcxYBxEf+B4BbosWfwSeTui9z4mJbhlsE
wC/ixZ/jF4g/AJyR7virf3ghTskasJbOQeZMA0gY+38BcEu0+DM5/Uz3ZX4+
fduFVgHwg3jx56dTxB8Azkh37HWlsTdUJ7G9Z0R/X3Wt26bWAcgVwWBw0WFM
Tk6qgYGBiK8h9wPALr29vWpkZCR0+/nz5xFjkhEt/sjrXltbpvb81uBYWwF4
i93xZ/eJW461FYC/pTv+OljRrHM+Y09nVE//mP6+oqbDptYByAXSX5FYsmLF
Cn2sXr1a319SUqLvX7Vqlf46Pz+/6HXkfwCka2ZmJhRnli9frlauXKnvLyws
DMWlZcuW6fGZVaz486dNp9XXJdccbTeA3OdU/Nl+uN7RdgPwr3THX+t+qFZr
tp/T3w+MsGYe8CO55mX6PIbJCZnrXnl5eaqgoGDRc8j/AEhXfn6+ji+GxBWJ
STIeizb30Dwv6jm3V6mN+67a2k4A3uNU/NnwY42t7QQAI53xV3BuTr21vlzt
OHJd35Y5QJL/OXL2jl3NA5AD5LqWWcsuR2Vlpe7/WONLIBBY1EcS5H8ApMu6
vsLEIplrKNfcTUySa/DJzD/81/cBfQBALE7Fn39+d8nRdgPwr3TGX92PFvYo
LK9u17enZ4P69oGKZruaByAHSG7HzO1pbW3VcaWzs1P3f4yuri59PczKmjMi
FwQgHRKDJI5IPBISb2Q8JnMRZfwl6zGsYsWfjftq1AdfVWWs7QBym93xR+YA
AYAT0hlzSZ1nyffc7R7St3XNshe3qZkI+Iv87VtJXBkdHV0UX6Tvw/ovAHaz
1h+z1lm1xqX6+vqI+edoviq5pt7dfNr+xgLwFKfij9QAAgAnpDP+kjzPa5+W
6Xk/xlufV6idv9ywo2kAcoT0a0xux6z7krnO8lXmAwnpG5WWli56HfkfAOkq
KirSdVdlvCVxR8ZgpiarGY9JfbJI19+jkb13Xv/0pKPtBpD7nIo/Mr4CACek
M/765JuL+rB6r/CM2naoLt1mAcghJudjDpPnaWxsDN0XXh9akP8BkC7ZbzB8
LYWMw6Quq7kta1HD92COFX9+OnVbz2eemlm6bzMAGE7Gn8npWaebD8CHUq27
sVDrp2zJWq81X55Tm/azZwbgR3LNK3wtmPSDJicnIz6f/A8AJ0n8kbgUSaz4
I/uYyvhraDRy7AKAeNKNP4NPiD8A7Jfq+OtO15COTVIDyOrjnRfUp3su29E0
AB5H/geAW2LFnzO1nbqPc79vNIMtAuAXicSfbuIPAAekOv46Wd2+EJseLY5N
BbsC6pNvL0Z5FQC8wr5fANwSK/5cbujRfRy51gUAdksk/rQQfwA4INWx144j
19Rb68vV/PzitR4bfrzCnqkAEkLuB4BbYsWfG3cf6/HX9Tt9GWwRAL9IJP5c
ayH+ALBfquOvNdvPqXU/VC+5f+tPteqvWyvTbRYAHyD/A8AtseLP3e6FNe6B
Wz0ZbBEAv0gk/ly6+SCDLQLgF6mMv8YmZnRcOnjq9pLHZF5Q3sZTdjQNgMeR
/wHglljxp6d/TPdzTl/tzGCLAPhFIvGnoqYjgy0C4BepjL9uti7MS7zS2Lvk
sV3Hb6k31p20o2kAPI78DwC3xIo/w2NTup/z6/nWDLYIgF8kEn+OEX8AOCCV
8dexqrs6LvUPL92XcN/JJv1YMDhvR/MAeBj5HwBuiRV/pmeDC/OcK5oz2CIA
fpFI/DlA/AHggFTGX1sO1qp3N5+O+NihMy06Zk1MzabbNAAex/5fANwSL/68
/qIvI3OaAcBuicSf74/fzGCLAPhFKmMvyf1IDigSmSst+Z/h0al0mwbA48j9
AHBLvPjzXuEZtf1wfYZaA8BPEok/2w7VZag1APwk2evvsuZLr0mtuhvx8ZPV
7frxR4PjdjURgEeR/wHglnjx58Ovq9SGH69kqDUA/CSR+LO+mPgDwH7Jjr+k
5rPkd6QGdCSVdV368a6HT+xoHgAPI/8DwC3x4k/BroD6x3eXMtQaAH6SSPz5
5NuLGWoNAD9JdvwltRAlvyN7wEdy6eYD/fjd7iE7mgfAw8j/AHBLvPizef9V
tebLcxlqDQA/SST+/E/iDwAHJDv+WvdDtVqzPXo8qm1+qPM/Dff6020aAI8j
/wPALfHiz44j19Q7G09lqDUA/CSR+JNH/AHggGTGX/Pzz9Vb68tfxKTrUZ9z
q61f53/qbj+yo3kAPIz9vwC4JV78+aG0Ub22tkw9f/48g60C4AfEHwBuSWbs
1f1oVOd2yqvboz7nTteQfk7gVo8dzQPgYeR+ALglXvw5dKZF92cmp59lqEUA
/CLR+PN0ivgDwF7JjL+qrnXrWCQ5nmg6Hy7kiM7V37ejeQA8jPwPALfEiz+l
l+7p/szAyGSGWgTALxKNP/3DTzPUIgC5aH5+Xg0MDKjJycV9Fbkt90eSzPhr
z28NL2JRmZqeDUZ9Tu/A+MIcoSsdCZ8XgD+R/wHglnjx56zZz/TRaIZaBMAv
Eo4/7KcMIArJ70gsWb16tf6an5+v7y8pKdG3V61apb9KjsgqmfHXJ99c1Ecs
g08mdbw6fqEt+TcBwFfI/wBwS7z4c6WxV/dnbncOZqhFAPwi0fjT3EH8ARCZ
5HsqKyv19zMzMzquSM0w+RoMLszXycvLUwUFBYtel+j4S+b8yNwfmQMUy8Tk
rI5Xhytbkn8TAHyF+s8A3BIv/pj9LOpb2M8CgL0SjT/spwMgnkAgoFauXKnn
AY2MjCyKLfKY5ICsEh17mbrOUgMolplnQf28/eVNyTcegK+Q+wHglnjxp+3B
sO7PXLzxIEMtAuAXicafC9eppwogtuLiYrVixQq1bNky1dXVpb8aclvWgVmZ
/HO8PPTJ6nYdh7oTWAf/h7VlaveJW6m/CQA5a3x8fNF+pXbVHwOAWHp7e/V1
L6t04s/Dl/UMK6hnCCAOp+JPrD2XAfib1Pmx1n02676s8aWwsDDl9V87jlxX
b60vV8G5ubjPfXtDhSo6ej2xhgPwDMn9SExpbW3Vt+2sPwYAkZg17xJnli9f
rudAi3Tjz5PxaT3++qXqrmNtB5DbnI4/R88RfwBEJnN+ioqK9PdmDDY3N7do
LCbPKS0tXfS6RMdfa7afU+t+qE7ouX/ZckZ98XNdEq0H4AVmHqHMNbSz/hgA
RCP1D61r2yWuDA8Ppx1/WM8OIB6n48++k8QfAJHJvEPrOi6TC2psbAzdZ3LS
VomMv8aezugYdLCiOaG25G+vUhv31ST3BgDkNLnGJTXGJM8s+R87648BQDQy
xjLjLNMXGhoasiX+vPlZufru15v2NhiAZzgdf749dsPeBgPwHJmHGD7HUG5b
14ZZJRJ/brY+1vkf2YswEX//5qJau/tyQs8FkPtk70GTXza1x+ysPwYA8cj1
dYkjMtayK/7IfOZtzGcGEIdT8WfrT8QfAPZKZMx1rOquzv/0D0fOIYWT3I/k
gAD4Q3g/Ro6Ojg7b6o8BQDRmranMPTTX4eW6lx3x56Md59X6vYmtfQfgP07H
n0RrbwBAohKJP1sO1qp3N59O+Jyy9kvWgAHwB5l3KHMMTR1EmQ9k+kR21B8D
gGhkvbvUXZWYI+MuGYPZFX/W7rmsPuF6FoAonI4/H++84Ei7AfhXIvFHcj+S
A0qU1H6WOYsA/Ef6QbIGXthRfwwAYlm9evWS+YcyDrMj/kjf52/bzjrRbAAe
4HT8ef8L4g8Ae8WLP7LmS9Z+HUti/1PZ+132gAeAdOuPAUCq0o0/O+nPAEiR
HfHnPz8n/gCwV7z4U9PUq/M/UgM6UbtP3FKvv3gNAMRC/geAWxKJP8W/N6o/
rC17MY57noEWAfCLROOPjMGIPwDsFG/fnYOnbuvYMzYxk/A595c36dfMPAva
0UQAHsW+XwDckkj8Kam8o/szE5OzGWoVAD9IJv6MPU18DAYA8cSLPVJ3fs2X
55I65+HKFvpLAOIi9wPALYnEn7LL7UntfwoAiUgm/vQNTWSgRQD8Ilb8kfmG
b60vVzuOXEvqnMcvtOl4NfiE/hKA6Mj/AHBLIvGn6lq37s90PhzNQIsA+EUy
8aejdyQDLQLgF7HiT/ejUR13Tla3J3XO8isd+nW9A+PpNg+Ah5H/AeCWROJP
7e1Huj/T1D6QgRYB8Ivk4s9gBloEwC9ixR+Td77TNZTUOc/V3+d6GYC4yP8A
cEsi8afxXr/uz9Q2P8xAiwD4RVLx5/ajDLQIgF/Eij97fmt4EXfK1PTMs6TO
GbjVk1LeCIC/UP8ZgFsSiT/tPSO6P3P++v0MtQqAHyQTf+R6PADYJVbs+eSb
i/pIVt3L+Yq32vrTaRoAjyP3A8AticQfqbuayjp4AIglmfgjdaABwC7R4s/0
bFDP/ZE5QMlqYL40gASQ/wHglkTij+y7LP2ZI2fvZKBFAPyC+APALdHiz93u
oZTnHJrXXrr5IN3mAfAw8j8A3JJI/AkG53R/5seypgy0CIBfJBN/issaM9Ai
AH4RLf6UV7frmNP1KPkazl0Pn+jXnq3rSrN1ALyM/A8AtyQaf976vEJ988sN
h1sDwE+SiT87iT8AbBSt/tiOI9fVm+vLVXBuLulzPhocZ708gLjI/wBwS6Lx
5/0vKtXWn2odbg0AP0km/mw5SPwBYJ9o8Wd98RW17ofqlM45PDql8z+/nm9N
p2kAPI79vwC4JdH48/HOCyn3hwAgkmTiz9o9lzPQIgB+ESv2zD4LpnTOialZ
nf85dKYl1WYB8AFyPwDckmj8kdyPjMEAwC7JxJ+Pis472xgAvuLE+CsYnNf5
n30nqZcIIDryPwDckmj82fpTnfrr1kqHWwPAT5KJP38h/gCwkVPjL9k7ftfx
W46cG4A3kP8B4JZE48+3x26ot9aXO9waAH6STPx5k/gDwEZOjb/yNp5SO45c
c+TcALyB/A8AtyQaf2Qus8xplr2YAcAOycefeYdbBMAvnBp/yVxp9ssAEAv5
HwBuSTT+HD13R4+/xiZmHG4RAL9INv48GZ92uEUA/MKp8dcHX1WpDT9eceTc
ALyB/b8AuCXR+FNe3a7HX48GJzLQKgB+kGz8eTgwnoFWAfADp8Zen3x7URXs
CjhybgDeQO4HgFsSjT8Xrt/X4697PSMOtwiAXyQdfx4QfwDYw6nx16d7LrNf
KuAj8/PzamBgQE1OTi66X27L/ZGQ/wFgp5mZV2u0nj9/roLBYOgIl2j8qbv9
SI+/Gu7129ZOAN7jaPxpI/4AsIdT6y827b+q1nx5zvbzAsg+kt+ROLJ69Wr9
NT8/X99fUlKib69atUp/lRyRFfkfAHaQ8VVBQUEo9ojCwkIdY1asWKGWLVum
ent7F70m0fjT3DGgx181TQ9tbTMAb8hE/LnS2Bv/yQCQAKfGX9sO1an3Cs84
cm4A2UX6PJWVlfp7uf4lcUWufclXc90rLy9P94+syP8ASJfEGhljSTyRMZch
eedocw9FovGn8+ETPf46V38/7bYC8JZMxZ+zdV3pNhUANKfGXzt/uaHe+rzC
kXMDyE6BQECtXLlSzwMaGRlZFF/kMckBWZH/AWCXoqKiRTlmueZu5jjL+CzV
+Yf9w0/1+Ov3wD07mwvAQ5yOP6WXiD8A7OHU+GvPbw3qtbVljpwbQHYqLi4O
zXXu6urSXw25LdfDrEzfiH3AAKRLrr1bx18Sb2TNhbk+b702LxKNP0+nnunx
1+HKFqeaDiDHOR5/ztxxqukAfMapMdeBimYdr6Znl9Y8A+AtUufHWvfZrPuy
xpfwvpF5HgDYITzGyLjLqK+vj5h/TsT8/HP1h7Vlau/vjba0E4D3OB5/Shts
aScAODX+OnL2js7/jD2dif9kADlNrm3J3GcxPj6u48rc3Jz+2traGnpOaWnp
oteR/wFgF+v4y9QhM/XHZF1qpOvviXp7wylVdPS6bW0F4C1Ox58dR4g/AOzh
1PjrxMU2nf8ZGJmM/2QAOU3mOFvnMZtcUGNjY+g+6f+EI/8DwC7h9TekLr2J
P7IWNXwP5mTiz9+2nVWFB67a1VQAHuN0/Nm8n/gDwB5Ojb8qajp0/qenf8yR
8wPIPnLNK7zGody2rg2zIv8DwEkSfyQuRZJM/Pnkm4tq7e7LdjULgA/YGX8K
dgXsahYAn3Nq/FV1rVvnf9p7Rhw5P4DcF63uYfmVDrW/vImDg4MjdFxu6MlI
/IlkffEV9dGO87b+fAD+lWz8+fDr8842CIBvOJX/qX7RT5P8T0vnoCPnB5D7
osUfuc4u8YODg4PDHN/9ejMj8SeSbYfq1J+3nLH15wPwr2Tjz3uFxB8A9nAq
/3OtpU/31262Pnbk/AByX7T4EwzOq5lnQQ4ODo7QEQzOZST+RCK5pz9+Vm7r
zwfgX8nGnzfWnXSwNQD8JJn5h8loah/U+Z/a249sPzcAb6D+DwC3JBN/DpQ3
6z6N5KEAIF2pxJ/pWeIPgPQ5Nf5quz+sY9XFGw8cOT+A3Ef+B4Bbkok/x6ru
6j7Nk/FpB1sEwC9SiT/DY1MOtgiAXzg1/up+NKpjVWVtlyPnB5D7yP8AcEsy
8cfsado7MO5giwD4RSrxhz2VAdjBqfFX39CEjlVll9sdOT+A3OfU+lMAiCeZ
+HPp5gPdp5G5zQCQrlTiTyvxB4ANnBp7jYxN6VglcxYBIBJyPwDckkz8YU8L
AHYi/gBwi1Pjr8npWR2rfj5925HzA8h95H8AuCWZ+NPSubCnRXVjr4MtAuAX
qcSfyw09DrYIQK7q7e1VIyMjodvPnz9XwWAwdIRzavwl+7RKrCoua3Tk/ABy
H/kfAG5JJv6EahrWdTnXIAC+kUr8OVPb6WCLAOSamZkZHUtWrVqlli9frlau
XKnvLyws1PevWLFCLVu2TOeHrJwcf72x7qT67tebjp0fQG4j/wPALcnEn8En
k3r89dulNgdbBMAvUok/Jy4SfwC8kp+fr/Ly8kK3Ja7IPCDJBw0MDER9nZPj
r3c2nVZfl1xz7PwAchv5HwBuSSb+sKYdgJ2IPwDSZV3fJXN8JK7Mz8/rOT+m
xrzMAZL7rJwcf73/xVm15WCtY+cHkNvY/wuAW5KJP7KW/rW1ZWrPbw0OtwqA
HxB/ANiloKBAx5NAIKBvy/wfyQdJ7JD8j6wHszLxx4lx2Idfn1fri6/Yek4A
3kHuB4Bbko0/Mqd5x9HrDrUGgJ+kEn9YUwHASvI7Zo6Ptc6z3G/U19frfJCV
k+Ovf3x3Sf3r+4Bj5weQ28j/AHBLsvFnzfZzatP+qw61BoCfpBJ/Nu6rcag1
AHJRUVGRrvss+R5Z4yU5IFMT2uSDpCZ0pPk/Tln3Q7X6qOi8Y+cHkNvI/wBw
S7LxR65p/XsX17QApC+V+MM1dQBWq1evXrKWS/JAUhfa3JZaQOF7wDs5/tp8
4Kr627azjp0fQG4j/wPALcnGnw0/1qgPv65yqDUA/CSV+PPBV8QfAImRPJDM
BYrEyfHX9sP16t3Npx07P4DcRv1nAG5JNv7QpwFgl/+/vTtfj+I6Ewd8C7oE
7kB3wBVwA/wRT8aZaH5ZZomSmck68u5EduwkyEscx8SON3mPzGIjm8UyZjNg
BNjILMJGbAJkEAiEhVQ/n8OU3BICtNTpUne/7/PU0+qlqk4X0sf5vjp1SvwB
ypIy93ri9V3ZnfetSbZ9oLap/QBlmWv8eeqtT7Lv3rM6UWuARjKf+HPH3asS
tQZoJCnzr2e69mTfuWvVlDmogfoV7jU4NDQ05bWRkZFscHBwxs+r/wBFmj7W
ucj48/w7+7/Jv1ZnV0a/nnf7gPpVjfgzckX8ARYmZf6Vx6rLo2O3/zBQs/K5
5sP9BcM89GGu+aCzs3Py9XxOskrqP0ARwtyGbW1tcc7DXNHx582NfbFPc+78
5ULaDNSHasafM1+NFNJmoHGlzL9eff+zGKvOX7ySbB9A+UKfp6WlZfJ5iCvn
zp2bcv/B8H7oH1VS/wEWKowxbm5ujvEkv8dpeK3o+PPu1iOxT/PlqQuFtBuo
fdWOP1+cPF9Iu4HGlTL/6vrgYIxVp89dSrYPoHyhj5P3c8I1YCGunD17dkp8
6enpmVIjCtR/gKJ0dHRM5ljhOtSi40/PJ8din+bA0bMLbitQX6oVfz7rF3+A
hUl5/x3nyqCxhL5PiCehr9Pf3581NTVNvheeh3HQlfL44z5gwEKFc+95/pUi
/uw6cDL2acIjQKVqxZ+2p3qyh1/YbrFYGmhZ89HhQuNVypxr484vYqw6+OXQ
7T8M1Kx8rHMYA52PAwrXulfGl8q+UU7NByhKZYxJEX+Onjgf+zRrtxTbDwNq
X+r4E3KpHz/cbbFYGnB5bs3ehYaoBcWfufiodyD2lfYdPpNsH0D5wrjnMO9z
qAOFfk+oAeU1ob6+vviZUBvq6uqasp76D1CUyhwrRfwZG7sW7//+5Bu7C2kv
UD9Sxx+AoqSMPzs/M1YaGsHy5ctvGMsc6kC9vb2Tz/N7glXS/wGKUjn/RpAi
/vz6yQ+yXz6+aSHNBOpQNeIPQBFSxp99hwdj/WfL3oFk+wAWt1AHGhmZ+X6l
+j9ASkXHn6fe+iSOARobG7/9h4GGpv8DLEYp40+4VjXUf8I8QADT6f8AZZlP
/Mnva3Hk+FcJWgQ0Cv0foCwp488XJ6/PlRj6SwDTue8XUJb5xJ9w73fntYCF
0v8BypIy9pw+NxL7SV09h5LtA6hd+j5AWeYTf0aufJ19565V2bOri70XB9BY
9H+AsqSMP18NX4n1n1ffP5BsH0Dt0v8ByjLf+PPTP67P7vnr5oJbAzQS/R+g
LCnjz+XRsVj/ef6d/cn2AdQu/R+gLPONPyte3Zl9/4G18R7PAPOh/wOUJWX8
GR+fiPWfZ97uTbYPoHbp/wBlmW/8+ccHn8e+zYkzFwtuEdAo9H+AsqSef+zO
e9dkT7y+K9n2gdql/wOUZb7xZ3ffqVj/2bL3eMEtAhqF/g9QltTx5we/ezf7
w8s7ku4DqE3ufwGUZb7xJ5/bsLP7swStAhqB/g9QltSx5z8eeS/73d+3Jt0H
UJv0fYCyLCT+/OihdVm7vg0wT/o/QFlSx5//XrEhu/cZ98kAbqT/A5RlIfEn
1H5+/NC6AlsDNBL9H6AsqePPb/7ck/36yQ+S7gOoTfo/QFkWEn9e7v40XgMW
rgUDmCv9H6AsqePPfc9szv5rxYak+wBqk/4PUJaFxJ8w93Oo/4S5oAHmSv8H
KEvq+PPQ89uyf//9e0n3AdQm8x8CZVlI/An3fg/1n3AveIC50v8BypI69vyx
8+Ps//323aT7AGqTvg9QloXEn/Hx8exf7l+brXh1Z4EtAhqF/g9QltTx58k3
dmf/fO+apPsAapP+D1CWhcafe/66OfvpH9cX1Bqgkej/AGVJHX9Wvt0bx0iP
j08k3Q9Qe/R/gLIsNP78bdXe7Dt3rcpGrnxdUIuARqH/A5Ql9fWnL767P9Z/
Rq5cTbYPoDbp/wBlWWj82bDzi9i/OXD0bEEtAhqF/g9QltTx57X1B9wjFZiR
/g9QloXGnyPHz8f+zbtbjxTUIqBR6P8AZUkdf97uORj7RyfPXky6H6D2uP8F
UJaFxp+rX49l//RN/+aptz4psFVAI9D/AcqSOvas23Yk1n+OnjyfdD9A7dH3
AcpSRPz5xeObsl89+UEBrQEaif4PUJbU8WfTri9j/efzL84l3Q+wOIyOjk55
PjIykg0ODs74Wf0fIJWxsbEpy3RFxJ9wj9Pv3rP6m+1fW/C2gPpRjfgDMB+p
48+Wvcdj/WfvoZnzP6A+hP5NW1tb1traOvlaZ2dnjDHLli2Lj+Pj41PW0f8B
UpiYmIjxpbm5OS7Lly+/4TNFxJ+1Hx2+Psb5hDHOwHXVij8A85E6/uw6cCr2
jT7+7GTS/QDlCX2d0McJ8aS9vX3ytfA8P+/V0tIS60OV9H+AFIaGhrKlS5fe
8jNFxJ/9R87EPk4Y6wwQVCv+AMxH6viT94029w4k3Q9Qvo6OjskaT+j/VMaX
np6eWAOqpP8DpDAwMDA5v2pYuru7b/hMEfHn4uWrsY/z9zX7FrwtoD5UK/4A
zEfq+HPo2FDsG63/+GjS/QDlC2N/8vpPf39/1tTUNPleeB6uA6tU2T/SFwKK
EurNeSzq6+uL8SWMSaxUVPz5yaPvZ/c9s3khzQXqSDXjD8BcpY45X566EOs/
72w5knQ/QPkq6z9hrp/K+FL5Xk6fB0hhplxreHj4hteK8IeXd2QtD75zwz6B
xlTN+AMwV6nrzqeHLsX6zz8++DzZPoDFobLGk8//E859BWF+oK6urimf1/8B
UghjDadfizpTTlaENzb0xX7O6XMjhWwPqG3VjD8Ac5U6/ly4OBr7Ra+891nS
/QDlq5z/J+jt7Z2sMc80F6L+D5BCnnPly/Tac1BU/Nn52cnYz9m273gh2wNq
WzXjD8BcpY4/V66OXZ8bca25EaERhevARkZmPi+u/wOkNDo6etPrsoqKP2fP
j8R+zqvvO88FfKsa8QdgrlLHnxD3vnPXquyvXb1J9wPUHvMeAmUpMv784Hfv
Zr9+8oPsvR1HLRZLHS77Dp8pJFbk9H+AslQj9nzvvjXZ46/tSr4foLbo+wBl
KTL+PPjs1jgGyGKx1Ofy5Bu7C4sXgf4PUJZqxJ8ftq/LHn1pR/L9ALVF/wco
S5HxZ3BoJDty/CuLxVKnS/gbL5L+D1CWasSfnzz6fvbb57Ym3w9QW/R/gLKI
P0BZxB+gKAMDA3He+Uph7tXBwcEZP1+N+PM/HRuze/66Ofl+gNqi/wOURfwB
yiL+AAsV5pgPsWTZsmXZkiVLJu+13NnZOfl6eAz34qlUjfjzv0/1ZL96YlPy
/QC1Rf8HKIv4A5RF/AEWqrW1NWtpaZl8HuLKuXPn4uPY2Fh8Lbzf1tY2Zb1q
xJ/7V36U/exP65PvB6gt7n8BlEX8Acoi/gALFWo8eZ0nXAMWYsrZs2enxJae
np4pNaKgGrHn4Re2Zf/2cHfy/QC1Rd8HKIv4A5RF/AGKEsb3hJgSaj39/f1Z
U1PT5HvhebgOrFJef05Zh17x6s7sXx98J8m2gdql/wOURfwByiL+AAs1MTER
Y0lzc/PkOKAw109lfGlvby/l+q8/v7k7++49q5PvB6gt+j9AWcQfoCziD7BQ
HR0dcd7nUAcKdZ9QA8prQn19ffEzoTbU1dU1Zb1qxJ+/rdqb3XH36m/adC35
voDaof8DlEX8Acoi/gALtXz58huu5Qp1oN7e3snn+T3BKlUj/ry07tNY/7l4
+WryfQG1Q/8HKIv4A5RF/AFSCnWgkZGRGd+rRvx5fUNfrP+cu3A5+b6A2uH+
F0BZxB+gLOIPUJZqxJ5VHx6K9Z8TZy4m3xdQO/R9gLKIP0BZxB+gLNWIP93b
+2P9p//E+eT7AmqH/g9QFvEHKIv4A5SlGvHng91fxvrPgaNnk+8LqB36P0BZ
xB+gLOIPUJZqxJ+t+47H+k/vwdPJ9wXUDv0foCziD1AW8QcoSzXiz+6+U7H+
s+PTE8n3BdQO/R+gLOIPUBbxByhLNeaf/7T/bKz//PrJD7KHX9husVhqdFnz
0eFCY4P7XwBlEX+Asog/QFmqEXuOnjif/fjhbovFUuPLc2v2Fhob9H2Asog/
QFnEH6As4g9QFvHHMQgcA8cgqPYxcMwdg8AxcAwC8af6HAPHIHAMxB+gccwn
/ljHOtaxThEW8/eyjnWss/jXWYjF/L2sYx3rLP51FkL9ByjLYo6r1rGOdRb/
OguxmL+XdaxjncW/zkIs5u9lHetYZ/GvsxDqP45B4Bg4BkGqYxC2a7FYLEUv
4o/FYilrEX8sFktZy0LMZ33rWMc61ilCtfcHkBN/gLKIP0BZFnNeaR3rWGfx
r7MQ+j9AWcQfoCziD5Ba2WOULBZLfS4LjUsAZRB/gLKIP0BZxB+gLI0af0ZG
Rm54bWhoKC6NYGxsLBsYGLjhODTSMRgfH88GBwdvOAbheXi9kYTfh9HR0SnP
w+9HOEYpiT/faqS/PfFH/Kkk/lSX+CP+iD/fKiv+AFAdExMT8f+20O+rjO3L
li3LlixZkjU3N8ef61lfX1/8/suXL4+PHR0d8fVGOgb570B+DFpbW+PrnZ2d
8Xn4/tN/R+pZ+K5tbW3x5+nHJvSDKIb4I/4E4s9U4k91iD/iTyD+TCX+ANS3
rq6urKmpacr/bSG+V54HDD/39/eX1ML0wvfr7e2NP4dzPfn/cY10DEJ/p7u7
O/4czvuE7xv6xuExnPsJWlpaJvsE9Sx8z/C929vb4/Pw95H/foTHRj1HnoL4
I/4E4s+3xJ/qEX/En0D8+Zb4U33GHxp/aPzht4w/rK7K/k8455Gf/whC3X/H
jh1lNS25yr+3lStXxmPRaMcg19PTky1dujR+3xB3K/+vD++FvkE9C33A8B3D
70He16vsA+Z9Q4ol/lwn/og/4k/1iT/XiT/ij/hTPcYfGn8YGH84lfGH1ZOf
58h/t8JxrzzPEX4O58nqWfj/LcSZcBzC//uNeAyC8P9+OA7hnE843xcec+F5
Pcfh4eHhyb5NOPcV/s3D30Tl30b+nOKIP+JPTvwRf6pN/BF/cuKP+FNNxh8a
fxgYf/gt4w+ra3r/J9RjQ60tl/9fWK/y8zyVf1uNdgxCnbnyPGAedyr/1vI+
Qb0K3y183/z/4/xcRHiej0Wc/v8SCyf+iD/ij/hTFvFH/BF/xJ8yGX94nfGH
xh8af1hd0/s/+XircMzzen89X4MZxhjmYw7D982vw2ykYxDOeeXHID8PdO3a
tfgY+oL5Z+r5HGD4dw7/F4V/8xCDwhL+NsLvRx6LQlwK8ZniiD/ij/gj/pRF
/BF/xB/xpyzGHxp/mDP+0PjDapsef4L8XEBYwu9kPcu/Z77kf3ONdAzy8zqV
532CfLxdWBrp//3w/fPxh/mY1HxplGtwq0X8EX/En6nEn+oRf8Qf8Wcq8ad6
jD80/tD4Q+MPF5twzCvn4G5EjXYMwned/v97fl6o0TkG1dVof3szabRjIP7c
nGNQXY32tzeTRjsG4s/NOQZpGH9o/KHxh8YfAgAAUN+MPzT+0PjDqYw/BAAA
oFE02ti7mTTaMTD+8OYcAwAAAAAAAAAA4FbMLQ2URfwBAACojnyOIYBqE3sA
AACqQ/4FlEX9GQAAoDrkXkBZxB8AAIDqkH8BZRF/AAAAqkP+BZRF/AEAAKgO
+RdQFvEHAACgOuRfQFnEHwAAgOpw/x2gLDeLP6s+PJS9ubGvhBYBAADUp7nW
fnoPns5a/7A+277/RKIWAY3iZvHnwWe3ZP/2cHeVWwMAAFC/5lr/eW/H0eyO
u1dna7ccTtQioFHcLP68+O7+GGcuXBytcosAAADq01zrP6++fyDmZa+tP5Co
RUCjuFn82bznWIwzew6ernKLAAAA6tNc6z9/eeuTmJc9u3pvohYBjeJm8Wfg
9HCMM109h6rcIgAAgPo01/pP+9+3xrzssdd2JWoR0ChuFn/GxyeyO+9bk3W8
urPKLQIAAKhPc63//OLxTbH+89Dz2xK1CGgUt7r/YNtferL/WrGhug0CAACo
U3O9//sPfvdurP+E3AxgIW4Ve555uze7465V2ZXRr6vYIgAAgPo0l9rP1a/H
Yu0nLD/70/qErQIawa3iT36vwc+/OFfFFgEAANSnudR/Tp8bmaz/hHFAAAtx
q/hz8NhQjDXd2/qr1yAAAIA6NZf6z4GjZ2M+due9a755XJVNTEwkbBlQ724V
f65evRbjzNP/2FPFFgEAANSnudR/tuwdiPWfXz1xfQ7okSvm5QDm73bx5386
Nma/+bO5xgAAABZqLvWfNR8djnWfJ17fFR9Pn7uUsGVAvbvd/POPv7Yrjjcc
u3atiq0CAACoP3Op/7zwzv5Y93m752B8PHL8fMKWAbVmYGAgGxoamnwerhEd
GxubXKa7XfxZ9eGhGGu+PHWh8LYCAAA0krnc/73j1Z3Z9+5bk23bfyLmZHsP
nUncOqAWjI6OxjiybNmybMmSJdnSpUvj6+3t7fH15ubmrKmpKdaHKt0u9uw9
NBhjTc8nx5K1HQAAoBHMZfzPfc9sjvd9z3OyLXuPJ2wZUCtaW1uzlpaWyech
roRxQKEeNDg4eNP1bhd/hi+Nxljz/Np9hbUVAACgEc2l/vPTP67P7l/5UdZ/
/KuYk723vT9dw4CaUXl9VxjjE+LK+Ph4HPOTjzEMY4DCa5VmE3/+45H3sgf+
9lGSdgMAANSy4eHhKfdmHxkZuek5+LnUf+68b02cj/X00KVY/3lr0+cLbitQ
P9ra2mJM6em5fs+uMP4n1INCPAr1n3A9WKW8NnSr61AfeXF79q+/fTd52wEA
AGpJqP2EPKqvry8+7+zsnJyXIz8nX2m29Z9Ll7+ONZ8X392fjVy5OvkzQKjv
5GN8Kud5rqxD79ixI8ahSrOJP6+vP3D9foND7jcIAACQy8+j9/f3T+ZkeT4W
5ucI5+enf342wv13Qg62dsvhuN077l6VPfXWJ0U3H6hBHR0dcd7nEBtCjTnE
nHxO6Dz+hDmhZxr/czs7Pr0+33x4BAAA4Pq1FuG6i3AOPtR/wvyrlflVeK9y
jtZgtvWfPQdPxxxs677rcz7/sH1d9uhLO4prPFCzli9ffsO1XKEOFOaFzp+H
uYCm3wN+NvFncGgkxp7X1h9I1XwAAICa0d3dPXnP5ZBnhfpPWMLPufB8pusv
bjf/RrBx1xcxB+v74lx8/rM/bYj3AwO4lVAHCmOBZjLb+nOY/yfMAwQAANDo
ptdxwnL48OEp+VW49mK+13+9ufHzWP8J5+KDu/7yYfaLxzcV1n6g8cw2/oT7
f4X7gAEAADS6cH493Ocrn3MjjAfK5//J54IO14V1dXVNWW+2+dfKt3uz79y1
Khsbuz5/9EPPb8v+/ffdxX4JoKHcbtxh7vl39sf68/ClmccRAQAANKIwD2u4
53LQ29s7mWPl14dVmm39J1x7Eeb8yT3x+q54P3iA+Zpt/On55Fis/+w9NJi4
RQAAALUrzL8RxgbNZLb512/+3JP96olvr/d6dvXemI9d/XrsFmsB3Nxc7z+4
6sNDiVsEAABQn2abf/344e54zVfu9fUHYj42dOFyqqYBdW628Wfs2rXsznvX
ZI+9titxiwAAAOrTbPKv8fGJ7I67VmVP/2PP5GvvbDkS6z/hvDzAfMy2/hOE
MYj/07ExYWsAAADq12zmXz13/nKs9by+oW/ytXw+js/6z6ZuIlCn5lL/CfXn
O+5elV29ei1hiwAAAOrTbPKvg8eGYq1n/cdHJ1/bdeBUfO3jT0+mbB5Qx2Z7
/6+ge1t/jDkhHgEAADA3s8m9tu8/EfOu3X2nJl/7/Itz8bVNu75M2Tygjs1l
/E8ec97bcfT2HwYAAGCK2eRf67Zdn+un/8T5ydeODw7H19Zsdj8eYH7mUv+5
Mvp1nIfsma49t/8wAAAAU8wm/+rs/izWei5cHJ18LfwcXnvlvc9SNg+oY3Op
/wT/tWJD1vaXnkStAQAAqF+zyb+efGN39t17VmcTExOTr42NXYv1n5Vv96Zs
HlDH5lr/6Xh1Z3bnfWviPQkBAACYvdnkXw8+uzX7z0ffv+H17z+wNuZjAPMx
1/rP2z0HY9352OkLiVoEAABQn2Zz/53/7tiQ3f30hze8HmpCv3tua6qmAXVu
Lvf/CnoPno71nw/3HEvYKgAAgPozm9yr5cF3shUzjPP51ZMfZL/5s7k4gPmZ
6/iffN6xF97Zn6hFAAAA9el2+Ve85843+dbf1+y74b0H/rYla/3D+lRNA+rc
XOs/wb///r0YewAAAJi92+VfJ85cv8/7qg9vvM/7nzo/zv71t++mahpQ5+ZT
//n9i9uzH/xO3AEAAJiL2+Vf+4+cuel8G3/t6s3uuGtVNj4+nqp5QB2bT/3n
1fcPxJh05quRBC0CAACoT7fLv0LdJ+RaoQ403cvdn8b3Lo5cTdU8oI7Ndf7n
YPv+EzHufPzZyUStAgAAqD+3y73y+y2fOHPxpu+dPHvjewC3M5/xP6fPXYpx
5/UNfQlaBAAAUJ9ud/49zPsccq0wD/R06z8+Gt87dGwoZROBGjEwMJANDU2N
ByMjI9ng4OCMn59P/ScI9yR85KXt81oXAACgEd0u/wpzPIdcayb5dRh7Pj+d
omlAjRgdHY2xZNmyZdmSJUuypUuXxtc7OzsnXw+P0+cKm2/95/6VH2X/+ej7
C243AABAo7hd/nX30x9m/9Oxccb38rmhN/cOpGgaUCNaW1uzlpaWyechrpw7
dy4+jo2NxdfC+21tbVPWm2/95+9rr49LvHT5xnGJAAAA3Oh2+Vc4x/7gs1tn
fO/oifMxB1u37UiKpgE1ItR48jpPuAYsxJWzZ89OiS89PT1TakTBfOs/H+z+
MsaefYdnvq4MAACAqW6Vf01MTGTfvWd19uQbu2d8P9x/OeRgb278PFXzgBoS
xveEmBJqPf39/VlTU9Pke+F5uA6sUj7/2FzvA/bFyeu15zWbDxXWdgAAgHp2
q5zrwsXRmGN1dn824/thTujw/vNr96VqHlADQq04xJLm5ubJcUBhrp/K+NLe
3l7Y9V9jY9eyf753TfbE67vm3WYAAIBGcqv8q38W13fdanwQ0Bg6OjrivM+h
DhTqPqEGlNeE+vqu36c91Ia6urqmrDff+k/wmz/3ZD9/bOa5yQAAAJjqVtdd
7DpwKtZ/dnx64qbr/+ihddnvX3QfZmhky5cvv+FarlAH6u3tnXye3xOs0kLq
P39565Psn76JT6Nfjy2k6QAAAA3hVvnX+o+PxvrPwWNDN/3Mf3dsyO756+YU
TQPqQKgDjYyMzPjeQuo/YVxiiE+HbhGfAAAAuO5W+dfr6w/E/Orc+cs3/Uyo
/dzs/vAAt7KQ+k/fF+difAp1agAAgEYSzrMPDg7ecK49PA+vz+RW+dfT/9iT
3XHXqm+2O3HTz4Rrv3780Lr5NRhoaHO971ely6Nj2Xe+iU8r3+4tuFUAAACL
V6jvhDwqn4ejtbU1vt7Z2Rmfh/su53NyVLpV7vXQ89uyHz/cfcv9hrmfw314
AOZqIeN/gp/9aUN2118+LKg1AAAAi1+o93R3X6/VjI6Oxrwqv/9Ofj/mlpaW
Od1/+ZdPbIr32LmVv6/dF6/BuHLVHKzA3Cy0/rPilZ3Z9+5fe0NdGwAAoN71
9PTE++yEcUBDQ0NT8qvwXqgBVbpV/vXD9nXZI7e5t9ebG/ti/efs+ZnndwW4
mYXWf7o+OBjjz8DgcEEtAgAAqA0rV67Mmpubs6ampqy/vz8+5sLzcB1Ypen3
bM6NjY3Pam6N/B48R0+eL/aLAHVvofWfPZ+fjvHno96BgloEAACwuIV5firn
fc6v+6rMr9rb22d9/dfpoUsxr3pr0+e33O/mPcfi5/YfOTP/xgMNaSHzPwdf
DV+J8eeldZ8W2CoAAIDFK4z56ejoiD8PDw/HnOratWvxsa+vb/IzXV1dU9a7
We6V31t5464vbrnfT/7v/Pv2/ScK+BZAI1no+J8gzFH/2+e2FtAaAACAxW9g
YGDKdVx5Lai3t3fytTAv0HQ3y7+27T8R6zp7Dp6+5X4PHhuKn9uw89Z1IoDp
iqj/hPsUhrnKAAAAGkm499f0e+GE55XXhlW6Wf61dsvhWNf58tSFW+7v5NmL
8XOrPjw0vwYDDauI+s8r730WY9C585cLaBEAAEB9uln+9eK7+2NOdeny17dc
f/jSaPzcy93m3wDmpoj6z9Z9x2MM2nXgZAEtAgAAqE83y78ee21Xdud9a267
/vj4RLxP2DNde4puGlDniqj/5GMQ39x467nqAQAAGtnN7r9z/8qPsp/+cf2s
tvGvD76TrXh1Z9FNA+rcQu//FUxMTGTff2Bt9oeXdxTUKgAAgPpzs9zrjQ19
cV6N2Wj9w/rswWe3FNksoAEUMf4nuPeZzTEOAQAAMLMi8q/f/Lkn+9WTHxTQ
GqCRFFX/eXb13ngd6siVW89XBgAA0KiKyL9++9zW7CePvl9Aa4BGUlT9Z+Ou
L+IcQJ8eOVPI9gAAAOpNEfnXild2Zt9/4J0CWgM0kqLqP/0nzsf6z9othwvZ
HgAAQL0pIv9a+XZvzL3Grl0roEVAoyiq/jM2Np59957V2ZNv7C5kewAAAPWm
iPwrzBMd6j8XLo4W0CKgURRx/6/cr57YlP3ymwUAAIAbFZF/rd58KNZ/TpwZ
LqhVQCMoqvYTPP7arux7968tbHsAAAD1pIj8K5979fMvzxXQIqCWjY5+Ow5w
YmIiGxsbm1ymK7L+YxwiAADAzRWRf3386cmYd+3uO1VAi4BaFOo7bW1tWWtr
6+Rr7e3tMcY0NzdnTU1N2cDAwJR1iqz/bNh5vQ596NhQYdsEAACoF0XkX5/2
n415V88nxwpoEVBrwjifUOMJ8STUfHLLli3LBgcHb7pekfWfvYcGYxzasvd4
YdsEAACoF0XkX1+euhDzrne3HimgRUCt6ujoiGOAcmHMTz7HWKgPjY+PT/l8
kfWfk2cvxjj0ds/BwrYJAABQL4rIv85duBzzrtc39BXQIqBWhbE/lfWfMP4n
XPOVjw+qHBsU5LWhIuahD/eAv+OuVdkzb/cuaDsAAAD1qIj6z+jXY7H+89ya
vQW0CKhV0+s/oe6T27FjR6wHVSpy/E/wH4+8l7X/fWuh2wQAAKgHRZx3D+68
d032xOu7CmgRUKsq6z/hPmAhtuT3/Vq6dOmM43+KdO8zm7P/WrGh0G0CAADU
g6Lyr397uDt7+IVthWwLqE3T5/8J9wLLa8xhLqDp94Avuv7z5Bu7Yy26ctwR
AAAAxeVfP39sY3bX0x8Wsi2gfoQ5n8NYoJkUXf95bf2BeC3qV8NXCt0uAABA
rSsq/7rPdRfAHBV1/Wlu064vY/3n8y/OFbZNAACAelBU7vXIS9uzH7avK2Rb
QGMoevzP/iNnYv1nc+9AodsFAACodUXlX0+9+Un2T9/kXQCzVXT95/TQpVj/
eWvT54VuFwAAoNYVlX+98M7+mHeNXPm6kO0B9a/o+s/YtWvfxKFV2dP/2FPo
dgEAAGpdUfNvhPPtof4zODRSQKuARlB0/Sf4yaPvZw8+u7Xw7QIAANSyovKv
7u39sf7Tf/yrQrYH1L8U9Z/7V36U/fSP6wvfLgAAQC0rKv/asncg1n/2HR4s
ZHtA/Sv6/l9BmIvsu/esjvedBwAAqFcDAwPZ0NDQlNdGRkaywcGZ6zJF5V69
B0/H+s/WfccL2R5Q/1KM/3ljQ1+MRWfPuxYVAACoP6OjozGXWrZsWbZkyZJs
6dKl8fXOzs7J18Pj9HPiReVfR46fjznX+zu+KGR7QP1LUf/p+eRYjEUHjp4t
fNsAAABla21tzVpaWiafh7zq3Llz8XFsbCy+Ft5va2ubsl5R+dfpcyMx5+r6
4GAh2wPqX4r6z2f9Z2MsCnUgAACAehNqPHmdJ1wDFvKqs2fPTsmvenp6ptSI
gqLyr4uXr8ac66V1nxayPaD+paj/nPnqei36zY19hW8bAABgsQjje0JOFWo9
/f39WVNT0+R74Xm4DqxSPv/qQudhnZiYyO64a1X29D/2zHsbQGNJUf8J17iG
+Z/DPNAAAAD1JtRfQi7V3Nw8OQ4o5EGV+VV7e3uy67+CH/zu3ewPL+8obHtA
fUtx/68g3P/9gb99VPh2AQAAytbR0RHnfQ51oFD3CTWgvCbU13f9OohQG+rq
6pqyXpG5V8i57l8p5wJmJ0XtJ3jw2S3ZTx59P8m2AQAAyrR8+fIbruUKdaDe
3t7J5/k9wSoVmX+1PdWT/fKJTYVtD6hvqeo/4TrUf7p79TcxcCLJ9gEAABaj
UAcaGRmZ8b0i869HXtwerwEDmI1U9Z+3Nn0e54AeHJo57gEAADSaIvOv59bs
jTnXlatjhW0TqF+p6j+b9xyLsWj/kTNJtg8AAFBrisy/1nx0OOZcX566UNg2
gfqVav7nvi/OxVi0adeXhW8bAACgFhWZf23ffyLmXLsOnCpke0B9SzX+59yF
yzEWvbb+QJLtAwAA1Joi86/+41/FnGvdtiOFbROoLaOjo1Oeh7nHBgcHZ/xs
qvpPuPfhP9+7Jnvyjd1Jtg8AAFBrisy/Ll3+OtZ/Xnx3f2HbBGrD2NhY1tbW
lrW2tk6+1tnZGWPMsmXLJu9JWClV/Sf42Z82ZPc+sznZ9gEAAGpJ0fnX9x9Y
m614dWeh2wQWtzDeprm5OcaT9vb2ydfC81AXClpaWmJ9qFLK+s/vntua/ccj
7yXbPgAAQC0pOv/65eObsv99qqfQbQK1oaOjY7LGMzQ0NCW+9PT0xBpQpZT1
n2e69mR33LUqGxu7lmwfAAAAtaLo/OuRF7dnP2xfV+g2gdoQxv7k9Z/+/v6s
qalp8r3wPFwHVimffz7FfcC6PjgYr0c9efZiodsFAACoRUXnXM+u3htzritX
xwrdLrD4VdZ/wlw/lfGl8r1cyvE/W/YOxFi099DMc08DAAA0kqLPu6/ZfCjm
XMdOXyhsm0BtqKzx5PP/9PX1xedhfqCurq4pn09Z/zn45VCMRes/PppsHwAA
ALWi6Pxr+/4TMefa3Xeq0O0Ci1/l/D9Bb2/vZI156dKlN3w+Zf3nq+ErMRa9
8t5nyfYBAABQK4rOv44c/yrmXN3b+gvdLlCbwnVgIyMjM76Xsv4T3Hnfmuyx
13Yl3QcAAEAtKDr/ujhyNdZ/Xnx3f6HbBepP6vrPf3dsyO5++sOk+wAAAKgF
KfKv7z+wNlvx6s7CtwvUlxT3/ar00PPbsh8/3J1s+wAAALUiRe71i8c3Zf/7
VE/h2wXqS+rxPytX9WbfuWtVdvVr9yMEAAAaW4r86/cvbs9+2L6u8O0C9SV1
/WfVh9fvR3jizHDS/QAAACx2Ka6/eHb13phzXbnqnDtwc6nrP1v3HY+xaM/n
p5PuBwAAYLFLkX+t2Xz9nPux0xcK3zZQP1LXfw4PDMVY9N6Oo0n3AwAAsNil
yL+27z8Rc67dfacK3zZQP1LXfy5cGo2x6OV1nyXdDwAAwGKXIv86cvyrmHN1
b+svfNtA/Uh9/6/gX+5fm614xf0IAQCAxpYi97o4cjXWf158d3/h2wbqR+ra
T/DzxzZmbe5HCAAANLhU+df1c+4fJ9k2UB+qUf95+AX3IwQAAEiVf/3i8U3O
uQO3VI36j/sRAgAApJt/4/cvOucO3Fo16j/uRwgAAJAu/8rPuV+9ei3J9oHa
V435n/P7Ea54dWf2/Dv7LRZLjS6beweSxgoAgFo0Ojo65fnIyEg2ODg442dT
5V6r/++c+8Dp4STbB2pfNcb/9P/f/QgtFkttL0++sTt5vAAAqBVjY2NZW1tb
1traOvlaZ2dnzLGWLVsWH8fHx6eskyr/2rbveOyv7e47lWT7QO2rRv1nYmIi
uzw6ZrFYany5+rU5vAAAgpDjNDc3x3yqvb198rXwPNSFgpaWllgfqpQq/zpy
/Hys/3Rv70+yfaD2VaP+AwAAUI86OjomazxDQ0NT8quenp5YA6qUKv8avjQa
6z8vrfs0yfaB2qf+AwAAMD9h7E9e/+nv78+ampom3wvPw3VglfL5V1PMw/ov
96/NVrzycaHbBOqH+g8AAMD8VNZ/wlw/lflV5Xu5lPnXzx/bmLU91ZNs+0Bt
q8b9vwAAAOpRZY0nn/+nr68vPg/zA3V1dU35fMrc6+EXtmc/bF+XbPtAbVP7
AQAAmJ/K+X+C3t7eyXPsS5cuveHzKfOvZ1fvjXMAXb16Ldk+gMUrzD1fuUyn
/gMAAFCccB3YyMjIjO+lzL9Wbz4U6z8Dp4eT7QNYnPLxh2HcYViWL19+w2fU
fwAAAKojZf61bd/xWP/Z3Xcq2T6AxSncf3CmMYeV1H8AAACqI2X+deT4+Vj/
6d7en2wfwOI0MDAw5d6C3d3dN3xG/QcAAKA6Ut5/Z/jSaKz/vLTu0yTbBxav
np6eybnIwhz0Ic6Ea8IqVdaH1IIAAADSSZ1z/cv9a7MVr+xMug9g8Zmp1jM8
PHzDawAAAKSXOv/6+WMbs7a/9CTdB7D4LFu2bHL8T5gL6GbjfwAAAEgvdf71
8Avbsx89tC7pPoDFJ6/55EtXV9cNn1H/AQAAqI7U+dffVu2NcwBdvXot6X6A
xWl0dPSGcT859R8AAIDqSJ1/rfrwUKz/DAwO3/7DQEMx7zMAAEB1pM69tu47
Hus/n3x+Oul+gNqj9gMAAFAdqc+/Hx4YivWf97b3J9sHUJvUfwAAAKojdf51
4dJorP+8vO6zpPsBao/6DwAAQHVUI//63v1rsxWv7Ey+H6C2qP8AAABURzXy
r58/tjFr+0tP8v0AtUX9BwAAoDqqkX89/MK27EcPrUu+H6C2uP8XAABAdVQj
9/rbqr1xDqCrV68l3xdQO9R+AAAAqqMa+deqDw/F+s/A4HDyfQG1Q/0HAACg
Oqpx/cXWfcdj/eeZrj2xFmSxWGpz2d13qtDYoP4DAABQHdXIvw4PDMX6j8Vi
qe3lyTd2Fxob1H8AAACqoxr519i1a9nJsxctFkuNL18NXyk0Nqj/AAAAVIf8
CyiL+38BAABUh9wLKIv4AwAAUB3yL6As4g8AAEB1yL+Asog/AAAA1WH+DaAs
Yg8AAEB1yL+Asog/AAAA1SH/Aspi/CEAAEB1yL2Asog/AAAA1SH/cgwCx8Ax
CKp9DBxzxyBwDByDwDEAAEhrPv0t61jHOtYpwmL+XtaxjnUW/zoAAMzeYu7X
Wcc61ln86yzEYv5e1rGOdRb/OgAA3CifZ9VisViKXMQfi8VS1gIAwOzpPwFl
EX8AAACqQ/4FlEX8AQAAqA75F1AW8QcAAKA6GjX/GhkZueG1oaGhuDSCsbGx
bGBg4Ibj0EjHYHx8PBscHLzhGITn4fVGEn4fRkdHpzwPvx/hGKUk/nyrkf72
xB/xp1JZ8QcAgPo2MTER+9Yh76zsWy5btixbsmRJ1tzcHH+uZ319ffH7L1++
PD52dHTE1xvpGOS/A/kxaG1tja93dnbG5+H7T/8dqWfhu7a1tcWfpx+bkIdR
DPFH/AnEn6nEHwAAUujq6sqampqm9K1D/7JyHEL4ub+/v6QWphe+X29vb/w5
nGvO+9iNdAxCvtXd3R1/Duedw/cNuXl4DOeeg5aWlsmcpJ6F7xm+d3t7e3we
/j7y34/w2KhjdFIQf8SfQPz5lvgDAEBqlflXOOean38NwnnHHTt2lNW05Cqv
N1i5cmU8Fo12DHI9PT3Z0qVL4/cN151U5hrhvZCb1LOQg4bvGH4P8lyzMgfN
c1OKJf5cJ/6IP+IPAAAp5edZ8/wr9Dsrz7OGn8N5+noW+tfhOotwHELe0YjH
IAh5RzgO4ZxzGG8QHnPheT1fhzI8PDyZW4Vz7+HfPPxNVP5t5M8pjvgj/uTE
H/EHAIC0pudfYT6KcP41l/fF61V+nrky32q0YxDGG1SOQ8jPOVfmGnlOUq/C
dwvfN78eKZ+LJTzP52Kdfl0OCyf+iD/ij/gDAEB1TM+/8vkmQ/87P99Yz/eg
CXOs5nOuhu+b34emkY5BOOeeH4P8PPS1a9fiY8hF88/U8xiE8O8cctDwbx6u
wQhL+NsIvx953hnGJ4TrUyiO+CP+iD/iDwAA1TE9/wryc5FhCX3OepZ/z3zJ
rzlopGOQn1euPO8c5PONhqWR8o7w/fP5V/M5efOlUe5BVC3ij/gj/kwl/gAA
UG1hzHk+7rxRNdoxCN91en6Rn5dudI5BdTXa395MGu0YiD835xgAAAAAAAAA
AAAAAAAAAABQa/4/KZ5s8A==
    "], {{0, 555}, {1152, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1152, 555},
  PlotRange->{{0, 1152}, {0, 555}}]], "Output",
 CellChangeTimes->{{3.740397261912825*^9, 3.740397294299575*^9}},
 CellLabel->"Out[59]=",ExpressionUUID->"12f2a976-5cc8-46d6-b1df-43aaaa21e5a4"]
}, Open  ]],

Cell["\<\
10 randomly generated combinators of size 10, with their lengths plotted \
until n=20.\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.7403971181930532`*^9, 3.740397136594475*^9}, {
  3.7403972613966312`*^9, 
  3.7403973003130207`*^9}},ExpressionUUID->"a8f8d2a0-1644-4a05-ac87-\
5ac5cae2f5bd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"exprs", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomSKExpr", "[", "30", "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ImageCollage", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ListLinePlot", "[", 
      RowBox[{"SKLengths", "[", 
       RowBox[{
        RowBox[{"exprs", "[", 
         RowBox[{"[", "n", "]"}], "]"}], ",", "40"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.740397245337042*^9, 3.7403973440960617`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"0195dc7d-a624-46ca-8c1a-abf414ea5ea9"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3dtXVFfe//tn7P272Jf+Ce7rfeHtvnKMfbnH8Oq3x77IRZLOiXS60+kn
Jp3uTnca41nUxCgeokbiWaLGBBEUFNESlYOoiMpBQBBRjiKIgIXOH99ZLqwq
6rCqap2q1vs1nvUgdZzQ1CdzzTXnd/6f7//1f+b9b//1X//1xf8x+//+53t/
/3+WLn3vn//fgtlv/v/Pvvjk488++vD//ezLjz7+aOn//f7/Pnvj/zX72GX/
47/+a/b//ksBAAAAAAAAMTB0BMAt5A8At5A/AADAb+j/AHCL5A8ZBMANZA8A
APAb+j8A3EL+AHAL+QPAa8glAHYjZwC4hfwB4BbyB4DXkEsA7EbOAHAL+QPA
LeQPAK9hXTwAu5EzANxC9gBwC/0fAF5DJgGwGzkDwC3kDwC3kD8AvIZcAmA3
cgaAW9LJn2DwpZqYfGFDawD4Cf0fAF5DLgGwW7ycKb10T52obnW4NQD8JNV+
zpOxSbX8pxp1696gTS0C4Bf0fwB4DeM/AOwWL2dW/3xZfb7pnMOtAeAnqfRz
OnpH1Gcbz6p3vj2lqhu7bWwVAD+Ilz+rii6rpZuqHG4NADD+A8B+8XJmx6/X
1XsryhxuDQA/MVt/NXDjgXp/No8+WFWux39+Pc+1eQCZiZc9P564rv6w/JR6
+fKlwy0C4Hduj//I/Or8XQF9zS2eitpO9c2PATU5HXSwZQCsEi9nfjl7V59n
jY5POtwiAH6RrJ/z8uUrdeD0bZ1Ffy+sVr0DY+qdZaVq9+83HWohgFwVL3+O
VbXozBkefe5wiwD4ndvjP1UN93X+tT+IP/4j1+DkMbImH0D2iZczlXVd+rPd
+fCJwy0C4BeJ+jnjE9Nqzd6rOoe+O1w3V/P5s42VqmD/VaeaCCBHxcuf6mvd
OnfauocdbhEAv3N7/OdkoF3n36Oh8biPKau5l/Qx8Uhf7qst59XhijuZNBNA
BuLlTMPdR/qzfW32KwDYIV7+9Dx+qutvvL2sVF+Lf/Xq1dx9y3ZdUv/YWu1U
EwHkqHj5I+sfpP9zuanX4RYB8Duz6+LtcqQitP5DrsHFc64+NEZ+v2805dc3
5hfk7wxk0kwAGYiXMzLvRz6f8jkFADvEyh6pufHl5vPqw1Xlqu5237z7Nxc3
qI9Wn3aieQByWLz+T9/guO7/yHVwAHCS2/N/ZH29rLNPVP+s5uYDnZEt94dS
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
P8QfW8g/k382yD+Tf/YDifPO755pl2eWoLZ/MH0MU4/VtDuTJai5L2Hm/zKL
aXdnrg1kkRgVdKnff8kJmuOn/6m7Uq9/wpJvNOS7ZdrdyfGacQDDdA7kmsec
A3MdMD4+Hpq8u5DPWf7Pymcuv4HJIn8bYfntxRbiD/GH+EP8sYX8M/ln8s/k
n/NBunHqw8L8fww6Oc504xvLujCPeyyffVDznjal61MXpnxjar7Z5B3DdA7M
/3Xn/30Rlrx7Kjl+0/89LL+92EL8If4Qf5IRf3KH/DP5Z/LP5J8BAFPCnm8U
YTsHcqyp9Yuw5N3nwjnIrbD97aUTtnNA/JkZ58Ab5J/JP5N/Tkb+GQAAAAAQ
FmHLvaYTtnNA/nlmnAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAwELJvIcAAAAAAAAILsn/kAMCAAAAADuojwHIBWINAAAAANhDnQxALhBr
AAAAAMAe+mQAyAXiDAAAAADYQ50MQC4QawAAAADAHupkAHKBWAMAAAAA9lAn
A5ALxBoAAAAAsIc6GYBcmG+sGXsRV2Nj4x6VBgAAAAD8p7OzU8VisaR18rin
p2fatrIu020F+R8gvCYnJ9Xw87GcvNd8Y82OX66rZSsOqydDIx6VCAAAAAD8
QfI2UmdasmSJvi0uLtbry8vLk9ZPTEzoxblOtplpWyfyP0A4PX02qkp316qV
X59X8XHv29nMN9Zs2FOn8z+Peoc8KhEAAAAA+ENpaWki5zM6OqrrT/J7vdzG
43G9vqioSJWUlOht5b4wuSBzm7qtE/kfIHzu3OtTb39ao15ZXqnKq2+/jBWT
nr+nxJr5xJvlX53T+Z/WBwMelgoAAAAA7DPtfyQHVFBQoG8HBgaS6lCRSETn
dRYvXqyam5sT62Wbrq6utNs6kf8BwkPyx5XnWtWrKw6rP687pq42P87Ze883
1ry78YTO/zS1pu+7CgAAAABB0djYqOtMO3fu1P23CgsLVTQa1bkgQx6bvl1y
35Btmpqa0m7rZH6Tn+9v8wDyy7PnL9Snv/WpWrHjnOp9Ept7JxfNN7784aMj
uqx1Nx95VCIAAAAA8AfJ90ibHcP05XLWo6Tfl/TpkrZB9fX1ep2zj1i6bZ3I
+QDBd/fBgPrHZ1PtaX44ejMn4/2kmk+sGRl9ocsqy5mGDg9LBQAAAAD2SVud
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
ANhDnSxYpG+XzN8l+Z2psZwrdc7n7U9r1I/Hb6n7XYO2i4iQItYAAAAAgD1h
rZPl23EPPx9TvU9iaZeW+/2qItKqPvn+kipaczTRzkfuf/XzNXWjrVfP72Xk
27G7JazHLfxw7H4oAwAAAACEVa7rZPH4uHrYM6Qu3+7S4w2fbriv2h8OqtEX
8ZyWI9vjHntZTpkbS3IudTcfqeOX2vWYOt9WNqltP11Vm8ovq9LdtWrVN+fV
h9vOqpVfn1e7j9xQ568/UI96h5PyMKmej8b1ubny27nZ8ct1/Tp/KT2eyOnM
tvxp7TG1YU+dqjrfqto6B9TERPr3Cms9PKzHLfxw7H4ogy1hPnbB8XP8AAAA
sC/ddZnkYl5ZXqneWF2l/rzumO479N6mk3rcGNl+xY5z6n/bIzq/8a8tp9X7
m0/p+cNl+XDrGbX6m/Nq/Q91asv+K+qbiut6n0/31Ok5pl6dMX9Rqd4vO6U2
77uitz995b7OrUge5NDpZrW3+pbOo8jc5PtP3NH9myLXHqirzY9VS0e/3kfG
N5b+Te0Pn6i7DwbUnXt96mZ7r2pq7dXbSV5FcjYXmzqn3qPhvqqpi+rX+jVy
9+X7tLx87dvq+6M3dbuZz8svq4+/vajHzineeFLvM1v+5bWVh9Vba4/p8ZXl
nMj2sp9zm7fWHFVrvqvV+aKyl+dn9c4L+tz+4aMj+vnk96jU53T9D5d0maR8
qYtsX/3yGOS4Z8stzfWZu7k975H/7+EFP5TBljAfu+D4OX4AAADkjlx/sbCw
sGSyeBWDvNzez/v4tVzZ7OPXcmWzj1/Llc0+fi1XtvsAAADAfV5fl8l4xCNj
mfftku2ln9TdjgHdpqWrb1j1Dz7Xc1WNjY2reHxCz2klbX2kfc/lW126HY/M
cSXteKTN0In6+7r90NmrHep8Y6eqvfFQ1d96pBruPFbXW7rVjbYedSvap9sN
yVjJD7qf6vfpG4ypp8Ojuh+W1+RYgDAJc33Wr+XKZh+/liubffxarmz28Wu5
st0HAAAA7uO6DICbbLddYmFhye8FAAAA3uBaC0AuEGsAAAAAwJ6w1clGR0eT
HsdiMdXT02OpNLkxNDSkOjs7dd86JzluOf6gkuNNd4zxeDzt+QiigYGBaY9T
1+VK2GINAAAAACD3pM5fUlKiiouLE+vKy8t1nXTJkiX6Noj5gLKyMn1sS5cu
1bfRaFQfp/O45TwEjeR9nMdtPvfU9ZIHCqrq6uqk77V83oWFhWrRokX6fq6R
/wEAAAAAeEnmRZc6r9Q/S0tLE+vkseSFRFFRkc4PBYnJ85j6f0VFhVq8eLE+
B3K8zm0ynTs+X0i+R/IfQtp8mdxDQUGBamxs1PflNqg5CWnzZcbSkM9Y8lzO
YzW5QHgrzG3P5DhT25qFob2lMMeZ+jnbbH9ng8Qhp6C3OQUAAIB/SFsYk+OR
a3BnfTgSiSRyIkHivNaWHJgcv+SAmpubE+vlPKT2iwsK+VzleKW9j3Dm/Jx5
oaCR4zJtnaQOKm28nG3f5HzU19dbLGGwyTmX8+v8foWl7Zn5uzLtzeTvT4Sh
vaWQPLvzczZ/Z7bb3+WaOX4RhjanAAAA8Bdp92LyP9L2QdqCGPI4qNfkpu2H
1D3Mdbiz7Yech9TfaYNi586dur4lx5jaHso8Dhqpd5n6lWnbJd97Z/s2uS/1
VHhDcsnmb84IS9szyTM6c+lynP39/YFvb2k48+nSBlGONWzt70zfU/P9D0Ob
UwAAAPiLM/+TWvd3Phck5jrc9IUSUj8zv0mbfnBB+y1e8h/Otk/mGKUObupm
qXWyIDDf69Tl9u3biTZQQs5DkOuffmDa+xhhaXsmx2iO0/yN9fX1haK9pZPk
nk3sDVP7O9P31PkbS5janAIAAMAfnDkek/cw16TSRiRo7SFSj1HqZLJO+sGZ
6/Ig5kCEfJ5ynMLURyQ3Ir9Hm++A1M9M35QgkbyX1K1MH0fJQ5hchHwHTI4o
TOOQ2CD139T+L0Fve+Ykf2dyjJLrCVN7S0OOX45Z8j5han8nn7nEXGf+M0xt
TgEAAOAPzvF/hOmDIUsQ8wCm/u9czPjXkgcx64I4DonJa5nF5IIkN+JcH7R2
T04m/2f6WZj6uCyS+4K3UnOrQW97ZpjvneRgTTugsLS3FCbWCJN7lhx8GNrf
mZynHJ+JNfI9CEObUwAAAPifXIOGdT4SOe6gX4NLfTvdMYb1M5fzQb+L3HC2
/xFhaHsmJP8hxyr1fPnbM+0Og97e0nDm1KXtk3Ms9qC3v5PP2bQ/NMcuxxyG
NqcAAAAAgHCSeq6zz1NY2p6ZeZ9SjzXo7S0NM/+XWcyY32Frf5f6/Q96m1MA
AAAAAJzC2vZMhKW9pRxnunZ2YW9/F4Y2pwAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAIH/8f9yKmFQ=
    "], {{0, 555}, {1152, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1152, 555},
  PlotRange->{{0, 1152}, {0, 555}}]], "Output",
 CellChangeTimes->{{3.740397261912825*^9, 3.740397348885235*^9}},
 CellLabel->"Out[65]=",ExpressionUUID->"008e9aa1-33ec-4d91-829d-3d5b6e62f377"]
}, Open  ]],

Cell["\<\
10 randomly generated combinators of size 30, with their lengths plotted \
until n=40.\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.7403971181930532`*^9, 3.740397136594475*^9}, {
  3.7403972613966312`*^9, 3.74039731416185*^9}, {3.7403973517714853`*^9, 
  3.740397356440222*^9}},ExpressionUUID->"2f8ab75f-39ca-416d-b6db-\
7464e4db4e66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudEvaluate", "[", 
  RowBox[{
   RowBox[{"exprs", " ", "=", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RandomSKExpr", "[", "50", "]"}], ",", "10"}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"ImageCollage", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"SKLengths", "[", 
         RowBox[{
          RowBox[{"exprs", "[", 
           RowBox[{"[", "n", "]"}], "]"}], ",", "40"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "10"}], "}"}]}], "]"}], ",", 
     RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740397245337042*^9, 3.740397287786524*^9}, {
  3.740397358640634*^9, 3.740397358757906*^9}, {3.7403974049331503`*^9, 
  3.740397410353931*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"62759460-2535-4677-81fe-976c0f87e6cb"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
AIBYIOOR165dq/uGExISdM0M6YP2yMjI0PulL1mOkTgeyD5RUVGhxy5LXWk5
TmpvWHFdD1NzcwBm6Bkc13mbzG2Dr0BjqPTj/3/z5lwDAOxlam25g5ee6pob
zZ/7RfIr25c9p6SmUx8rtZxM5+krl42qXUB06u3t1XU/pV9D+jc2bNig6uvd
98rGx8d1bJW+Bs8m8609PP0QW7du1ecu1g9hZWxOvlSqEo4tXseoZ+g932MA
xBy5Jyj3Bnt6eha9zzc2Nqb7qYPdJ2ZmZlRra6uanvZdtzWc6woT83IA5ih/
6V43T+avwVcwMXTV4TxdwxMA8DWXa/G6Ev7G0EVyfJ2VTt54rr4/cE8VVbn7
lF+2DS57TkPrgD72yYuuCLQwPFJbxNP/LOstAog+El9fvHjhfXzu3DlvfU/p
f5YaoYsZHBzU87C7utyxKi0tbdF52FbG552ni9RP50oW3Tc5Natj0ZWcl5a9
HgAgNKbm5gDMcOtRU9TM+XVCMDF028lCtef8ExtbAwDRJTU1Vc/zk1gqc/7m
8zeGLtLj66x0Kdtdq9Tzc2T8w7LneMbwydhik8m9gJWHcr39z+09o043CYAF
srOzdbwVnv7n0tJSVV1drcfKecg6VElJSd7HS61DZWV8XnfkS039heTupKyh
LmupAwCcZWpuDsAMepzW/hy/8yjiWTDzu/elP1aJJx7a2yAAiCLS59zd3a3n
eM/vf/Y3hs6J8XVW+rvote6bTTpTpFYm5wZUo2L685p+l7JqbW9fOLr63DW7
dv9aon9WNTF3Coh20r8sfc9y309I/7PU5vj555/181KbQ+aBi/T0dJWcnOw9
t7+/X61YscLne4RV8Vmu+80y9e3WpTxQhy8vv84rAMBepubmAMyw7d+FavcS
c9oQXAxNu/5M9zUAAL62sP/Z3xg6J8bXWUnqPXvGB+/57XHA50kNp7TrZtdw
8vxtWU9a9M8HlW1ONwlAGKTG6L59+9TBgweXHIuSkpLi7XMOpv95/hYqqfHj
Xt+7Ycljdp0uUrvP8l0GAJxmam4OwHkzLpf6x95sdS6zZvmD41QwMfT87Rqd
I8+6GEsOAPMt7H/214cR6fF1Vqv4vK6CXpP2r8DXpN11pkiPKzbZmVtVeq67
1OySv+9mfpPTTQIQIul7PnDggO5/XqpGv5DaHNu3b9e/y/1BT51oYff9wc7+
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
x/vc5s2bVUFBgSX9G3DOub+q1Td7s9TcEp+rAMyysP95YGBAzc7O6t/l5759
+7w1+IeGhvS9wo6ODv1Yng+mPr/k2zI38MgV+8Y+e5y/Xau++ZSDT07P2v5a
AIDwx+4BiB7TM+65ZrLmM9ykj0PqiErfxZYtW77q08jIyFBr167V878TEhJU
X1+fz/nhxs+c0je6/7mrL/LrQAGAyXbu3Klu376tf5c60NKnITVGw+3fgLNu
5Dfqz73hMeZhASaTuhpr1qzRsXT16tU6JxZ3797VzycmJurnfvzxR51Pe3jy
Z9kv9w2DzZ/lzpSsVWq3h8/adSxqbBuy/bUAAOTmQDxpaB3QeZbkW3A7cuSI
zq8945tlzSsxODio+ze6urr047S0NFv6N57Wuetx1zb3h3UdAIg1dXV1el0r
mdct9wivXbvm3Rdu/wack1/Z/nluvT3rigGw38TEhJ4fKLWRFiPPLzav0MOE
+NzeM6pjUdaTFqebAgBxwYTYDyAyMoteMdZ2HulrlpqhMq6upKREr3flIfO7
ZVy0h7/53eFoah/W/02KqjrCug4AxCKXy6Xa2trU9LRvjaJo6N+Ar6qmXtZB
BuKcCfF51vVRffdzjl6LBQBgPxNiPwD7yffzNb/kqZXJuUt+V4830t8sY5yl
voasZbVp0yZ19OhRvS9S61v1D0/o7+F/F70O6zoAgK+R45qprWdEf+7llrU6
3RQADjElPu85/4R1cQAgQkyJ/QDsdaekWX/fk7qLcHv58qWOgYWF7rWvZSyd
9Ec3NjZGrP95xuXS/10u3qkN6zoAgK+R45ppfGJKf+5l3H/pdFMAOMSUNagu
ZdfreDQ+yTrgAGA3E+I+AHs1d73T6w7uPf9YuebmnG6OMWStFImBPT093uek
jmhBQYGuvzF/LUJ/9Tfmb6GQcempGRXLHwgACBg5rpnkLq7098i24egDNjY2
B7a88lZH44Ap8bm4pot1WAAgQkyJ/QDsIetHJxwr0HU3+kcmnW6OcXbu3Klu
376tf5c60DL+ubOzUw0NDenfOzrcdZll7UE71h8USWeK1O6zJWFfBwDwhSnj
6+Dr7F816vDlcjY2Noc2Wf/aSabE5u6Bcd3/LGvkAADsZUrsB2A9GWMka2pI
XlVWzzo/i6mrq1MbNmxQ27dv1+Obr1275t2XkZGh1q5dqxITE/W46L6+Pp/z
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
6NAh3dc8v//5wYMHup9+ZmZGj4tOTExU9+/fd7CVXzj9/YDzOZ/zOT9az7eb
038f53M+53N+tJ5vN9PbZzrev/Dw/oWH9y88vH//P3t34tXU1T18/D992+dp
nzrPYmul/lpHtFKkA7W1onWiVGuxKgiIAqKoqMwoMg+iTMogyBB6XveJiQyZ
p3NP8v2slQW5NwnHrHbnZN9z9sZy33777Yr8s6y9rKmp8d7/v//7P3Xp0qVE
D82RsrKydC5VyBry9PR077n6+nq9nhXu3Pzq1au968H5b2qpiooKvba5sLBw
Sf5ZctInTpzw3v/999/VwYMHEzYuT406bty4ceMWmxvxmRs3btyceUuEaP8O
z+f5PJ/np+rzkXx85Z9l3arUO/bIzMxc8ZhUJGt5161bp+rq6vT93NxclZGR
4T0v63nlvUvlOtB//fWXzqfK+3T58mXvcf6b+mByclKvcX758uWK/LNcz/j7
77+9969du6Z27dplYpgr8PkBAM5EfAYAZzKdv+H5PJ/n83xbn4/kQ/45NKOj
o7q+c35+vvcY+eeVpM5zc3OzOnPmjK6LLfcF/019IP/2Cxcu6N/JPwMAokV8
BgBzTK/j5saNG7dkuyE5UX8juFevXun1qpJTXUzqbyzODVJ/YynJq165ckX/
zn9TH0jN8O3bt+vbxo0bdZ0SqSsupP7Gb7/95n1soutvBMLnAAA4E/EZAJyJ
+AwAgJuv/LPUN5Y1mkJ6xUm+LFV7xY2Pj+secCdPnlxxTtZEy3vT29ur70vv
wVTuP/j8+XPv7y9evNA9Bmtra/V9/pv6QP79UstFbrKefseOHfr9EmVlZd7+
g/Pz847qP4jwSP9IX8bGxlRnZ2dK75MIRPq8yl4JT+345Xj/ApP/7np6enQ8
9vUeSfzx9NSFf/Lfoa//h536/pHfCA/xOTLE5+gQn2OD+AwAgF1kXarU6JW6
CLL+Un5/8OCBPic1E2RtpuS+pIbC2bNnDY/WnPPnz+t5g7w/npvk7D3y8vL0
eyTvleQN/c3JU4G8B5s3b9Y/5X1a3EeP/6Z8W15/Q76PyHpnWS8ut3379ul5
Nuwg1w1kT4Rce/H1fcMTL+Sag9TzSeV44cvt27f1HhJ5b+Tnzp079TVAD96/
wLq6unTslVi7ZcsWfZNckJDYcuDAAR1X5Lj0PyW2+CY5NPnvb3ls5v2zG/E5
OsTn6BCfY8PG+Ez+GQCA4GRd7+K5JXybmJjQ6xlY76H09w3570bW7vrCf1Oh
kfdR+hPCLvJ9p6qqSrW1ta34vjEyMqLX/cu6d5GdnZ3S+yV8aW9v965dkvdS
6tL8+uuv+j7vX3ASdxfH3u+++87bo+DGjRvevRWyboy9Ff5JHSTJZSzOb/D+
2Y/4HB3ic3SIz7FBfE5+7E+JDPtTosP+lNiwbX8KAAC2k3oqy/MbUi9e+kt6
UC8+uKysLF27R/D+hU/eO3kPhXxnX7wnxUm15Z2koqJCr51bvjeF9y95EJ9j
g/gcHeJz+IjPyYv9KdFhf0p02J8SGzbuTwEAwHa+8hu5ubnetU5C6p9L/SPW
Ifgm6+hkLlhXV6fv8/6FRuZ0X375pV4LJt8zPN8/JDf0999/ex937dq1Jf1z
odTk5KR+32TvyfL8Bu9f8iA+R4/4HBnic+SIz8mN/SnRYX9KdNifEhvsTwEA
IPHIb0RHervK+gzpz+nB+xe61tZWdffuXfX555+r3377TR/j+3lw0iP3woUL
+nfyG8mL+Bwd4nN0iM+RIT6nBvanxAb7U6LD/pTwsT8FAAAz/M2fF38fYv7n
26tXr/R18jNnziw5zvsXPtmPKfvdhMz/PLkOwfxvJVkfJHsv5bZx40bdm1nW
EAnev+RBfI4c8Tl2iM/hIT6nBq4PRo/9KZFhf0rk2J8CAIA5vubPsmZMvj9J
D04he9/Y/7aUzPVkX9bJkydXnOP9C06+U8j+No+ff/7Z+/28rKzMu/9N9hiy
/20l2bsq39vkJms75fuH/L8seP+SB/E5MsTn6BCfo0N8Tg3kn6PD/pTosD8l
MuxPAQDADFmbI+sOZP4sP7/++mvvOU//D/luJN+V6P+x1Pnz573vm+f27bff
es/z/gVWVFSk3zN5f2R9mPzs6OjQ5+R7hqwHk/V2ctu3bx/9PwJYPn/m/UsO
xOfIEZ+jQ3yOHeJz8mJ/SuTYnxI77E8JD/tTAABwpomJCdXT08O6gwjx/gU2
MzOjuru79fcQXyQnJPvjEBnev+RGfIkO719gxOf44v2zH/tTIsP+lOiwPyU6
7E8BAAAAAACA07E/JXLsT4kO+1Nih/0pAAAAAAAAsBH7K6LD+xcY+1Pii/cP
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAID4kt7JAAAAAAAA
AADEGvlnAAAAAAAAAEA8kH8GAPtI7CZ+AwAAAAAApyN/AQD2IXYDgDMRnwHA
mYjPAGAOMRgA7EPsBgBnYn8KADgT8RkAzCEGA4B9iNsA4EzEZwBwJuIzAJhD
DAaA+BkcHFR9fX1qYWFhxbmxsTHV2dmp/v3337DOCWI3ADgT8RkAnIn4DADm
EIMBIPZevnyptmzZojZu3Ki2bt2qNm3apJqbm73n8/Ly1Pr169WOHTv0eclT
h3LOg9gNAM5EfAYAZyI+A4A5xGAAiD1Zv9zQ0OC9f/z4cbVr1y79+8jIiFqz
Zo3q7+/X97Ozs9XRo0eDnluM2A0AzkR8BgBnIj4DgDk2xeCugTGVX/JEDb+e
Mj0UAAhLYWGhXs8sCgoKVHp6uvdcfX292rBhQ9Bzi9kUu8Mlsb7n5YTpYQBA
RJI5PgOAzYjPAGCOTTH4bkO/+n/fXFNNHSOmhwIAIZubm9O5Z6mrIXJzc1VG
Rob3/NDQkFq1apWu9Rzo3GI2xe5wZec/UicuNwR/IAA4UDLHZwCwmcRnYjQA
mGFT/H305KXOPz9++tL0UAAgJNJ3cO/evergwYPeHHKs8s+Lb8nk6+NVKvvP
h6aHAQARiSYmt/W9UvMu331nAQDRSbY5MwDYxKbcRVPHsM4/yzpoAHA6yT0f
OHBA559dLpf3uNTY8NSCFsvrb/g7t5gtcTsSEuflBgA2iiY+Z/1Ro84WNQd/
IAAgbIHi84nL9erEP40JHA0A2OnFixeqp6dnxRo56YHV2dm54riHTTmM9r5X
Oidx81Gv6aEAQEAScw8dOqS++eYbNT8/v+Tc6Oio7jHY2+uOZdJf0NNjMNC5
xWyK3eGQ9438MwCbRRqf51wub/yrbnwe41EBAALF58Pn7qvPDhazBwUA/Hj9
+rVeK7dx40a1bds29dVXX3nPSa3R9evX67qjW7duVYODgyueb1MOo/fluJ6T
F93rND0UAAioqalJx9e1a9eqdevW6ZvEaA9PfE5LS9PHF8fnQOc8bIrd4Rh/
M0P+GYDVIo3Pje1D3vj36YHrqn9wMsYjA4DUFig+F9/v0vG3pZteUwDgy+HD
h1VWVpZ3ffPMzIz+OTIyotfQ9fe7a1VkZ2dbv4Zu6NWU/ky4XNlmeigAELWJ
iQmf+1aCnRM2xe5wdL8Y8+ZfWH0CwEaR1rY7Xdjk7bMt+ee0H8rV1MxcHEYI
AKkpUGx+MfpGx+D80qcJHBEA2GFqakr3pRoYGFC3b99WbW0f8rJSQzQ9Pd17
PxlqiHrWxeWXPjE9FAAwyqbYHY66Zx/W/03PzAd/AgA4TCTxWa63bf/+lkr/
5ba+f79pQMdB6cXKtTgAiI1g8Xn79zfVrp8rEzQaALBHS0uLXuP8+eefq4yM
DLVlyxa9Flrk5ubqYx5DQ0M6V718LZ1NOYzZOXddvNPX6AsAILXZFLvDUf64
x5t/Hn49ZXo4ABC2SOLzi5FJHfculrV6j50ratHHrt3piOXwACBlBduf4tmH
MjI+ncBRAYDzNTY26vgpa5+F9BqUfLSsgw4n/7z45mQycvk8OF5Qb3ooAGCU
0+N1pKS+kif/3PH8tenhAEDYIonP16s7ddxr63vlPSY9sPbm3lEfvTve3Dkc
yyECgOO5XC6/5ySnsby/t5B8SGdnZ8T16xra3Pvwbj3qCW+wAJDkpMazxNDh
4Q9zUukzWFFRoetvSF9Cj2SovyH+d6BI/XjhselhAIBRtsXuUJ262uDNP9e/
+w4AALaJJD5nnK5Waw6XqoVlOZPXkzNqw5FSte7bUjXKejwAKUD2c0veQmJp
TU2Nz8fs3r17Raz19O/esWOHzolE0r97dt6lPtlfpLLzH0X+DwCAJPXFF1+o
a9eu6d/7+vrU6tWrdT3o0dFRvRa6t7dXn5Peg7b3HxQyBz9y/r7pYQCAUbbF
7lBl5z/05p/vNvSbHg4AhC3c+Cy17v+zt1Dl/OV7fcXTnlH10Z5r6psTd9W8
ayEWQwQAx5Kcs+QzNm7c6DP/LOvsDhw4sCTWyro8yX3097vnjtnZ2RHnPiTX
8NnB68RbAFimoaFBx2bJQ8t1wvz8fO85zzXAtLQ0tW3btoiuATqN9GbZf6ra
9DAAwCgbaiZF4uvjVd78c8n9TtPDAYCwhRubH7S4ew1WNz73+5ii6g56oABI
Kb7yzy9fvlTbt2/Xa+wWx1rJSaenp3vvR7P3u/RBl4631D0CgJWkNlJ3d7ea
nZ1dcW5iYkL19PREXAPJaaQf7e5fb5seBgAYZVvsDtWm78rUzpxyPe+/dKs1
+BMAwGHCjc8nLtfrGs+T0yvn8R4yi//hgnt/yB32hgBIAb7yz998840qLy/X
9UcXx9pwel8FM/RqSsfavJKWKP8FAIDFbMthyN7Dz38sNz0MADDKttgdCvmO
8PGeQl3j373Or8n0kAAgbOHEZ8mMbMi8ofbm3g36WKnTIXnqrdk3le9VJQCQ
PJbnn6XmqNTdEPHMP4sdP5br9RAAgNixLYdx+Mx9vT4OAFKZbbE7FONvZnTe
Ob/0ifr0wHWVc6HW9JAAIGzhxOeugTEd967cbgvp8RfLWvXj+4cnIh0eAFhh
ef5Zeg5u3rxZ19+Q/oISa+V3qfks9Td27drlfWyg+huLb/6cvd6sY+3IGH1f
ASBWbKshKr2pVh8qNj0MADDKprgdqu4XY966z5uzyvT1RgCwTTjxuaCiTce9
npeh5ZNbe0f14wvvtkc6PACwwvL8s/QYlFyz3Jqbm3Wsld+lFuno6KjuPyh1
oYX0Hoy0/6BoaB/SsbbsYU9s/jEAAOtyGMf+qtU9wgEgldkWu0NR98w913/Q
PKDSf7mtdv9SZXpIABC2cOLz179V6X19odbTWPj3X7XmcKk6+Du9uAEkp8zM
TLVu3TodS9euXavWr1+/4jHL62+IvLw8/di0tDS1bds2NTg4uOJ5ocbnOZdL
fbq/SGX9URP8wQCAkNiWwzh5pUHnJ+ZdVL4DkLpsi92hKH/co+O7rO/LOHNP
r4EGANuEurdwfMpdc+jEP41hvX7OX491rXypB43Yevz0pWrqGDY9DAARmpiY
UD09PSvqPnuEM3/OyqtR/ztQpHPRAIDo2ZbDyCt212Kaeuu/RzgAJDvbYnco
Lle696EPv57StZ+lBjQA2CbU+Hy7vl/HPMl5hqO68bl+3v3mgUiGhwCkzt/p
wmbTwwAQJ+HMn2887NaxtqljJI4jAoDUYVsO49LNZ+5eAOP0AgCQumyL3aE4
ddW9v2Vu3qVOX2ty/86aEwCWCTU+/3jhsa4pNz0b3jrmyelZ9dG7+Hi8oD6S
4SGAnT9VqJyL9L4FklU48+ehsWk9F5X1bwCA6NmWw7h2p0N/DgyMTJoeCgAY
Y1vsDoWsO1tzqET/7rnW+GrireFRAUB4QonProUFtTqjWB0+G1mf1b25d9WG
I6V+95ibIrl0W+uCyHspnztyA5CcQq2P5CHXpD7/qTyOIwKA1BFuDDbtRk2X
nhd2DYyZHgoAGGNb7A7F18er1M6cCv178X13rO95OWF4VAAQnlBi89PuUR3j
JNZF4sptd72ijuevI3p+vMi1w7NFdq4V9Kx1JP8MJK9w586e2p9SGw4AEB3b
8he36/r0Z4DM2wEgVdkWu0Ox6bsydfiMey3g3QZ3XdTmTvpAAbBLKPE5v+SJ
jnEvRt9E9Dfk2pw8/1JFa0TPj5fs/Ecq5+Jj08OIiPQdJP8MJLdw58/NnSM6
JpTVdMdpRACQOmzLYTxoHtCfAXXPhkwPBQCMsS12ByP7nj/eU6h++dtdz7S+
bYj+WgDizuWjxvz8/PyS23JjY2Oqs7PTb+2LUOKz7PVI+yHyPd3yl+Wanewb
cRKJ21LT2kaePZbkn4HkFe78ed61oP53oEhl5dXEaUQAkDpsy2E0kJMAAOti
dzDjb2Z0bM8vfaLvy55yvd7kYY/hkQFIRllZWWrDhg06ltbUfMgrTE5O6mPr
16/33urrP/T5y8vL08d27Nihtm7dqgYHB1e8drD4PPK+zsPZ69HVqTh5xd2z
VeKnE0jtZ5vzt+eKWrzjd1pdbQCxEcn8WfqTfLq/SPfHBgBEzrYcRmvPKz0v
rKztMz0UADDGttgdTPeLMR3bS+536vtDr6b0/YLKZ4ZHBiAZSc55YGBAbdy4
cUX+efXq1T6fMzIyotasWaP6+/v1/ezsbHX06NEVjwsWn2Uft8Q3qfcQjcdP
X+rXqarrj+p1YqW9/7XV+efM8w+843/zds70cADEQSTz55uPenVcaGhn/zUA
RMO2HEb3wPscxQNqMAFIXbbF7mCkppLE9gfv97ZMz8zHZH0gAATiL/9cXV2t
6urq1NzchzxkQUGBSk9P996XddGyhnq5YPFZ8pyyn1v2dUdjZnZe/Xdfkfrx
z0dRvU6s3HrU82H9sOnBRCDth1ve8UdalxuAs0Uyfx4Zj82eFQBIdbblMF6M
Tur4f6Wq3fRQAMAY22J3MOWP3XmL1l53b1nJXUgN0WOX6swODEBS85V/3rJl
i9q3b5+usbFp0ybV1+fec5ebm6syMjK8jx0aGlKrVq1aUashUHyenXepT/YX
6T59sXD47AO1KqNYzbvMZ3xPX2uydv2wa2FB9yDwjL+9/5XpIQGIA4nPkcyh
v/y5Uu34MfKa/QCAyGOwKa8m3up54cWbT00PBQCMsSluh+JyZZuO7cOvp7zH
Nhwp1esEASBeluefl8vMzPTmnMPJPy++LebZ6yFrhWNBahbJ6z3tHo3J60Vj
/8m7H9YPj0yaHk5YZL2zjDv9WKV7n30b++yBZBTp/Dm/5ImODVIfDgAQGdty
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
G8h7dPZ6s+8nAbBWPOLzicsN9KYCgBBIDHbyPNmXJ13DOsbfCSG3AQCmSM55
YGBgRf8UyT+vXr3a53NGRkZ0/5T+fnd8y87Ojqp/ysUy91rkGzVd4f8DIuSp
qXG2KPh394rH7r3grb2jPs9fud3GnB6AVZw8r45lbrVv0J3LvnZ3ZS57y9Ey
lXG6Ouq/EW/rvi1VR84v7X8rK6ED9SUAYK945D6knpGuJXeDPoQAEIiT58j+
ePqalD10fl8TAPCXf66urlZ1dXVqbu7D2t6CggKVnp7uvS/romUN9XKhxG6J
lbKv+ODpewmpu7GY5B72nLgT9HFSH1TiudQL9UX6V7lrlY7FeogAEBdOn1uv
PlSssv98FPXryB4Xic8N7St70Ow+XqX33jiZNxfv41qp5KWz8mp8PAuAzeIV
n3f/UqX7ldCHEAD8c/oc2Zf+4fd7B6s7TA8FAILylX/esmWL2rdvn66xsWnT
JtXX16fP5ebmqoyMDO9jpbfsqlWrVuSPg8XuuXmX+vyncvW/A0W6lmWi/XDh
ofpkf5FyLSwEfNypq+49izJeXx40u+v9S81SALCB0+fWUrNZ8sPRyi99quPz
2OTbFedkTfGGzBtR/4148qxZ9LU/6PMfy3VtDgDJJV7x2bNewl89OQCA8+fI
vox4+oJUOL+vNgAszz8vl5mZ6c05xyr/nFf8RMfJm496oxh55K7e6dB/X/oL
BpKd/1CtOVTi9zz1lgDYxulza1nXK+v0onXk3AO9TtgXG3rHBlq/LblnuYYL
ILnEKz7LfgpZ8/HNCa5bAYA/Tp8j+zI5PeuusVTyxPRQACCoYPnnwsJC9cUX
X+jfpf7Grl27vOcC1d9YfFusteeVjpHSi9vUd39P3ljWgwTy9fEqtTPH/3f8
3pfj+nWux6BXFgAkgtN7q5y+1hRw30moNn13Q2WcuefzXF6Ju3fsm7fO7R17
qfyZu7+Ajz1CscrRA3CWeMbmvOJmHVOe9vjuaQIAqc7J82N/5lwuHdtl/gwA
Trc8/zw8PKzm5+f17/Jz79693h6Do6Ojuv9gb6973bIcD6f/oNSdS/vhllqV
UaxGxhNfd8PDU1fzxD+B+zdtzipTh8/c93v+9aS7l+HFm/R0AWAHp8+tr1S1
67j6YvRNxK8xOeWOzeeut/g8f+39HpgXI5MR/414y/nrsfrvviKf/RFk/fZ/
9jp7/TaA8MUzPkstIqk9J31XAAArOX2Nhi8yF5SeWvSlBuBkUldj3bp1Osau
XbtWrV+/Xh+/evWqPp6WlqaPffXVV2ps7EOdiry8PH1czm/btk0NDg6ueO1A
cVv2Ej9wQP052bucfsx//yn5zi/7swPF8nnXgs5hnLraGI8hAkDMOX1eXd34
XMfV5s6RiF+judO9x+V2XZ/P85W1ffq87MdxKqmBvfOnCp/nzl53r2Ocnp1P
8KgAxFO8cx/eNdDdrIEGgOWcPkf2R9b2SX8rALDR1NSU6uzsVBMTEz7Py/Ge
nh6f67KEDbH72KU6fa1w1s8e7/E37vVz+aWBaylJPb0fLzyOxxABIOacHp9b
e901miRHHCmpiaRr/A/4rvFf+2xIn69pMX8t1Bf5ZF397ruE9CDw5XJlmx7/
iIH+vQDiJ97xWea2sgZ6/++sgQaA5Zw+R/ZnY2aZOnzO/55tAEhmNsTu0gdd
+vt7W5/v9W/Sm1DOl9wPXNt5y9EylXG6Oh5DBICYc3p8Hh1/q2PvpYrWiF/j
eIH7+qK/GtIdz8dC6gFgyviUu5eM1Kn25UaN+/Or58V4gkcGIJ4SEZ89PcCl
FwoA4AOnz5H9SfuhXO0/SX9ZAKnJhtjd3u9eY1d8v8vn+br36+PuB6kVsvvX
2wHreACAkzg9PrsWFnTu+MTlyOvY7f7Vf+0KMfx6Ssd3WUfsRK29owHz454a
JU0dkdcoAeA8iYjPsgb6U1kDfYq1EwCwmNPnyP6k/3Jb7f6lyvQwAMAIG2K3
9IqV/k3H/qr1eb7ica+7Pmhv4Bp5h8/e130KAcAGNsRn3fv1bGT7CBf+/Vd9
sq9I5VzwHdvFzKy7B+3pQmf2Cpe61TK+lm7f+eXG9tCujwKwS6Lis+ytcNfZ
Zw00AHjYMEf2RdY+yxpoAEhFtsRuWbvsL1Z76mvKOrlAci4+1utIAMAGNsTn
vbl31Oc/RjaPHhiZ1LH7yu3Aa5slbkv8dqKLZa363/Bq4q3P8x3PX+vzZQ+d
WT8EQGQSFZ/Hp96vgT55V/nu5AIAqceGObIvUvt503c3TA8DAIywJXafutqg
v8NPvZ31e85f/VCP09ca9eP89TEEACexIT7nXKzVuZFI8iKyJlhicm3ry4CP
c3Ltfulp++mB637//UOvpkLKsQOwSyLjc37JE+r4AMAiEoNtmCcv98OFh2pV
RrHpYQCAEbbE7craXr9z7+z8h2rNoZKgr3Gp/Jl+jZHx6XgMEQBiyob4nF/6
VMfVyamZsJ97ocz9XOljGMju41Vq18/OrN0vPQUC9RWYnnHXD5E+YgCSRyJz
H3oN9IHrer8Ja6ABwI45si+//F2vPt5TaHoYAGCELdcO+wYn3GvIqtpXnPv6
eJXamRN8/3fJg279Gt0vxuIxRACIKRti842aLndcHQg/rmb94V4DEiyfcuT8
fbUh03l7FWXckhP68c9HAR8jPRqPF9QlbFwAlnK5fO97GxsbU52dnerff1dG
oUDnRKLjs+daX1MHdaABwIY5si+nrzXpWD7vWjA9FABIOFtit/Spku/52X8+
XHFO9786E7z/VXXj8/c9XNi/CMD5bLg+KLUzJK4+ehK4hoYvW4/e1DVNg/Gs
FXHauj+p+Sz/dqkBHcjawyV6nw6AxMrKylIbNmzQcbSmpmbJuby8PLV+/Xq1
Y8cOtXXrVjU4OBjSOY9Ex+bxqVk9D95zgjXQAOD0+bE/nnpKk9Mra4oCQLKz
KXZLnkJyzYvJuhTJS0h+IpjG9iEd76XmKAA4nQ3xueele29Kyf3OsJ7nqUsh
60CCyStp0Y9983Yu0mHGRUv3iB7X7bq+gI+T3rmh5NkBxJbknAcGBtTGjRuX
5J9HRkbUmjVrVH9/v76fnZ2tjh49GvTcYibic36pO28h81kASGU2zJF9uVTR
GlLtOQBIRjbF7rziZh2vxyY/1BkdfzOjj8mcPJiugTH92LKa7ngOEwBiwob4
LD1hI6lv3Nr7Sj/v1qOeoI+9dqdDP/bFyGSkw4wLGbuMq63vVcDHffPbHbUz
pyJBowKw3PL8c0FBgUpPT/fer6+v1+ukg51bzER8ljXQ/ztQpGMKa6ABpDIb
5si+FFW757T9wxOmhwIACWdT7L7XNKDj9eOnH/Z5Sy3nUNfeDY1N68dermyL
5zABICZsiM+SA/nsYOAayL7IdUCJx+1BcreisrZPP7a1J/hjE8mzLltyQoFI
/eqNmWUBHwMgfpbnn3Nzc1VGRob3/tDQkFq1apXeUxfo3GKm4nP+DXcd6Po2
1kADSF021Kjzpeyhe+1Cx/PXpocCAAlnU9weejXlrrV586n3WN2z0GtqTM+6
93ufK2qJ5zABICZsic/S/1XW44Xj1JVGHY8lLgdT+z7O17Q4q3aS1HRefSh4
/8Rjf9Wq/+4rYr0iYEgy5Z8np9z7/g6fC973BABsMD+/ci7otB6wsXKnoV/H
cKnhBgCpxqbYLZ8+aw6XLplzVzzuda+L6x0N6fn/2Vuojl2qjd8gASBGbInP
EpPDXd8r+ert398K6bEdz8dCrtWRSJJ3//p4VdDHnS509zqfnXMlYFQAlvNV
f2PXrl3e+8vrb/g7t5hn7Z2JNXhf/1ZFTR8ASUGu+UkMvXfvnveYE3vAxkrN
E3ffbunfDQCpxrbYLXkOyUF7roRKLQ2J4cOvp0J6/obMG+rIuQfxGyAAxIgt
8fnEP+61zPOuhZAev/Dvv+rT/UUqOz+0mh0S351WO0nW48ia5py/Hgd97KXy
Z3r8I+PTCRgZgOWW559HR0d1j8He3l59X/oLenoMBjq3mMn4TE0fAMng2bNn
aufOnWrTpk3e/LOTe8DGQlPHsHvvdpOz9vQBQCLYFrul9obEbKnFIU5dbdD3
5+ZDW1f25c+VIa1XAwDTbInPBZXPlsTlYAaGJ8PKJ8+8r50k64idwtNPQPqY
ByP9CeSxPS/pNQMkUmZmplq3bp2OpWvXrtXr6Tw86+vS0tLUtm3blqyvC3TO
w2R8luten+wrMvb3ASBaCwsL6osvvlAtLS1L8s9O7gEbC9KzWuaEsocbAFKN
bbX7Za+KxOx7768ZSv3NNYdKQn7+/t/vhbznGwBMsiU2365317J72h28DpK4
+772ndR1DpWsl865GHytcaxIXb4Xo2/8nvesX6lufB70tTz/3iddw7EcIoAo
TUxMqJ6eHp/1RQOdEybj8+nCZndNnxDXXgCA0/z+++/q559/1r8vzj87vQZ/
tHpfjuv4LWsTACDV2Ba7xybf6pidV9ys78taZqnBGarsPx+p1RnF8RoeAMSM
LfFZcrUSl6vq+0J6fF7xE/34scmZkP/GlqNlKuN0daRDDEvf4IQen9wyzz9Q
9W1DK7733Kjp0ue7BsaCvl5Dm7t/4gOH9U8EEDmT8fnSrVYdU15NvDU2BgCI
VEdHh95bMjPjngdGmn82VYM/GrJXUOL3ldvOqSkHAIliU7z22JxVpvafvOv9
/fCZ0HuAe+qUuhZCq1MKAKbYEp89c+nLt9tDevzB0/d0Lf5w7D5epXb9XBnJ
8MIyPTOv0n64pf89e07c0Xvc5fcdP5arkgfd+rw4V9Sij0/NzAV9zfb+V47s
nwggcibjc/F99/UvuVYGALaRHLPUONq+fbu+SX5ZctClpaVh9YC1kWct3cWy
4PXbACDZ2Bi7s/98qD49cF3Nu/5VH+8pVL/8XR/ycy/ccK+7G38T+ro7ADDB
lvgsfQclrp680hD0sbJ6RfagyLricEi/rXBz1uGSsUlPxMU1nianZtSVqnZ9
rVOOf3bwuq5DnfZDudpwpDSk15U6HvLcq3c64jh6AIlkcs1duDWPAMBJpL6R
9Bf03KRH7PXr19XU1JQVPWCj4elpIusYACDV2Bi7JRcgcbu5011/M7/0ScjP
Laru0M/pH2bNCABns2lP4cbMMnXkXPCcsmettPSSDYdcZ5Trjb4rscaG5Idl
bGeLmleckz0zUj9j/6lqb22OnTkVIb3u5PTs+8+q8P7NAJzLZGz29EJ59OSl
sTEAQKwsrr8hnN4DNhpSR0Ti94nLwddsAECysTF2N3eOeHME4dbvv13Xp5/T
2vMqjiMEgOjZFJ+//i20WvwPmgd0DK4JM2+SV+Kud/HmbfB6F5GQ65kfvXv9
vbl39d6aQHpeTrz73lCvTl9rCum1FzzfNf4Jfa8OAGczGZ/b+tw1fSpre42N
AQDiyck9YKMl+7gT2VMbAJzCxtgt9Tdl3r01+6b+eb859J5OnjUj4eY+ACDR
bIrPP154rP53oCjo+mSpdycxeGhsOqzXv/Z+bfKLkcnIB+nH6Pi0Wvdtqa6n
EU4/r3DWYq8+VKxrRwFIDibj88DwpI6H1+6Gvv4CAJKJTXPk5WTOmZVXY3oY
AJBwtsZu6QXl2QPd2ht6/bv292tGyh/TBwqAs9kUn/OK3ftRpt7OBnyc1OhY
c6gk7DoalbXx2bsitau/OXFXfbTnmmrpHonpay+2/ftbav/v94I/EIAVTMZn
6WEi8VB6mgBAKrJpjrycrKGTXtwAkGpsjd3HLtV688/Dr6dCft6L0Un6QAGw
gk3xufh+l46tUpvCH8k5y5qPjDPhz7lrnw259660hL7fJRSnC91588K77TF9
3eV2H69Su36ujOvfAJA4JuOz1AiSuHXqSqOxMQCASTb1SFnuy3fzQalbF0y8
as4BgCm2xm2p+ezJP8/Nu0J+nrcPVAlrRgA4m03xWWoaSWyVGkf+SG2LSONv
x/Mx/dxbj2K3d6W68bl+zew/H8W1r6E4fO6+2vRdWZz/CoBEMR2fPzt4Xdc9
AoBUZDoGR0P23QXrmTI4+oY9LgCSjq3XDj11NOQWDulh8JHuOUsfKACx43L5
vg42NjamOjs7ffZPCXRO2BSbuwbc+eEbNV1+H+Opv3+vKfw1zLLPRZ57ubIt
ilF+0Dc4oT7dX6RrOUlPgXjLuVir/x6A5GB6/rw5q0wdPnPf2N8HAJNsmiMv
J/sAtx69GfAxZ683s28OQNKxNXbLmudI8s9i7eESlfUHNf8BRC8rK0tt2LBB
x9KamqVxJS8vT61fv17t2LFDbd26VQ0ODoZ0zsOm+Dw+9X5vSelTv48pqGhz
9xAcDb+H4Mysu+/s6cKmaIapSbZf5vTyen1D/uuFxNLpa41h79cB4Fym43P6
sUq1+9fbRscAAKaYjsHRyM5/qPMR/ky/n/PKLZy+2ADgdDbH7s8OFqtdx8K/
Lijr3fbm3onDiACkGsk5DwwMqI0bNy7JP4+MjKg1a9ao/v5+fT87O1sdPXo0
6LnFbIrPktP9ZF+Ryrnofz+4zLdlz7i/9d7ByPrhQK8fKqlRLXP6s0XNUb9W
qC7dfKb/5uvJmYT9TQDxYzo+S+8q6WEFAKnIdAyORs5fj9UnAfbElT3s8eaf
K2t7EzgyAIgvm2P3ySsN6pe/w6+jsefEHfX5T4FrLgFAOJbnnwsKClR6err3
fn19vV4nHezcYrbF57Qf5NreXb/nZb/4/pP+zwez5WiZyjhdHfHzPS6Wteo5
ff9g+OuwI3X9XmfC/yaA+DEdn3+48FCtzig2OgYAMMV0DI7GiX/ce+IWfKzH
kCNSG3r1oWJdM5Q6/wCSic2x+05Dv7p6pyPs52Xl1ah135bGYUQAUtXy/HNu
bq7KyMjw3h8aGlKrVq3Sa38DnVvMtvgs9ewkx+zL5NRM1GuOdx+viroWnrzD
kidP9DXI2/X9+t//tGc0oX8XQHyYjs8n/qn3m78AgGRnugZ/NM5db9Hx21f/
kSddw95+J1LjX64zuhYWDIwSAGLP1rgdjeN/16mP9lxTzNgBxEq88s+Lb053
vMAdW33Nk5s63PPpqrr+iF//yPn7akPmjWiGqLpfuPskXrrVGtXrhMvTe/HR
k5cJ/bsA4sN0TJZa+xJT5NoeAKQa0zE4GhdvuuP3mI+abNl/PlT/2Vv47txb
VVTdoR/X2svaBQDJwebYHam84ic6lk+9nTU9FABJwlf9jV27dnnvL6+/4e/c
YrbF50vl7hrHo+Mre6XIXhXd728w8n5/Um/p4z2FUV07NFF7Q7T1vdJ/t+Ix
dfyAZGA6PntiaiT9XAHAdqZjcDQ+xO83S46PjE3rmhvH/qrV9/uH3f1KLpT5
7+0NADaxOXZH6kpVu47lg8tiPgBEann+eXR0VPcY7O115xulv6Cnx2Cgc4vZ
Fp+lR4p7ncarFeekfp30J4xmD2FeiXu/4pu3cxE9311745ba+VNFxGOI1MDI
pB574d32hP9tALFnel/KzUfueNvevzLeAkCys22OvFjpgy4dv2VP3mL5N54u
iesyb5W6drt/rYro78y7qNsBwFlsjt2RYs4OIFYyMzPVunXrdCxdu3atWr9+
vfdcXl6evp+Wlqa2bdumBgcHQzrnYVt8buoY0bG1uvH5inOS9/36t8jmzx7X
POtFRiJb72eq9oYYf1//Wr5bAHCG6elp1dHRoaamplacGxsbU52dnSvqInmY
js8Pmgd0TGloGzI6DgAwwXQMjsbtur4V6zXm5l1q7eES3etksZNXGvRjx9+E
X2spv+QJOWgAjmJz7I7Ugxb3nL32GXN2APE1MTGhenp6fOYwAp0TtsVn2Qcu
sVX2mCw2NTOnj5+62hDV61fWvp+v90R27fDCjSdGam8IWfctf1u+RwAw748/
/tDXAKUWkvw8f/6895zn+uCOHTvU1q1bHXl9sLnTXVP/bkPkNfUBwFamY3A0
7r+/ftjY/iEX4clJS7/qxWqeuPuHVNX3hfU3ZudcavWhYjU0Nh2TMQNALJje
P2jC0+5Rn/EdAJzEttg8O+96n2duXHL8aY875t561BPV68s1Q3mdmpaBsJ9r
svaGx6qMYl2HBIBZCwsLavXq1aq5uVnff/bsme4BOzc3p0ZGRnR9pP5+9xwx
OzvbkfWRPPs5Sh50Gx0HAJhgOgZHQ/atLJ7Pyhx196+31bpvS9Wcy7XksbKG
Q3qf5PwV3vzR0+NQrlUCgFPYHLsjJWvfJB4X3es0PRQA8MvG+Cxz58y8miXH
rr+LtRJzuwbG/DwrNB3PxyLOY/e8GHfX3ih/FtUYorE1+6bKOF1t7O8DcJM9
J1I36elTdz0cqbMhOWfXu+/90h82PT3d+1in9oeVPlUS0woq2oyOAwBMsHkN
nWddhmctXPv7HtXSI9uX/b/f07U5/O2XXE4eJa8XybppAIgnW+N2NMYmZ+gl
C8DxbIzPsn5j18+VS44du1Sn124sX9MRruHXUzp2X64MP9/iqb3RNzQR1Rii
Ie9N+i+3jf19AB/cuXNHbd68Wf3f//2f2rRpkyovL9fHc3NzVUZGhvdxQ0ND
em308u/9puPz9Oy8jmnnilqMjgMATDAdg6Mh6zEkft946N6/knOxVn2055oa
GfddK0Pq2snjZR1GKDx7vfV6u+qOmI0bAKJlc+yOlNTh13vErzQGfzAAGGJj
fM7Of6RWZxQvObYzp0KlH6v084zQzbzPt5wubArreZI12v79zXfjKI96DNE4
fOa+2nK0zOgYALjrb3zxxRfqhx9+UA8ePFA///yz7gU7Pz8fVv558S3RZDT/
2Vuor+8BQKqxcY7sIX20ZT5beLddr4uTWP7DhYd+H+/tn10RWv9seS1P/vnc
da5RAoiMy8/asUA9up3ev9uUzw5ShxOAs9kYn88WNev5rtSrE1ITWtZ0HC+I
TY7k0/1FKudieLHbCbU3hHzmfHbwutExAFCqsbFRrV27dskx6Tf48OFDXX9D
ehJ6OLX+hvBV7wgAUoETYnCkRsenvfNSySnL7y3dI34fL1mcDZk31Dcn7obw
2m/1vFvmyjJnJt8BIFxZWVl67itxtqZm6TwzUI9uG/p3myJ1OA+evmd6GADg
l43xWfb5yTxa6uyL9n53TbvSB10xeX1ZPxxuDeX8G0+N194Qp6426HHMu0Kr
3wcgPgYGBvSa5ufPn3vvSz/Cnp4eNTo6qmtB9/b26nPSe9CJ/QfF5z+Wq725
wfMRAJBsnBCDIzU986F+kuSVv/y5UgWbGR4vqFcfvXvO5PRswMdJDWl57ba+
V7rv9t7cO7EbOICUIDlnmRtv3LhxSf45UI9uW/p3m7L71yq1Kwb7wQEgXmyM
z/ebB/S8t+7ZkL4vte088+BY2H28akV96UCcUntDeL4TjE2+NT0UIOWdPHlS
9yD88ssv9c8TJ054z3nWb0hNjm3btjl2/caeE3fU5z+Zj20AkGhOiMGRci24
a4GuOVyqf9581Bv0OZ759b2mAb+PmZt36X0xu3+p0vNf6Vsoa+4AIBLL88+B
enTb0r/blMNnH6hN31GHE4Bz2djbu73/tZ4f33rUo++f+Me9XkNqN8fCkfP3
9VqRUHUPhFczL568a8OHza7DBuA2MzOj1zy/fbvymtDExIQ+5+T6dVJ7Y8OR
UtPDAICEs3GOvNh/9xXpOaH0TAlljvzm7ZyeTx//2389u6q6fv2albV9+n7O
X491bWl23QGIxPL8c6AeKbb07zZF4vEn7+I+ADiVjfH59eSMnvvKWl8he012
/lQRs9f/5e969fGe0OfSntobTsj5yvcBGUtrb2zWggMwxwnx+dilWnILAKwl
+7u7urrU3NzcinPJ3sPK0x8wr7g55OfInhe55ujrHZFjMueWNdWyDlrklzzR
f2N8aiY2gwaQUsg/x87pwiYdj2fnfPd0BADTbIzP8hkj+RDJi0idY/37X7Ux
e/28khYdu2UdSNCxKKm9cUvtzIld/jsaj5++1GOXnwDs5oT47On3Gqv9JQCQ
KFu2bNH9qbZv365rIN28+aFORCr0sPLkn4deTYX8nMuVbfo50ld7ufY+d7+V
/NIn3mPF97v8Ph4AgvFVf8Nfj+5w+ncvvqUKT69Z6RELAE5ka0yWWnP7T1Wr
7hfu2hdSdyJWrt1x17B4MTIZ9LFOqr0hZN2zjOd2XZ/poQCIkhPmzcxlAdhq
enra+/vVq1fVpk2b9O+p0sNK1jGn/RBe/f6O5+4ad1eq2leck73dUp9jZOzD
+/rgfc3o2lbWPQAI3/L8c6Ae3Tb17zah9AHXAwE4m63x2dPvpLK2V8fZJ13D
MXttbw2LnuA1LGQNiFNqbwgZh4znenWn6aEAiJIT4nPJA3d/V7nWBwC2Ki4u
1uugRar0sJJaGfVtQ2E9R/YYSn/B/SfvLjk+Njmj9xtm5z9acnx5TxYACEVm
ZqbelyJxdu3atXo/ikegHt229O82obrxuY7HTR2xy4sAQCzZGp+PXarT8+BT
Vxt1nJ16Oxuz1659NqRfs6bFf/9v4bTaG2Js8q0e+4Wyp6aHAiBKTojPdxrc
vaaaO5nLArDPd999pz7//HO9xu7JE3fdiFSpIXrueovf2taBSE076YMyPfOh
7pJnL8zyz4KR8Wn3PsCbz6IeLwB4BOrRbUP/bhMk7yzx+F5T4BwGAJhia3yW
/KrEV1kDLTngWOp4PhbSWo6u97U3CiraYvr3ozHvWtBjkrw8ALs5IT7Xvb8e
J3usAcA2kqOoq6vT+eavvvpKHwsn/5yKNUQ91x096zBkbrkh84bamVO+oi+h
a2FB1+Q4cbk+8QMFAB9SKV4v5qkLeqOmy/RQAMAnW+PzzUe93r4qP154HNPX
Hn49pV9XerAE4qm9MTAcvE50Iv3vQJHKuRC7fowAzHBCfGZvNYBkMDMzo2Pq
8PBwWD2sUtH41IyO+yf+ceeUZS2dzmk87Pb5eMlNHz77IJFDBAC/UjV2S21+
p62NA4DFbI3PDW1D3vyzrx4p0ZiZndeve7qwye9j5uZd6tMD1x1Ve8Njc1bZ
u+8B900PA0CUnBCfpQ+rxMOrd2LX4xUA4m1qakq9fv3ae//WrVu6b9XCwgI9
rEKw+3iVnk/Keue9uXfVqoxiNT077/uxv1Y5cj4MIDWlauwOJYcBACbZGp/7
hia8+efG9vB6q4Ti0/1FKuei/3XVV2636b9d8bg35n87WunHKt99F7htehgA
ouSEPd/jU7M61uWXUlMegD2k7ob0qJL+VFu3btX1nyUH7UEPq8CknrPE/qp6
d0/uc0Utfh+b9UeNWn2oOIGjAwD/UjV2y/XCT/YVqZy/Yrs3HABixdb4LD1R
PPln2ScYa1uOlqmM09U+z42OT+u1z7LeI5K+LvF28PQ9XRcbgN2cEJ+ltufi
fdgAYAtZ69zX16devHhBD6swtfW98s6z5fZi9I3fx56+1qQfMzvvSuAIAcC3
VI7dsldF4vFHe3zf5Fx2/iPTwwSQopywvi5SnjlxPMi+w10/V/o8J9cU5e+2
v5ubO9EPFx7qzx4AdnNKbJZ4InEFAFKJU2KwCQv//uudZx85F7i2s2dPYKAc
NQAkSirH7os3n+p+sP5uEqu3f886NQBm2Byft39/S+3//V5cXvvI+fu6n8py
rb3u9SDHLjm3v9/JKw16jLJuEYC9nBKftx69qfdVAEAqcUoMNmXTdzf0fLK2
9WXAx1XV9evHtXSPJGhkAOCfzevr4k32M7JfBYApNsfmzLwadamiNS6v/cvf
9erjPYVq8Y5MWQuy+5cq9b8DRerVxNu4/N1YyL/x9H1dklnTQwEQBafEZ4l7
UlceAFJJqucwKmv79Dq5YLXmmjpG9LzzbkN/gkYGAP6lctwO5vq9Th2vuwfG
TA8FQAqyOT4XVD7Tc954yCtp0bH5zds577Gbj3r1sStV7XH5m7FSeLfdvQ9y
ZNL0UABEwSnxOePMPbU5q8z0MAAgoZwSg00Zm5zRuYpgBoYn9bzz6p2OBIwK
AAJL9dgdSFPHsI7Xt+u5Xggg8YjPvl17N4denMOdejur1h4u0etA5lzO3q9S
8bjX0fWpAYTGKfH5xwuP1WcHr5seBgAklFNisEnzruC13Dw9wU8XNiVgRAAQ
GLHbP7muKPE6v/Sp6aEASEHEZ99kz6HE5tYedw73bFFzSDXwnKDmyUv3WJ8N
mR4KgCg4Ze+3p6b8vCvwHmwASCZOiL+2kGuU2X8+Mj0MACB2ByAz+TWHSnQd
UwBINOKzb5K7lXxLTcuA6h+cVB/tuaYOn7uvbMi+PO0e1WOvqu8zPRQA77x8
+VL19PSsqKE5NjamOjs7/dbWdEp89taUfzNjeigAkDBOicE2+PyncvXNb3dM
DwMAiN1B7D95V23Nvml6GABSEPHZt47nYzrfUvawR2Wcrta9CKW+nQ36Bif0
2EOp2QcgfiS/nJ6erjZs2KC2b9+udu3a5T2Xl5en1q9fr3bs2KG2bt2qBgcH
VzzfKfHZU1PelhgIALHglBhsA/oEAHAKYndgp6406nn9zOy86aEASDHEZ9+G
X0/puLz7lyr9M6+42fSQQvZq4q0e86Wbz0wPBUhpR44cUZmZmd71zTMz7vXD
IyMjas2aNaq/3937Izs7Wx09enTF850Sn8sf9+iY0kZNeQApxCk1kGzwy9/1
eq3Ggp/9PACQKMTtwEoedOt5vay3A4BEIj77JtcDJS7Lbd23pbq3ii1m513u
PjDXGk0PBUhZkmtetWqVev78uaqqqlLPnn24HlRQUKDXRXvU19frNdLLOSU+
Sx0iW+rfA0CsOCUG2+DCjSf6c+L1JHWaAJhF7A7sSdewjtfS7woAEon47J8n
/1zxuNf0UML2yf4ilXOx1vQwgJQl+WZZ4yz1NTIyMtSWLVvUd999p8/l5ubq
Yx5DQ0M6V728DrRT4nNL94iOhbfr+00PBQASxikx2AY3arrer6d7bXooAFIc
sTuw8amZ9/u7n5geCoAUw95C/zz5Z3+9wZxs03dlul8iADNaWlp0bC0vL9f3
JyYmdD766dOn1uWfe1+OU1MeQMpxSgy2waMnL/XnhPwEAJPIbwQn+7uPnHtg
ehgAUgyx2b+vf6tS7ZbWO931c6X6+niV6WEAKUt6D0p8ffHihffYtm3b1M2b
N3X9jcW9CAPV31h8M2VkfNpdU/5Wq7ExAECiMUcOnax7ls8JWQcNACYRu4Pb
/zs9YwEkHvHZv/vNA6aHEDH5TNn+/U3TwwBS2pdffqn++ecf/bvUgZb1z319
fWp0dFT/3tvrru0jvQed3H9wdu59TflCe/qwAkC0nBKDbTA26d7PLXWgAcAk
Yndwp6816Zg9NTNneigAUgjxOTll//lQrTlUYnoYQEprampSmzZtUl988YVe
3/zHH394z+Xl5an169ertLQ0vS56cHBwxfOdEp+lKsh/9xWpnL8emx4KACSM
U2KwDaR+1Md7CtUvf9ebHgqAFEfsDu7Gw26df7Z1rzcAOxGfk9OJyw3W1q4G
konL5VLd3d1qdnZ2xTmpCd3T0+P3/1MnxecNR6gTByC1mK59ZBvZy51x5p7p
YQBIccTt4J72jOpcQfnjHtNDAZBCiM/JKb/kif5MefOWPTWArZwUn3f+VKFr
4gNAqnBSDLbBN7/dUZ//WG56GABSHLE7uMnpWZ0rOHud2noAEof4nJyuVLXr
z5QXo29MDwVAhJwUn/fm3lFpP5BXAJA6nBSDbZD95yP12cHrpocBIMURu0Mj
exsPn71vehgAUgjxOTndfNTrrunUT00nwFZO2vud9cdDtfYwNeUBpA6nxF9b
nC5097Oanpk3PRQAKYzYHZqM09VqY2aZ6WEASCHE5+T0oHlAfwdoaBsyPRQA
EXJSfJaeUh9RUx5ACnFSDLbBtTsdeu45MDxpeigAUhixOzRni5p1zJ56u7JH
DQDEA/E5OTV3DuvPk7sN/X4fM/5mhvocgIM5KT5LfTjWtQFIJU6KwTaQOad8
TjR1jJgeCoAURuwOjWe/dGsv+6UBJAbxOTn1vJzQnyclD7pXnOsaGFPHLtXp
89n5jwyMDkAonBSfL1e26Zgx/HrK9FAAICGcVAPJBi3dI/pzoqrO/9oHAIg3
YndoWntHdcy+9ajH9FAApAhic3IaGZ/WnyeXKlr1/XnXv6q68bn65sRdfVz2
0f+/97exybeGRwvAFyfF5xs1XTpeyPUrALDF4OCg6uvrUwsLCyvOjY2Nqc7O
Tr91hZwUg20ge+rkc+LK7TbTQwGQwojdoZG6GxKzpXY/ACQC1weT0+ycS3+e
5FyoVQUVbWpD5g19f3VGscoradFrGBvbh/QxqdcHwHmcFJvl+pV7X/Ww6aEA
QFAvX75UW7ZsURs3blRbt25VmzZtUs3Nzd7zeXl5av369WrHjh36vOSpl3NS
DLbB7Lx77nnqaqPpoQBIYcTu0G367oY6ePqe6WEASBHE5+QkK3n+36I1zjtz
KvTempnZD7VbZb3PlqNlaseP5YqOYoDzOCk+17e5r1fdbxowPRQACErWNjc0
NHjvHz9+XO3atUv/PjIyotasWaP6+911IrKzs9XRo0dXvIaTYrAtVh8qVll/
1JgeBoAURuwO3eGzD9SGI6WmhwEgRRCfk5eseT587r7uRegvv3yp/Jm770AP
fQcAp3HS/pSO52M6VpQ9pEYcAPsUFhbqtc6ioKBApaene8/V19erDRs2rHiO
U+KvTWS9w+5fq0wPA0AKI3aH7tz1Fj2/n5yaMT0UACmA+Jy8xqdmgz5mZMxd
J/qXv+sTMCIA4XBSfKauJwBbzc3N6dyz1NwQubm5KiMjw3t+aGhIrVq1akUd
aCfFYFvIugdZ/wAAphC7Q1fxuFfP7592j5oeCoAUQHyGfFf4dH+Rmp6ZD/5g
AAnjpPg8Oe3uUZJX/MT0UAAgZNJ3cO/evergwYPe/HI4+efFNwR34nK97nHt
8tHvEQASgXgduvb+1+79jTXdpocCIAUQn/GgeYB99YADOSk+L/z7r44Txwvq
TA8FAEIiuecDBw7o/LPL5fIel/obnlrQgvobsXPppruu28j4tOmhAEhRxO7Q
yfoz+sYCCJXMp+fn57235Ws3pP9KZ2fniuMexGfMuxbUum9L1e7j1OsDnMRp
8Vn6SmXnPzI9DAAISua9hw4dUt98842eHy82Ojqq+w/29vbq+9J7kP6DsSG9
riWX0d5HXxEAZhC7w7PlaJnaf6ra9DAAWGD79u1q7dq1av369fp2/vx57zmp
cyfHpObd1q1b1eDg4IrnE58hZE+9fF/oeTlheigA3nNafN6afZP5KQArNDU1
6Rgqc+R169bp27Zt27znPXPktLQ0fZw5cmzUtr7U80nZWwcAJlAzKTxHzt9X
aw+XmB4GAAtI/rm2tnbF8ZGREb22o7+/X9/Pzs5mbQf8Ghie1N8XThc2mR4K
gPecFp93/1qlvvy50vQwACAmJiYmVE9PD3sEY6jnxbieTxbf7zI9FAApitgd
nrySFh23x9/MmB4KAIeT/PPFixdVdXW1Gh8f9x6X2nbp6ene+9S2QzB7c+/q
/fVz867gDwYQd05bv3H47H216bsbpocBAAnhpPhri/GpGZ3HyC+hVy0AM4jd
4bld16fjdnPnsOmhAHC43bt3qz179uifssewvLxcHw+ntzcgKmvdnz3Vjc9N
DwVIOslQn//HC4/Vp/uLTA8DABLCaTHYBvJp9p+9hSrnr8emhwIgRRG7w9Px
/LXOAZTc7zQ9FAAWKSwsVBs3btS/h5N/XnxD6pqZnVefHbyuMk5T3xWIpVOn
Tun4eufOHe8xG+vzn7raoOen7JEAkAqYG0dG9wr4/Z7pYQBIUcTt8EgOQOb3
J680mB4KAIsMDw/reOtyuXT9jV27dnnPUX8DoZDPHfn8GXo1ZXooQFJob29X
X3zxhdqyZYs3/2xrff6LZa06PryepD4cgOTntBhsi725d1TaD7dMDwOApSSX
IfsGPTfb9w/aQK4bSuwGAH+mp6d1/PU4e/ast7f36Oiozm/09vbq+5LbsCG/
AbM8+28ulD01PRTAejIv/vLLL1VTU9OS/LOt9fmLqjt0fOgfnDQ9FACIO6fF
YFtIraZP9hcp35khAAhM+ltJXVHZJyi38+fPe8/ZuH/QBll5NboPFHEbgD99
fX1q3bp1OkZLbkNujY2N3vOe+JyWlqbz0sRnBCOfObt+rtQ9xhb8XFMGEBq5
JvjTTz/p3xfnn22tz19Z26vzz609r0wPBQDizmkx2Bbnrrfoz4o3b+dMDwWA
hSS3UVtbu+K4rfsHbZBf+oQ9jgCCkj0pPT09On/hy8TEhD7P/hSESnoPyOdP
7TPf/00BCK6rq0tf93v79q2+H2n+2Un1+R89ealjw+OnL00PBQDizglx10ae
vTJ9gxOmhwLAQpJ/vnjxoqqurlbj4+Pe47buH7RBVX2fjtsN7Xz/BxA/xGcs
Nzk9q/67r0hl5z8yPRTAWtJz0LM/RW6SX968ebMqLi62tj7/055RPTetrO0z
PRQAiDunxWBb3G8a0J8V9W3kMQCEb/fu3WrPnj36p9ThKC8v18dt3T9og54X
4zpuF93rND0UAEmM+Axfci7Wqo/3FKqxybemhwJYaXJyUu8P9Nw2bdqkrl27
pqampqytzy91n/XctLrD9FAAIO6csvfENq29r/RnRcXjXtNDAWC5wsJCtXHj
Rv27rfsHbTA371IfvYvbJy43+H2MvM9XbrcR2wFEjJgMX5o7h/V3B/mMARC9
xfU3hI31+V9NvNVx4WJZq+mhAEDcOS0G22L49ZT+rCioYA4JIDrDw8M6Frtc
Lmv3D9oi7Ydb6psTd32ekzVph8/e17FdbkNj0wkeHYBkQHyGL3J9c/v3N9Wm
78rUvIs+hEA82Faff3bepeecp642Bn8wAFjOaTHYFvOuBf1ZcfKK/3V0AODL
9PS0Ghsb896XXt6yTkPYun/QFtn5D9VnB4vV8m8lTR0jasORUh3XD59x56Az
Tlf7/f4CAP4Qn+FPWU23/nypqus3PRQgJTkxPn+yv0jlXFjZkxwAko0TY7At
1n1bqjLPPzA9DACW6evr8/ZPkb2Dcmts/LDuwcb9g7aQ/Y3y3X903F1/07Ww
oC6UPdXHJP/c1DGsj1+48UQfu1HTZXC0AGxEfIY/stZRvj/szCnn+iZggBPj
88bMMr3/DgCSnRNjsC3Sj1XqGwCEa35+Xu8PlPrOvti2f9AW1Y3PdV65oW1I
jYxPq/0n77rXOp+5p8YmZ7yPm3O51Jc/V6pP9xepwdE3BkcMwDbEZwRy+Xa7
/tx5/PSl6aEAKceJfVN25lSo3b9WmR4GAMSd0+KvTWTts6xhAIBEI3ZHpvfl
uP7ef/D3arXmcKnuRyi5AF95/u6BMfXxnkKdo2adGoBQOTG/Aed483ZO/e9A
kdqb67sXAYD4cWJslnnm9u9vmR4GAMSdE2OwLaT2s+QxZJ0cACQSsTsyEq89
/QWlB1Rrz6uAj79U/kw/tuheZ4JGCMB2xGcEk1fsrvEU7DMIQGw5MT5Lb5LV
h4pNDwMA4o41GpErqGjTc8fh11OmhwIgxRC3I7f9+5t6/fPk1EzQx867/lW7
f6lSn+wrUgMjkwkYHQDbEZ8RzOj4tPrP3kKVmVdjeihASnFifD5eUK9zCgvs
tQOQ5JwYg21R8bjXvXahl7ULABKL2B25pz2jKpwZft/ghM4TfPPbHb4bAAiK
+IxQnLjszjnJZwyAxHBifM4rbtaxYHJ61vRQACCunBiDbVHfNqQ/K+41DZge
CoAUQ+xOrCtV7n5R8hMAAiE+IxSyp0Y+V45dqjU9FCBlODE+e3qS0u8aQLJz
Ygy2haxX0HVBqztMDwVAiqF2UmK5FhbU179V6XXQ/YPU4QDgH7EZocr+86Hu
czs0Nm16KEBKcOL8uaymW+cUOp6PmR4KAMSV0+KvTaR/tXxWnLveYnooAFIM
sTvxBoYndR3o3b/e1nWhAcAX4jNC1d7/Sn+XOF3YZHooQEpwYnyWvdQSB2Rv
NQAkMyfGYFtI9uGT/UXqxwuPTQ8FQIohdpsh+13kO8LlyjbTQwHgUMRnhEP6
4X767vvE+BS1X4F4c2J8bmh31/SsbnxueigAEFdO3INik7Qfbqm9uXdMDwNA
iiFumyH9B9N/ua2vPb6enDE9HAAORHxGODz9ZC7dajU9FCDpOTE+dw2M6Rhw
o6bL9FAAICQul8vn8bGxMdXZ2an+/df3XmEnxmCb7P/9ntqafdP0MACkGGK3
Oa29o/p7wskrDaaHAsCBiM8Ih3xDSz9WqdYcKlEzs/OmhwMkNSfG56FXU+yt
A2CFrKwstWHDBh1La2pqlpzLy8tT69evVzt27FBbt25Vg4ODK57vxBhsk5y/
Hut+VFQCBZBIxG6zsvMfqo/2XFMDI/QiBLAU8Rnhkn33kn+6fq/T9FCApObE
+Dz1dlb//3/2erPpoQBAQJJzHhgYUBs3blySfx4ZGVFr1qxR/f39+n52drY6
evToiuc7MQbbJL/kif68GJ9iHzaAxCF2m9U/PKE+ehf7s/98aHooAByG2nYI
l2thQe+n3JxVRn9bII6cGJtln7rMKX/5u970UAAgJMvzzwUFBSo9Pd17v76+
Xq+TXs6JMdgmxfe7dP6558W46aEASCHEbvNOXG7Q8b+975XpoQBwEOIzIlFW
060/U6rq+k0PBUhaTr0+uOZwqcr6gzUNAOywPP+cm5urMjIyvPeHhobUqlWr
VtSBdmL8tcmD5gE9Vzx9rVE1tA1x48YtRW5jhnvPEbvNGx2f1n0I95+8Sw0m
AF7EZ0Ridt6lVmUU6x63APyTvEZvb69aWFhYcc7W3lfbv7+p9ubeMT0MAAgJ
+Wcz2vtf6/wzN27cUut2v3nAaOwhdjtD/o2n+r+H2taXpocCwCGIz4iUp65f
18CY6aEAjjM8PKy2bNmi8x7S20p+NjY2es/b3Pvq6+NVaudPFaaHAQAh8VV/
Y9euXd77gepvLL4hPNOz86rmyUtu3Lil2E3WvppEzHYG6Rmz5lCJ2plTrhb8
rLUBkFqIzYjUi5FJnX8+dbUx+IOBFDM+Pq5zGh6y3u7LL7/Uv9ve++rwuftq
w5FS08MAgJAszz+Pjo7qGCx7U4TEX5tiMADAP2K3cxRVd+h8QWVtn+mhAHAA
4jOiITWdpA6H1OMA4F9xcbHavn27/t323lc5Fx+r/+4rop4bAEfLzMxU69at
07F07dq1es+Jh2cPSlpamtq2bZtVe1AAAP4Ru51jzuVSW46WqU3flZEvAEB8
RlRu1/fra5pV9VzTBPyZn5/XdTbOnj2r79tee/T0tSb9//3sHPNIAPaamJhQ
PT091tXgBwD4R+x2Fk++4NqdDtNDAWAY8RnRkPzTZweL1f7f75keCvD/27sT
tyiutH/c/+lvluQdY9wStyw6M4lGYxajJBmzTcwe4pgxZjJKXOMW425wNyrK
IgqCgkZFWc7vPccXviqINDRUdfd9X1dd0F1d8HCAh+ZTp0/lUrzu4OLFi8Oi
RYsGMo5Sz5+/3XrveiJtGa/vBzCe8tqDAXg0vTtf4trP897bEZ5asiH8fvtu
1uUAGdKfGatP/3skZVGX2n/PuhTIlZgnx5x5wYIFoafn/80VLvVrX9XsqUu/
8/WXr2ddCsC4yVPfBWBk9O78+fW31vS/Q/XGE1mXAmRIf2aszjd3pL8nqzaf
yroUyJU33ngjvPTSS2n9jfuV+rWvdv7amH7nT56/knUpAOMmb+f+AHg8fTt/
4is8X/3sl3T9mPbO21mXA2REf6YY5n+wM0x7c1Po6e3NuhTIhZMnT6b+GnPm
eP2ruM2cOXNgfylf++rQqcspf95/ojnrUgDGTV57MACPpnfn07mL9+asxe3J
xT/abLYMtnW76zLtA+Z2UAyb9p1Pf0tiLgWMTKle++p0w9X0+77tUH3WpQCM
m7z2YAAeTe/Or+93nAkr/n3IZrNltGWd1+nPFEO8lsATr9SEZd8cyLoUKBt5
7c+Nrdddxxooe3ntwQA8mt4NkE/6M8Xy/r8Phz8sWBeu3ejKuhQoC3ntzx3/
+zue1nzfdDLrUgDGTV57MACP5vXdAPmkN1MsJy60pUzqh11nsy4FykJenz/f
7elJv+uf/HAk61IAxk0e+y8Aw9O7AfJJf6ZY4gq2s9/emrahV7MFCpHn/hyv
X/Du6kNZlwEwbvJ6DhCAR9O3AfJJf6aY4tznOC8yzoUGxibP/XnyaxvT7/rf
Ptxps9lsE77tONw47n0uzz0YgKHp3QD5pD9TTHHt57gGdFwLGhibPPfnFasP
Z54/2Wy2yt3kzwAMRe8GyCf9mWJb9s3+8MQrNeHm7TtZlwIlTX8GyI4eDFB6
9G6AfNKfKbZDpy6n1+Vv3n8+61KgpOnPANnRgwFKj94NkE/6M8XW09sbpi3d
HOZ/sDPrUqCk6c8A2dGDAUqP3g2QT/oz42H15pNpDvT55o6sS4GSFfuzHg2Q
Df0XoPTo3QD5pD8zHlraf0/5c9z+/EqNzVaS27qfz2X6e6Q/A2THOUCA0qNv
A+ST59aMl9VbToUPvqu12Up2O3z6cqa/Q3ozQHb0YIDSI98AyCe9GSCf9GeA
7OjBAKVH7wbIJ/0ZIJ/0Z4Ds6MEApUfvBsgn/Rkgn/RngOzowQClR+8GyCf9
GSCf9GeA7OjBAKVH7wbIJ/0ZIJ9cPwUgO3owQOnRtwHySX8GyCf9GSA7ejBA
6dG7x8b4jY3xGxvjNzZ5H7+815d3xm9sjN/YGL+xyfv45b2+vDN+Y2P8xsb4
jU0exi8PNQBQmLH2bsc73vGOr9Tjx1ve68s74zc2xm9sjN/Y5H388l5f3hm/
sTF+Y2P8xiYP45eHGsqBcRw7Y1gcxnHsSmEMs85vHO94xzu+VI8fb1l/fY53
vOMdX6rHj7esvz7HO97xji/V44shD19D1jX4GvJRg6/BGOSlhjz05sfJ+mt0
vOMd7/hSPX68Zf31Od7xjnd8qR4/3rL++hzveMc7vlSPL4Y8fA1Z1+BryEcN
vgZjkJca8tCbo1iHzWaz2Yq36c82m82Wz01/ttlstnxuxezPWR6fhxp8Dfmo
wddgDPJSQzF77HgphRoBKpH+DJBP+jPA+Mo6K7fZbLZK2iaqrwOQP/ozQD7p
zwDZ0YMBSo/eDZBP+jNAPunPANnRgwEodz09PUPe39HREerq6kJfX98EV1Qa
ent7Q2NjY2hpaRlyv/EbXvy5q6+vDxcvXhxyjJqbm9PG8OLP4VC/w8avPOjP
o6M/j43+XBz6c3nTn0dHfx4b/bk48tif5c8AlKO7d++GefPmhaeffnrIv3XV
1dVh6tSpYe7cuWHmzJmPfI5YqXbu3BmmTZuWxia+feGFF0JnZ+fAfuM3vPPn
z4cpU6aE2bNnh2effTZt8X+NKD6XXrx4cZgxY0a6f+HChek5IoPF/9Hiz9/z
zz8/cJ/xK33689joz2OjPxeH/lye9Oex0Z/HRn8uDv25fMTv26O+T87FjExr
a2toaGgYchzv3LkTzp49G7q6ujKorHQ87ryg86qFieM51M9jHMNr165lUBFj
Fb+fu3btCmfOnBn0/LmtrS1Mnjw5NDU1pdtVVVVh+fLlWZSZW7EP9/89i2P5
17/+NXz44YfptvF7vO7u7rT1e+utt8KSJUvS+5s3bw6zZs1K/+PF3jNnzpyw
cePGrErNtddeey09V77/+bPxK33689joz2OjPxeH/lye9Oex0Z/HRn8uDv25
9B07dix9jyZNmhRefPHFB/Y5lzAyV65cSeMzffr0dL4vvj169OjA/v379w+c
p4nnBffs2ZNhtfk13HnByHnVwhw8eDA9v3r//fcH7os/q7E/xzGMP5Nffvll
hhUyFpcuXRr0/Hnt2rVh/vz5A7dra2vT95lHW7ZsWXj77bfT+8avcHHs4hhG
8Tnhxx9/PLDvs88+C6+++mpWpeXW9u3b0/Op9evXP/D82fiVD/25OPTnsdGf
C6c/lz/9uTj057HRnwunP5eHy5cvh8OHD4fvvvtuUP7sXMLIxNeexD7bb+XK
lQ+MZcxT4+9JtGnTpjSmDDbceUHnVQsT59vHjPmll156IH+Of+viuEbxHHZ8
DVqct0/pGer5c+w9/b8zUfzexnOLXi8wtNhP4jmvX3/9Nd02fiMTz0PHv3H9
57L6X38Z//eIzyX6rVu3Lr3Wlf/nxo0badzic6+Hnz8bv/KhP4+d/jw6+vPo
6c+VQX8eO/15dPTn0dOfy88PP/wwKH92LmF0NmzYkDLnKK4j8dRTTw3kqrHv
xBw1rjHB8O4/L+i8amFWrFiR5osvXbr0gfw5vpYhzsfv9/e//z2sWbMmixIZ
I8+fx6a9vT29jmLVqlUD9xm/kTt9+nTYvXt3eO6558I///nPdJ/nf48Xe/Lq
1avT+54/ly/9eWz057HRn0dHf64M+vPY6M9joz+Pjv5cfobKn30vCxdz5ng+
q39dgwMHDqT1OO4X15XYu3dvFuXl3qPOC/q7NnIxm489OY7Nw/lzHLN43eJ+
cf9HH32URZmM0aNeP3h/j3aeZmhXr15NPeaLL7544H7jV7h4PZp4XiuK56z7
n0tHzlkPFs8/x/PTcYvPDeL56biGYmT8yof+PHr6c/Hoz4XRnyuD/jx6+nPx
6M+F0Z/Lj/x57GJ2GtfLXrRo0UAuKn8u3FDnBeXPIxPXyonr5Jw6dSrdlj+X
r6GeP8c5CfHvc7wOahTXqLFOzYPiOa34O/LJJ58M2mf8Hi/23thn+r333nsD
z/+2bNkysGZXPBdrza7B4rpH8XWrcYtzh+J51vi7HBm/8qE/j47+PDb689jo
z5VBfx4d/Xls9Oex0Z/Lz6PW33AuYWRiDhrz0QULFqS1svtZf2P07j8v6Lzq
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
asmG8O7qQ1mXAQAAABQor9lzdKvLmp8AQxlt71616WTqqzOrtoYXVmwvclXj
Z9rSzWnuNgAAAFBa8pw/x3l5/7O4JixcuTvrUgByZbS9+8df6lL+HLdSynNn
v/1TePXzPVmXAQAAABQoz/lzVLXq3mvEu3t6sy4FIDdGu3bSz0eaBvLnz9eV
zvX84lztlz92LhIAAABKTd7z5y0H6lNOcrzuStalAOTGaHv3kbOtA/lzzS/n
ilzV+Hnpo11h3vs7si4DAAAAKFDe8+cr126mnGTVplNZlwKQG6Pt3RcudQzk
z/tONBe5qvGz6LM9Yc47P2VdBgAAAFCgvOfP0Zx3toX55r0BDBht7+640TWQ
P59v7ihyVePnza/2hRlvbcm6DAAAAKhYly5dCvX19aGvr++B+zs6OkJdXd2g
+/uVQv78+fpjKSuJuQkAo+/dPb29A/nz77fvFrmq8VP1r4Nh8msbsy4DAAAA
Ks61a9fCvHnzwvTp08OsWbPCX//614F91dXVYerUqWHu3Llh5syZoaWlZdDx
pZA/H/7t3nqlu35tyroUgFwYS+/uz5+HPiuZT+//+3B4YlFN1mUAAABAxXn9
9dfDsmXLBuY3d3XdmyPc1tYWJk+eHJqa7mW2VVVVYfny5YOOL4X8uetOd/jT
wvVhxbeHsy4FIBeKkT+Xko//c7TkMnMAAAAodTdv3gyTJk0Kzc3NYefOneHM
mTMD+9auXRvmz58/cLu2tjZMmzZt0Mcohfw5WvL5L+Hp1zc+ch0RgEoylt69
6JPdYdk3+4tYzfj7suZ4yp/vdPdkXQoAAABUjBMnTqQ5zs8991xYsmRJePbZ
Z9Nc6GjlypXpvn6tra0pq344vy2V/Hn97rMld70sgPESe/do+/c7qw+kPLeU
rNp8Kv0NuHHTdQAAAABgohw9ejTlD3HucxSvNRjz6DgPupD8+f4trxoud6bs
Ye2O37IuBSBzY+nXZ5uupZ5aSr7fcSb9DWjvvJ11KQAAAFAx4hrPMYO4cuXK
wH3xOoPbt29P62/E6xL2K/X1N2JqPn3plvS6cYBKVyq9u1jW7a5L+fOlthtZ
lwIAAAAV5fnnnw/r1t27jlRjY2N46qmn0nrQ7e3taS50Q0ND2hevPViq1x/s
99F3v4Y/LlgfbnbdzboUgEyVUu8uhi37L6T8uf5Sac3bBgAAgFJ35MiRMH36
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
V1eHqVOnhrlz54aZM2c+MmOtVDt37gzTpk1LYxPfvvDCC6Gzs3Ngv/Eb3vnz
58OUKVPC7Nmzw7PPPpu2mNVHMYtevHhxmDFjRrp/4cKFKWNlsHiOI/78Pf/8
8wP3GT8AAKDcxf97HvV/jrk4I9Pa2hoaGhqGHMc7d+6Es2fPhq6urgwqKx2P
m1dnXmJh4ngO9fMYx/DatWsZVMRYxe/nrl27wpkzZwblz21tbWHy5Mmhqakp
3a6qqgrLly/Poszcin24/+9ZHMu//vWv4cMPP0y3jd/jdXd3p63fW2+9FZYs
WZLe37x5c5g1a1Y6RxJ7z5w5c8LGjRuzKjXXXnvttZQ1358/Gz8AAKBcHTt2
LP2PM2nSpPDiiy8+sM9cnJG5cuVKGp/p06en+XLx7dGjRwf279+/f2CeU5xX
t2fPngyrza/h5tVF5iUW5uDBgymffP/99wfuiz+rMd+IYxh/Jr/88ssMK2Qs
Ll26NCh/Xrt2bZg/f/7A7dra2vR95tGWLVsW3n777fS+8StcHLs4hlHMVD/+
+OOBfZ999ll49dVXsyott7Zv356eT61fv/6B/Nn4AQAA5ery5cvh8OHD4bvv
vhuUP5uLMzLxtdsxp+i3cuXKB8Yy5qnx/8xo06ZNaUwZbLh5deYlFibOt48Z
80svvfRA/hyzojiuUZwDGtdwiPP2KT1D5c+x9/T/zkTxexvPLXq9wNBiP4nn
vH799dd02/iNTDwPHf/G9Z/L6l+/JGb38blEv3Xr1qW1Yvh/bty4kcYtPvd6
OH82fgAAQLn74YcfBuXP5uKMzoYNG1LmHMV1JJ566qmBXDX+3x5z1LjGBMO7
f16deYmFWbFiRZovvnTp0gfy5/hahjgfv9/f//73sGbNmixKZIzkz2PT3t6e
XkexatWqgfuM38idPn067N69Ozz33HPhn//8Z7pPfvp4sSevXr06vS9/BgAA
Ks1Q+bP/hQoXc+Y4H6x/XYMDBw6k9TjuF9eV2Lt3bxbl5d6j5tXJhUYuZvMx
04hj83D+HMessbFx4Hbc/9FHH2VRJmP0qPU37u/RztMM7erVq6nHfPHFFw/c
b/wKF6/nGM9rRfGcdX8WHTlnPVg8/xzPT8ctPjeI56fjGuSR8QMAAMqd/Hns
YnYa18tetGjRQC4qfy7cUPPq5M8jE9fKievknDp1Kt2WP5evofLnOKc35lvx
OqhRXKPGOjUPiue04u/IJ598Mmif8Xu82Htjn+n33nvvDeSnW7ZsGVizK56L
tWbXYHHdo7juS9zi3Pt4njX+LkfGDwAAKHePWn/DXJyRiTlozEcXLFiQ1sru
Z/2N0bt/Xp15iSMT17GNP2/98+vi2rZxixlRZP2N8tD/vY35c3wb1/nu13+d
zphdxSzLdTof9PXXXw+MW//2xhtvDOw3fsOrqalJYxbHJ55bjW/PnTuX9sW/
g/E5QuwzcXvllVdcs3gYD6+/YfwAAIByN1T+bC7OyMX8ImZA918/r18ctzh3
PIrj5/qDQxtuXp15iSMTx69/bl3cYpYRxymuNxDFNbXjnOcozsOLY+r6g+Xn
+vXr6RyX1weMjvEbXldXV7hw4cJAX3lYzOzj9fUYHeMHAACUm/ha/DiXKeZQ
8bX58f3+1yWbizMyJ0+eTPPp4hj2z6eL17XqF+ebxrm6cT2JOK/O2htDG25e
XWReYuEeXn/jypUrae5sHMM4lv3rlAMAAABAVszFGbs4L/X8+fPhzp07WZeS
a4+bV2deYnHEeeT913YEAAAAAAAAAAAAAAAAAAAAAAAAAAAqw/8P057lIw==

    "], {{0, 687}, {1440, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1440, 687},
  PlotRange->{{0, 1440}, {0, 687}}]], "Output",
 CellChangeTimes->{{3.740397261912825*^9, 3.740397294299575*^9}, {
  3.740397406618224*^9, 3.740397459820386*^9}},
 CellLabel->"Out[70]=",ExpressionUUID->"924636ea-716f-4b9e-866a-ad7ee608ece8"]
}, Open  ]],

Cell["\<\
10 randomly generated combinators of size 50, with their lengths plotted \
until n=40.\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.7403971181930532`*^9, 3.740397136594475*^9}, {
  3.7403972613966312`*^9, 3.7403973003130207`*^9}, {3.740397370299308*^9, 
  3.7403973721634293`*^9}},ExpressionUUID->"bab8f28d-b8be-47fa-9e03-\
6e7a8496da78"],

Cell["\<\
After evaluating a number of these combinators, it appears that they tend to \
either halt or grow exponentially - some sources (citation needed) reference \
linear growth combinators, however none of these have been encountered as yet.\
\>", "Text",
 CellChangeTimes->{{3.740397626910338*^9, 3.740397636337317*^9}, {
  3.740397873005384*^9, 
  3.740397909971043*^9}},ExpressionUUID->"27a4b7d6-738f-46f1-821f-\
0d51b06b0a7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Halting Times", "Subsection",
 CellChangeTimes->{{3.739801932458644*^9, 3.739801933140833*^9}, {
  3.740398362457068*^9, 
  3.740398366678959*^9}},ExpressionUUID->"5c8d4e0b-ed1c-43a3-b97d-\
45ffe526cf09"],

Cell["\<\
With a random sample of combinators, we can plot a cumulative frequency graph \
of the number of combinators that have halted at a given number of steps:\
\>", "Text",
 CellChangeTimes->{{3.740398504222279*^9, 3.740398518351707*^9}, {
  3.74039858368407*^9, 3.740398634953742*^9}, {3.740398669425778*^9, 
  3.740398679784664*^9}},ExpressionUUID->"908b0707-613b-4c9d-9c55-\
4764f39ace2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SKHaltLength", "[", 
   RowBox[{"expr_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"x", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"SKEvaluateUntilHalt", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"x", ">", "n"}], ",", "False", ",", "x"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], " "}]], "Input",
 CellChangeTimes->{3.740398684506373*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"f0156475-7826-4ef8-9db8-eb57a4983069"],

Cell[TextData[{
 "Returns the number of steps it takes the combinator ",
 StyleBox["expr",
  FontSlant->"Italic"],
 " to halt; if ",
 StyleBox["expr",
  FontSlant->"Italic"],
 " does not halt within n steps, returns ",
 StyleBox["False",
  FontSlant->"Italic"],
 "."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.74039870036619*^9, 
  3.74039874166111*^9}},ExpressionUUID->"2ff0673b-fbc8-425d-b1ac-\
6e5d7cc41282"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GenerateHaltByTable", "[", 
   RowBox[{"depth_", ",", "iterations_", ",", "number_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"exprs", ",", "lengths"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"exprs", " ", "=", " ", 
      RowBox[{"Monitor", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomSKExpr", "[", "depth", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "number"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lengths", " ", "=", " ", 
      RowBox[{"Monitor", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"SKHaltLength", "[", 
           RowBox[{
            RowBox[{"exprs", "[", 
             RowBox[{"[", "n", "]"}], "]"}], ",", "iterations"}], "]"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"n", ",", "number"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "lengths", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{3.740398684506373*^9, 3.7403987740254917`*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"9c4fa563-abbe-4c5f-8887-1626e2cfeee3"],

Cell[TextData[{
 "Generates a table of the halt lengths of ",
 StyleBox["number",
  FontSlant->"Italic"],
 " random combinator expressions (",
 StyleBox["False",
  FontSlant->"Italic"],
 " if they do not halt within ",
 StyleBox["iterations",
  FontSlant->"Italic"],
 " steps) with leaf size ",
 StyleBox["depth",
  FontSlant->"Italic"],
 "."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.74039870036619*^9, 3.74039874166111*^9}, {
  3.740398794914069*^9, 3.7403988003535347`*^9}, {3.740398830728633*^9, 
  3.740398918035157*^9}},ExpressionUUID->"b4c8d3fa-27ea-408f-854b-\
946c8e7e2026"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GenerateHaltData", "[", 
   RowBox[{"depth_", ",", "iterations_", ",", "number_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"haltbytable", ",", "vals"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"haltbytable", " ", "=", " ", 
      RowBox[{"GenerateHaltByTable", "[", 
       RowBox[{"depth", ",", "iterations", ",", "number"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vals", " ", "=", " ", 
      RowBox[{"BinCounts", "[", 
       RowBox[{
        RowBox[{"Sort", "[", "haltbytable", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"iterations", "+", "1"}], ",", "1"}], "}"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Total", "[", 
        RowBox[{"vals", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "n"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "1", ",", 
         RowBox[{"Length", "[", "vals", "]"}]}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{3.740398684506373*^9, 3.740398930036763*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"32433d67-daf8-49b5-a2c8-c73cbeeaaaaf"],

Cell[TextData[{
 "Generates a table of the number of ",
 StyleBox["number",
  FontSlant->"Italic"],
 " random combinator expressions (",
 StyleBox["False",
  FontSlant->"Italic"],
 " if they do not halt within ",
 StyleBox["iterations",
  FontSlant->"Italic"],
 " steps) with leaf size ",
 StyleBox["depth",
  FontSlant->"Italic"],
 " that have halted after a given number of steps"
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.74039870036619*^9, 3.74039874166111*^9}, {
  3.740398935987959*^9, 
  3.740398977022847*^9}},ExpressionUUID->"3816353d-649d-4696-9da3-\
acc4009bcb7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GenerateHaltGraph", "[", 
   RowBox[{"depth_", ",", "iterations_", ",", "number_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"cumulative", ",", "f"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"cumulative", "=", 
      RowBox[{"GenerateHaltData", "[", 
       RowBox[{"depth", ",", "iterations", ",", "number"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"f", "=", 
      RowBox[{"Interpolation", "[", "cumulative", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"cumulative", ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "number"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"GridLines", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "number", "}"}]}], "}"}]}], ",", 
         RowBox[{"Epilog", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{"Red", ",", "Dashed", ",", 
            RowBox[{"Line", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"cumulative", "[", 
                  RowBox[{"[", 
                   RowBox[{"-", "1"}], "]"}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"number", ",", 
                 RowBox[{"cumulative", "[", 
                  RowBox[{"[", 
                   RowBox[{"-", "1"}], "]"}], "]"}]}], "}"}]}], "}"}], 
             "]"}]}], "}"}]}], ",", 
         RowBox[{"AxesOrigin", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], ",", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Number of steps\>\"", ",", 
            "\"\<Number of combinators halted\>\""}], "}"}]}]}], "]"}], ",", 
       RowBox[{"cumulative", "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}]}], "}"}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 CellChangeTimes->{3.740398684506373*^9, 3.7403989874955597`*^9, 
  3.7403992285548267`*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"891f2587-b255-47b4-982a-25acab48f6ba"],

Cell["Plots a graph of the above data.", "NumberedFigureCaption",
 CellChangeTimes->{{3.74039870036619*^9, 3.74039874166111*^9}, {
  3.740398990842914*^9, 
  3.740398995666738*^9}},ExpressionUUID->"5a6eea20-4213-4f0c-bb9d-\
4f09ed66c471"],

Cell[CellGroupData[{

Cell["Halting Graphs", "Subsubsection",
 CellChangeTimes->{{3.740405267057579*^9, 3.740405272530611*^9}, {
  3.740405493778458*^9, 
  3.740405561259933*^9}},ExpressionUUID->"7a3ceb1d-3315-4a22-a6c1-\
3ddbe2fda4b3"],

Cell["\<\
We analyse halt graphs of random samples of 1000 combinators (to depth 30):\
\>", "Text",
 CellChangeTimes->{{3.740398998325502*^9, 3.7403990030025*^9}, {
  3.7403990901962852`*^9, 3.740399137521531*^9}, {3.740405523130414*^9, 
  3.740405526635556*^9}},ExpressionUUID->"1181c8a0-f19b-4ddd-bb63-\
62eb16b74a8a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudEvaluate", "[", 
  RowBox[{"GenerateHaltGraph", "[", 
   RowBox[{"10", ",", "30", ",", "1000"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740399120479372*^9, 3.7403991292525663`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"3fd1aa79-2b94-40ca-b5ce-e0cb4ffd71e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyzsKwmAUhNGfVJYpUliIRBEJIiG+4jtmDVmBCNaWrkAQQdNmmSlTqsxc
wRm4fJzi9k6X4uw557qf+xarD+5/OZKwLfR4pX20utEBWj/oNpo/6Q77YkP0
bu7z3zxAG/MQ9Us6Eo/Q0DwWx+JEPBFPxTPxXLwQp2hkXopX4rV4I96Kd+K9
OPv5DZl0LTM=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{
      FormBox["\"Number of steps\"", TraditionalForm], 
      FormBox["\"Number of combinators halted\"", TraditionalForm]},
    AxesOrigin->{1., 0.},
    DisplayFunction->Identity,
    Epilog->{
      RGBColor[1, 0, 0], 
      Dashing[{Small, Small}], 
      LineBox[{{0, 997}, {1000, 997}}]},
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{{}, {1000}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{398.55937500000005`, Automatic},
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30.}, {0, 1000}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {0, 0}},
    Ticks->{Automatic, Automatic}], ",", "997"}], "}"}]], "Output",
 CellChangeTimes->{{3.740399145364328*^9, 3.7403991556182833`*^9}, 
   3.740399231925467*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"5763865c-1799-484d-86b3-78cdcccff592"]
}, Open  ]],

Cell["\<\
Leaf size 10: almost all combinators in the sample (997) have halted (99.7%).\
\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740399180772546*^9, 3.740399211167325*^9}, {
  3.740399243649355*^9, 3.7403992498104258`*^9}, {3.740399435676944*^9, 
  3.740399440402418*^9}},ExpressionUUID->"bffd48e8-f53c-405f-af1f-\
322f1f3e0c44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudEvaluate", "[", 
  RowBox[{"GenerateHaltGraph", "[", 
   RowBox[{"20", ",", "30", ",", "1000"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740399120479372*^9, 3.7403991292525663`*^9}, {
  3.740399262339937*^9, 3.740399262539268*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"064ff7d5-2654-4cee-b4bd-2b52717ea21d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyMsKQXEUxeF/RoZnYGAgIekkyf1+ewQZmSgpYzI2UErkkuEZegSPZXge
Aa21lbVq9+vb6cVqsow455Kf+xYLh+5/o39G4d2Mfw99bOgYGm7pODrf0wn0
daBTaHCiM6h3prPo+ELnUP9K++jTnGdvbAGdmovikriMrs0VcRU9mmviuriB
3s1NNDC3xG1xR9wV98R98eDnN7QgMw4=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{
      FormBox["\"Number of steps\"", TraditionalForm], 
      FormBox["\"Number of combinators halted\"", TraditionalForm]},
    AxesOrigin->{1., 0.},
    DisplayFunction->Identity,
    Epilog->{
      RGBColor[1, 0, 0], 
      Dashing[{Small, Small}], 
      LineBox[{{0, 979}, {1000, 979}}]},
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{{}, {1000}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{405.4437499999998, Automatic},
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30.}, {0, 1000}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {0, 0}},
    Ticks->{Automatic, Automatic}], ",", "979"}], "}"}]], "Output",
 CellChangeTimes->{{3.740399145364328*^9, 3.7403991556182833`*^9}, 
   3.740399231925467*^9, 3.7403992681679173`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"d2039789-c14f-455a-a8ad-ce9854c78b7a"]
}, Open  ]],

Cell["\<\
Leaf size 20: 979 combinators in the sample have halted (97.9%).\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740399180772546*^9, 3.740399211167325*^9}, {
  3.740399243649355*^9, 3.740399273899654*^9}, {3.740399419088852*^9, 
  3.74039943172606*^9}},ExpressionUUID->"f4d12d5b-856d-417c-b83d-\
52c84216f769"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudEvaluate", "[", 
  RowBox[{"GenerateHaltGraph", "[", 
   RowBox[{"30", ",", "30", ",", "1000"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740399120479372*^9, 3.7403991292525663`*^9}, {
  3.740399400214241*^9, 3.740399400300405*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"b06067a3-046f-4bef-9c19-dce8e21bcbc4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQEf7BlQgQMqlwPCb/CGigtA6IRUKF8EQm8ohvIl
IHRBNZQvA6E9GqF8Bah5LVC+EpRuh9IqEPpBB5SvBqEVuqB8DQgd0A3la0Ho
EzC+DtT8HihfD0JfgPENoOb1QvmGEDoCxjeC0BkwvjGEngHjm0DoFTC+KYTe
AeObQd0D45tD/QPjW0DoHzC+JZTug9JWaHxrNL4NhBaA8W3R+HZwPgDTozCX

        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{
      FormBox["\"Number of steps\"", TraditionalForm], 
      FormBox["\"Number of combinators halted\"", TraditionalForm]},
    AxesOrigin->{1., 0.},
    DisplayFunction->Identity,
    Epilog->{
      RGBColor[1, 0, 0], 
      Dashing[{Small, Small}], 
      LineBox[{{0, 962}, {1000, 962}}]},
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{{}, {1000}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{407.1249999999998, Automatic},
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30.}, {0, 1000}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {0, 0}},
    Ticks->{Automatic, Automatic}], ",", "962"}], "}"}]], "Output",
 CellChangeTimes->{{3.740399145364328*^9, 3.7403991556182833`*^9}, 
   3.740399231925467*^9, 3.740399402420476*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"0f0ac359-69ef-450e-ad7d-a12625406453"]
}, Open  ]],

Cell["\<\
Leaf size 30: 962 combinators in the sample have halted (96.2%).\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740399180772546*^9, 3.740399211167325*^9}, {
  3.740399243649355*^9, 3.7403992498104258`*^9}, {3.7403994482750196`*^9, 
  3.740399454654819*^9}},ExpressionUUID->"414f0a56-af43-436a-9247-\
cd0a665b0a2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudEvaluate", "[", 
  RowBox[{"GenerateHaltGraph", "[", 
   RowBox[{"40", ",", "30", ",", "1000"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740399120479372*^9, 3.7403991292525663`*^9}, {
  3.740399457104847*^9, 3.740399457333342*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"e751c0d6-1821-4037-a6c9-1383ba53f0fb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxVzjsKwkAUheHBKmUKCwuRKCJBROL7rQEbS3EDgiDYiDaCYBMQ8Q0uydJl
uIQsQeWcI2Rg+PlmBuamZ6vJPGaMSX33r1jhwESXH6UFB0Oe2/SUjrNLNoHa
GzqJPne0g74DOsP3ezqLrg90Dn0caRd9neg87890AR1f6CIayh66vdIlziOX
Ue9GVziPXOX/cg217nQddeQG6spN1Jdb6Ehuowu5w//lLueXe2gg9//+ACBD
MLs=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{
      FormBox["\"Number of steps\"", TraditionalForm], 
      FormBox["\"Number of combinators halted\"", TraditionalForm]},
    AxesOrigin->{1., 0.},
    DisplayFunction->Identity,
    Epilog->{
      RGBColor[1, 0, 0], 
      Dashing[{Small, Small}], 
      LineBox[{{0, 944}, {1000, 944}}]},
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{{}, {1000}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{411.23125, Automatic},
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30.}, {0, 1000}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {0, 0}},
    Ticks->{Automatic, Automatic}], ",", "944"}], "}"}]], "Output",
 CellChangeTimes->{{3.740399145364328*^9, 3.7403991556182833`*^9}, 
   3.740399231925467*^9, 3.740399459550653*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"821041dd-5df0-4aaf-8079-db764e3d9ffe"]
}, Open  ]],

Cell["\<\
Leaf size 40: 944 combinators in the sample have halted (94.4%).\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740399180772546*^9, 3.740399211167325*^9}, {
  3.740399243649355*^9, 3.7403992498104258`*^9}, {3.74039949666609*^9, 
  3.740399507428233*^9}},ExpressionUUID->"ab017607-bde1-4edc-8e9d-\
07056f44c92b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudEvaluate", "[", 
  RowBox[{"GenerateHaltGraph", "[", 
   RowBox[{"50", ",", "30", ",", "1000"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740399120479372*^9, 3.7403991292525663`*^9}, {
  3.740399457104847*^9, 3.740399457333342*^9}, {3.740399519306198*^9, 
  3.740399519432749*^9}, {3.740405057187854*^9, 3.740405057295801*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"378fc980-a85e-46fe-b27a-f288fd42bfb4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxV0D0LQWEYxvEnk9FgOIOEJEk63t85o1HKLlE2JoMFyftiNBrPaDwfwUfw
MXwEdF2XctfTv1/3cvdEh9Pe2GeMCX/et5hX2/yP808/XWED6KpPB+kRbaHO
jA6h9pyOoN0FHWOXbBx113QCvW/oJHrb0inU29Fp7vd0Br0eaBsdHOks+pRz
vO9E59GHXGDPbBG15BJqy2W0I/MfJ3IVvcg13ivXUVduoJ7c5H1y6+c3y3kx
IQ==
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{
      FormBox["\"Number of steps\"", TraditionalForm], 
      FormBox["\"Number of combinators halted\"", TraditionalForm]},
    AxesOrigin->{1., 0.},
    DisplayFunction->Identity,
    Epilog->{
      RGBColor[1, 0, 0], 
      Dashing[{Small, Small}], 
      LineBox[{{0, 889}, {1000, 889}}]},
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{{}, {1000}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{411.40624999999943`, Automatic},
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30.}, {0, 1000}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {0, 0}},
    Ticks->{Automatic, Automatic}], ",", "889"}], "}"}]], "Output",
 CellChangeTimes->{{3.740399145364328*^9, 3.7403991556182833`*^9}, 
   3.740399231925467*^9, 3.740399459550653*^9, {3.7403995217405157`*^9, 
   3.740399527306972*^9}},
 CellLabel->"Out[85]=",ExpressionUUID->"96d6f5e9-fefc-46dc-8856-49f7b5face0d"]
}, Open  ]],

Cell["\<\
Leaf size 50: 889 combinators in the sample have halted (88.9%).\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740399180772546*^9, 3.740399211167325*^9}, {
  3.740399243649355*^9, 3.7403992498104258`*^9}, {3.74039949666609*^9, 
  3.740399549376861*^9}},ExpressionUUID->"c21759fa-fa9a-4765-a3f5-\
e263bb6d99de"],

Cell["\<\
Evidently, the rate of halting of combinators in the sample decreases as \
number of steps increases - the gradient of the graph is decreasing. As the \
graph levels out at around 30 steps, we will assume that the number of \
halting combinators will not increase significantly beyond this point. 
As the leaf size increases, fewer combinators in the sample have halted by 30 \
steps - however, the graph still levels out, suggesting most of the \
combinators which have not halted by this point will never halt.\
\>", "Text",
 CellChangeTimes->{{3.7403995672931137`*^9, 3.740399622628745*^9}, {
  3.740401304484261*^9, 3.740401309306529*^9}, {3.740401521754697*^9, 
  3.740401656163385*^9}, {3.740401718830182*^9, 3.740401730676402*^9}, {
  3.7404052606237783`*^9, 
  3.7404052633753757`*^9}},ExpressionUUID->"1fb4e40a-80eb-46b1-b666-\
1474ce224190"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Halting Times and Leaf Size", "Subsubsection",
 CellChangeTimes->{{3.740405267057579*^9, 
  3.740405272530611*^9}},ExpressionUUID->"f3cc4a64-634a-4a96-9463-\
15df71266a1a"],

Cell["\<\
We can plot a graph of the number of halted combinators against leaf size:\
\>", "Text",
 CellChangeTimes->{{3.7403995672931137`*^9, 3.740399622628745*^9}, {
  3.740401304484261*^9, 3.740401309306529*^9}, {3.740401521754697*^9, 
  3.740401656163385*^9}, {3.740401718830182*^9, 3.740401730676402*^9}, {
  3.7404052606237783`*^9, 
  3.7404052652941647`*^9}},ExpressionUUID->"4d0dc59d-697d-42f7-be8a-\
27ad6135c062"],

Cell[BoxData[
 RowBox[{"CloudEvaluate", "[", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{
        RowBox[{"GenerateHaltGraph", "[", 
         RowBox[{"n", ",", "30", ",", "1000"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "5", ",", "50", ",", "1"}], "}"}]}], "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.740399681759242*^9, 3.7403997040622597`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"9e3eba1b-6fb6-431d-9672-bd41c5bff657"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJxdzjtqAlEYxfGLlaWFxRQWo4gMIjJqfMTnNTEP26xABMFOy5QpUxjdguUs
w9JySkuXkCWYeM5pPkH+/Dj3zkxxuflYZZxz9b//f/HL+3v8AXWBccE4NC4Z
l9FIrqChHKGxXEV/93TN7HVWjtGTzjfQQHvT7C30LD+gR7mNpnIH/Za76Kfc
Q7fyoznfRyN5wO+Th2hOHrHymN/zQ0/M7tEr9y860fkputZOL7Q/obF22mt/
Ri877nRO+wwNdZ+OtL+gW92nr7R7Nc+nU+1vaKDn01nt73yf7tOh9jma7PwN
/YVSjw==
      "]]}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 891.85},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 50.}, {897., 1000.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Input",
 CellChangeTimes->{{3.7404006460237513`*^9, 
  3.740400649012768*^9}},ExpressionUUID->"39d81b21-1ec7-4283-be3e-\
358c968cf08f"],

Cell["\<\
A graph to show the number of combinators which halt within 30 steps in each \
of 45 random samples of 1000 combinators, with leaf size varying from 5 to 50.\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740399180772546*^9, 3.740399211167325*^9}, {
  3.740399243649355*^9, 3.7403992498104258`*^9}, {3.74039949666609*^9, 
  3.740399549376861*^9}, {3.740401748629224*^9, 
  3.740401795638152*^9}},ExpressionUUID->"3076e791-143a-4d32-aa7a-\
5801bf28f6d8"],

Cell["\<\
This graph shows that, despite random variation, the number of halted \
combinators decreases as the leaf size increases: curve fitting suggests that \
this follows a negative quadratic function.\
\>", "Text",
 CellChangeTimes->{{3.7404018025722313`*^9, 3.740401822304641*^9}, {
   3.740402120711502*^9, 3.74040212543163*^9}, {3.740404503950609*^9, 
   3.7404045327470016`*^9}, {3.740404646019902*^9, 3.74040469605219*^9}, 
   3.740404789117754*^9},ExpressionUUID->"7c795313-be82-41c9-a7d8-\
8dfaea512c2a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FitData", "[", 
   RowBox[{"data_", ",", "func_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "fitd", "}"}], ",", 
    RowBox[{
     RowBox[{"fitd", "=", 
      RowBox[{"{", 
       RowBox[{"Fit", "[", 
        RowBox[{
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "1"}], "]"}], 
          "]"}], ",", "func", ",", "x"}], "]"}], "}"}]}], ";", 
     RowBox[{"{", 
      RowBox[{"fitd", ",", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"ListPlot", "[", 
          RowBox[{
           RowBox[{"data", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "1"}], "]"}], 
            "]"}], ",", 
           RowBox[{"PlotStyle", "->", "Red"}]}], "]"}], ",", 
         RowBox[{"Plot", "[", 
          RowBox[{"fitd", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "5", ",", "50"}], "}"}]}], "]"}]}], "]"}]}], 
      "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740400244461982*^9, 3.740400275965919*^9}, {
  3.740400588954709*^9, 3.740400632506959*^9}, {3.740400686591626*^9, 
  3.74040070073003*^9}, {3.740401047792886*^9, 3.740401109183196*^9}, {
  3.740401144264078*^9, 3.740401147985198*^9}, {3.740401399607148*^9, 
  3.7404014499500504`*^9}, {3.7404018359382143`*^9, 3.7404018429579773`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"e67293b1-2054-4995-b04d-3f368e317629"],

Cell[TextData[{
 "A curve-fitting function: plots the curve of best fit for ",
 StyleBox["data",
  FontSlant->"Italic"],
 " with some combination of functions ",
 StyleBox["func",
  FontSlant->"Italic"],
 "."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740404831726948*^9, 
  3.740404881301162*^9}},ExpressionUUID->"04d55737-7a55-42f0-9e25-\
dc4e29d0103c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FitData", "[", 
  RowBox[{
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzjtqAlEYxfGLlaWFxRQWo4gMIjJqfMTnNTEP26xABMFOy5QpUxjdguUs
w9JySkuXkCWYeM5pPkH+/Dj3zkxxuflYZZxz9b//f/HL+3v8AXWBccE4NC4Z
l9FIrqChHKGxXEV/93TN7HVWjtGTzjfQQHvT7C30LD+gR7mNpnIH/Za76Kfc
Q7fyoznfRyN5wO+Th2hOHrHymN/zQ0/M7tEr9y860fkputZOL7Q/obF22mt/
Ri877nRO+wwNdZ+OtL+gW92nr7R7Nc+nU+1vaKDn01nt73yf7tOh9jma7PwN
/YVSjw==
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 891.85},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 50.}, {897., 1000.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "x", ",", 
     RowBox[{"x", "^", "2"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740400710119421*^9, 3.740400728708817*^9}, {
  3.740401060804289*^9, 3.740401066304637*^9}, {3.740401137241082*^9, 
  3.7404011942099657`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"83d3cadf-ced9-4039-88f5-2c143c8ef4bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1012.0702842485916`", "\[VeryThinSpace]", "-", 
     RowBox[{"1.1891497070613453`", " ", "x"}], "-", 
     RowBox[{"0.020980503462002476`", " ", 
      SuperscriptBox["x", "2"]}]}], "}"}], ",", 
   GraphicsBox[{{{}, {{}, 
       {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], 
        AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdzjtqAlEYxfGLlaWFxRQWo4gMIjJqfMTnNTEP26xABMFOy5QpUxjdguUs
w9JySkuXkCWYeM5pPkH+/Dj3zkxxuflYZZxz9b//f/HL+3v8AXWBccE4NC4Z
l9FIrqChHKGxXEV/93TN7HVWjtGTzjfQQHvT7C30LD+gR7mNpnIH/Za76Kfc
Q7fyoznfRyN5wO+Th2hOHrHymN/zQ0/M7tEr9y860fkputZOL7Q/obF22mt/
Ri877nRO+wwNdZ+OtL+gW92nr7R7Nc+nU+1vaKDn01nt73yf7tOh9jma7PwN
/YVSjw==
         "]]}, {}}, {}, {}, {}, {}}, {{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
         Opacity[1.], LineBox[CompressedData["
1:eJwV0H0w1HkcB3B1XHNxlWxpbZGHpTyLdu2qvBet39BJ24RLD9ikcNVdnFVx
Ilvy+/32KNVNXC23cbUVKSFhMNfm6ioPd7VFKLl0uq3I08b97o/vfOc175nP
5zNv65i9ktiZBgYGXzHv/z9kj3K1gQELOdF4fC9RgZQ2Cw+bOSyc7UgKVjE+
zztpF7CYhdfZsto0xu+m5MbHvFnglQzlujI+qUh8MvdbFgo1tF6RoIC2nJ9s
1cdCbr2aJYlXYOeH++o1LQvweXj40vY4BdJlE5y0Y+aQCuNUmhgFdtXUF83Z
ysHZVxGGynAFfq3MXqjSWcJZZnzo33UKyDUvntsIrNHRNTrs7qdAgUQo/2Rl
izeRZPEangKhgvllm1/ZQW0eHNrmyMy7dY7T1GaPzcLcBjtLBUyvxpe6Vi3D
hSytSawpc8901ZUlqY4IDB0s8TFSYNGb6lnmMc4wq1spahylkey56lm+oys+
bQtMfjFII2ZIrzEbdAP7x/3WRt00wpU1WQ8G3BH+MCuz5QENyYEbUWGtHmh9
ExS2oomGfim5s69hBdhfxya7V9LYm3F4TFfuiacTi4YcfqHBp/maxjwv+H6h
XNBdQOPKbk1jQfZKlN6boTWT0zjwgT3qtJuHj3NDT81LoTESJA67s50P3ypp
8g87aQgi80T9G7xRnjIxOrSJRhu7KL7FUwDJhFOzp5iGxYWsurJlQuznnnir
9aJR3eO4LuRLHwSyAyqj7WhYdujivh9izP+zbsyMhmdBnrqkZxVmHNTf75lB
o8jwg2t+82pwHZIiq3UUqkRu2uyaNRCcnXm4vYvCGf5xU/1FX+jyL98db6Uw
MCRpZosBq4zudqsaCk/sQ+Z7NwJlqugGmYrCx6rlBvwVIpQ6uNx8kk9BVsLy
GlWKIJ78KS4sg8Kjj4l6AccP269mqkcSKGxSqqRbST8kXPLrVEdQKL8WvP2z
Wf6ItTztnOpPgcdpG89J9QfpxamLdaOwtCdO++i1P9pdLoqSOBR6jRPWF0oD
IF/WV3DUiMJ9OkQa2BmA+uhdJr/rSOTJzhknh67Fwp9dnhlpSdTUT49L764F
r3UkbWszCZMtOOopFOP47XB65DIJXtTbsuzrYlzyGBQknSKRe+vQ7mr7QNxw
yCz2ySARsN9in/pUICYzh1Pd40l05HGNbecR2MdKOTO5gYRilunaA4cJ/DNH
JbHyIVH7visyKYvAO43hhWohiZddF7/bk03AkM0d3sBYeD3gfEwOgY0HSzOO
CJg8SjYZlEegkKjc/JpPwrv2eQVHSaDDaGD+NS8SfYlXLG83EtDObjjh68rc
H3Fw5c0mAsVyD9/HLiT4/sS6ihYCsjM7+vcxJtl9qSoNgdB0E5tiZyb/bUEn
9ZBAmUS6xdCJya3Scrf1EJha4tJ5x4FE1eyg4og+Jp8oc45i3DuysEbykkDU
N/3pY/ZMP/fKX4n/JqBnnTdbzrhX9lLkpiPwNHHxVI4dc8+Oiojl7wmMjhc6
2TDmrU/faztMwGpJ98ZaW2Yfd1GR+RiBIm7xyUEbZt+8/krTCaaf2dzLmYx7
JytajfVMH/JdjRaMTQbSe42mCDSdTvzjmjUzry14bHqaAHw9/gpi/B85yS6M

          "]]},
        Annotation[#, "Charting`Private`Tag$226893#1"]& ]}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 891.85},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 50.}, {897., 1000.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7404010130001717`*^9, 3.7404010317566*^9}, 
   3.7404010625726223`*^9, 3.7404011121612997`*^9, {3.740401182329414*^9, 
   3.740401186693594*^9}, {3.740401488789777*^9, 3.740401492973031*^9}, 
   3.740401845441143*^9},
 CellLabel->
  "Out[134]=",ExpressionUUID->"320a6345-90ab-434e-b9fc-ebcb63a08ce6"]
}, Open  ]],

Cell["\<\
Curve-fitting on the data with a quadratic function yields a reasonably \
accurate curve of best fit.\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.740404897323552*^9, 
  3.740404916635169*^9}},ExpressionUUID->"e3b7e284-62ff-4806-b484-\
4e1b6401ed99"]
}, Open  ]],

Cell["\<\
<IF TIME:> Halting Graphs with combinators of different leaf sizes\
\>", "Subsubsection",
 CellChangeTimes->{{3.7404056499014072`*^9, 
  3.7404056874411907`*^9}},ExpressionUUID->"fa34fba2-d7b5-4182-bce7-\
5b0f29382849"]
}, Open  ]],

Cell[CellGroupData[{

Cell["<IF TIME:> Halting Probabilities and Statistical Relevance", \
"Subsection",
 CellChangeTimes->{{3.739925505847315*^9, 3.739925516898056*^9}, {
  3.740405722713666*^9, 
  3.740405730780334*^9}},ExpressionUUID->"eb162743-0085-40b7-8f55-\
0e4febe9effc"],

Cell[TextData[{
 "Some halt, some do not. (haven\[CloseCurlyQuote]t seen a cyclical one yet) \
--> linear/exponential.\n",
 StyleBox["Assumptions",
  FontWeight->"Bold"],
 ": If length stays constant, it has halted. ",
 StyleBox["Dataset:",
  FontWeight->"Bold"],
 " SK combinators with depth 10\nP(halts by 20|doesn\[CloseCurlyQuote]t halt \
by 10) = ? P(halts by 30|doesn\[CloseCurlyQuote]t halt by 20"
}], "Text",
 CellChangeTimes->{{3.7398078529186287`*^9, 3.739807862544938*^9}, {
  3.739807984557681*^9, 3.7398079872826033`*^9}, {3.73982542414058*^9, 
  3.739825454323818*^9}, {3.7398266857100267`*^9, 3.739826714388297*^9}, {
  3.7398274067012787`*^9, 3.73982744244515*^9}, {3.739827488649047*^9, 
  3.739827506574357*^9}, {3.739827596845306*^9, 3.739827644753313*^9}, {
  3.739830297704804*^9, 
  3.739830302494021*^9}},ExpressionUUID->"fd6411f0-a79b-47c4-adf3-\
d45866ee1f12"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exprs", " ", "=", " ", 
   RowBox[{"Monitor", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"RandomSKExpr", "[", "10", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "100"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739827542111861*^9, 3.7398275436726027`*^9}, {
  3.739827648652402*^9, 3.7398276550305233`*^9}, {3.7398276901922693`*^9, 
  3.7398276964557037`*^9}, {3.739828234883089*^9, 3.739828259168634*^9}, {
  3.739829584290543*^9, 3.7398295854928207`*^9}, {3.739829641211596*^9, 
  3.739829677505145*^9}, {3.739829709483059*^9, 3.739829755147622*^9}, {
  3.7398297947823772`*^9, 3.739829794872855*^9}, {3.739829922193872*^9, 
  3.739829922755982*^9}, {3.739829973378722*^9, 3.739829973663536*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"ee594e90-ff3e-41f3-8bb8-9955e946e4b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"lengths", " ", "=", " ", 
   RowBox[{"Monitor", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"SKLengths", "[", 
        RowBox[{
         RowBox[{"exprs", "[", 
          RowBox[{"[", "n", "]"}], "]"}], ",", "40"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "100"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7398297626005287`*^9, 3.739829793526043*^9}, {
  3.7398299383644876`*^9, 3.7398299385414457`*^9}, {3.73982997526049*^9, 
  3.739829998040146*^9}, {3.7398300426351557`*^9, 3.739830043251628*^9}, {
  3.7398304715160103`*^9, 3.739830492227194*^9}, {3.7398307051597757`*^9, 
  3.739830741215641*^9}, {3.739830828424445*^9, 3.739830829215577*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"4a0ec6b9-d556-42a5-a86c-8dd447821140"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.739831126023819*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"70ccdefd-e61f-43af-a980-3a5812c5b0a8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HaltIf", "[", 
   RowBox[{"n_", ",", "list_"}], "]"}], ":=", 
  RowBox[{"SameQ", "[", 
   RowBox[{
    RowBox[{"list", "[", 
     RowBox[{"[", "n", "]"}], "]"}], ",", 
    RowBox[{"list", "[", 
     RowBox[{"[", 
      RowBox[{"n", "-", "1"}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739828955348071*^9, 3.739829040698296*^9}, {
  3.739830066892948*^9, 3.739830067225738*^9}, {3.739839518414878*^9, 
  3.739839522546186*^9}, {3.739973729268805*^9, 
  3.7399737299207697`*^9}},ExpressionUUID->"2dcb6a13-2ddd-4d24-89a4-\
cf767e143427"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HaltBy", "[", 
   RowBox[{"n_", ",", "lens_"}], "]"}], ":=", 
  RowBox[{"Count", "[", 
   RowBox[{"lens", ",", 
    RowBox[{"x_", "/;", 
     RowBox[{
      RowBox[{"HaltIf", "[", 
       RowBox[{"n", ",", "x"}], "]"}], "\[Equal]", "True"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7398290365609283`*^9, 3.7398290437773523`*^9}, {
  3.739829094139103*^9, 3.739829147015429*^9}, {3.739829212636303*^9, 
  3.739829252921694*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"acadaaf1-f648-4e0a-9c63-ea4093da7f63"],

Cell["Taking only lengths:", "Text",
 CellChangeTimes->{{3.739973430531612*^9, 
  3.7399734350127287`*^9}},ExpressionUUID->"093f63e5-380e-4b92-8f60-\
4d2d6b5853f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CloudEvaluate", "[", 
   RowBox[{"GenerateHaltGraph", "[", 
    RowBox[{"20", ",", "30", ",", "1000"}], "]"}], "]"}], "//", 
  "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.740167191912785*^9, 3.7401672000132227`*^9}, {
  3.7402442821234493`*^9, 3.740244301624866*^9}, {3.74024440570405*^9, 
  3.7402444763220797`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"559c39aa-3d23-4add-bb38-7580ee8c13de"],

Cell[BoxData[
 TemplateBox[{
  "FrontEndObject","notavail",
   "\"A front end is not available; certain operations require a front \
end.\"",2,104,12,19907323487401494613,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.740244477983343*^9},
 CellLabel->
  "During evaluation of \
In[104]:=",ExpressionUUID->"6fd9ef2b-1ea7-4821-83d9-167bdac8fb4b"],

Cell[BoxData[
 TemplateBox[{
  "FrontEndObject","notavail",
   "\"A front end is not available; certain operations require a front \
end.\"",2,104,13,19907323487401494613,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.740244478016183*^9},
 CellLabel->
  "During evaluation of \
In[104]:=",ExpressionUUID->"639ed042-336f-4082-b042-bb2002deef96"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.309111`", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQEf7BlQgQMqlwPCb0iAigtA6APFUL4IhE6og/Il
IPSOZihfBkJHtEP5ChB6QyeUrwShJbqhfBWo+h4oXw1Cv4DxNSB0RS+UrwWh
b8D4OlC6D0rrQegAGN8AQhfA+IYQegaMbwShF8D4xlD3wvgmUP/B+KZofDMI
fQDGN0fjW0DoEzC+JRrfCo1vjca3QePbovHtIPSFPgcARcA2Ow==
        
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{{}, {1000}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 30.}, {0, 1000}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {0, 0}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.740167212498103*^9, {3.7402442843320293`*^9, 3.740244303682846*^9}, {
   3.7402444077145853`*^9, 3.740244478040419*^9}},
 CellLabel->
  "Out[104]=",ExpressionUUID->"97d14f82-778f-42fe-9d61-0c5c0e4242a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GenerateHaltGraph", "[", 
   RowBox[{"30", ",", "40", ",", "1000"}], "]"}], "//", 
  "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.7401368668140593`*^9, 3.740136875582035*^9}, {
   3.7401369144691973`*^9, 3.7401369304461117`*^9}, {3.740136976917227*^9, 
   3.740137009924623*^9}, {3.740137044681674*^9, 3.740137044812559*^9}, {
   3.7401372648967743`*^9, 3.7401373008664083`*^9}, {3.7401373559669123`*^9, 
   3.740137356215317*^9}, 3.7401375762754993`*^9, {3.740138189965399*^9, 
   3.740138220276668*^9}, {3.740138409336232*^9, 3.740138420943417*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"f8f5cef8-43ba-4c8d-b0ad-7e38f53dbc08"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"178.926519`", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzDsKwlAQheGLlWUKCwsLFZEgIr6N7/gorESsrIXUCjZiFRAk+ACXYGnp
MlyCy3AJKueMkBkYfj6Ge1PL1dyLGGPs7/6KefdNeNwwo/SUtVDfo2Psho2j
sx2dQAOfTqKvPZ1GJwc6w/cBnUWjR9pGrROdQx/iPBo/0wV0LS6iT3GJvbBl
1BFX0IW4yv/ENXQrrqO+uKHsoIG4qdxCr+K2cke5i97EPfQu7iu7YfvKZqDu
ymao7spmpO7KZvz3B3rjRcI=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{{}, {1000}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{607.3062499999994, Automatic},
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 40.}, {0, 1000}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {0, 0}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.74013786145471*^9, 3.740138105646882*^9, 
  3.7401382062872133`*^9, 3.74013827706948*^9, 3.740138418352826*^9, 
  3.7401386002052593`*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"33f26878-0261-47b6-b1d3-5ffb9c5a2074"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CloudEvaluate", "[", 
   RowBox[{"GenerateHaltGraph", "[", 
    RowBox[{"40", ",", "40", ",", "1000"}], "]"}], "]"}], "//", 
  "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.7401368668140593`*^9, 3.740136875582035*^9}, {
   3.7401369144691973`*^9, 3.7401369304461117`*^9}, {3.740136976917227*^9, 
   3.740137009924623*^9}, {3.740137044681674*^9, 3.740137044812559*^9}, {
   3.7401372648967743`*^9, 3.7401373008664083`*^9}, {3.7401373559669123`*^9, 
   3.740137356215317*^9}, 3.7401375762754993`*^9, {3.740138189965399*^9, 
   3.740138220276668*^9}, {3.740138409336232*^9, 3.740138420943417*^9}, {
   3.740138606402527*^9, 3.740138610793722*^9}, {3.740139169773147*^9, 
   3.740139169930148*^9}, {3.740139217427053*^9, 3.740139246500766*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"198e838d-0f0c-4f06-9abd-094488936644"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"37.725537`", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxd0TsKwkAUheHByjKFRQqLKCJBROI7PhMfK3ADimAn2FhZBRTxuQdLS0tL
l+ASXEJKS5VzrpAZGH6+udMMk5ouRrOYUsr+7l+xQk9Flx9lHA58nhvsmE2w
c9Zkl2wSva1oC3UDOo3G13QGfWzoLPrc0jbq7Ogc6u/pPGof6AL6Ejvo5EgX
0Yu4xPviMntiK6ghrvI94hoaiOvoVeyid3GD7xM30VDc0txG3+KO5i57Zj3N
/EeDln81Zd6LOtCs+tpcsxqglsw1q+HfHwePQYw=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{{}, {1000}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{757.2249999999987, Automatic},
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 40.}, {0, 1000}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {0, 0}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.740138705217358*^9, 3.7401392035509644`*^9, 
  3.740139285092354*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"8a96c4a4-3bc6-4a40-8bc5-3f4943bb68be"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.740167039168478*^9, 
  3.7401670524775887`*^9}},ExpressionUUID->"d6486640-6fa2-46ba-8c51-\
a6a930b82481"],

Cell[CellGroupData[{

Cell["How many combinators with a given leaf size?", "Subsubsection",
 CellChangeTimes->{{3.740139052717739*^9, 
  3.7401390589048758`*^9}},ExpressionUUID->"067c7792-f419-4f80-8770-\
96bd61bdf10e"],

Cell["\<\
NKS suggests (2^n*((2n-2)C(n-1)))/n
So for size 30:\
\>", "Text",
 CellChangeTimes->{{3.740139060034903*^9, 
  3.740139091725232*^9}},ExpressionUUID->"2433fe8f-69d1-4952-8a47-\
3c838ee302cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CountCombinators", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"2", "^", "n"}], " ", 
   RowBox[{
    RowBox[{"Binomial", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"2", "n"}], "-", "2"}], ",", 
      RowBox[{"n", "-", "1"}]}], "]"}], "/", "n"}]}]}]], "Input",
 CellChangeTimes->{{3.740139094627674*^9, 3.74013913725454*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"d8407442-55a5-425d-a719-407c6fab4dcd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CountCombinators", "[", "30", "]"}]], "Input",
 CellChangeTimes->{{3.740139125389966*^9, 3.740139164374218*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"82807327-690e-4a0a-a9ab-9e59cc67e0d5"],

Cell[BoxData["1076149385797043048415232"], "Output",
 CellChangeTimes->{{3.740139129240218*^9, 3.740139164808217*^9}},
 CellLabel->"Out[88]=",ExpressionUUID->"103949a1-d626-48d2-968e-0cba4311d1d0"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Machine Learning Analysis of SK Combinators", "Section",
 CellChangeTimes->{{3.7399255514811583`*^9, 
  3.739925570623746*^9}},ExpressionUUID->"d7e4795e-2c05-484f-8339-\
50b127a69abc"],

Cell["\<\
The graphs above suggest that the majority of halting SK combinators with \
leaf size <=50 will halt before ~30 steps. Thus we can state that, for a \
randomly chosen combinator, it is likely that if it does not halt before 40 \
steps, it will never halt. Unfortunately a lack of time prohibited a formal \
analysis of this, in the vein of Lathrop\[CloseCurlyQuote]s work - this is an \
area for future research.

We attempt to use modern machine learning methods to predict the likelihood \
of a given SK combinator expression halting before 40 steps:\
\>", "Text",
 CellChangeTimes->{{3.7404064095497437`*^9, 3.7404064656907663`*^9}, {
  3.7404067157243443`*^9, 3.740406720213262*^9}, {3.7404067583613653`*^9, 
  3.740406956999192*^9}, {3.740407171501575*^9, 3.740407178923407*^9}, {
  3.7404072249852257`*^9, 3.7404072494290447`*^9}, {3.740417399055992*^9, 
  3.740417437634021*^9}},ExpressionUUID->"84111793-9a73-4282-a45a-\
319dbaf72549"],

Cell[CellGroupData[{

Cell["Dataset Generation", "Subsection",
 CellChangeTimes->{{3.740417582434475*^9, 
  3.740417584627822*^9}},ExpressionUUID->"f7fb4161-a942-41f7-8ce5-\
3e88e2c7249c"],

Cell[TextData[{
 "We implement a function ",
 StyleBox["GenerateTable",
  FontSlant->"Italic"],
 " to produce tables of random SK expressions:"
}], "Text",
 CellChangeTimes->{{3.740417585896666*^9, 3.740417595282895*^9}, {
  3.7404177616636066`*^9, 
  3.740417770833137*^9}},ExpressionUUID->"a820c5cd-8ceb-44b1-ade6-\
8d500a1599f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SKHaltLength", "[", 
   RowBox[{"expr_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"x", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"SKEvaluateUntilHalt", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"x", ">", "n"}], ",", "False", ",", "x"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], " "}]], "Input",
 CellChangeTimes->{3.740417774369999*^9, 3.740419777592393*^9},
 CellLabel->"In[81]:=",ExpressionUUID->"deca66c8-e78f-41a4-b4e9-5235455701cd"],

Cell[TextData[{
 "Returns the number of steps ",
 StyleBox["expr",
  FontSlant->"Italic"],
 " takes to halt if the given expression ",
 StyleBox["expr",
  FontSlant->"Italic"],
 " halts within the limit given (",
 StyleBox["limit",
  FontSlant->"Italic"],
 "), otherwise returns ",
 StyleBox["False",
  FontSlant->"Italic"]
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740417863792466*^9, 3.74041789391187*^9}, {
  3.7404197814648542`*^9, 
  3.740419790813258*^9}},ExpressionUUID->"45772894-3d54-49e8-a5f7-\
8338748bc006"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GenerateTable", "[", 
   RowBox[{"depth_", ",", "iterations_", ",", "number_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"exprs", ",", "lengths"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"exprs", " ", "=", " ", 
      RowBox[{"Monitor", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomSKExpr", "[", "depth", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "number"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lengths", " ", "=", " ", 
      RowBox[{"Monitor", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"exprs", "[", 
            RowBox[{"[", "n", "]"}], "]"}], "\[Rule]", " ", 
           RowBox[{"SKHaltLength", "[", 
            RowBox[{
             RowBox[{"exprs", "[", 
              RowBox[{"[", "n", "]"}], "]"}], ",", "iterations"}], "]"}]}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "number"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lengths", " ", "=", " ", 
      RowBox[{"DeleteDuplicates", "[", "lengths", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "lengths", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.740417909729063*^9, {3.740419747316375*^9, 3.740419765915618*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"bd28636a-0ac5-4656-83c4-a5835a8a6696"],

Cell[TextData[{
 "Returns a list of ",
 StyleBox["number",
  FontSlant->"Italic"],
 " expressions with leaf size ",
 StyleBox["depth",
  FontSlant->"Italic"],
 " whose elements are associations with key ",
 StyleBox["expression",
  FontSlant->"Italic"],
 " and value ",
 StyleBox["number of steps taken to halt",
  FontSlant->"Italic"],
 " if the expression halts within ",
 StyleBox["iterations",
  FontSlant->"Italic"],
 " steps, otherwise ",
 StyleBox["False",
  FontSlant->"Italic"],
 "."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740417863792466*^9, 3.74041789391187*^9}, {
  3.740417944690662*^9, 3.740418000528336*^9}, {3.740418086046022*^9, 
  3.740418131768949*^9}, {3.7404249039192543`*^9, 
  3.740424908917199*^9}},ExpressionUUID->"15bd4c04-7174-47cc-8484-\
2e91abbdb45a"],

Cell[TextData[{
 StyleBox["GenerateTable",
  FontSlant->"Italic"],
 " simply returns tables random SK expressions - as seen earlier, these tend \
to be heavily skewed datasets as around 90% of random expressions generated \
will halt. Thus we must process this dataset to create a balanced training \
dataset: this is done with the function ",
 StyleBox["CreateTrainingData",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{{3.7404182891987047`*^9, 3.7404183993771353`*^9}, {
  3.7404184399291267`*^9, 
  3.740418445028212*^9}},ExpressionUUID->"bea12d71-4af1-4268-9f55-\
39f7954ad3c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CreateTrainingData", "[", "var_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"NoHalt", ",", "Halt", ",", "HaltTrain", ",", "Train"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NoHalt", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"var", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "False"}], "&"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Halt", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"var", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "True"}], "&"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HaltTrain", " ", "=", " ", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"Halt", ",", 
         RowBox[{"Length", "[", "NoHalt", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Train", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"HaltTrain", ",", "NoHalt"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "Train", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.74041845081698*^9, {3.7404194775715446`*^9, 3.740419500440672*^9}, {
   3.740425000258232*^9, 3.740425000746364*^9}, 
   3.740490606265108*^9},ExpressionUUID->"49b8b95c-7808-44da-b55d-\
e3d19c9cc49d"],

Cell[TextData[{
 "Counts the number of non-halting combinators in ",
 StyleBox["var",
  FontSlant->"Italic"],
 " (assumption is this is less than number of halting combinators), selects a \
random sample of halting combinators of this length and concatenates the \
lists."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.7404906171051893`*^9, 
  3.740490654187791*^9}},ExpressionUUID->"dd88cc5e-8d7a-4361-9d35-\
8c3c45aaa67c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ConvertSKTableToString", "[", "sktable_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ToString", "[", 
       RowBox[{"sktable", "[", 
        RowBox[{"[", 
         RowBox[{"n", ",", "1"}], "]"}], "]"}], "]"}], "\[Rule]", " ", 
      RowBox[{"sktable", "[", 
       RowBox[{"[", 
        RowBox[{"n", ",", "2"}], "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", 
       RowBox[{"Length", "[", "sktable", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.74041845081698*^9, {3.7404194775715446`*^9, 3.740419500440672*^9}, {
   3.740425000258232*^9, 3.740425000746364*^9}, 
   3.740490606265108*^9},ExpressionUUID->"66cd8063-616e-4398-ad7c-\
0e438dbf3963"],

Cell[TextData[{
 "Converts SK expressions in a table generated with ",
 StyleBox["GenerateTable",
  FontSlant->"Italic"],
 " to strings"
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.740490580612184*^9, 
  3.740490599710497*^9}},ExpressionUUID->"c5c0b55c-941d-4c61-9644-\
2f0dae586cd6"],

Cell["\<\
We also implement a function to create rasterised training data (where \
instead of an individual SK combinator associated with either True or False, \
an image of the first 5 steps of evaluation of the combinator is associated \
with either True or False):\
\>", "Text",
 CellChangeTimes->{{3.740492389913067*^9, 
  3.740492432528126*^9}},ExpressionUUID->"86b90b28-c5cd-48cd-89d4-\
fea86391f83e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CreateRasterizedTrainingData", "[", "var_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "NoHalt", ",", "Halt", ",", "HaltTrain", ",", "HaltTrainRaster", ",", 
       "NoHaltTrainRaster", ",", "RasterTrain"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NoHalt", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"var", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "False"}], "&"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Halt", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"var", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "True"}], "&"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HaltTrain", " ", "=", " ", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"Halt", ",", 
         RowBox[{"Length", "[", "NoHalt", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"HaltTrainRaster", "=", 
       RowBox[{"Monitor", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"SKRasterize", "[", 
             RowBox[{
              RowBox[{"HaltTrain", "[", 
               RowBox[{"[", 
                RowBox[{"x", ",", "1"}], "]"}], "]"}], ",", "5"}], "]"}], 
            "\[Rule]", " ", 
            RowBox[{"HaltTrain", "[", 
             RowBox[{"[", 
              RowBox[{"x", ",", "2"}], "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "1", ",", 
             RowBox[{"Length", "[", "HaltTrain", "]"}]}], "}"}]}], "]"}], ",",
          "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"NoHaltTrainRaster", "=", 
       RowBox[{"Monitor", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"SKRasterize", "[", 
             RowBox[{
              RowBox[{"NoHalt", "[", 
               RowBox[{"[", 
                RowBox[{"x", ",", "1"}], "]"}], "]"}], ",", "5"}], "]"}], 
            "\[Rule]", " ", 
            RowBox[{"NoHalt", "[", 
             RowBox[{"[", 
              RowBox[{"x", ",", "2"}], "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "1", ",", 
             RowBox[{"Length", "[", "NoHalt", "]"}]}], "}"}]}], "]"}], ",", 
         "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"RasterTrain", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"HaltTrainRaster", ",", "NoHaltTrainRaster"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "RasterTrain", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.740492272004697*^9},ExpressionUUID->"e5808f85-79f4-4510-a5f9-\
bb0c4822277a"],

Cell[TextData[{
 "Counts the number of non-halting combinators in ",
 StyleBox["var",
  FontSlant->"Italic"],
 " (assumption is this is less than number of halting combinators), selects a \
random sample of halting combinators of this length, evaluates and generates \
images of both halting and non-halting combinators and processes them into \
training data (image->True/False)."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.7404922976218576`*^9, 
  3.74049235725034*^9}},ExpressionUUID->"ee7f75c3-b276-4b8c-a869-\
d18922b1f069"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Markov Classification", "Subsection",
 CellChangeTimes->{{3.7398872588333893`*^9, 3.7398872606941757`*^9}, {
  3.739925769163535*^9, 3.739925817261409*^9}, {3.73992591716278*^9, 
  3.7399259189271*^9}, {3.7399265753572073`*^9, 3.739926580667159*^9}, {
  3.7404175107865868`*^9, 3.740417521764462*^9}, {3.740417562074113*^9, 
  3.740417575607236*^9}, {3.740417749618146*^9, 3.740417753909844*^9}, {
  3.740491203336911*^9, 
  3.7404912131768303`*^9}},ExpressionUUID->"6fdf6735-b43f-410e-bd2e-\
32b6bdaa7213"],

Cell[CellGroupData[{

Cell["Training", "Subsubsection",
 CellChangeTimes->{{3.74042529569484*^9, 
  3.7404252965528793`*^9}},ExpressionUUID->"d473a162-9d33-4e5d-b5d3-\
03bd623a3442"],

Cell["\<\
As a first attempt, we generate 2000 random SK expressions with depth 5, 2000 \
expressions with depth 10 ... 2000 expressions with depth 50, evaluated up to \
40 steps:\
\>", "Text",
 CellChangeTimes->{{3.740418141255331*^9, 3.740418154945673*^9}, {
   3.740419590876974*^9, 3.740419635008884*^9}, 3.7404264746941967`*^9, {
   3.740490411139736*^9, 3.740490438193165*^9}, {3.7404904877564087`*^9, 
   3.74049052008433*^9}},ExpressionUUID->"480b51f3-c752-4d15-8bb2-\
13fe5ebed3f8"],

Cell[BoxData[
 RowBox[{"lengths", " ", "=", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"GenerateTable", "[", 
      RowBox[{"n", ",", "40", ",", "2000"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "5", ",", "50", ",", "5"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739926337214636*^9, 3.739926356784418*^9}, {
   3.740419605463579*^9, 3.740419605728098*^9}, {3.740419810056608*^9, 
   3.740419853765357*^9}, 3.74041992294147*^9, {3.7404248512203503`*^9, 
   3.740424878044794*^9}, 3.740426473218903*^9, 3.740490398854051*^9, {
   3.740490540777598*^9, 
   3.740490541875442*^9}},ExpressionUUID->"4f9974db-b37e-4580-b52e-\
b0bba6840fcc"],

Cell["We convert all non-False halt lengths to \[OpenCurlyQuote]True\
\[CloseCurlyQuote]:", "Text",
 CellChangeTimes->{{3.740424927038971*^9, 
  3.740424950354556*^9}},ExpressionUUID->"d9ac3259-ee53-41b2-9eb3-\
279ebce23ee7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lengths", " ", "=", " ", 
   RowBox[{"lengths", "/.", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"a_", "\[Rule]", "b_"}], ")"}], "/;", 
      RowBox[{"!", 
       RowBox[{"(", 
        RowBox[{"b", "===", "False"}], ")"}]}]}], "\[RuleDelayed]", " ", 
     RowBox[{"(", 
      RowBox[{"a", "\[Rule]", "True"}], ")"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740424883862311*^9, 3.740424884705851*^9}, {
  3.7404249223723097`*^9, 3.740424925483335*^9}, {3.740425041749901*^9, 
  3.740425088662372*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"f252cf65-22fc-4099-9e4c-e632bf3fefb2"],

Cell["\<\
We process the data and train a classifier using the Markov method:\
\>", "Text",
 CellChangeTimes->{{3.740424830340679*^9, 3.7404248453548203`*^9}, {
  3.740425906720489*^9, 3.740425916218574*^9}, {3.7404912147156963`*^9, 
  3.740491217040615*^9}},ExpressionUUID->"31a36f76-cc67-47d5-9298-\
cb020e57d686"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"TrainingData", " ", "=", " ", 
   RowBox[{"CreateTrainingData", "[", "lengths", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TrainingData2", " ", "=", " ", 
   RowBox[{"ConvertSKTableToString", "[", "TrainingData", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7398718328071957`*^9, 3.7398719480890427`*^9}, {
  3.739882283988702*^9, 3.739882306676138*^9}, {3.739925864341235*^9, 
  3.739925865648127*^9}, {3.739926497854299*^9, 3.739926502137892*^9}, {
  3.740424813985834*^9, 3.740424828269436*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"60938424-7c4c-4e51-8422-2393c6fbae89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HaltClassifier1", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"TrainingData2", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<Markov\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739872064023624*^9, 3.739872082336583*^9}, {
   3.739872152860105*^9, 3.73987215599541*^9}, {3.73987218719993*^9, 
   3.739872196891059*^9}, 3.739872318601696*^9, {3.739872431581009*^9, 
   3.739872434756749*^9}, {3.739885596452054*^9, 3.739885598560957*^9}, {
   3.7399258911052427`*^9, 3.73992589220361*^9}, {3.740492209773747*^9, 
   3.740492212352138*^9}},ExpressionUUID->"204b98ad-2850-42fb-9662-\
874b99a5d840"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1456", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1456, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Text"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Fill" -> 
             "", "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Type" -> 
             "Text", "Version" -> {11.3, 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3139720177438361802, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5643421565728107793, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "\\", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {11.3, 0}, "ID" -> 3051290048872824615, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {-9013817937938426079, -4973948215836336071, 
                 2077270817744784973, 3408017859420023313}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2055599668730355056, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8901912692949392733]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5272359975513785890, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3197017005843221070]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       False -> 0.49999999999999994`, True -> 0.49999999999999994`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassPriors" -> 
      Association[1 -> 0.5012853470437019, 2 -> 0.49871465295629824`], 
      "Method" -> "Markov2", "TokenNumber" -> 4, "Order" -> 4, 
      "MinimumTokenCount" -> 0, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {1, 2, 3, 4}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2922156563490152947, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NominalSequence", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Imputed"]], "NGramPosition" -> MachineLearning`SortedHashAssociation[
        Association["KeyHashes" -> CompressedData["
1:eJw9lkuupTsNhavBCIAJMACk+B0P4Uq3xRBoINGicekzdT7/Sc5RqfaWveP4
sdZy/vbP//zjX//79evXH3/iv9///cd/f/srX/7ey0MruoXP7Z67j2P3tjDd
InuZLO8fxzbTyNiJN3OJ53UURywIZDvKUvydSF1LhY+ybi8rvY4Q7SKApGzZ
5f4cPpHD03ZVS2fXj0O3ua691H1pp1/HRJZtGaEmpGfrOWptrQ5uXUWCJdeh
5it2xZaKtMD9HJi9U4ODpMY11yGTo+Yindy+dr/L154INLIJ19ZxT9CR7VW0
1tpitdatg/NBOsav+TFfX6gKHbtXzmWaqi+UGQOhW1UipYR7Dg03E+aVXBM4
5DlsMaISpSu0kxFex4rmlzt7xstgX69yq1CeKkVau8rrbhKrnB7Jokjh7zki
eml07LU6GM4DQ4YHl7rvNaG8l12HNGjIoAZdIhTez0FaScByjjFh2z8O/1pl
9JkGh7x0V3O5KeOe2fKzmxUjzalMnPtV01t+HGsxJweRTktq33SjqBp0Egik
ZAHf60gHo2Lcw2S6rW4dVOczCgHO0aB33XQZgjPRbkLypaKuw+mHqa8uwAVv
SPA6HEKRZSaT4EMfRN12r9y1oI+Tuupz6NAOHG4f8LbvOA6Y19G+4Ec4E5fw
55A0uA6GwCrTqOdwhRVQkPnpcFdfKDAQ4GlRwYCCLK9jzQAdRNNL0o13h0Kp
IQ5HOMEg962c2hgn41nQkjJI4zqADLSwXowCCXDJ55DCbGYjPozpDUqlxAam
C3YCSHvkVODDPEJoBrAI9OA4hOCiANhlmVP3o9p0Dm62DUp9eH6zEkLXBAGJ
oJF+3sqFosNHlWRQ6PFzYhoEP2kAmXJwyXMEs9sbgnhtH14/B3UNC1EnOC3+
1AcrEuXyoSpWNXX85VNqCC7oFbnCNoiyrx36I9uMdya8+Tv2okuojFEm/d/A
5doNYTbaF9PgBvTHjhowMf59QgZK9doZK8MHI6JANt69qXRvBdLNMEavXhxF
4RdWqDpyUnHsIxwGMmg5BIev184GQB1jJqrSwFGfXUciEGAAtlCy/u3PR6Rg
vBXB4Sq3+mdGxqxlgEeGTIwujBlFRvdjBKicGBafOQAdGo6qIB/LifOZ4WeL
IA89+xAhOEFYgOgXgVOnXUaGnxkyMXUfzZ/Rr/rMLd+Y0LeZEuJaXz2yZFNS
z+qcBYnKXHsCdSbkRTWsFz99AbIjbjIqTYbzd+yjLgvqTU9y83F/b0n7aAeq
AP0rL27ALPE3fFVQiPDUunayB2GAbYZlDOXY4RpKSBdypBX63Xt7spxFFySG
Jvqxgw6EDvNGM1Fk5P2z0xpEVpC0hNw+pL12FiE2hCYLXCLsx24fXkad0RTa
JCdP+/S4h9c+16jLZ2clwDj2wSzFZJB+cOmz0WBCMDIYwJxPXT4i80kwSBjg
1LXz7Nk8Kkb8YRES6Me+PxlDsLDznAD/xz5rzoMQbKIhuva1z7VwtuE8Wmn7
xIf/9PyTNvQJXF2esPXhD2kAfigB4eLav11bOe8SnffD6VvMOmb/9Ags6/Pd
i7DMmqNryBxV1+U5M6XUxRrUecBBoxMHlHyvBahZsywo4tgHIDjhJ1Ri7pef
OaLASvJ5y6Am8uxFPpASXeFczK55dnAwKGJ5MEe7eEAHQA8N5e2A2sm8Rj47
DzTCIBoKcEn/5U9X5qEFHkiWlurpJ3BFN1M4kMMO0H3t37wLqZrXJGw7eULD
eavNewcdkNkSxw5D2MFwZhSDIm4fimfs6D5j/HZYXh3c3xJmMtAO0ebhdupl
bfGk5QEN50eAYP6xKy1E8UAWyjTP3Lr2tKKfgIIHBV/uvfQcNLMdaQS8ZMr3
93QRraQk0N8jZweHs0zmSTnPJZQTtbh2gsCReVLyJOKqqw88JHx27P4etZP/
id8CgNbs0bB5N2jm/wHa8Slw
          "], "Values" -> None, "DefaultValue" -> 
         Missing[], "HashFunction" -> 
         Function[{
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$}, 
           Switch[
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, {
             BlankSequence[String]}, 
            Data`StringHash[
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$,
              "Murmur3-64"], 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
            
            Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
               
                Quotient[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                Mod[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                MachineLearning`PackageScope`ToPackedArray[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
, {1, 3, 2}]; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                Flatten[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q,
                  1]]; Data`StringHash[
               FromCharacterCode[
                Abs[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
], "Murmur3-64"]], 
            Blank[List], 
            Map[Switch[#, 
              Blank[String], 
              Data`StringHash[#, "Murmur3-64"], 
              PatternTest[
               Blank[], Developer`MachineIntegerQ], #, {
               PatternTest[
                BlankSequence[], Developer`MachineIntegerQ]}, 
              
              Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
                  Quotient[#, 2^48], 
                  Quotient[
                   Mod[#, 2^48], 2^32], 
                  Quotient[
                   Mod[#, 2^32], 2^16], 
                  Mod[#, 2^16]}; 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
                Flatten[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[], 
              Data`StringHash[
               StringJoin[
                ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$\
]]], "Version" -> {11.3, 0}]], 
      "ConditionalProbabilityMatrix" -> CompressedData["
1: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
4HNvfphLNI2UHctjf2f6+l8pBADZ
       "], "DiscountMatrix" -> 
      SparseArray[
       Automatic, {127, 2}, 0., {
        1, {{0, 2, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18, 18, 18, 18, 20, 22, 24, 
          24, 24, 26, 26, 28, 28, 28, 30, 30, 32, 32, 34, 34, 36, 38, 40, 42, 
          44, 46, 46, 48, 50, 52, 54, 54, 56, 58, 60, 60, 62, 64, 64, 66, 66, 
          66, 66, 68, 68, 68, 68, 70, 72, 72, 72, 72, 72, 72, 72, 72, 74, 74, 
          74, 74, 76, 76, 76, 78, 78, 78, 80, 80, 80, 82, 82, 84, 84, 84, 84, 
          86, 86, 86, 86, 88, 88, 90, 90, 90, 92, 94, 94, 94, 96, 96, 96, 96, 
          96, 98, 98, 98, 98, 100, 102, 102, 102, 102, 102, 102, 104, 106, 
          106, 108, 110, 110, 112, 114, 116, 118, 118, 120, 120}, {{1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}}}, CompressedData["
1:eJwtk3tM03cUxX8tj/4K7a9pOylOZOUtRmQKYxQo34OIiIyXERhEYAVaHPIY
xsc2cHWOR2NAEqI8QoWJYRgkk6fKRETYXLcwcVHmhoDCJDBYoAUGhcwwlnqT
k09Ozk3u/eNeh9Tcw0oWRVGfbirzd4HzfjUfS739SvZtLsyqOm9ywilkyYxC
j1MUvLmbTZSeJFqYePna8CetcgPJ+qEkXuthIK+CMt5+/11zVGYmdDfyLOAV
nvZY5W4kNTrZcWWTkVwq7/3ac8YCwQmOi4IjHAT9Rh/cqeDCT73nn8VBBo57
Z0WqeBHUjZ0WL+V8NGQ41+2epbBXNq8O9mQh3d3657UXIsQERPdvi5CA2vi/
Fkj9uomne+6yi+q48ExRz+m2MTiSw2grZszQ/dQtt6OUg0xv14u0xECmlEV3
vvQzEG3HerrrpAjlk0m+Gns+Lnx7z2jfJ0ShpiHhrJSPFvmlHN8KPRkMa28I
dDOQ2A/PtbYPszCwkNbWcpqFo2Gp8+OjeuIY/1Xx+VADkfIU3U0xYujlG6nn
HkngcTKEydzKg+bPfZ7L/QJcEV/dJfneSG61iEOr14xk6tVHry2r7VEW6KfV
Pd8C2/ZKcXgohb7xDJe0aQrRX8xLfyzSk4LC8JFfK/Wk5JuGIcc2K3BrEtW6
RAEUR4fyeQIa3r0fr0ZNczGQHbnT2ZKNEK+ltTs6NiqQInjI4sMs6fjf6yoa
5U7XV7SDIkT3c3xtJqxx4pfz/mEjNIrjnvvPcngoIM7J8U93kba+rpRjRh+S
b23TmaehYd2ik2Ut8FG1ELF8MoeF1j3CXOcSNuKq61wTV2nUzV1oCFnmoDz2
M6HhIRdR+9b7RxcZBD0Y77B7xMMtXiHoQhpbr7jMjDV6k4XPC+t3n/UhuauS
F9HZehLKcZt0YRnISOrjiSc3Nj1ffn8w0kDMBbcdzAcoSIN/qq+opFBztcCW
vV2M8fzm5uZZBk3KoIi+YRFOrVwbko4y6FLU7BdPColZgCyqM8WWNHtZEv8p
B6KQReByxg7iVXXxQHLCBulp9JEKYincfXM/19dMPDQR9d2TZ2L0+Pao1HZ8
vMWt3d5Fs7AjRq4IS2LBqdy9tMPdDu73is3aorbgJWP6g7/YJlbdr9f4FYnB
WqkNmDMycAr2+SNdLETA2AnVjS5rLIWXBSUdtERmRZlt6Qc0QDM1Z5JpHHN4
thaXx8OB16Y9av81MVtsr9cKrCDJs0qOfCBA9ZtcQ5nmTb/znk1gqJ74M35n
xkr15D/mYJ0V
         "]}], "Discount" -> {0.5, 0.5}, 
      "DefaultUnigramProbabilities" -> {5.958854112354195*^-6, 
       8.072165156499103*^-6}, "Options" -> 
      Association[
       "Order" -> Association["Value" -> 4, "Options" -> Association[]], 
        "AdditiveSmoothing" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "MinimumTokenCount" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "ExcludedTokens" -> 
        Association["Value" -> {}, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.5386342851847074, 0.03268416794432903], "Accuracy" -> 
         PlusMinus[0.7126193575836113, 0.03774871097708727], "EvaluationTime" -> 
         0.0011093986254295534`, "TestSize" -> 291, "TrainingSize" -> 1165, 
         "TrainingTime" -> 3.336124, "TrainingMemory" -> 26004160, 
         "ModelMemory" -> 35768, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.7820273047180711, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.5386342851847074, 0.023111196790875036`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.7126193575836113, 0.02669236951294947]}, 
         "Configuration" -> {
          "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
           "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association["ID" -> 182377339236766]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "Markov", "Options" -> 
           Association[
            "Order" -> Association["Value" -> Automatic], "AdditiveSmoothing" -> 
             Association["Value" -> 0.1], "MinimumTokenCount" -> 
             Association["Value" -> Automatic], "ExcludedTokens" -> 
             Association["Value" -> {}]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3589172408118517`, 0.3096211066922281], "Accuracy" -> 
              PlusMinus[0.5033183699043406, 0.055220238414726355`], 
              "EvaluationTime" -> 0.0007634066666666666, "TestSize" -> 300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.06661633333333333, 
              "TrainingMemory" -> 315672., "ModelMemory" -> 32184., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.17842460662951729`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.678135452862049, 0.33992207699396826`], 
                PlusMinus[2.19923154688099, 0.2404188670690327]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4405940594059407, 0.049585758966034954`], 
                PlusMinus[0.534938371981468, 0.03520626584597544]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8837438959120848, 0.1675733598444099], "Accuracy" -> 
              PlusMinus[0.614504167523627, 0.043012367058054855`], 
              "EvaluationTime" -> 0.001173376, "TestSize" -> 400, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.25418, 
              "TrainingMemory" -> 1.3406592000000002`*^6, "ModelMemory" -> 
              35768., "ExperimentCount" -> 4, "ModelUtility" -> 
              0.46165128429385804`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4304012858061967`, 0.201495987067603], 
                PlusMinus[1.0244903491863173`, 0.143040429957908], 
                PlusMinus[0.7237661984713984, 0.10237113009589732`], 
                PlusMinus[0.829409203855342, 0.10344188127853646`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5198019801980202, 0.049975705079116424`], 
                PlusMinus[0.5990099009900995, 0.04911373703086736], 
                PlusMinus[0.6881188118811888, 0.046557173967708], 
                PlusMinus[0.6386138613861393, 0.048196108468711966`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5705664941950788, 0.025581782227750028`], 
              "Accuracy" -> 
              PlusMinus[0.6943627490760415, 0.020894113432631353`], 
              "EvaluationTime" -> 0.0010810677777777777`, "TestSize" -> 500, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6774239999999999, 
              "TrainingMemory" -> 5.977309333333333*^6, "ModelMemory" -> 
              35768., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.742902608822525, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5590252315751466, 0.03286199043343342], 
                PlusMinus[0.5815779691600658, 0.03209888530984471]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6981957794731286, 0.03262701827419987], 
                PlusMinus[0.6918020392532016, 0.02666775387472454]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5386342851847074, 0.03268416794432903], "Accuracy" -> 
              PlusMinus[0.7126193575836113, 0.03774871097708727], 
              "EvaluationTime" -> 0.0011093986254295534`, "TestSize" -> 291, 
              "TrainingSize" -> 1165, "TrainingTime" -> 3.336124, 
              "TrainingMemory" -> 26004160, "ModelMemory" -> 35768, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7820273047180711, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5386342851847074, 0.023111196790875036`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7126193575836113, 0.02669236951294947]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0011093986254295534`, "MeanCrossEntropy" -> 
             PlusMinus[0.5386342851847074, 0.03268416794432903], 
             "ModelMemory" -> 35768, "TrainingMemory" -> 26004160, 
             "TrainingTime" -> 4.236055426895565], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            4], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 182373044269470]], "MaxTrainingSize" -> 1456, 
      "LastReportingTime" -> 3.740469917715393`16.325501155491633*^9, 
      "PreprocessorEvaluationTime" -> 3.92919921875`3.*^-6, 
      "PreprocessorMemory" -> 29048, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 2.168860378570529, 
          "ElapsedTimes" -> 2.058015, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 2.7110754732131617`, 
          "ElapsedTimes" -> 2.6837269999999998`, "ExperimentCounts" -> 4], 
         Association[
         "TrainingSizes" -> 250, "TimeBudgets" -> 3.3888443415164518`, 
          "ElapsedTimes" -> 3.670585, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 1165, "TimeBudgets" -> 4.236055426895565, 
          "ElapsedTimes" -> 4.767441, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[182381634204062]], "ID" -> 
         182385929171358]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "s[s[s]][k[s][s][k[s[s]][s][k][s[k][k[s[k]]][s]][s[k][s][s]]]][s[\
k][s][s[s][k][k]][s]][s[s][k[s][k]][s[k][k][k][s][s[k][k[s][s[k]]]]]]"}, "ID" -> 
           2825882393954120476]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 14.663725, "MaxTrainingMemory" -> 27614224, 
      "DataMemory" -> 281056, "FunctionMemory" -> 131520, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 13, 11, 25, 18.095794`8.010152627911992}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740484043920277*^9, 3.740484318303512*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"44fb5dd3-73ff-4e97-a1ab-fb07f3ca2fff"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", "Subsubsection",
 CellChangeTimes->{{3.740425299104747*^9, 
  3.740425299853702*^9}},ExpressionUUID->"5f3c7d71-ff37-4989-bb79-\
503f3b98f4e9"],

Cell["\<\
We must now generate test data, using the same parameters for generating \
random combinators:\
\>", "Text",
 CellChangeTimes->{{3.7404252845162983`*^9, 3.7404253011520567`*^9}, {
  3.740425453475321*^9, 
  3.740425461125642*^9}},ExpressionUUID->"7298302a-e67f-456a-997d-\
8f4df09bb28e"],

Cell[BoxData[{
 RowBox[{"testlengths", " ", "=", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"GenerateTable", "[", 
      RowBox[{"n", ",", "40", ",", "2000"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "5", ",", "50", ",", "5"}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testlengths", " ", "=", " ", 
   RowBox[{"testlengths", "/.", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"a_", "\[Rule]", "b_"}], ")"}], "/;", 
      RowBox[{"!", 
       RowBox[{"(", 
        RowBox[{"b", "===", "False"}], ")"}]}]}], "\[RuleDelayed]", " ", 
     RowBox[{"(", 
      RowBox[{"a", "\[Rule]", "True"}], ")"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestData", " ", "=", " ", 
   RowBox[{"CreateTrainingData", "[", "testlengths", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestData2", " ", "=", " ", 
   RowBox[{"ConvertSKTableToString", "[", "TestData", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.740425309205702*^9, 3.740425342645844*^9}, 
   3.740434412842927*^9, {3.7404843447156*^9, 3.7404843519903393`*^9}, {
   3.740490546008197*^9, 
   3.740490548330616*^9}},ExpressionUUID->"8e528a05-30a2-42fc-a28c-\
dbcf64cd5125"],

Cell["\<\
The classifier can now be assessed for accuracy using this data:\
\>", "Text",
 CellChangeTimes->{{3.740425282989439*^9, 3.7404252834692917`*^9}, {
  3.7404253889334793`*^9, 
  3.740425398548109*^9}},ExpressionUUID->"74dca5f0-4817-409e-b55b-\
62ae24f41ead"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier1", " ", "=", " ", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"HaltClassifier1", ",", "TestData2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740425403736689*^9, 3.7404254193373957`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"2f3d6168-d519-438b-9963-0a9a0045458e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1454", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1454", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7551581843191196297`5.203850277393849", "\[PlusMinus]", 
                    "0.0112805157276859927`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 1456, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Text"]], 
            "Output" -> 
            Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Fill" -> "", "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                7263179337424669307]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3139720177438361802, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 5643421565728107793, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["TextToNominalSequence", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Tokens" -> {{
                  " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                   "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{",
                    "}", "\\", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                  ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                   ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                  "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                "Version" -> {11.3, 0}, "ID" -> 3051290048872824615, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor[
              "NoninvertibleIntegerEncodeNominalSequence", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                MachineLearning`SortedHashAssociation[
                  Association[
                  "KeyHashes" -> {-9013817937938426079, -4973948215836336071, 
                    2077270817744784973, 3408017859420023313}, "Values" -> 
                   None, "DefaultValue" -> -1, "HashFunction" -> 
                   Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 2055599668730355056, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]]]]}, 
            "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], 
       "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8901912692949392733]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 5272359975513785890, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3197017005843221070]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          False -> 0.49999999999999994`, True -> 0.49999999999999994`]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "ClassPriors" -> 
         Association[1 -> 0.5012853470437019, 2 -> 0.49871465295629824`], 
         "Method" -> "Markov2", "TokenNumber" -> 4, "Order" -> 4, 
         "MinimumTokenCount" -> 0, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor[
              "NoninvertibleIntegerEncodeNominalSequence", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                MachineLearning`SortedHashAssociation[
                  Association[
                  "KeyHashes" -> {1, 2, 3, 4}, "Values" -> None, 
                   "DefaultValue" -> -1, "HashFunction" -> 
                   Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 2922156563490152947, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NominalSequence", "Weight" -> 1], "Key" -> "f1", 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Impossible", "Missing" -> "Imputed"]], 
         "NGramPosition" -> MachineLearning`SortedHashAssociation[
           Association["KeyHashes" -> CompressedData["
1:eJw9lkuupTsNhavBCIAJMACk+B0P4Uq3xRBoINGicekzdT7/Sc5RqfaWveP4
sdZy/vbP//zjX//79evXH3/iv9///cd/f/srX/7ey0MruoXP7Z67j2P3tjDd
InuZLO8fxzbTyNiJN3OJ53UURywIZDvKUvydSF1LhY+ybi8rvY4Q7SKApGzZ
5f4cPpHD03ZVS2fXj0O3ua691H1pp1/HRJZtGaEmpGfrOWptrQ5uXUWCJdeh
5it2xZaKtMD9HJi9U4ODpMY11yGTo+Yindy+dr/L154INLIJ19ZxT9CR7VW0
1tpitdatg/NBOsav+TFfX6gKHbtXzmWaqi+UGQOhW1UipYR7Dg03E+aVXBM4
5DlsMaISpSu0kxFex4rmlzt7xstgX69yq1CeKkVau8rrbhKrnB7Jokjh7zki
eml07LU6GM4DQ4YHl7rvNaG8l12HNGjIoAZdIhTez0FaScByjjFh2z8O/1pl
9JkGh7x0V3O5KeOe2fKzmxUjzalMnPtV01t+HGsxJweRTktq33SjqBp0Egik
ZAHf60gHo2Lcw2S6rW4dVOczCgHO0aB33XQZgjPRbkLypaKuw+mHqa8uwAVv
SPA6HEKRZSaT4EMfRN12r9y1oI+Tuupz6NAOHG4f8LbvOA6Y19G+4Ec4E5fw
55A0uA6GwCrTqOdwhRVQkPnpcFdfKDAQ4GlRwYCCLK9jzQAdRNNL0o13h0Kp
IQ5HOMEg962c2hgn41nQkjJI4zqADLSwXowCCXDJ55DCbGYjPozpDUqlxAam
C3YCSHvkVODDPEJoBrAI9OA4hOCiANhlmVP3o9p0Dm62DUp9eH6zEkLXBAGJ
oJF+3sqFosNHlWRQ6PFzYhoEP2kAmXJwyXMEs9sbgnhtH14/B3UNC1EnOC3+
1AcrEuXyoSpWNXX85VNqCC7oFbnCNoiyrx36I9uMdya8+Tv2okuojFEm/d/A
5doNYTbaF9PgBvTHjhowMf59QgZK9doZK8MHI6JANt69qXRvBdLNMEavXhxF
4RdWqDpyUnHsIxwGMmg5BIev184GQB1jJqrSwFGfXUciEGAAtlCy/u3PR6Rg
vBXB4Sq3+mdGxqxlgEeGTIwujBlFRvdjBKicGBafOQAdGo6qIB/LifOZ4WeL
IA89+xAhOEFYgOgXgVOnXUaGnxkyMXUfzZ/Rr/rMLd+Y0LeZEuJaXz2yZFNS
z+qcBYnKXHsCdSbkRTWsFz99AbIjbjIqTYbzd+yjLgvqTU9y83F/b0n7aAeq
AP0rL27ALPE3fFVQiPDUunayB2GAbYZlDOXY4RpKSBdypBX63Xt7spxFFySG
Jvqxgw6EDvNGM1Fk5P2z0xpEVpC0hNw+pL12FiE2hCYLXCLsx24fXkad0RTa
JCdP+/S4h9c+16jLZ2clwDj2wSzFZJB+cOmz0WBCMDIYwJxPXT4i80kwSBjg
1LXz7Nk8Kkb8YRES6Me+PxlDsLDznAD/xz5rzoMQbKIhuva1z7VwtuE8Wmn7
xIf/9PyTNvQJXF2esPXhD2kAfigB4eLav11bOe8SnffD6VvMOmb/9Ags6/Pd
i7DMmqNryBxV1+U5M6XUxRrUecBBoxMHlHyvBahZsywo4tgHIDjhJ1Ri7pef
OaLASvJ5y6Am8uxFPpASXeFczK55dnAwKGJ5MEe7eEAHQA8N5e2A2sm8Rj47
DzTCIBoKcEn/5U9X5qEFHkiWlurpJ3BFN1M4kMMO0H3t37wLqZrXJGw7eULD
eavNewcdkNkSxw5D2MFwZhSDIm4fimfs6D5j/HZYXh3c3xJmMtAO0ebhdupl
bfGk5QEN50eAYP6xKy1E8UAWyjTP3Lr2tKKfgIIHBV/uvfQcNLMdaQS8ZMr3
93QRraQk0N8jZweHs0zmSTnPJZQTtbh2gsCReVLyJOKqqw88JHx27P4etZP/
id8CgNbs0bB5N2jm/wHa8Slw
             "], "Values" -> None, "DefaultValue" -> 
            Missing[], "HashFunction" -> 
            Function[{
              MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
              Switch[
              MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                BlankSequence[String]}, 
               Data`StringHash[
               MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, "Murmur3-64"], 
               PatternTest[
                Blank[], 
                MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 
               PatternTest[
                Blank[], 
                MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
               
               Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
                   Quotient[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                   Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                   Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                   Mod[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
                 Transpose[
                   MachineLearning`PackageScope`ToPackedArray[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
                 Transpose[
                   Flatten[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                  FromCharacterCode[
                   Abs[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
               Blank[List], 
               Map[Switch[#, 
                 Blank[String], 
                 Data`StringHash[#, "Murmur3-64"], 
                 PatternTest[
                  Blank[], Developer`MachineIntegerQ], #, {
                  PatternTest[
                   BlankSequence[], Developer`MachineIntegerQ]}, 
                 
                 Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q = Flatten[MachineLearning`file132SortedHashAssociation`PackagePrivate`q]; 
                  Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                 Blank[], 
                 Data`StringHash[
                  StringJoin[
                   ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {11.3, 0}]], 
         "ConditionalProbabilityMatrix" -> CompressedData["
1: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
4HNvfphLNI2UHctjf2f6+l8pBADZ
          "], "DiscountMatrix" -> 
         SparseArray[
          Automatic, {127, 2}, 0., {
           1, {{0, 2, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18, 18, 18, 18, 20, 22, 
             24, 24, 24, 26, 26, 28, 28, 28, 30, 30, 32, 32, 34, 34, 36, 38, 
             40, 42, 44, 46, 46, 48, 50, 52, 54, 54, 56, 58, 60, 60, 62, 64, 
             64, 66, 66, 66, 66, 68, 68, 68, 68, 70, 72, 72, 72, 72, 72, 72, 
             72, 72, 74, 74, 74, 74, 76, 76, 76, 78, 78, 78, 80, 80, 80, 82, 
             82, 84, 84, 84, 84, 86, 86, 86, 86, 88, 88, 90, 90, 90, 92, 94, 
             94, 94, 96, 96, 96, 96, 96, 98, 98, 98, 98, 100, 102, 102, 102, 
             102, 102, 102, 104, 106, 106, 108, 110, 110, 112, 114, 116, 118, 
             118, 120, 120}, {{1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
             2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
             1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
             2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
             1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
             2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
             1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
             2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
             1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
             2}, {1}, {2}, {1}, {2}, {1}, {2}}}, CompressedData["
1:eJwtk3tM03cUxX8tj/4K7a9pOylOZOUtRmQKYxQo34OIiIyXERhEYAVaHPIY
xsc2cHWOR2NAEqI8QoWJYRgkk6fKRETYXLcwcVHmhoDCJDBYoAUGhcwwlnqT
k09Ozk3u/eNeh9Tcw0oWRVGfbirzd4HzfjUfS739SvZtLsyqOm9ywilkyYxC
j1MUvLmbTZSeJFqYePna8CetcgPJ+qEkXuthIK+CMt5+/11zVGYmdDfyLOAV
nvZY5W4kNTrZcWWTkVwq7/3ac8YCwQmOi4IjHAT9Rh/cqeDCT73nn8VBBo57
Z0WqeBHUjZ0WL+V8NGQ41+2epbBXNq8O9mQh3d3657UXIsQERPdvi5CA2vi/
Fkj9uomne+6yi+q48ExRz+m2MTiSw2grZszQ/dQtt6OUg0xv14u0xECmlEV3
vvQzEG3HerrrpAjlk0m+Gns+Lnx7z2jfJ0ShpiHhrJSPFvmlHN8KPRkMa28I
dDOQ2A/PtbYPszCwkNbWcpqFo2Gp8+OjeuIY/1Xx+VADkfIU3U0xYujlG6nn
HkngcTKEydzKg+bPfZ7L/QJcEV/dJfneSG61iEOr14xk6tVHry2r7VEW6KfV
Pd8C2/ZKcXgohb7xDJe0aQrRX8xLfyzSk4LC8JFfK/Wk5JuGIcc2K3BrEtW6
RAEUR4fyeQIa3r0fr0ZNczGQHbnT2ZKNEK+ltTs6NiqQInjI4sMs6fjf6yoa
5U7XV7SDIkT3c3xtJqxx4pfz/mEjNIrjnvvPcngoIM7J8U93kba+rpRjRh+S
b23TmaehYd2ik2Ut8FG1ELF8MoeF1j3CXOcSNuKq61wTV2nUzV1oCFnmoDz2
M6HhIRdR+9b7RxcZBD0Y77B7xMMtXiHoQhpbr7jMjDV6k4XPC+t3n/UhuauS
F9HZehLKcZt0YRnISOrjiSc3Nj1ffn8w0kDMBbcdzAcoSIN/qq+opFBztcCW
vV2M8fzm5uZZBk3KoIi+YRFOrVwbko4y6FLU7BdPColZgCyqM8WWNHtZEv8p
B6KQReByxg7iVXXxQHLCBulp9JEKYincfXM/19dMPDQR9d2TZ2L0+Pao1HZ8
vMWt3d5Fs7AjRq4IS2LBqdy9tMPdDu73is3aorbgJWP6g7/YJlbdr9f4FYnB
WqkNmDMycAr2+SNdLETA2AnVjS5rLIWXBSUdtERmRZlt6Qc0QDM1Z5JpHHN4
thaXx8OB16Y9av81MVtsr9cKrCDJs0qOfCBA9ZtcQ5nmTb/znk1gqJ74M35n
xkr15D/mYJ0V
            "]}], "Discount" -> {0.5, 0.5}, 
         "DefaultUnigramProbabilities" -> {5.958854112354195*^-6, 
          8.072165156499103*^-6}, "Options" -> 
         Association[
          "Order" -> Association["Value" -> 4, "Options" -> Association[]], 
           "AdditiveSmoothing" -> 
           Association["Value" -> 0.1, "Options" -> Association[]], 
           "MinimumTokenCount" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "ExcludedTokens" -> 
           Association["Value" -> {}, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.5386342851847074, 0.03268416794432903], "Accuracy" -> 
            PlusMinus[0.7126193575836113, 0.03774871097708727], 
            "EvaluationTime" -> 0.0011093986254295534`, "TestSize" -> 291, 
            "TrainingSize" -> 1165, "TrainingTime" -> 3.336124, 
            "TrainingMemory" -> 26004160, "ModelMemory" -> 35768, 
            "ExperimentCount" -> 1, "ModelUtility" -> 0.7820273047180711, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.5386342851847074, 0.023111196790875036`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.7126193575836113, 0.02669236951294947]}, 
            "Configuration" -> {
             "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
              "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
           Association["ID" -> 182377339236766]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "Markov", "Options" -> 
              Association[
               "Order" -> Association["Value" -> Automatic], 
                "AdditiveSmoothing" -> Association["Value" -> 0.1], 
                "MinimumTokenCount" -> Association["Value" -> Automatic], 
                "ExcludedTokens" -> Association["Value" -> {}]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.3589172408118517`, 0.3096211066922281], 
                 "Accuracy" -> 
                 PlusMinus[0.5033183699043406, 0.055220238414726355`], 
                 "EvaluationTime" -> 0.0007634066666666666, "TestSize" -> 300,
                  "TrainingSize" -> 10, "TrainingTime" -> 0.06661633333333333,
                  "TrainingMemory" -> 315672., "ModelMemory" -> 32184., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.17842460662951729`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.678135452862049, 0.33992207699396826`], 
                   PlusMinus[2.19923154688099, 0.2404188670690327]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4405940594059407, 0.049585758966034954`], 
                   PlusMinus[0.534938371981468, 0.03520626584597544]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8837438959120848, 0.1675733598444099], 
                 "Accuracy" -> 
                 PlusMinus[0.614504167523627, 0.043012367058054855`], 
                 "EvaluationTime" -> 0.001173376, "TestSize" -> 400, 
                 "TrainingSize" -> 50, "TrainingTime" -> 0.25418, 
                 "TrainingMemory" -> 1.3406592000000002`*^6, "ModelMemory" -> 
                 35768., "ExperimentCount" -> 4, "ModelUtility" -> 
                 0.46165128429385804`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.4304012858061967`, 0.201495987067603], 
                   PlusMinus[1.0244903491863173`, 0.143040429957908], 
                   PlusMinus[0.7237661984713984, 0.10237113009589732`], 
                   PlusMinus[0.829409203855342, 0.10344188127853646`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5198019801980202, 0.049975705079116424`], 
                   PlusMinus[0.5990099009900995, 0.04911373703086736], 
                   PlusMinus[0.6881188118811888, 0.046557173967708], 
                   PlusMinus[0.6386138613861393, 0.048196108468711966`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5705664941950788, 0.025581782227750028`], 
                 "Accuracy" -> 
                 PlusMinus[0.6943627490760415, 0.020894113432631353`], 
                 "EvaluationTime" -> 0.0010810677777777777`, "TestSize" -> 
                 500, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.6774239999999999, "TrainingMemory" -> 5.977309333333333*^6,
                  "ModelMemory" -> 35768., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.742902608822525, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5590252315751466, 0.03286199043343342], 
                   PlusMinus[0.5815779691600658, 0.03209888530984471]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6981957794731286, 0.03262701827419987], 
                   PlusMinus[0.6918020392532016, 0.02666775387472454]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5386342851847074, 0.03268416794432903], 
                 "Accuracy" -> 
                 PlusMinus[0.7126193575836113, 0.03774871097708727], 
                 "EvaluationTime" -> 0.0011093986254295534`, "TestSize" -> 
                 291, "TrainingSize" -> 1165, "TrainingTime" -> 3.336124, 
                 "TrainingMemory" -> 26004160, "ModelMemory" -> 35768, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7820273047180711,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5386342851847074, 0.023111196790875036`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7126193575836113, 0.02669236951294947]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0011093986254295534`, "MeanCrossEntropy" -> 
                PlusMinus[0.5386342851847074, 0.03268416794432903], 
                "ModelMemory" -> 35768, "TrainingMemory" -> 26004160, 
                "TrainingTime" -> 4.236055426895565], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 4], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association["ID" -> 182373044269470]], "MaxTrainingSize" -> 1456, 
         "LastReportingTime" -> 3.740469917715393`16.325501155491633*^9, 
         "PreprocessorEvaluationTime" -> 3.92919921875`3.*^-6, 
         "PreprocessorMemory" -> 29048, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 2.168860378570529, 
             "ElapsedTimes" -> 2.058015, "ExperimentCounts" -> 2], 
            Association[
            "TrainingSizes" -> 50, "TimeBudgets" -> 2.7110754732131617`, 
             "ElapsedTimes" -> 2.6837269999999998`, "ExperimentCounts" -> 4], 
            
            Association[
            "TrainingSizes" -> 250, "TimeBudgets" -> 3.3888443415164518`, 
             "ElapsedTimes" -> 3.670585, "ExperimentCounts" -> 2], 
            Association[
            "TrainingSizes" -> 1165, "TimeBudgets" -> 4.236055426895565, 
             "ElapsedTimes" -> 4.767441, "ExperimentCounts" -> 1]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[182381634204062]], "ID" -> 
            182385929171358]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {
               "s[s[s]][k[s][s][k[s[s]][s][k][s[k][k[s[k]]][s]][s[k][s][s]]]][\
s[k][s][s[s][k][k]][s]][s[s][k[s][k]][s[k][k][k][s][s[k][k[s][s[k]]]]]]"}, 
              "ID" -> 2825882393954120476]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 14.663725, "MaxTrainingMemory" -> 
         27614224, "DataMemory" -> 281056, "FunctionMemory" -> 131520, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 13, 11, 25, 18.095794`8.010152627911992}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {
       "s[k[s]][s[k][k][k][k[s]][s]][k][k[s[k]][k]][s[k[k][k][s[s]][s]][s[s[s]\
][s[s]][k[s]][s[k[s]][s[k[s[s[s][s]][k]]][k]]]]]", 
        "s[k][k[s]][k[k[k]][s[k][s]]][s[k[s]]][k[k[s][s[s][k[k][s][s][s]]][k[\
k][s[s[s]]]]]][k[s][k[s[s]]][s[k[s][k]][s[s][s[k][k]][s[s]][k]]]]", 
        "k[s][s][k[k[s][k[s]]]][k][k[s[k][s[k]]][k[k[s]]][s[s[s][k[k]]][s]][s[\
s][s[s]][s[k[k][k[k]]]][k[k[k]]]][k[s][s]][k[s][s]][s[k][k][s[k][k[s][k]][k]]]\
]", "k[k[k][s][k[s][s]][k]][k[k][k][s[s][s][s]][s][k[k[s[s[k]]]]]][s[s[s[k[s]]\
[k]]]][s[k[s[s]][k]][s[k][k]]]", 
        "s[k][k[s[k[k][k]]][s[s][k[k]]][k][s[k[s]]]][k[k][s[k][k[s][k[s][k]]]]\
[s[k[k]][s[s]][s][k[k]]][s[s[s]][s[s[s[s]]]][s[s]]]][s[s[s[s]]]]", 
        "k[k[k]][s[s]][k][k[s[s]][s[s[k][s[s]]]][s[s][s[k]][k[k[s][k[s]][s]]]]\
][k[s[s]]][s[k[k]][s][s[s]][s[k]]]", 
        "k[k[s]][s[k[s[s[k]]][s][s]]][s[s][s[s]]][k[k][k[s[k]]]][s[k][k][k[k][\
s]]]", "k[k[k]][k][k[s]][k[s][s]][k][s[s][k[k][s]]]", 
        "k[k][s[k[k[s]]][k[s[s]]]][s[s[s]][k[s[k]]][k[s[s][k][s[s][s][s[k[s]]]\
]]]]", "k[s][s[k[k]]][k[k][k[k]][k[s]]][k][s[k[k][s][k[k[s]][k[s][k]]][k[k[k]]\
[k[k][s]][s[s][s[s]][k[s[k]][k[k]][k[s]]]][s][s]]][s[k][s[s]]]]", 
        "s[k][k][s[s[k]]][k[k][s][k]]", "k[s][s[s][k]][s][k][s[k][k]]", 
        "s[s][k[s[s]][s][k][k[s[k][k][k][s[k][s[s][k[s[k[k[s]]]]]][k]]]]][k[k[\
k]]]", "k[k[s][k][k]][k[s[s][s[k][s[s]][k]]]][k[k[k]]][s[k[k[k[k]]][k[s[s]]][\
s[k][k[s][s][k[k[s[s[k][s]][k[k][k]]]][k[s[k]]]]]][k[s[k][k]][s[k[s]]][k][s]]]\
]", "s[k[k[s]]][k[k]][k[s[k][s[s][s[k][k[s]][k[s]]][s][k[k][s[s[k[k]][s[s][k[\
s]][s]]]]]][k[k][s[k[s]][k[s][k]][s[k[s]]]][s[k]][s[s][k]]]]]", 
        "k[s[s]][k[s[k]]][s[s][k][k]]", 
        "k[k[s]][k][s][s[k[k][k]][k[k[k]][s][k[s]]]]", 
        "k[k[s]][s[s[s][k[k][s[s[k]]][s[k]][s[s[k]]]]][s[s][s][k[k]][k[k]][k[\
s[k]][k][k]][s[s]]]]", 
        "k[k[k]][k[s]][k[k][k[s[k]][s]]][s[s][k][s][s[k][s[s]][k][k[k]]][k][k[\
s]]]", "s[s][s[s][s][k]][k[k[s[s]][k]][k][k[k[s]]][s[s[s]][k[s[s]][k[s]][k[k[\
k]][k]]]]][k][s[s[s][s[s[s[s]]]][s[k[k]]]]][k[s[k]][k][k[s[s]]]]", 
        "k[k[k][s[k[s]]][s][s[k][s[s]][s]][s]][s[k][s[s][k][k[k][k[s[s][k]]][\
s]]]][k[s[s][k][k[s[s]][k]]]][k[s[k]][s][s[k[s][s[s]]]][s][s[s][s[k[k]][s[s]]]\
]]", "k[s[s][s][k[k][s[s][k][s[k]]]]][s][s[k[k][k[s[k]]]]][k[s]]", 
        "s[k[s]][s][k[k][k[s][s][k]][k[s]][k[k[k[s]][s[s][k]][k[k][k[k]]]][k[\
k[s][s[s[k]]]]]]][s[k[s][s[s][k]]][s[s][k]][s[k]][k[k]][k[k[k[k][s[k[k]][s]]]]\
]]", "s[s[s[s[s]]]]", 
        "s[k[k][k]][k[s[k]][k[k]]][k[s[s[s[s]]]]][k[k[s][k[s[k]]]]]", 
        "s[s[s]][s[s]][k[s]][s[s][s][k][k[s[s]]]][k[k[s][k[k]]][s[s[k][k[s]]][\
k[s][k][s][k[k]]]]]", 
        "k[s][s[s][s[k][s]]][k[k][s[s]][s]][k[s[k][k[s]][k]][k][k[k[k[k[k][k]]\
][s[s[s[k]][s]]]]]]", 
        "s[s[k]][s[s[s]]][s[k[k[s[k]]][k[k]]]][k[s][s[s][s[k]]]][k[k][k][s[k]]\
[k[k[k]]][k[k[s[s]][k][s]]]][k[k]]", 
        "s[k][k[k]][k[k]][s[s][s][k]][k[k][s][s][s]]", 
        "s[s[k][s[s]]][k[k][k][k]][s[s[k]][s[s[k]]]][k[s[s[k[s][k]]]][s[k[k]]]\
[s]]", "k[k][s[k[k]]]", 
        "s[s[s[s][k][s][s][k[s][k[s][k[k]]]]][k[s[s[k]]]]][k[k[s][s[k]][k[k[s]\
]]]]", "s[k][k[k]][s[s][s[s][s[k]]][k[s]][s[s][s][s[k][k][s[k]]]]]", 
        "s[k][k][k[s][s]][s[s[k[k]]]][s[k[k[s[k]]][s[s[k]][k[s][s[k]]]]]][s[s]\
[s[k]][s][k][k[k]]]", 
        "k[s[k]][k[k][k[s]]][k[k]][s[k][s[s][k][k[k[s][s[s]]]]]][k[k[k[k][k[s[\
s]][k[s[k[s][k]]][s[s]]]][s[s][k[s][k]][s]]]]][k[k[k][k[k[k[s]]]]][k[k[k]][k]]\
]", "s[s[k]][s[s[s]]][s[k][k[s][s[k[s]]][s]]][s[k][k[k][s]][s]]", 
        "k[k][s[k[s]][s[s][k[s][s[k[k]]]]][s]][s[s[k[k[s][k[k]]]]][k[s[s]][k[\
s]]]]", "k[k[s]][k][k[k[s][k[k]][k[k][k[s][s]][s]]][k][s[k][s[k][s[s]]]]][s[s]\
[k[s[s][s[s]][k[k]]][s[k[s[k[s]][k[k]]]]][k[k][k[k][k[s]]]][s[s]][k[s][s][s]]]\
]", "s[s[k][s][k[k[s]]]][k[s[s]][k[k[s]][k][k[k]][k[s][k[s]]]][s[s[s]]]][s[s]]\
", "s[s[k[s][k][k]][k][s[k[k][s[s]][s[s]][k[s][k][k]]][k[s[k][s]][k[k]]]]][s]\
", "s[k][s[k][s][s[s[k][s]][k][s[k[s]]]][k][k[k]][k[s[s[k][s]][k]][k[s][k]]]]\
", "k[k][k[s[s[k]]][k[k]][s[s[k[s][k[k]]]][k[k[k][k[k]]][k]][s[k][k][k[s]][s[\
k]]][k[s[k[k]]]][k[s[k[s]][k[s]][k]][k[k]]]]]", 
        "k[s[s]][s[s]][s][s[k]][s[k[k[s]][s][s[k[s]][k[s]][k[s][k[k]][s]]]][s[\
s]]]", "k[s][k[k]][k[s]][s[k[k][k[k]]]][s[s[s][s]]]", 
        "s[k[k]][k][s][k[s][k[k][s]]][k][s[k][k[k[s]][s]][s[k[k]][k[k]][k[k]][\
s]]]", "k[s][k][s[k][s[s][s[s[s]][k][k[k]]]]][k[k[s]][s[k][k]][s[k[k][k[s[s]]]\
[s][s[s]][k[k[s]][s][s[k][k[k][s]]]]]][k[s[s]]]]", 
        "s[s][k[s][k][s][s[s[s]]][s[k[s[s[k][s]][s[s]]]][k[k[k]]]][s[s[k][k]][\
s][s[k[s]][k[s][s[s[s]]][s][k]][s[k[k[s]][s[s[s]][s]]][k[s][s][k[k]][s[k]]]]]]\
]", "k[s][s[k][k[s][s[k[s]]]][k[k]]][k[s][s[s]]][k[k][k][k][k][k[k[s][s[k][k][\
s]][k]]][s[s[k][k]][s[k][k[k[k][s[s[s]]]]]]]]", 
        "k[k][s[s[s][s[s][k[s]]]][k]]", 
        "k[s][k[k][k[s]]][k[s][s]][k[s][s[k[k]][s[s]]][s[k]][k[s[s][s[s][k][k[\
s][s[k[s][k[k][k]]]]]][s[k[s]][s][k]]][k[s]]]][s[s][k][s][s[k]]]", 
        "s[s[s][k[s]][k]][s[s[s][k[s]][k[s[s]][k[k[k[s][s][k]]]]][s[k][k][k[k]\
[s[s]][s]]]][k[k[s]][s[k]]][k[s][k][k]]][k[s][s]]", 
        "k[s[k[k][k[k]]]][k[s[k][s]][s[k[k[s][s[k]][s[s[s[k]]]]]]][k[s][k[k]]]\
][s[s[s][k][s]]][s[s[k[k]]][k[k]][s[k][s[k]]][k]]", 
        "k[s[k[k]]][k][s[s[k]]][s[k][s[k][k[s[k]][s[k]]][s[s[k[s]]]]][s[s[k[s]\
[k[s]]][s]][k[s]]]]", 
        "s[s[s[s][k]]][k[s[s[k][s[k]][s]]][s[k[k][s[k][k[k]]]][s[s][k[s[k][k[\
k[s][s[k][s]]]]]]]]]", 
        "k[k][s[k[k[k[k]]]]][k[s][s[k]][k[k]][k[k][k[s][s[s[k]][s]]]]][s[s[s[\
s]][k][k[k]]][k][s]]", 
        "k[k[s[s][s][s[s]]][s[k]]][s[k[k[k]][k[k[k]]]][s[k[s]][k]]]", 
        "s[k][k][k[k][s[s][k][s[k][k][k[k[k]]][k[k]][k]]][s[k[s]][k[k[s[s[k]]]\
]]]]", "s[k[k][s][s]][s][s[k][s][k[k][s][s]][k]][s[k][s[k][s]][k]]", 
        "s[k][k[k[k[s[s]]]]][k[k[s[s][s]]]][s[s[k]][k][k][s[s][k[k[k[s]]]]][k[\
k]]]", "k[k][k][s][s[s]][k[k[s[s[k[k]]]][k[k[s[s]]][k[k]]]]][s[k[s][s][k[k]]][\
s[s[k]][s[s][k[s]]][s]][s[k[k]]]]", 
        "k[k][k[s]][k][s[k][s][s][k][s[s[k[k[s]][k[k]][s[k[k]]]]]]]", 
        "k[k[s[k]][s]][k[s][k[s]][k[k[k]][k[k]]]][k[k[s][s]][k[k[s]][k][k]][s[\
k][k[s[s]]]]][k[s][s[k][s[s]][s]]]", 
        "s[s[s]][k][k[s[s][k[s[s]][k[k]]]][k[s[k][s]][k[s[k[k]][k[s]]]]]][s[s]\
[s]]", "k[s[s[s[k]][s[s][k]]][s[k][s[s[k]]]][s[s[k][k][k]]][s[k[s]][s][s][k[s]\
[k]][s[k]][s[s[s]]][s[s[k]][s]]]]", 
        "s[k][k[k][k[k[s]][s]]][s[s[s[s][s]][k[k][s[k][s[s]]][s[k][k[k][s]]][\
k[k][k]]][s[s][k][s[k]]]]][k[k]][k]", 
        "k[s[s[s]]][s[s]][s[s][s][k][s[s][k[s][s]]]]", 
        "s[k[k]][k[k][k]][s[s[s]][s[s[k][k]]][s[s]][k[k[s]][s[k[k[k]][k[k]]][\
s]]]]", "k[s][s[s[s[k[s]]][s[k]]]][s[k][s[s]]][s[s[k][k]][s[k[s][k]]][s]][s[k]\
[k][k[s[k]][k]][s[s[s[s][k[k]]]][s[s[k]]]]][s[s][k][s[k]][s[k]]]", 
        "s[s][k[s]][k[k[k]]][s][k[s[s][s]][k]][s][k[s]][k[k[s]][s[s[s]]][k[k][\
s][s[k][k[s[k[k]]]][s][k[s[s][k][k]][k][k[s]]]]]]", 
        "k[s[k][k][s][k]][k][s[s][s[s][s][k[s]]][s]][s[k][s[k[k]][s[s][s[k[s]]\
]]]]", "k[s][s[s[k]]][s][s[s[s][k]][k[s][k[k]]][k][s[k][s[s]]][s[s[s]][s][k[s[\
k]]][s][k[k][k[k]]][s[s]][k[k]]]]", 
        "k[k[k]][s[s][k]][k[k]][s[s][k[k]]][s[s[s[k]][s[s][s[s]]]]][k[s[s[s[k]\
]]]]", "k[k[s]][s[k[k]][k[s[s[s]]]]][k[s][k][k]][s[k[s[s]][s]][k][k[s[k[k][s][\
s][k]]]]][s[k][k][s[k[k[s][k][k[s]][k[s]]][s]]][s[s[k][k][s]][k[s]]][s[k[k]]]]\
", "k[k[k]][s][s[k][s[s][s][k][k[s]][k[k[k][s]]][k][s[s]]][s[s[k]][k[s][s]][s[\
k]][s[s][k[s]][s][s[k][s[s]]]]][k[s][k[s[s]]][k][k[s[s][k[k][s]]]][s[k]]]]", 
        "k[s[s][k][s[s]][k[s[s]][k][k[s[k]][s]]]][k[s]][s[s][k[k[k][k]]][s[s][\
s][s[k][s]]][k[s]]]", "s[s[k][s[k]]][k[k][s[s[s]]]][k[k][k[k][s]]]", 
        "s[k][k[k][k[s[k[s]]]][k[k[k][k]]]][s[s[k]]]", 
        "s[k[s][k[k][s[s[k][s]]]][k][s][k[s][s[k[s]][s[s]][k]][k[k]][k[s[k[k][\
s]]][s[s[s]]][k][s[k][s[s[s]]]]][s[k][s[k[s]][s[s]]]]][s[k[s]]]]", 
        "s[k[s[s[k]]][s]][s[k][s][s]][k[s][k[k]][k]]", 
        "k[s[k[s]][k]][k[s][s][s[s[s]]][k][s[k][s][s][s[k[s[k]]][s][k[k][s]]][\
k[s[s[k[k[k[k]]]][s[k]]]][s[k]]]]][k[k[s][k]][k[k][s[s][k][k]][k[s]]][s[s]][k]\
]", "s[k[s[k]][k[s[k[k]]][k]][s[k][k[k[s[s][s[k][k[k]]]]]][k[k][k][s[k][s]][s]\
[s[s][s][k[s]][k[s]]]]][k[s[k]][s][s][s[s]]]]", "k[k[k[s]][s]]", 
        "k[s[s][k[k]]]", 
        "k[s[k]][k[k][k][s[k][s]][s[s[s]]]][k[k]][k[s][k[k[k]][s[k[k]]][s[k[s[\
s[s][s]][s]]]]]][k[s[s]][k[s[k]][s[k][k][s][k][k[s[k]]]][s[k]]]]", 
        "s[s[k[k[k]]][s]][s[s][k][k]]", 
        "k[k[k]][s[s[k[k][k[k][k]]]]][s[s][s][k[k[k][k[k][k][s]]][s[s[s[k]]][\
k[k][s]]]][k[s[k]][k[k[s]]]][s[s]]]", "s[k[s]][s[s]][s[k][k][s[s]]]", 
        "s[s[s]][k[k][k]][s[k][k[s[k][s[k]]][s]]][s[k[k]][k[k]][s[s[s][k][k]]]\
[k[s][s]][s[s[k[s]][s]]]][s[s][k]]", "k[k[s][k[k]]]", 
        "k[k][s][s[s[k][s[s][k]]][k][s[k]][s]][k[s][k[s[s]][k[s][s][k[k][s][s[\
s[k]]]][s[k]][k[s][s][s][s[s][k[k][k[k[s]]]]]]]]]", "s[s[k]][k[s]]", 
        "s[s][k[s][k][s[k][k]]][s][s[k][k[k[s][k]]]][s[s][k[k][k[s][s[s]][k[k]\
]][k]][k[s][s[k[k]][s[s]]]]][s[k[k][k]][s[s[s]][s[k]]][s[s[k]]]]", 
        "s[k][s[s]][s[s[k][k]]][s[k[k]][s[k]][s[k][k[k[s]]][k[s]]]]", 
        "k[k[k][s[k[s][k][s[s]]]]][k]", 
        "s[s[s[s]][s][s[s][s][s[k]]][s[k]]][k[s[k]]]", 
        "k[s][s][k[k[s[k]]][k[s[s[k]]][s[s[k]][s]]]][s[s[s][s][k]][k[k][s][k]]\
[k[k][s[k][s[s][s]]]]][k[s[k][s]][k[s][s]][s[k][k[k]][k]][k][k]]", 
        "k[s][s[s][s[k]]][k[s]][k[s][k][k[s[k]][k][s[s][s[k[k]]][s[k][s[k][s]]\
[s]][k[k[k][s][s[k][s][k[k]]]]]][s[s][k[k[k]]][s[s[s[k]]]]]]][k]", 
        "s[s][s][k[s[k][s][s]][s[k]]]", "s[s[s[k[s][s[k[s[s]]]][k]]]]", 
        "k[k][k][s[k[k]][k[k]]][k[s][k][k[s][s[k[s]][k]][s[k][k]]]]", 
        "k[s[s][k[s]][s[s]][k][s]][s[s][s[k[k[k]]][s]]][k[s[s]][s[s][k][s][k][\
s[s]]][s[k][s][k[s]]]][k[k[k]][s]]", 
        "s[s[s]][k[s][k[k]][s]][k[k[s[s]]]][k][s[k][k]][k[k][k[k][k]][k][s[s][\
k]]]", "k[s][k][k[s]][s][k[k[s]][k[s]]][s[k[k][k[s[s]]]][s[k][s[s][k][s]]][s[\
s[s][s]]]][s[s][k][s][k[s][k[s]]]]", 
        "k[s[k[s[s]]]][k[k[k][k]][k[k]]][s[s][k[s[k[s][k][s]]]][s]]", 
        "k[s[k][s]][k[k]][s[s[s[s]]]][s[k[k][s[s]][k][s[s]]][k[k[k]][s[k][s[s]\
[k]]][k]][s[s][s]]]", "k[s[k]][s][k[s]][s[s[s][k]]][k[s][s]][k[s]]", 
        "s[s][k[k][k[k]]][k[k][s[k[s]]][s[k[s[k]]][k[k]]][s[k]]][k[s[s][k[s[k]\
][s[s]]]][s[k[k]]][s[k][k[k]][s[s][k]]][k[s][k]]]", 
        "s[k[k][k]][k[s][s[k][s[s[s]][k][s][s]][k][s[s[s][k]]]][s[k]]][k[s][k[\
k][k][k]][s[s]][k[k[k][s]][s[k[s][s]]]][s[s[s][s][s[k][k[k]]]]]][s[s[k][s[k]]]\
]", "s[k][s[s[k[s]]][k][k[s[k]]][k[k]][k[s[s]][s[k]][k[k][s[k][s][k][s]][k[k[\
k][k[k]]][k][k[k[k]]]]]]][k[s][s[s]][k[k][s]][s[s][s[k[s]][k[k]]][k[s[s]]]]]",
         "k[k[s][k[k[k]]]][s[s][s][s[k]][k[s[s][k]][s][s[k[s][k][k[k][k][s]]][\
k]]][k[k][s][s][k[s][s]][k[s[s][k[s][s]][s][k]][k[k][s][k[s]]]]]]", 
        "s[s[k]][s][s][k[k[s]][k[k][k[k]][k[k[k]][s[k][k[s]]]]][k[s[s]][k[s]]]\
][s]", "k[s[s[k][k][s[k[k]]][k]][k]]", 
        "k[s][s[k][k]][k[k]][s[s][k[s][s][k][s]][s[s][k]]][k[k][k][s[k[k]]][k[\
s][s[k][s[s][s]][k[k][k]][k][k]]][s[k][s[s]][s[s]][s[s][k[s]]]]]", 
        "s[s][k][s][s[k[s]]][s][k[s[k][s[k]][s[k]]][s[k[s]]][s[k]][s[s[s[k][s[\
k[k]]][s[s[k]]]]]]]", 
        "k[s[k]][k[s][s][s]][k[s[s]]][k[s[s[k]]]][s[k[k[k]]][s[k][s[k[k]][k[s[\
s[s][k[k]]]]]]]][k[k[k[s[s[k]]]]]]", 
        "k[s[s[s[s]][k]]][s[k]][k[k][k[k][s[k[k[s]]][s][k][k[k][k]]][s[k][k]][\
s[s][s][k[s[k[k]][s]]]]][k]][k[s]]", 
        "k[s][k][s][k[s[k]]][k[s[k][k[k][k[s[s]]]]]]", 
        "s[k[s][k]][s[s[k]][k[k]]][k[k[k][s]]][s[k][s[s]][k[s][s[k[s]]][s[k[s]\
]]]]", "s[k][s[s[k]]][k[k[k[k]][s]]][s[s[k[k]][s[k][s[k]][s[s[s]]]][k[s][k[k][\
k[k][k[s]]][k[k][s]][s[s][s][s[s[k]][s[k[s[k]]][s[k][s]]]][k[s[s[k]]][k]]]]]]]\
", "k[k][k][k][k[s][s]][s[s][k[s][k]][s[s[k]]]]", 
        "k[s][k[s]][s[s[k]]][s[k][s]]", 
        "k[k[s][k[k][s[k][k]][s[k[s[k]][k]]]][k[k[k]]]][k[k][k]][k[s[s]][k[k[\
s]]][k[k[k]]][s[s]]]", 
        "s[s][k[k[k]][k[k]]][s[s][k]][s[s][k]][k[k[k][k[k][k]]]][k[k][k[s[s]]]\
[k[s[s]]][s[k[s][k[s][k]][k]][s[k][s]][k[k][k[s[s[s]]]][s[k][s[s]]]]]][s[k[s]]\
]", "s[s][s[k][k[s]]][s[k[s[k]][k][k[k[s]][s[k][s]]]][s[s[s]]]]", 
        "k[s][s[s[k]][k][k[k[k[s]][k[k][s[k]]][s][s]][s[k[k]]]][k[k]]][s[s][s[\
s[k]][k][k[s][s]]]][s[s][k[k[s]]][s[s[k][s][s]]]]", 
        "s[k][s[s]][k[k[s][k[s][s[k][k]]]][s[s[k]][k]]][k[s][k[s][s]][s[k]]][\
s[s]][s[s][s[s]][k[s][k[s][k]]][s[s[k]][k[k]]]][k[s][k[k[s[s]]][s[k][k]]][s[s]\
]]", "k[s][s[s]][s[k]][k[k[k]]][s[s[s][k]][s[k]]][k[s[k][k]][k[s]]][s[k[k]][k[\
k][s][k][s]][k]]", "s[k][s][k[s][k[k][s[s[k]][k][k[s[k][s]]]]]]", 
        "k[k[s][s]][k[s][s][s[s][s[s][k[s[k]][s]]][k[k]][s[s[s][k]][s][k][s[s]\
[k[k]][k[s][s]][k[k][k]]]][s[s[k][s]]][k[s[s]]]]]", 
        "s[k[k][s[k][s]]][k[s][k[s[k]][s[s]]]][s][k[s][s[s]]][s[k[s[s][s[s]]]]\
[k[s]][k[k[k]][s]]]", 
        "s[s[k]][s][k][s[s][k[k][k[k[s]][s[k[k][s[s][s]]]]]]][k[s]]", 
        "s[k[k[s]]][k[k[s]][s[k][k]][k][k[k][s[k][k]][k]][k[s[k]]]][k[s][s][k]\
[s[s[s]]][s][s][s[k][k[s[k][k][s[s][s[s]]][k]]]]]", 
        "s[s][s[s][k][k[k[k][s[k][k]]]]][k[k][s][k[s[s][s]][s][s][k]]][k[s[s[\
k[k[s]]]]][k][s[k]]]", "s[s][s[s][s[k]][k[s][k[s[s][s]]]]][s[s][k]]", 
        "s[s[s[k]][s]]", 
        "k[s][s][k][s[k]][k[s][s]][s[k[k]][k[s][k]]][s[k][k[k]]][k]", 
        "s[s[k]][k[s][k[k][s][s]][s[k][s[k]][k[k][k[k]]]]][k[s][s[s][s[s]]][k[\
s][s[k]][k[s][s[s]][s[s]][k[s][s][s[s[s]]]]][k[s[s][k]][s[k]][k[s[s]][s[s]]]]]\
]", "k[k[k][k]][k][s[s][s]][s[k[k[k[k]]]][s[k]]][k[k][s][k[k][s[s]]][k[s[k[k]]\
][s[k][k[k]]][s[s]]][s[s[s[s]][k][k]][k[s]]]]", 
        "s[s[s]][k[s[k]]][s][s[s][k][k]][k[k[s[s][k]][k[k[k]][k]]]]", 
        "k[k[k]][s[s][s][s]][k][s[s][k]][s[k][s[k]]][s[s[k][k]]][k[s[k[s]][k][\
k]]][k[s[s[s]]][k]]", 
        "s[s[k]][k][s][s[s[s][s][k][s][s]][s[s[k][k[s]]][s[s][k[s]]][k[s][k[k]\
[k[k][k[k]]]][s[s][k[s[s]]]][s]]]]", 
        "s[k][s[k[s]]][k[s[k][s][k][k[s][s[s][k[s[s][k]]]]][s[s]]]]", 
        "k[s[s[s]]][s[k[s]]][s[k[k][s]][s[s[k[s]]][s[s[k[s]]]][k[k[s]][s]][s[\
k][k]][s[k][k][s[k[s]][s[s]][s]]]]]", 
        "s[k][k][k[k]][s[k[k][s][k[s][k][s[k][s]][k[s]][s[k]]][s[k]]]][s[s[s]]\
[k]]", "s[k[k[k][k[s[k]]][s]]][s[k][k][s[k[k]][k][s[k]]][k[k[s][s]]]][s][k[s][\
s]]", "k[s][s[k]][s[k[k[s][s[k]]]]][k][s[k][s][s[k[k]]][k]][k[k[k]][s[k[s]]][\
s[k]][k[k[k[k]]][k[k[k]]]][s][s][s][k[s[k[k[k]]]][s[s][k][s]]]]", 
        "k[k[s[s[s][k][s[k][s[s][s]]]]]][s[k][k][s[s[k]]][s]][k[k[k]][k[k][k][\
s[k]][s]]][s[k[k][s[s]][k]][s[s]][s][s[k[s[k]]][s[k][k]]][k[s]]][k[k]][k[k[s]]\
]", "k[k][s[k[s][k[k]][s[s][s][k]]][k][k[k][k[k][s][k[k]][s[k[k][s][s]]]]][k[\
s][s][s[k][k[k][s[k[s]][s[s[s]]]]]]]][s[k[s]][s][k[s[s[k]]]]]", 
        "s[k[k[k]][s[k]]][s[s][k][k[k]][k[s[k]][s]]]", 
        "s[k[k[k][s]][s]][k[s[k]][k[k][k[s[k]][s[s[s]]][s[k[k]][s][k[k][s[s[s]\
[s[s[s[k]]]]]]]]]]]", 
        "k[k[k[k]]][s[s][s[k[k]][k[k]]]][s[k][k[k][k]][s[k][k[k]][k[k][s][s[s]\
[s[k][k]][s[k][k]]][k[s]][k[s]]][s[k][k[k][k]][s]][s[s][k[k[k]][k[s]][k]]][k]]\
]", "s[k[k][s]][s][s[k][s[k]]][k[k]][k[s[s]][k][k[s][k[k]]][s]]", 
        "k[s[s[s][k]]][k[k][k][s]][s[k[k][k]][k][s[s[k][s]]]][k[k][k[k][k]][k[\
s][s]]][s[k][k[s]]]", 
        "s[k[s[s][k[k]]][s][k[k[k[k]][s][k]][s[s[k][s][s][k][s]]]]]", 
        "k[k[s]][s[k][s][s[k[k]]][k]][k[s[s]][s[s]]]", 
        "k[k][s][s][s[k][s][s[s]][s[s]][s][k[k][k[s[k][k[s]]]]]][s[s][k[s][s[\
k]][s[k[k]][k][k]]]]", 
        "k[k[k][k[s]]][s[k[k][s]][k[k][s][s[s]]]][k[k][k[k[k[s]]]]][s[s[s[s][\
s[k[k][k]][k[s[s][s]]]]]][k[k[k][s][s]]]][s[s[k]]]", 
        "k[s][k[k]][k[s[k][s]]][k[k[k][k]][s][s[k][s]]][k[s][k[s[k]]][k[k][s]]\
[s[k][k][s[k[s]]]]]", 
        "k[s[s[k]][k][k][k][s[s][s]]][k][k[s[k][k]]][s[k[k][s[k]]]][k[k[k][k[\
k]]]]", "s[k[k]][s][s[s][s][s]][k[k]][k[s[s]]][k[s[s]][s[k[s][s[s]]][k][k[k][\
s]]]]", "k[k][k[s]][k][k[k][s[s[s]][s[k]]][k]][k[s[s[s]]][k[k][k[s]]][k][s[s[\
s[k][s]]][k][k[k]]]]", 
        "k[k[s][s][s[k][k]]][s[k][k[k][k[k]][k[k]][k[s][s[s[k]][s[s]]][k]][s]]\
][k[s[k]][s[s][s[s][k][k]][s][s][k]][s[k]][k[s]]]", 
        "k[k[k]][s[s][k]][s[s][k][s[k[k[s]]][k[k[k]][s[s]]][s[s][k]]]][s[s][s[\
s][s[k]][s[s]]][k[s][s][k[s]][k[s][k[s]][s[s][k]]]][s[s[k[s]]]]]", 
        "s[s[s[k[s]]]]", 
        "s[k[s][k][k][s][k[s][s[s]][k][k[k[s][k]]][s[k[s][k][k]][k[k[s[s][s]]]\
]]]]", "k[s[s][s]][s[s][s][s[s]]][k[k][s[s]][s[s][s][s[s]][k[k]]][k[s[k]][s[s]\
]]]", "s[k][s[s]][s[s[s[k]][k]][s][k[s][s][k[s][s][s][k]][k[s]][k[k][k[k][s]]]\
[s[k[k[k][s]][k[s]]][s[k][k]][k[k[s]][k][s[s[k[k][s]]]][k[s]][k[k][s[k]]]]]]]\
", "s[s[k][k]][s][k[k[s[k]]][k][s[k][k]]][k[s][s[s][k[k[s]]][k[k]]][s[s][s][s[\
s[k][k][s][k]]][s][s[k][s[k][s]]][k[k][s[k][s]][s[k]][k]]]]", 
        "k[k[k[k[s]][k]]][s[s]][s[k[k][s[k][s]][s[k[s]][k]]][k[s[s]][k[k][s][\
s[s]]]]][s[s][k[s][s]]][k[k[k][s]]][k[s][k][s[s][s[k[s][s]][s]]]]", 
        "k[s][s[s][s]][k[s[s]][k[k]]]", "k[k][k[s]][s[s[s[k]][k[s]]]]", 
        "k[s][s][s[k[s[k]][s[s[k]]][k[k]]]][s[k[k]][k[s][s]][k[s]]]", 
        "k[s][k[k][k[k[k][s[s][s]]]]]", 
        "k[k][k[s[s]][k]][k][k[k[s]][s[s[k]][k][k][s[s[s]]][s[s]]]][s[s][k][s[\
k[k][k]][k[k]]][s[k[k[k][s]][s]]]][k[s[s[k]]][s[s[k][s]]][k[k]]]", 
        "s[s[s[k[k][k[s][k[s][k[s][k]]]]][k[k]]]][k[s[k]][s[s[k]]]]", 
        "k[s[k][s]][s[k][s][s[k][s]][s[s][k[k]]][k[s[k]][s[s]]][s[s][s[s]][k[\
s][s][s]][s[k[k]][s][k[k[k]][k[k[s]][s[s]][k[k[s]]][s[k][k]]]]]]]", 
        "s[k[s][k[s[s[s]]]]][k][k[s[s][s][s][k]]][s[s][s[s]]][s[s[s]][k][k][s[\
s]]]", "s[k][k[s[s]]][s[s[s]][s[k[s]]][s[s][k][s[k][s]][s[s][k]]]][k[s][k][s[\
s]]]", "k[s][s[s]][k][s[k[s]][s[s]]]", "k[s[s]][s][s[s[k][s][s[k]]]]", 
        "k[s[s][k[s]]][k[k[s]][s[s[s]][k[s]]]][s[k]]", 
        "s[s[s[s[k]]][k[k[k]]][s[s][k]][s[s][s[k]]][s[k[s]][s[s][k[s]]][k[k]]]\
][k[k[k]][k[k][s][k][s[s[k]][k]]][k[k][s[k][s]]]]", 
        "k[k][k[s[s[k]]][k[k][k[s][k[s][k[k]][k][s]][s]][s[s][k]]][s[k]]][k[s]\
[s]]", "k[k[s][k[k[s]][s[k]]]][k[k]][k[s][k]][k][s][k[s[k[k][k]]]]", 
        "s[k][k[s][k[k[k[s]]][k[k[k]][k[s]]][s]][k][s[k][k[k][k][s][s]]]][k[s]\
[k[k]][s]][k[k[k]]]", 
        "k[s][s][k[s[s]]][s[s][k[k[k][k][s]]][s[s][s][s][s[k]][s][k][k[k[s]][\
k]]]]", "k[k[k]][k[s[s][k[k]]]][k[k]][s[s[k]][s][k[s][s[s[k]][k][k[s][k[s]]]][\
s[k[s]][k[k[k]][s][k[k]]]]][s[s]]]", 
        "s[s[k]][s[s][s[k]][k[k]]][s[s][k[s]]][k[k]]", "s[s[k][s[k]]]", 
        "k[s[k[s]][s[k[s][s][k][k[s][k[s]][s[s]]]]]]", 
        "s[k[k][s[s]]][k[k[s]][k[s]][s[s]][s[s]][k[s]][k[k][k]]][k[k[k][s]][s[\
s][s[k]][k[k[s]]]][k[k][k[k[k][s[s][k[s]]][s]]]]]", 
        "s[s][k[s[k]]][s[s[k]]][s[k[k]][k[k][s]][k[k[k]][k]][k[s[s[s[s]]]][k]]\
[k[k[k[k[k]]][k]][k[k][s[k]]]]][k[k][s][k[s[k]][s[k][s[s[s]]][k[k]]]]][k[k[s]]\
]", "s[s][s[k[k][k[k]]]][s][s[s[k[k]][k[k][s]][s[k[k][s[k[k[s]]][k]]][s]]][s[\
k][s[s]][k][s[s[k[k]][s[k]][s[s[s]][k][k[k]]]][k]]]][k[s[s]]]", 
        "s[k[s[s]][s][s[k][k[k]][s[s][k][s][k[k]]]]]", 
        "s[k][k][k[k[k]][s][k[k][k[k]]][s[s[s[k]][s[s[s]][k]]][s[s][k]]][k[k][\
k][k]]][s[k][s[s]]]", 
        "k[s][k][k][s][s[s[k]][k[k]][s[s][k][k[k][s[s]][s]][s[s[s]]]][s]][k[k]\
[s][s[k]][k[k][k][k[k][k[k[k]]]]]]", 
        "k[s][k[k]][s[s[s]][s][k[k][s][k[s][k]]][s[s[s]][k][k[k[k]]][k[k[k]][\
k[k[k]][s]]]][s[s[s[k][s]]][s[k][s[k][s]][k[s][s][k][s]][s[k]]]]]", 
        "k[k][s[s][s][k][s[k][s][k]]]", 
        "s[k][s[k][s]][s[k[k][k[s][s]][k[s][s[s]]]][k[s[k][s[s][s[k]]][s]][s[\
s][s[k][k]]][k][s[k][k[k][k]]][s[s][s[k][s]]]][k]]", 
        "k[s[s[s][s]][k[s]][k[s][s]][k[s][s[s]]]][k[s[s[k][s[k]]]][s[k][k[k]][\
k[k]]][k[k[k][s]]]][k][s[s[k][s[s][k][k[k]]][k]]]", 
        "s[s[s][s]][k[k[s[k[k][k[k]]][k]][k[s]]]][k[k[k]][k[s][k]]]", 
        "s[k][k[k]][k[s]][k[s[s[s]]]]", 
        "k[k[s[k[s]]]][s[s][s[k]][k][k[s]][k[k[k][s]][s]][k[k][s[k][s]][s[s][\
k]]]][k[s][k[k]][s[s[k]]][k[k[k]][s[k]][k[s[s]]]]]", 
        "k[k[s][s]][s[s][k][k[k]]][s][k[k][s[k][s][s]][s[s][k[k[s]]]][s[s[s[s]\
][k[s]]]][k[s[k][k]][s[s]][k][s[k][s[k[s[k[k]]]][s[k][k[s]]]]]]]", 
        "s[s[k][k][k][k[k]]][s[s]][k][k[k]][s[k][s[k]][k[s][s][s[s]][s]]][k[s[\
s]][k[s[s]][k[s][s[k]]]][k]][s[k][k][s][k[k]]][k[k][s][s][s][s[s][k][k[s[s]]]]\
]", "k[s][k[s][k[s]][k[k]]][k[s][k[s][k][k][k[s]][k][k[k]][k][k]][k[s][k][k]]]\
[k[s[s]][s[s][s[k[k[s]][s[s][k]][s][k[k[s]][s]]]][k[k[k]]]]]", 
        "k[k][s[k]][s[k][k][s]][k][k[s][s[k[s]]][k[k[k]][s[s[k]][s[k[s]]]]]][\
s[k][s[k[s[s]][k[k]]]][s[s]]][s[k][s]][s[s][k[s]][k[k[k]]][s[k]]]", 
        "s[s[s[s][s[k[s]][s]]]][k[s]][s[s][s[s][k]]][k[k]][k[s[k][k[k]]][s[s][\
k[k[s]][k[s[s[k[k]]]]][k[s][k]]]]]", 
        "s[s][k[s[k]][k[k[k][k[s]]]]][k[k[k]][k[k][k[s]][k[s]]][s[k[k[k]][k[s[\
s]]]][k[s[s[s]]][s][s[s][s[s]][k[s[k]]]][k[s][k[k]][k[k][s]][k[k[k][s][k]]]]]]\
]", "k[k[k]][k[s[s]]][s[s][k[s][s[k][k][k]]][k[s][s[s]]][k[k[k][s]]]][s[s][s[\
s]][s][k[s][s[s][k]]]][s[s][s]]", 
        "s[k][k[s]][k[k]][s[k[s]][s[k[s][s[k][k[k][k]]]]][k[s]][s]]", 
        "k[k[s]][s][s[s[k[k]]][k][k]][k[s][k[s][k[s]]][k[s[s][k]]]]", 
        "k[k][s[k[s]]][k][s][k[k[s][k[k][k]]]][k[k[k][k[k]][k][s][s[k[k]][s[s]\
]]][k[k]]][k[s[s]][k[k][s]][s[k][s[s]]][k[k[s][s]]][k][s[k][s][s][s][s[s[s]]]]\
]", "s[k[k]][k[k][k]][s[k[s[s[k[k[k][k]]]]]][k[s[k]][s[k][s][s][k[s[k][s]]]]]]\
[s[k][k[k][s]][k[s][k[s[s]]]]]", 
        "s[s][s[k[k[k]]][k[s[s[s]]]][s[k][k][k[s[k][k]][k[s]][s]]]]", 
        "k[k][s[s][k][s]][k][s[s][k[s[k]]]][s[k[s[s[s[s[s[s]][k]]]]]][s[s][s][\
k][s[s][s][k[s][s][s]][s[s][s[s[s[s[s]]]]]]]]][s[k][s[s]][s[s][k][k][s][s[s]]]\
]", "k[k][s[k][k]]", "k[s[s][k][s]]", 
        "s[k][k[k]][s[k][k[k]]][k[k]][k[s][k[k[s]]]][s[s[s][s][k[s][k]]][k[k][\
k]]]", "k[k][s][k][k[k][k[s[k]][s]]]", 
        "s[k][k[s]][k][s[k[k][s[k]][k]]][k[k[k][k[k[s][k[s]]][s]]]]", 
        "k[k][s[k]][s][k[s][k[k]][s[k]]][k[k[s[k][k][k]]]][k[k[s][s]]][k[k[k]]\
][s[k[k[s][s]]][k[k][k[k[k]]][k[k][k[s[k]][k]]]]]", 
        "k[k][s][s[k[k[k]][k[s[k[k]]][k][k[s][k]][k][s[k[k]]]][k[k][k][s]]]][\
s[k[k]]][k[s][k[s]]]", 
        "s[k][k[s][k]][s[k[k[s][k]][s][k[k[k]]]][k[k[k]][s]]][s[s][s][s[s]][s[\
s[k[s]]][k][k[s][k[s]][k[s]]]]][k[s][s[k]][k][s[k][k[s][k][s[k]]]][k]][k[s][s]\
]", "k[s[s[s[s]]]][s[k[s]][s[s[k][s]]]][s[k[s]][s[s[k]]][k[s]]]", 
        "s[s][s][s[k]][k[k][s][k[k][k][s[k]]][k[k][k[k[k]][k[s[s[k]]]]][k]]][\
k[s]]", "k[s][k[k][s[k]][k]][k[k][k[k][s][k[k]]][k[k[s]][k[k]][k[s]]]][s[k[k[\
s]]][k[k][k]][s[k]][s[s[k[k]]][k[k]][s[s[s[s]]]]][k[s[k[k][k]]]]]", 
        "k[s][s][s[s]][s][s[k][k][k[s]]][k[s][s]][s[k][s[s[s]]][k][s[k[k][s[k]\
[s]][k][k[s[s]][k]][s[k[s]]]]][k[s][s[s[k]]][s[k[k]]]][s[s][k]][s[k]][s[k]][s]\
]", "s[k[k[k[s]]][k[k[s]][k[s]]]][k[k[k][k]][k][s[k][s[s[k[s[k]][s]]][s][k[s][\
k][s[s]]]][s[k][s[k]]]][k[k]]]", 
        "k[s[s[k]][k[s[s]][s[s[k][k][s]][s][s]][s[k[k]]]]][s[k][k[s][k[s[s]][\
k]][k[k[s]][k]]][k[s][s[k[k]]][s[s]]]][k[k][s][s][s[s][k][k[s][s]]][s][k[k][s]\
]]", "k[s][s][s][s[k[k][k]][k[k[k][k][k[k]]]][k]]", 
        "s[s][k[s][s]][k][s][s[s][s][k[s][s][s[k[k[s]]][s[s][s][k][s[s]][k[s]]\
[s[k]][k[k][k[k[k[k]]]]]][s[s][k[s[k[k[k]]]]][k[k][s[s[s]]]]]]]]", 
        "k[s[k][k][k[k]]][k[k[s]][s[k][s[s[k]]]][s]]", 
        "k[s][k][k[k[k[s[k]]]]][s[k]]", 
        "k[k[s]][s[s]][s[s]][k[s][s[k][k[s[k][s[k[k[s]]]][s]][s[s][k][s][s[k]]\
]]]]", "k[s][k[k]][k[k[k]]][s[s[s]]][k[k[k][k[k[s][s]][k[k]][s[s]][s[s]][k[k][\
k[k][k]][k]]][k[k][s]][s[s][k]]]]", 
        "k[s][k[k][s][k][s[s[k][k][k][s[k[s][s[k]]]]]]][k[s[s][k[s][k]]][s[s][\
k]]][k[k[s[s]]][k]]", 
        "k[k][k][k[s[s][k]][s[s][s[s[k]]][k[s]]]][s[s[k][s][k]]][k[s][s][k][k[\
s[k]][k]]][s[k][k[s[k][k]]][k[k[k]][k[k][s[s][s[s][s[k[s]]]]]]]]", 
        "s[k[s]][s[k[s]][s[s][s]][s[k]]][s[k[s[k]]]]", 
        "k[k][s[s[k[k]][s[k][k]][k[s[k[s]]][k[k][s][s]]]][k[s][k]]]", 
        "s[k[s]][s[k][s[k]][k[s][s[k][k[s]][k[k]]]]]", 
        "k[s][s][s[s[k[k]]][k[k[s]]]]", 
        "k[k[s[k[s]][k]]][k[s][k[k][k]]][s[s[s][s]][k]][s[k][k][k[s][k]][k[k][\
k][k][s[k[k]]]][s[s][s[s[s]]][k]]]", 
        "k[k][s[k][k][k]][k[s][s[s]][k[s][k]]][s[k[s][s[k]]]][k[s[s][s[s]]][s[\
s]]]", "s[s][k[s[s[k][k]][k][k[s[k]]]][s[k]][k]][s][k[s[s]][k[s][s][s][s[k][s]\
]][s[s][s[k[k[k]]]][k[k][k]]]][k[s[s[s[k[s]]]]]]", 
        "s[s[s[k[s[k]]][s]]][k[s[k]]][s[s[k]][k[k]][s[k][k[s]][k[s]][k[k]]][s[\
s[s]][k][s[s[s]]]]]", 
        "s[k][k[k]][s[s[s][k[k]][s[k[s]]][k[s[k[k[k]]]]]]][s[s]][s[k[k[s][k]]]\
[s[k][k[s][k][k][s[s[k]][s[s]]][s[s][k[s[k]][s]]]][k]][k[k[s]]]]", 
        "k[s][s[k]][s[k]][k[k[k][k[k]]]][s[k][k[k]]][s[s[s]][s[k][s]]][k[k][k[\
k]][k]][s[k][s[k][k[k[k]][k[s]]]]]", 
        "s[s[s[k][s[k]]][k[k[s[k]]]]][k[k][k[k]][k]][k[s[s]]][s[s[s[s]][k]]][\
k[k][s[k[s][s][s[k]]]][s[k[s[s]][s[s][s[s[k]]]]]]]", 
        "s[k][s[k[k[k]]]][k[k][k]][k[k[s[s[k[s]]]]][s[s][s[k][s][s]][s][s[k][\
s[k[k]]][k[s[k]]][k]]][k[s]][s[k]]][s[s[k]][s[k[s]][s][s]][s[k]][k[k[s]][s[s]]\
]]", "k[k[k][k[k[s][s][s[s]][s[k[s]]]][k[k][s]]][k[k][s[k[k][s[k]]]][s[s[k]]]]\
]", "s[k[s][k][s][s[k][k][k[k]][k[k][k[k][s[k]][s]][s[k[k[s]]][k[k][k][s][k[s]\
[k]][s]][s[s][k[s][k]][s]]]]]]", 
        "k[k[s][k][s][k[s]]][k[k[s[s]]][k[s]][s[k[s]]]][s[k][s[s]][k[s[s]][k[\
s]][k][k][k[s[s]]][s[k[s[k][s]]]]]]", 
        "k[k[k[k]][k[s[s]]][k[k[s]]][s[k][s[s]][k]]][s][k[s]][s[s[k][k]][s[k[\
s]]]]", "k[s[k][s[s][s[s][k[s]][k[s[s][k]][k[s]][k][s[k]]][k[k]]]]][s][s[s][k]\
[s[s[k[s[s[k]][k][k[s[k[s]]][k[k][s][s]]]]][s[k]]][s[k][k[s]]]]]", 
        "k[k[k][k[s[s]]]][s[k][s[s]]]", "k[s][s[s][k[k][k]]][k[k[s]]]", 
        "k[s][k][s[s]]", 
        "s[s][s[s]][k[k]][k[k]][s[k][s[k][k[s]][k[k]][k][s[k[s]]]]]", 
        "k[k][k][k[s[s]]][s][s[s[s]]][s[s[s][k]][k[k[s]]]][s[s[s]]]", 
        "k[k[s[s][k]]][k][k[s][s][s][k][k][k[s][s[k][k]]]][s][s[k[s][k]][k[s][\
k]]]", "s[k][k][s[k]][k[k[k]][s]][s]", 
        "s[k[k[s]]][k][k[s][s[k][k][s][k][k]][k[s][s[s[k][s[k[k][s]][k]]]][s[\
k]]][k[s][k[s[s]]][s[k[k]][s[s][s]][s[s[k]]]]]][k[s[k[k][s][k]]]]", 
        "s[s[k][k[s[k]]]][s[k[s][k][s]][s[k[s][s]]][s[s][k][k[k[s]][k][k][s[k]\
]]]]", "k[s[s]][s[k]][k[s]][k[k[s[k]]][s[k][s]]][k]", 
        "k[k][s][k[k][s]][s[k]][s[k[s]][s]][k[s][k[k][k]]][s[s][k[k[k[s]]]][k[\
k]][s[s[s[s[k][s]]]][k][k[k]]][s[k]]][k[s[k[k[s][k[s]]]][s[k]]]]", 
        "s[s][k][s[s[s[s]]][k[s]][s[k[k[k]][k]][s[k][s[s][s][s][s[k]]][k[s[k]]\
]]]]", "s[s][s][s][k[s[s[s]]][k[k]][k]][s[k[k]][s][k[k][s[k][s][s[k]]][k[s][s]\
[s[k]]][s[k][s[s[s]][s[s[s][k]][k[k[s]][s]]][k[s][k[s]]]]]]][s[s][k[s[k][s]]]]\
", "s[k[k]][k[k]][k[k][s]][s][k[s][k][k[s][s[s]]][k[k[s[k]]]]]", 
        "s[s][k][k][s[s[s]][s[k[s]]][k[k][k[k[k]]][k[k[k]][s][k]]]]", 
        "k[k[s][k][k]][k[s[s][k[s]]][k][s[s][s[k][s[s]]][k[s]]][k[k]][k][s[s]]\
][k[k][k[k[k][k[k][s][k]][k[k]]]][s[s[k]][k[k][s[k]][k]]][s[k][s][k[s[s]]]][k]\
]", "k[s[s]][s[s[k[s]]]][k[k[k[k]]][s[k]]][s[k[s[s][k][k]]][s[k][k][s[s][s]][\
s[k][s][s][s[k[k]]][k]]][s[s]]]", 
        "s[k[k][k[s[k[s[k]][k]]]]][s[k]][s[k[k]][s]][k[k]][k[k][k]]", 
        "k[k][k[k][s[s[s[k]]][s[k[k]][s[s[s]]]]]][s[k][s][s][s]][k[s][k[k[s][\
k][k][k[s][s][k]]]]]", 
        "s[k[s]][s[k][s[k][k[k][s[k]]][s[s]]]][s[s]][s[s][s][s[k[s]]][k[s][k][\
k]]]", "s[s[s][k[s]][s[s[k[k]][k]]]]", 
        "k[k[s[s]][s[s[k]][s][k[k[k]]]]][s[k][s[s][s]]][k[s][k[s[k]][k[k]][s]]\
[s[k[s][k[k[s]]]][s][k[s][s[k[s][s[s[k]]][s[k]]]]]]][k[s][k[s[s[s]]]][k[k[k]]]\
]", "s[s][s[s]][s[s][s[k[k][s][k]][k[s[k]]]][k[k[s][k[s]]]][s[s][s[k[s]][k[k]]\
][s[k][k][k][s[k]][s[k][k]][k[s][s][s[s]]]]]]", 
        "s[k[k]][s[s[k[s]]][k[s][s]]][s[s[k]][k]][k[k][s[s]]][s][s[s[k]][k[k]]\
[s[k[k[s]]]][k[k]]]", 
        "s[k][s[k[k]]][s[s]][s[k]][s[k][k][k[s[s[k[s][s[k][s][k][s[k][k]]]][k[\
k]]]][k[k][k[k[k[k]]][k[s][k[k[k][s[k]]]]]]][k[s][k[s[k]][s]]]]]", 
        "k[k[k[k]][s[k]][k[k][s[k][s]]][s]][k[k[k[k]][k]][k[k][s]]]", 
        "s[k[k][k][s][s[k[s][k][s]][k[k]]][k[s[k]][k[s]]][s][k[k[s][k][s[k[s]]\
]][s[s[s]]][s[k][s][k[k[k][s]]]]]]", 
        "k[k[s]][s[k[s[k]]][k[k][s[k]]]][k][s[s[k[k][s][s]]]][k[s[k[s][s[s]]][\
k[s][k]][k[s]][s[k][k[k]]]]][s[s]]", 
        "s[k[k[k]]][k[k][s][s][s]][k[k][k[s][k]]][s[s[s][s]][k[s[k]]][k[s[k]][\
s]][k[k][s][s[k[s]]]]][s[s][s[s[k[s]][s[k[k]][k][s[s][k]]][k]]]]", 
        "k[k[k]][k[k][s[k]][s[k]][s]][s[s][k[k[s]][s[k[s[k]][k[s[k[k]]]][s[s[\
s]]]][s]][s]]][s[s]]", 
        "k[k][s[s]][s][k[s[s]][k][s[k]]][k[s]][s[s[k][k[s[k]]]][k][k[k[s][k[s[\
k][k[k][s[s]][s[s]]]]][s[k[s]]]]]]", 
        "k[k][s][k[k[k[s]]]][s[s[s][k][k][k[s[k[s]]][s[s]]]][k[k]]]", 
        "k[k[k][s[k][k]][s[k[s][s]]]][s[s[k[k[k][s]][k[k][k]][k]]][k[s[k][s[s]\
]]]]", "s[s][k[s]][s[k][k[k]]][k[s[k]][s][s[s[s]]][k[s][s]][s[s]]]", 
        "s[k[k][k[s][s][s]]][s[s[s]]]", 
        "s[k][s[s][s]][k[s[k][s[s[k]]]][s[k[s][k]][s[s][s]][s][k]]][k[s][s[s[\
s]]][s[k]][k][k[k]]]", 
        "k[k][s][k[s][s]][s[s][s[s]][k[s]]][k[s]][k[s[s]][s][k][s[k[k[k]]][k[\
s]][s[k[s[k]][s]]]][s[s[s]]][s[s][s[k]][k[s]][k[k[k[s]]][k[k][s[s]]]][k[s[k]]]\
]]", "s[k[s]][s][s][s[s][s[k]]][s[s][k][s[k]]][k]", 
        "s[s[s[k][s[s[k[k]]]]]][s][s[k][s]][k[k][s[k]][s[k[k][s]][s[s][s[k[k]]\
[s[s[k]][k[s][k]][s[k[s][k]][s[s]][s[k[s[s]][s[k[k][k]][s]]][k]]]][k[k[s]]]]]]\
]", "k[s][k][s][s[k[s[k][k[s]]]]]", 
        "k[k[s]][k][k[s][s[k[s]]]][s[s][k[k]][k[s[s][k[s]]][s[k]]]]", 
        "s[k[s[s]]][s[s][s[k]]][k[k[s[s][k]][k[s]][s[k][k][s[k[s]]][s]]][s[s[\
s]][s[k]]][s]][k[s[k]][k]][s[k]][k[k][s[k[k]][s[k]][s[k][k][s[s[k][k][k[k]]]]]\
]]", "k[k][k[k]][k[s]][s[s][k][s[s]][k[s[s[s]]]]]", 
        "s[k][s[k[s]][s[k][k][s]]][k[s[s[k]]]][s[s[k[k[s]]]][k][s[s[k[k]]][s][\
s[s][k[s][k]]][s[k][s[k][k]][s]]]]", 
        "s[s][s[k]][s][k[s[k[s]]][k[s]]][k[s][s[k][k]]][s[s][k[s[s]]][k[s][s[\
s[s][s][k]]][k[k]]]]", 
        "k[k][k[s]][k[s[s[s][s[k][k[s]][s[s[k][s[k]][s]]]]]][s[s[s]][k[k]][k[\
k[k[s[s]]]][k[s]]]][s[s[s[k][s]]][s[k[s][k][s]]]]]", 
        "k[k[k][k[k][s[k]][k]]][k[s][s][s[s[k]][s[k]][k[k][s]]]][k]", 
        "s[k][k[k[k][k][s[k[k]]]][k[k[k][s][k][s[k[k[s]]]]]]][k[k][k][s][s][k[\
k]][s][s[k][k][s[k[k]][s]][k]][k]]", 
        "s[s[k[k][s[k]][k[s]]][k[s]]][k[k][s[k]][s]][s[k][s[k]][k[k][s]][k[s]]\
[k[k[k[k[k]]]][k[k][s[s[k]]][k]]][s[s]]][k[s[s[k]][s[k]]][k]][k]", 
        "s[s][s][k][k[s][s[k[k]]][k[k]][k[s[k]][k]]][k[s[k]][s[s[s]]][k[k]][s[\
k]]]", "k[s][s][s[k][s]][k[k][s][k][s[s]][k[k[s][s][k[s]]]][k[k][s[s[s][k][k]]\
[k[k][k]]][s][s[s[s][s][k]][s[s]]]]][k[s]][k[k][s][k[s][k[s[k]][s][s[k][k]]]]]\
", "k[s[k[s]][s[k]]][s[s][k[k]][k[s[k]]][k[k]]]", 
        "s[s][s][k][k[s]][k][k[k][s]][s[s][k[s[k]]][k[k][k][k[s[s]][k[s[s]][s]\
[s][s]]][s[k[s][s][s[s]]]]][k[k][s[k][s][k][s]]]]", 
        "s[s[k[s[s]]]][s[k][k[s[k][s][s][s]]]][s[s[k][s[k[k]][k[k[s]]][s[s][s]\
]]]]", "k[s[k]][k[s[s]]][s][k[k[s]]][k][k[k[k]][s[s[s]]][k[k]]][s[k][s[s]]][s[\
k[k]][s[k]]][s[k[k][s[k[s][s][s[s][k]]]][s[s][s[k]][s[k]][k[s[s]][s[k]]]][s]]]\
", "k[s][k[k][s[k[s]][k[s]][k]]]", 
        "k[s][k][s[k][k]][s[s][s[s][s[k[s]]][k[s[s]]]]][k[k][k[s][s][s[s][s][\
s][k[k[s]]]][k[k[k]][k[k][k[k]][k[k][s][s[k[k]][s[k]][k[s]]]]]]]]", 
        "s[s][s[k[k[k[s]]]][s[s]][k[s[s[k[s[k]][k[k][s]][s[s][s]]]]]][s[k[k]][\
k]]]", "k[s][k[k]][s[k[k[k]]][s][k][s[k]]][k[s[k][s[k[s]]][k][s[s[k[s[k]][s[k]\
[s]]]]]]][s[k[k]]]", 
        "k[k[s[k][k]][k[k[k[k[k[k[s]]]]][k][s[k][k]]][k]]][k[k]][s[s][k][s[k][\
k[s]][k][s]]][k[s[k[s[k]]][k]][k][k[s][s][s[s]][s]][s[s][s[k[k]][k]][s[s[k]]]]\
]", "k[s[s]][s[k]][s][s[s][s][k[k[k]]][k[k]][s]]", 
        "s[k][k[s[k[s]][k]][s[s[k[k]][k[k]]][s]][k[s[k[k]][k]][k[s][k]]][s[s][\
k]]]", "s[k][s[k][s[s][s][s]]][s[s[k]]][k[s[k][s]]][k[k[s[k]]][k[s]][s[s[k[s]]\
]][k[s]]][s[k[s]][k[k]]][k[s[k][s]][s[k[s[s]]]]]", 
        "s[k][k[s[s]][s][k[k][k[s][k[k[s]]]][s[s][k][s]]]][k[s[s]][k[k[s][k[k[\
s]]]][k[s][s]][k[s]][s][s][k[s[k][s][k[s]][s]]]]]", "k[s[k][s[s]]]", 
        "k[k][k[s]][s[k]][k[k[k[s]][k[s[k]]][k[s[s]][s][k[s][k][s][s[k]]]]]][\
s[s[s]][s[s[s]]][s]][k[s][s[k[s]]][k[k[k][s]][s]]]", 
        "s[k][k[s]][k[s][s][s[k]][k][k[s][k[s][s]]][s[k][k[k]][k[k[k][s]]]]][\
k[k][s][k][s[k[s]]]]", 
        "k[s[k]][k[s]][k[k][k][s[s]][k[k]][s[s[s][s[s]]]]][k[k][s]][k[s[s[k][\
k[s][k]]][k[k]]]][s[k][k][k[k]][k[k][s]][k[k][s[s][s[s[k]]]][k[s][s[s]][s]][k]\
]]", "k[k[s][s][k[k[k][s]]][s[k]][k]][k[k[k][k[s][s[s]][s][k]][s[k][s[k]][k[k[\
k]]][s[s]][k[k[k][k][k[k][k]]]][s[k][k[k[s]]][s[s]]]]]][k[s]]", 
        "k[s[k]][s][s[k[k[k]]][s[k[s[s]]][k[k][s[s[s[k]]]]]]][s[k[k[s][s][s[s]\
[s[k[k]][k]]]]][s]]", 
        "k[k][s][k[s[k]][k][s][k[s[k][s][s]]][s[s]][s]][k[k][k[k]][k][k[k[k]][\
s[k[s[s]]]]][k[k[k][s[s]]][s[s[k]][s][s[s[s]]]][k[k][s[k]]][k]]]", 
        "k[k][s][k[k[s][k][s[k][k[k][s[k]]]]][s[s]][k[k[k][k][k][s[s][s]]]][s[\
s[s]][s[s]]]][s[s]]", 
        "k[k[s[k]]][k][s[k[s]][s]][k[s[s][k[k][k[s[k]]]][k[k[k[k]]]]]][s][k[k]\
[s][s[k]][k[k[k]][s[s[k]][k]][s[k[k]][k[s][s]]]][k[k][k[s][k]]]]", 
        "s[k][k[s[k[s]][s][k]][k[s[s]]]][s[s[k[k]]]]", 
        "s[s[k[k]][s][s[s]]][k[s][s[s[s[k]]][k][k[k[k]]]][k[k[s]][s[s][k][k]][\
k[k][s[s][k[s]]]]]]", 
        "s[s][k][s[k]][k][k][k[k[k[s][k]][s[s[k]]]][k[k[s[s]][s]]]]", 
        "k[s[s[k][s]]][k[k[s]][s[s[s][s[s]]]]][k[s[k[k][k]]]][s[s[s]][s[s][k]]\
][s]", "s[s[s[s]]][s][s][k[k][k[s]][s]][s[s][s][k]]", 
        "k[s[s][s]][s][s[s[s]][k[k]]]", 
        "k[s[k]][s[s][s][k[s]]][k[k[k[k]][k][s[s[k]]]][s[k][k[s]][k[s[k[s]][k]\
]][k[k[k[k]][s[s[s]][k[k[s]][k]]]][s][s[s[k[s][s][k[k][k]]]]]]]]", 
        "k[k][s[k[k]][k[s]]][k[s[s][k][s]][k[k[k]][s[k[s[k]][k[s[s][k[k]]]][k[\
k[k][k]]]]]][s[k][k[k][s[s[s]][s]][s]]]][s[s[k[s[k]]][k[k[k]]]]]", 
        "s[s[k[k]][k[s[s[k]]]]][s[k][k[s]][s[s[k]][k[s[s[k]]][k[s]]]][k[k[k[s]\
][s[s[s[k][k]]]]]]]", 
        "s[k][s[s[k[s]]]][s[s[s[k]]][s[k[k[k]][k[s[k]]]][k[k[k[k]]][k[s]]]]][\
k[k[k[s]][s]][k[k]]]", 
        "k[s[k]][s][k][k[k]][s[k[k[k]]][k[s][k[s]]]][k[s][k[k]][s[k[k][k[s]][\
s[k[k[s]]]]]][s[s]]]", "s[s][s[k][k[k]]][k[s][k]][k[s[s][s]][k[s]]]", 
        "k[k[k][s[s[s]]][k[k]][k[k][k[k][s][s[s]]]]]", 
        "s[k[k[k[k]][k[s][k[s[s][k[s]]]][s[s]]][s][s[s][s[k[s]][k[k][s][s]][s[\
s[s]]]]]]][k[k]][s[k[k]][s][k][s]]", 
        "s[k[s][s]][s[s[s[k][s]]][k[k]][k[s][k[k]]]][k][k[k][k[s]]]", 
        "s[k][s[s[k][k[k][s]][k[k[s][s]][s[s]]]]][k[k][s][s][k][k]]", 
        "s[s][k[k[s]]][k[s][s[k[s[s]]][s][s[s[s][s][s[k]][k[k[k]]]]]][k[k[k][\
k][k[s[k][k][s[k]]]]][s[k[s][k[s[s]]][s[k][k[k][k[s][s]]]][k[s[k]]][s]]][k[s]]\
]]", "s[s[k][s[k]][s][s[s]][s[k[k[k][s]][s[s[k][k[k][s]]]]]]][s[s][s[k[k][s]]]\
]", "s[s[k]][s][s[k[s]][s][s[k]][k][k[k[s][k]][s[k][s[k[s][s][s]]]][k]][k[k[k[\
k]][s[s[k]][k[s][s[k]][k][k[s]]][k[s[s]][s[s]][s[s[s]]]]]]]]", 
        "s[s][s][k[s[k]]][k[k]][s[k[s[s]][k[k]]][k[s[k]][k[s[k]][s]][s[s[s]][\
k][k]][k[s][k[k]]]]]", 
        "s[k][k[k][k][k[s][s][k]]][s[k[k][s]][k][k[s][k[k[k]]][k]][k[s][s][s[\
k]][s[k][k[s[k]]]]]]", 
        "s[s][k][s[k][k[k[k[s[k]]]]]][k[s[s[k[k]]][s]]][s][s[s[s]][k[s][k][s[\
k[k][k][s[k]]]]]][k[s[k][s[s[k]]]]]", "s[s[s][k]][k][s[k][s]][s[s]]", 
        "k[k[k][s]][s[s[s]][k[k[s][s[k[k]]]][s[k[k]]][k]][k[k]]][k[k][s][k[k[\
s[k]]][s[s]]][s[s][s][k]][k[s][s[s]]][s][k[k][k[s[s]]][s[k]][s]]]", 
        "k[k][k[k]][k[s][s[k[k[s][s]]]]][s[s][k][s]][s[k[s]][k[s][k][s][k[k[s[\
k]][s[s]]][s[s]]]]]", 
        "s[s[s][k]][k][s[s[k[k[s]][k[s]]]]][k[s][k][k[k[k][s]][k]]][s[k[s]][k]\
[k[s][k][k][k]]][s]", "s[k][s][k[k[k[s]]][k]][k[k][k[k[s][k]][s]]]", 
        "k[s][k[k]][k[s]][k[k]][k][k[s[s]][k][k[s][k[k[s]][s]]][s[s][k[s[k[s]]\
]]]][k[k][s[s[k[s[s][s][k]][k[k][s]]][s]][s[k]]]]", 
        "k[k][k[s][s][k]][s[k[s][k[s][k]][k[k[k]]]][k[k[k][s]][k[s][k][k[s]][\
s]][k[k[s]][k]]][s]]", 
        "s[s[s][k[s]]][s[k[k[k]]][k[k[k[s][k][k]]][s[s]][s[k[k]]]]][s[k][k[s]]\
][k]", "s[k][s[k]][k[k[s[s]][k]][k[k][k]]][k[k][k[k][k[s]]]][k[k][s[s[s[s]]]][\
k[k[k[k[k]]]][k[k]]][k[s][s[s]]][s[k[k]][k[k]][s][s[k]]][k[s][s][s[s[s][k]]]]]\
", "k[s[k][s]][k[k][k]][s[s][s[k]][s[s[k[s[k]]][s]]][s][k[s[k[k]]]][k[s[s]]]]\
", "s[k][s[k]][s[s[k]][k][k[k]]][s[s[k]][k[s][k[k]]][s[s][k][k[s]]][s[k[k[s][\
k]]]][k[s][s[s[s][s][s[k][s]]][s]][k[s][s[s]][k[s]]]][s[k[s]]][s[s][k][s]]]", 
        "s[k][k[s]][s[k][s[s]][s[k[k]]][s[s[s[s[k[s]][k[k]]]]]]][k[s][k[s][s[\
s[s]][s[s]][k]][k[k[s]]][s[s[k[s][k]][s]]]][s[s]]]", "k[k][s[s][k]]", 
        "s[s][s][k[k[s[s]]]][k[s][k][s][s[k[k]]][k[k[k[s[k]]]][k]]][k[k][s[k][\
k][k][s]][k[k][s[s[k]]]][k[s][k[k][s]]]][s[s[s]]]", "k[s[k[k]][k]]", 
        "s[k][s[s[s[k[s]]]][s][s[k[k]]]][k[s]][s[s][k[k[s]]]][s[s[k[k]][k]][s[\
k][k[s[s]][s[s]][s][s[k][s[s[s[s]]]]][s[k][s][k]][k[k[k]]]]]][k]", 
        "k[s[s]][s][s[k[k[s]][k[s[s]]]][k][k][s[s[k][k[s][k][s][k]][k[k][k][s[\
k[k]][k[k]][s[s][k]]]]][s[k]]]][k[k][k][k[k[s]]][s[s][k[s][k]]]]", 
        "s[k][k][s[k][k[k[s]][k[s[s]][s][s[k][s[k[k]][s]]]][k[k]]]]", 
        "s[k[k]][k[k][k][s[k]][k[s[k][k]]][s]][s[k[s[s[s]]][k[k][k][s][s[s]][\
k[s]][k]][k]][k[k]]]", "k[k[s[s[k]]]][s][k[k][k[s]]][s[k][s]][s[k]]", 
        "s[s][k[s][s]][s[s[s]][s][k[k[k]][k[s[s][k]][k[k][k[s[k]]][s][s[s][k[\
k[k]]]]]]]][s[k][k[s[k]]]][s[k[s[k]][k]][s[s][k[s][k[k]]]][k]][s]", 
        "k[s[s[k]]][s[s][s[k[k]][s]][k[k[s[s]]][k[s]]]][k[s]][s[s[s][s[k[k[k]]\
][k[s[s]][s]]][k[k[k]]][s[s]]]][s[k[k[s]]][k][k][s[k][k[s]][s]]]", 
        "s[s][k][s[s]][s[s][s][k[s][s]][k[s[k]][k]][k[k][k[s[k]][k]][k][k][s[\
s]]]]", "k[k[s[s[k[s]]]][s[s][k[k][s]]]][k[k][s][s][s[s][s[s[k]]]]]", 
        "k[k[k][s[k[s]][k][k[s][s]]][k[k][s][k][k]]]", 
        "k[s[s]][k[k][s[s][k]]][s[s[k]][k][k][k[s][k][s[s[k]][s[s]]]]][k[s[k]]\
[k[s]][s][s]][k[k[s[k[k]]][k[s]]]]", 
        "k[k][k][s[s]][s[s[s][k[k]][k[k][k][k][k]][s[k[k[k][s][s]][s][s[s][k[\
s][k][k[s]][k]]]]]][s[s[s]][s[s]]]]", 
        "s[k[s]][k[k[k][k[s]]][s][s[k]]][s[s][k][k[k]][s[k[s][k]]][s[s[k]][s[\
k]]]]", "k[k][k[k][k[s[s][s][k[s]][s]]]][k[k[k]][k][k]][k[k[k]][k[k]][s[k]][s[\
s][k][s][s[k[s]][s]][s[s[k[k]][k[s][k]]][k[s][k][s[s][s]]]]]][k]", 
        "k[s[k][k]][s[k[k[k[s][k]][k]]]][s[s][s[k[k[k]]][k[s[k][k][s][k[k]]]]]\
[s[k[k[s]][k[k[s[k[k]][s[s]]]]][s[s][s][s][k[k[k]]][s[k[k]]]]]]]", 
        "s[k[s]][s[k]][k[s]][s[k][s][s[k]]][s[k][s][s][k][k[s][s][k[k]][s[k][\
k[k][k]]][s]][k[k]]]", 
        "k[s[s[s][k[k[s[k]][s]]]]][s[k[k[s[s]]][s][s[k][k[s[k][k]]]][k[k[s[k[\
s]]]][k]][s[s][k[s[s]][s[s]]][k[s[s[s]]][k[k][k[s[k]][s[k]]]]]]]]", 
        "s[s[k[k]]][k[s][s[k[k]][k[k][s][k][s[s]]][k[s[k]]]][k]][k]", 
        "s[s][k[s][s]][k[s[k][s[k][k][k][s[s]]][s[s[k]]]]][k[s]][k[s[k]][k][s[\
k][k][s[k][s[s]][s[s][s][s[s]]]]]][s[k][k][k[k[s]]][s]][k[s][k]]", 
        "s[s][s[k][s[k]][k[k][s]]][s[s][s][k[s[k]]]]", 
        "s[s[k][s][s[s]]][k[s][k[s[k][k]]][s][s[k][s[k[k]]]][k[k][k][s[k][k][\
s[k]]][s[s]][k[s]][s][s[s][k[k[s]][k]]][s[k[k][s][k]][k][s[k]]]]]", 
        "k[k][s][k[k[s][k][s[s]][k[s][k]][s[k]]][s[k[k[s]]][s]][s[s][k][k][s[\
k][s]]][k[s[k]][k][k][k[k]][s[k][s][s[s]][k[s[k]]]]][k[s[k[k]]]]]", 
        "s[k][k][k[k][k[k[k]]][s]][k[k][k[s[k[s[k][s]]][k[k[k[s][k][k[k]]][k[\
k]][s[k][k[k]]]]]]]]", 
        "k[s[k[k][s[k][s[k][s]]]][k[s[k]]][s[k[k[k]]][k][k[s][s[s]]][k[s[s][k[\
k]][s[s[k]]][s[s[s[s]]]]][k[s[s][k[s]]][s[k]]]]]]", 
        "s[s[s[k[k]]]][s[s][k[s][s[s]]]][k][k[k][k][k[s]][k[s][s[k][k]]][k[s][\
s]]]", "s[k][s[s[k]][k[s][k[s]][k]][k[s][s[k]][k[s[k]]][s[s][k]]]]", 
        "k[s][k][s][s[s[k[k[k[s]][s]]]][k[k][s[k]][s][s[k[k][k][k[k][s]][s][s[\
k][k]][k[k]]][s]]][k[k[k[s]][k][s[k[k][k[k]]]][s[s][k]][k]][s]]]", 
        "s[k][k[k[s]][s[k[k]][s[k]]][s]][s[k][s][s][k[s][k[k][s][s[k][k]]]][k[\
k[s][k[k[s]]][s[s][k]]][k[s][k[k[k]]]]][k[k][k[s[s[s]]]][s[k]]]]", 
        "k[s[k][s[k[k][s][k][s[k]]][k[s][s[k[k]]][k[k[s]][k[k]]]]]]", 
        "k[s[k]][s[s][s[s[s]][s]]][s][k[k[s]][k[s[k]][s]]][k[k][k]]", 
        "s[k[s[s]][s[s][s[k][s[s]]]]]", 
        "k[s[k][k][s][k]][s[k[s[k[s[s][s[k[k]]]]]]]]", 
        "s[s][k[s][s]][k[s]][s][s][s][s[s[k][k][k[k][s[s]]]]][k[s[k]][k[s[k]][\
s[s][s[k]]]][s[k][k]][k[k][k][s[k][s][s][k][s][k[k[k][k]]]]][k[k[s[k[k]]]][k]]\
]", "s[k[k][s][s[k][s[s[s]]]][k[k][k][k[k[s]][k[s][s]]]]][s[s]][s[k]][k[k][s[\
k]][k]][s[s[k[s][s[s]]][s[s][s][s][s][s]][s]]]", 
        "s[k[k][s][k[k]]][s[k]][s[k][k][s[s]][k][s[k][k[k[k]][s][s[k]]][s[k]]]\
[s]]", "s[s[k[s]][s[k][k]]][s[s[s][k[s]]]][k[s[s][k[s]][s[k[s]][k][k]][k]][k][\
s[k[s][k]]][k[s]]]", 
        "k[k][k][s[k]][k[k[k[s]]]][s[k][s[s]]][s][s[s[k[k[k]]][k]]]", 
        "k[k[s[s[k]]]][k[s][s[s]]][s][k[k[k[s]]][s]]", 
        "s[k][k][k[s]][k[s][s[k]]][s[k[k][s][k[s]]]]", 
        "k[s[k[s[k]][k[k]]][k[s[s[k]]][k]]][k[k][k[s[k]][k][s]][k[s[k]]]][s[s]\
[s[s][s][s[k]]][k[k[s[s]]]][s[s][s[k]]]][s[s][k[s]][k[s][s[s]]]]", 
        "k[s][s[k][s[k]][k]][k[k[s][k[k][k]]][k[s][s[k][s][k[k][s[k]]]][s[k]]]\
[k]][k[s][k[s][s[s[k][k]]]][s[k][s][s[k]][k[k]][s[k[k]]][s[k]]]]", 
        "s[s[s][s[s[k]][s][k]][k]][k][k[k[k[s[s[k][k[k]][s]]][s]]]]", 
        "s[s][s[k[k[k]]][s][s[s]][s][s][k[k[s][s][k[k[k]][s[s]]]]][s[s[k]][k[\
s[s]]]]][s[k[s[s]]]]", 
        "k[s[s[k]][k[k]]][k][s[k[k]][s[k]][k[k[s]]]][s[s][s[k][k[s[s]]][k]]][\
k[s[s]][s[s][k]][k[k[s]]]][k[s][k[k[k][s[k[k]]]][s]]][k[s[k[s]]]]", 
        "k[k[s]][s[s[s[k]][s][s[k][s[k[k][k]]]]][s[s][k[s]][k[s]]]]", 
        "k[k][s][k[k][s][s][s[k][s][s[k][s[k]]]][k[s][k][s[s[k]][s[k][k[k][k]]\
]]]]", "k[s[s]][s[s[s][s]]][s[k][s[k]][k[s][k]][s]]", 
        "k[s][k][s[s][k[s[s][s[s[k]]][k]][s[k]]][k[k[s[s]]][s]]][s[s][s[s[s][\
s]]]]", "k[s[k]][s[k[k]]][k[s][k[s]]][k[k[k]]][s][s[s[s]][s[k][s][s[s][s]][k[\
k]]][s[k[s][k][k]][k]][s[k][k[k]]]]", 
        "k[k[k]][s[k]][k[k[s]][k]][s[k][k[k][s][s[s[k]]][k[s[s[k]]]]][s[k][k[\
s]][k][k[s]][s[k[s]]]][k[k][k][k[s[s]]]]][k[k[s]][s[k][k[k[k[s]]][s[s][s][s]]]\
]]", "s[s[s]][k][s[s]][k][k][s[s]]", 
        "s[s][s[k]][k[k][s][k]][k[s][s[s[s]]][s[s]]]", 
        "k[s[s]][k][k][s[s[k][s][k]]][k[s[s]]][k[s][k[k][k][k][s]]]", 
        "s[k][s][s[k][k[s[s]]][s[k]]]", 
        "s[s][s[k][k[s]]][k[k[k]][k][s][k][s[s[s]]]]", 
        "k[k][k][k[s[s]]][k[s][s]][k[s[k]][k]][k[s[k[s]][k]][k[s[s]]][s[s[s[k]\
]][s[k][k[k]][k[s]]]]][k[s[k][s[s][k][s[k]]]][k[k][k][s[s][k[s]][k[k]]]][k[s]]\
]", "s[s][s[s]][s]", 
        "k[s][s[k]][k][k[k[s][k[k]][s[k[k]]]][s[s[s][k]][k[s[s[k][k]]]]]][s[k]\
[s[k]]][s[k][k[k][k][k[s]][k[k]]]]", 
        "k[k[k]][k][s[s][k]][k[k][s][s][k[k][k]][k[s]][s[s][s[k]][s[s][k[k]][\
k][k[s][k[s]][s]]]]][s[k[s][s]][s][s[k[k[k]]][k[s][s][k]]][k[k][s[k][s[s][s]]]\
]]", "k[k][k[k][s]][k[k][s][s[k][s[k][k]]][k[s]]][s[k[s][s[s[s[s]][k]]]][s[s][\
s]]][s[k][k[s[k]][s[s[k]][s]]]]", 
        "k[s][k[k[k]]][k[s][s][s[s]][k[s]][k[s]]][s[k][k][s[k][k[k[k]][k]][k[\
k[k[k][s[s]]]]][s[k][s[k]][s[k[s]][k[k[s]][s[k][s[s][k][k[k]]]][s]]][k[k][s]]]\
]]", "s[k[k[s]][s[k]]][k[k[s][s][s]]][k[k[s][k]]]", 
        "k[s][k][s[k][k[k[k[k]][s]]][s[k[k]][k[k][k][s][s[k][s[k[s]]][s[s[s]][\
k]]]][k[k[k[s]]]]]]", 
        "k[s][s[k][s[k]][k][k[k[k[k]]]]][k[k][s][s[k]]][k[s[s]]][k[s[s[s[k[k[\
k]]][k[k]][s]][s[k][k[s[s[k]]]]]]]]", 
        "s[s][k[k]][k[k][s][k][k[k][k[s]][k[s[s][k][k[s]]][k]][k[k[s][s[s]]]]]\
][s[k[s[k]][s[k]]]][k[s][k][k[s][s][s]][s[k][s][k]]][k[k[s]][s[k][k][s[k][k]]]\
]", "s[k][s[s]][s[k][k[s[s[k][s]][k]][k][s[s[k][s[k[k][k]]][k]]][s[k[s][s]][k[\
s][k[k]]]]]][s[k][s[k][s[s]]][s[k]][k[k]][s]]", 
        "s[s][s][s[s][k]][k[k[k]][s]][s[s[k]][s[k][s[k]]]][k[k[s]][s][s[k[k]][\
s[k][k]][k][s[s]]][s[s]][k[k[k]]][s[s]][k[s][s]]]", 
        "k[k[k]][s[s][s][s[s]]][s][s]", 
        "k[k[k]][s[k]][k][k[k[k][k]][s[s][k]][s[k]]]", 
        "s[k[s]][s][k[s][k][k[k[k[s]]]]][s[s[k[s][s][k]]][k][k[k][s]][s[k][s[\
k[k[s[k]][s]][k[s[k]]][s[k[s][k]]][k[s[s[k]]]]]]]]", 
        "s[s[k]][s][k[s[s[s[k]]]]][k[s[k][k[s]][s[s]]]][s[k[s]]][s[s[k]]][k[s]\
[k[k[k[s]]]][k[k]][k[k][s[k[s[k]]]]][s[k][k]][k[s[k[k][k[s[k]][k][k[s]][k]]]]]\
]", "s[s[s]][s[k[k]][s][k][k]][s[k[k][s[s]]][k][s[k]][k[s][k]]][k[s][s[s][s[s]\
][k[s][s[k]]]]]", 
        "s[k[k[s][k[s[k[k]]]][k]]][k][k[k[k[k]]][k[s][k[k[k][s][k]][k][s[k][k]\
]]]]", "s[s[s[k]]][k][s[s][k][k[k]]]", 
        "s[s][s][k[k][s[s[s]]][s[k][k[k]]]][k][s[s][s[k[s]][s[s[s]]]][k]][s[s[\
k]]]", "s[s][s[s[k][k]]][s[s[s]]][k[k][s][k[k]][k]]", 
        "s[s[s[s]]][k[s]][s[s[k][k]][s[s[k[k]][k]]]]", 
        "s[k][k][k[k][s][s][k][s[k]]][k[k[k][k][s[k[s][k][s][k]]]]]", 
        "s[s[k][k]][k[k]][s[s[k]][k]]", 
        "k[s[k[s]][s]][s[s[k[k[k][k][s]]][s][s[s]]]]", 
        "k[s][k[k[k]]][s[k][s[s[s]]]]", 
        "k[k][k[s][k[s]][s[k]][k[k[s[s]][k]]]][k][s[s[k]][s[k][s]]]", 
        "k[k][s[k][s]][k[k]][k[k[k[k][s]]]][k[s[s][k][k[s][k]][k]]]", 
        "s[s][k[k]][s[k[k][k][s]][k[s[s[k][k]]]][k]]", 
        "k[k[s][s]][s[s[k][k][k][k]]]", 
        "s[k[s]][k][s[s][s[s[s[k]]][s[s[s][s[s]][k]][k[s][s[k]]][s[k][s]][k[s]\
[k[s]][k[s[s[k]]][s[s][s]][k[k]][s[k][k][k]]]]]]]", 
        "k[s[s]][k[k[s[k]]][k[s[s]][s]][k[s][s[k]]]]", 
        "k[k][s[s][k]][k[k[s]][k[s]][k[k][k[s]][s]]][s][k[s][s][k]]", 
        "k[s[k][k]][k[s][k[s][k]][k[k][k][k[k]][s[s][k[k]][k]]][k[k][s][k[s]]]\
][k[k[k[k]][s][s]][k[s][s][s[k]]][k[k[s][k]][k][s][k[s][s[k[k]][k]]][s[s[s]]]]\
]", "k[k[s][k[s[s[k]]]][s][k[k]][k[s[s[k[k[k[k]]]]][s[s][s][k]]][k[s][k[s][k[\
s][k]]]]]][s[k][s[k[s][s]][k][k[k]][s[k[k]][k[k[s]]]]]][s[k]]", 
        "s[s][k][k[k]][s[s][k[s][s[s]]][k[s[k]][s[s[s[s[s]]][s[k[s]]]]]]][s[s[\
s][k][k]][k[k[s]][s][s[k]][s[s]][k[k][k]][s]][k]]", 
        "k[s[s[s]][s[k]]][k[s]][s[k[s[s][s]]][k]][k[k[k][k]][s[k][k][s][s[k][\
s[k[s[s]]]]]]][s[k]]", 
        "k[s][s[k]][s[k[s]][s][k[k][k[k]]]][s[k][k[s][s]][k[s[k][k]][k[k[k][k]\
]]]]", "s[k][k][s[s[s][k[s]]][k[s[k]][s]]][s[s][s[k][k][k[k[s[s[k][s[k]]]]]][\
k]]]", "k[k[s]][s][s[s[k]][k][s[k]]][k[s][k[s][k]][s[s[k]]][k[s[s]][k]][s[k][\
s[k][s[s]][k]][k[k][k][s[s]]][s[s[s][s]][s]]][s[s][k][k[k[s]][k[s[k]]]]][s[s]]\
]", "k[s][k][s[s]][k[s][s][s[k[s]][s[k]][k[s][s[s[k[s]]][s[s][k][k]]][k[k]]]]]\
", "s[s[k][s][s[k[s]][k]]][s[s[s[s[s]]][k[k[k]][k]]]][k][s[k[k][k][s[k[s]][k]]\
]][s[k[k][k]][k[s][s]][k[k[k][k][s[k]]][s]]]", 
        "s[s][k[k[k[k[k]]][s][k[k][s]][s]]][s[s]][k[k[k]][s][k[s[k][k[k]][k[k]\
]][k[k][s][k[k][s[s]]]][s[s[k]][s[k]]]][s[s]]][k[s[k[k[s[k][k]]]]][k[s[s[s]]]]\
]", "s[k][s[s]][k[k][k][k[s][s][k[s[k]][s]]]][k]", 
        "s[k][s[k[k]][k[s][s][s[s][k][s[k][s[s]]]]]]", 
        "s[k][k[k][s][k[s[s]][s[k][k]]]][s[s[k]]][s][k[s][s[s]][k][s[s][s]][k[\
k[k]][k[s][k]]][k[s]][s[k][k][k[k[s]]][k[s[s]]]]]", 
        "k[k[k]][s[s][s[s[k]]][s]][k[k[s]][s[s]][s[k][s][k[s][s][s]]][k][s[k[\
k]]]]", "s[k][k[k][s[k][s[k][k[s]]][k[s]]]][s[k][k]]", 
        "k[s][s[k]][s[s]][k[k][s[k][s][s[k]][s[s]][k][k[s[s][k][k]][k]][s[s[k]\
]]][s]][s[s[k[s[s]][s[s[k]]]]][s[k][k][k][s[s]][k[k][s]]]][k[k]]", 
        "s[s][s[s[k]]][s[k][k]][k[k[k]][s]][s[s]][s[s[s[s][k][s]]][k[s][k]]][\
s[k]]", "s[k][s][s][k][s[s]][k[s][k[s]][k[k[s][k][k[k]]][s[s][k][k[s[s]]]][s[\
k[k]][k[s][s][k]]]]]", 
        "s[k[k][s][k]][k[s][k[k][s]][s[s]]][s[s[s]][s[s][k[s]][k]][k[k][s][s]]\
[k[s[k[s[k]]]][k]][k[k[k[s[k]]]]]]", 
        "k[s[s][s[k][k]][s[k][k[k[s[s][s]]]]][s[k[k]]]][s[s][k[s][k[s[s]]][k]]\
][s[s][k[k[s[k]][s[k]][k[k][k[s]]]]]][s[k[s][k]]]", 
        "k[k][k][s[k][k]][k[k[s[s]][k[s][k]][s]][k]]", 
        "k[s][k[s[k][k][s][s]][s[s][k]][s[s][k][s]][s][k[s[k[k]]]][k[k][k[s]]]\
][k][k[k][k[k[s]]][s][s[s][s[s]]]]", 
        "k[s[k][k[s[k][k]][s[k][k[k][k[k]][k]]]][s[s][s[s]][k[k]]]]", 
        "k[k[k]][s[s[s][k[k]][k][s[k[k]]][s[k[k[s][s]]]]]][k[k[k]][k[s][s[s][\
s[k]][k][k[k[s][k[s[k[s][k]]]]]]]]]", 
        "k[s[s[s][k][s[s[k][s]]][s[s]][k[s]]][s[k][s]]][k[k[s]][k[s][k[s][k[k[\
s]]]]][s][k[s][k]]]", 
        "k[k][k[k]][s[s[s[s[s]][k]][s[s]]]][k[k[s][k]][s]][s[k][k][s][s[s][s[\
s][s]][s]]][k[s[k][k]][k[s]][s[s[k]][k[k[s]]]]][s[s][k[k][s][k]]]", 
        "s[s[s[k][s]]]", 
        "k[k[k]][s][k[k][k[k][s][s[k[k[k]][k]]][s[s]]]][s[s][k[k][s][s][k[s]][\
k[s][s]]]][k[k][k[k[s]][k]][s[s][k[k][k[k]][k]]]]", 
        "s[k[k]][s[k[k]]][k[k[k]][s[s[s]]]][s[k]][k[k][s][s[s][s[k]]][s[k[s[k]\
]]]]", "s[s][k[k][k[k[k][k[s][s][k]]]]][k][s[s[s[k]]][s[k[s[k][s[s]]]]]][s[s[\
s]]]", "s[k][k][k[s][s][s]][s[k[k]][s[s][k][s]][s[s]][s[k]][k[k[k[s]][k[k]]]]]\
[s[k[k[s[s[s][k]][s][s]]]][k[k[s[k]]][s[s]]][s]]", 
        "s[k][k][k[s]][s[k[k]][s[k][k][s[k[s]]][k[k[k]]]]][k[s[s]]]", 
        "s[k][k][s[s][k[s]][k[s[k][s][s[k][s]][s[s]][s[s[k]]]]]][s][k[s][k[k][\
k[k[s][k]]][k][k]]]", 
        "k[k][k[s]][k[k[s][k[s]][s[k]][k[k]]][s[s[k]]]][s[k][k[k]][k[k]][s[s[\
k]][s][s[k]][k][s][k]][k[s][s[s]][k][s[s[s]]]][k]]", 
        "s[k[k]][k[k][s[k][s]][k[s][k[s]]][k[k]][k[s][k][s]][k][k[k][s][k[k][\
k]]]]", "s[k][k[s]][k[k][s[s]][s[k[k[k[k][k]][k]]][k][s[k]]][k[s[s[s]][k[s]]]]\
[s[k][s[s]][k[s]]]]", 
        "s[k[k[s[s][k][k][k[s[s]]]][s[s]]]][k[s][s[k]][s[s]]][k[s[k]][k[s[s]][\
k]]]", "s[s][s[k[s][s]][s][s][k[s]]][k[k][s]][s[s[s]][k[s][s[k]]]]", 
        "k[k[s]][s][s[s][s[s[s][s][k[k][s][s[s]]][s[s][k]][s[s]]]]]", 
        "s[k[s][k][s[k[k]][s[k]]][k[k[k][k][k]][k[s[k]][s[s]][s][k[s[s]][s[k[\
s]]]]]][s[k][k[s[k][k[k[k]]]]][s[s[s]][s][s[k]][k]]][s[k][k[s][k[k]][k[s][k]]]\
]]", "s[k][s][k[k[k[s]][k]]][s[s[k]]][s[s[k][s]]]", 
        "k[s[k]][s[k][k][k[k][s]][s][k[k[s]]]][k[s][k]][k[k][s[s[s][s]][k[k[s[\
k]]]][s[s[s]][k[s[s[s]][s][k]][k[k[k][k][k]]]]]]]", 
        "s[s[s]][k[k[s][s[k][k]]][k[s][k[s]][s[k]]]]", 
        "k[s][k[s][s][k[s]][k[s[k][s[k][k]]][s[k][k]][k[s[k[s]]][s][s]][k[k[k]\
][s[k[k]][s[k]][s[k[k]][k[s]]]]]]]", "s[k][s[k][s]]", 
        "s[k[k[s][k][s]][k[s]]][k[s]]", 
        "s[k[s]][s[k]][s[k][k[k]][k[k[k]]][k[k]][s[k[s][k[k]]]]][k[s]][k[k][s[\
k]]][s[s[k][s[k]][k[k[k[k[s]]]]]]]", 
        "k[s][s[k[k][s]][k[k][k]]][s[s[k][k[s[s][k][k[s]]][k[k]][k][k[k[k[k][\
s]]][s[k]][s[k][k][s[k[s][s]]]]]]]]", 
        "k[k[s[s][k][k[k]][s[k[s]][s][k]]]][k[s][k[s]][k]][s[k[s][k[k[s]]]][k[\
k][s]][k[s][k][s]]][k[k][s]][k[k][s][s[s][s][s]][k[s][s][s[k]]]]", 
        "s[s[s][k[k]]][k[k]][k][k[s][s[k]][k]][s[k][k[s][s]][k[k[k[k[s][k]]]][\
s[k][k[s]]][s[k]]]]", "k[s[s][k[s[k[k]]]][s[k][s]]]", 
        "s[s[s]][k[k[k][s[s][k][s[k[s][k][s[s[s[s]]][s]]]]]][s[s[s]][s[s][k][\
s][k]]]][s[s[k]][k[k]][k[k][k]][s[k]][k[s]][k[s[s]]][k[k]][k[k]]]", 
        "k[s][k[k][k]][k[s]][k[k][s]]", 
        "k[s][s][s[s][s][s]][s[k][s][s][s[s[k]][s[s][k][k][k[k][s][s][k[s][k[\
s]]]]][s[s[s]][k]]]]", "k[s[s]][s[s][s][s][k][s[k[k]][s[k][s][s]]]]", 
        "s[s[s[k[s]][s]]][s[k][s[k]]]", 
        "s[s][s[s[k]][s]][k[k]][s[s[s]][k]][s[s][s[s][s[s]][k[k[s][k]][k]][s[\
s]]]]", "s[k[s][k][k[k][s]]][k[s][k[k]][k][s[k[s[s][s[s][k]]]][k[s[k]]][s[k][\
s]]]]", "k[k][s][k[k][s]][k[k][k][k]]", 
        "k[k][s[s][k[k]][k[k][k[s]][k[s[k][s[k][s]]]]][s[s]]][s[k][k[k][k][s][\
s]]]", "k[s[k][s[s]][k[k[s[k[s[k]]][s][s[s]]]]][s[k][k[s]][k][k]]]", 
        "k[s[s][s[s]]][s[k[s[s]]][k[s][k[k]][k[k][k[s]][s[k]][s[k][k]]][s[k][\
k]][k[k[s]][k][k[k[k[s[k]]][k[k[k][k]][s]]]]][k[k[s[k]]][k[k[k[k]][k][k[s]]]]]\
]]", "s[k][k[s]][s][k[k[k][k[s]]]]", 
        "s[s[k]][k][s[k][s][s[k[k][k[s][s]][k[s]]][k[k[s[s]]]][k[s[k][k]]]]][\
k[k][s[k][s][s[s][s]]][s][k[s][k[k[k[k]]][s]]][k[k[s]][k[k][s]]]]", 
        "s[k[s]][k][k[s][k[k[s[s]]]]][k][s][k[k[k[s[s]][s[k][k[k][k]]][s[k[k][\
s[s]]][s[k][s][s]][k[s[k]][s[s]][s]][s[k[s]]]]]]]", 
        "s[s][s][k[k][k[k[k]][k[k[s]][s]][s[k]][k]][k[k[k[s][k][s[k]]][k[s]]]]\
[s[k[k[s[s][k]]]]]]", "s[k[k]][k[k[k]][k[k][k]][k[s[k[k][s][s]]]]]", 
        "s[k][s[k[k[s]][s]][s[s[k]]]][s[s]][k[k[k]]][s[s][k[s][s][s[k][k[s]][\
s[s]][s[k]]]][s[k[s[k][s]]][s[s]]]][k[s[k[s[k]]]]]", 
        "s[k[s[s]][k[s[s[k]][s[k]]]]]", 
        "k[k][k][s[s[k]][k[k][k[s[k][s[k][k[s]][k]]]][k][s][k[k[s[k]]]]]][k[s[\
s[k]][k][s[k]][s[k][k[s[s]]][k]]]]", 
        "s[k][s][s[k]][k[k]][s][s[s][k[s[k][s]]][s[k[k[k][k[k][s[s[s]]]]]]]][\
k[s]]", "s[s[s]][s[k[k[k]][k[s][s][k[s[k]]][s]]][k][k[s]][k[k[k][k][s[s[k[s[k]\
]]]]]][s[s][k][s[s][s][k[s][k[k][k][s[k]]]]][k]]][s[k[s]][s][k]]", 
        "s[k][k[s[s]]][k[k][s]][k][s[k][s]][k[k[k][s[k]][s][k[k[s]][k]]]][k[k]\
[s[s][s]]][s[k][k[s]][k[s]][k[k[s][s]][s[s][s]]]]", 
        "s[k[k[s][s]]][s[s][k][s][k]]", 
        "k[k[k][s[k][s]][s]][k[k][k[k[k[s]][s]]][s[s[k]][k[k][k]]]]", 
        "k[s][k[k[s[k]]][s[k]]][k[s[s][k][s[s][k][s[s]]]][k][k[k][s[k[s]][k][\
k]]]]", "k[s[s][s[s]]][k[k][s[k][k]][s[s[s[s[k[k]]]]][k[s][s]][k[k[k][s][s]][\
k[s[k]][s[s][s[k[s]]][s[k[k]]]]][s[s][k[s]][s[k[k][k]][k]][k]]]]]", 
        "s[k[k[s][k[k]]]][k[s][k][s[k[s]][k[s][k]]]]", 
        "s[k][s[s[s]]][s[k]][s[s][s]][s[s]][k[k[s]][s[k]][s[k[s]]]]", 
        "s[k[k[s][s[k]]][s[k][k]]][s[s[s][k[s][k][k[s]]]][k[k][k[k[s]]][k[s[k]\
][s][s[k][s[s[k[k]]]][k]]]][s[s[k][k[s][k]]]][s[k[k[s]]][k[k]]]]", 
        "s[s[s][s[s[s[k]]][k][k]][s[k[s]]][s[k[s][s[s]][s[k][k[k]]]][k]]][k[k]\
[s[s][k]][k][k[k][s[s]]][k[k[k]]]]", 
        "s[k][k[k][k]][k][k[s][k[k[s]][k[k][s][k]]]][s[k[k]][s[k]]]", 
        "s[k][k[s]][s][k[k]][k[s]][s[s][s][k][s[s][s[k]][k[s]]][s]]", 
        "s[s[k][k[k[k]]]][s[k[k[k]]][s[s]][s[s[k]][s]][k[s][k[s]]]]", 
        "s[k][s[s][k][k][k[k[k][s[k[k]][k[k]]][s]]]]", 
        "s[k[s]][k][k[k]][k[s[k[s]][s[k[k]]]]][s[s[k]][s]][s[s][s[s][k]][s[k][\
k][s]][s[s][s][s]]]", 
        "k[k][k[s[s]][k[k[s]]][s[s]][s[k[s][s[s]][k[s[k]]]]]][s[k[s]][s[k[k]][\
s]][k[s[k]][k[s[s[s]][s[s][k]]]]]]", 
        "s[s[s]][k[s][s[k][k[s]]][s[s][k[s][s]]][k]][k[k[s[s[k]]][k][k[k[s]][\
k[s]]][s[s][s[s[k][k]]]]][k[k[k][k]][s[k][s[k[s]]]]][s[s][k[k[s]]][k[k][s][s]]\
]]", "s[s[s][k[s[k[s[s]][k[s]]]][s[k[k[s]]]]]][k[k[k]][k[k[k[k]]]]][s[k[s[s[k]\
[k]][s[k][s]]]]]", "k[k[k][s]][k[k][s[k[s]]][k[k]]][k[s[s[s]]]]", 
        "k[k][s[s]][k][s[k][k[k[s]]]]", 
        "s[k][s[s]][k[s][s[k[s][k]][s]][s]][k[s][s[s][k[k]]][s][k]]", 
        "s[s[s[s]]][s[s[s]][k[k]][k[s][k]][s][k][s]]", 
        "s[s][k[s]][s[k][k][s[k]][s]][s[k[k][s[s]]][s[s][k[k][k]]]]", 
        "k[s[k][k[s]]][k][k[k][s][s[s]][k[k][k[s]]]][k[k][k[k][k[k]][s[s][s[s[\
s]][s[s[s]]]]]][k[s][k[k[k[s]]]]]]", 
        "s[s[k]][k[k]][s[s[s]][s[k][k]][s[k][s][s]]][k[s[s][s]][k][s[k][s]]][\
k[k][k[s[k][s[k]]][s[k[k]]]][s[k[s]]]][k[k[s[k]]]]", 
        "k[k[s][k][s[s]][s]][s[k][k[s][k][k[s[s[s]]]]][s[s][k[k[s[s]]]]]][s[s]\
[k][s[s[k[s]][k]]]]", "k[k][s[k][s[s][k]]][s[s[s]]]", 
        "s[s[k]][k[k[s[s]]][k[k[k]][s][s[k[s[s]]][k[k[k]][s][k[s][k]]][k[k[s]]\
[s]][k[s][k][k]]][k[s[k]][k][k]]]]", "s[k[k[k[s]]]]", 
        "k[k[k][k]][s][s[s[s]][k[s][k[s[s]]][s[k]]]]", 
        "s[k][s[k]][s[s][s]][k[k][s[k[s]]][s[s][s[s]]][s[k][k[k][k][s[s[s][s]]\
]]]]", "k[k][s][s][k][s[k][s][s[s]][s[s[k]][s]]][s[k][s[k]][k[s]]]", 
        "k[k][s][s[s][k][k[s][k[s][s][s][s[s]][k][s[k][s][s[s[s]]][s[s[s][k[s]\
][k]]][s[s[k]]]][s[s][k][k]]]][k[k][k[s][k]][s]]]", 
        "s[s][s[s][k[s[k[k]]]][s[k]][k[k][k]]][s[k][k]][k[k][s[s]][s[s][k[s[k]\
][s][s[s]][k[s]]]]]", 
        "s[k[k]][s][s[k]][k[k[k]][k[k][k[k]][s]]][k[k[k]][s][s[k]][k[s][k][s]]\
][k[s][k][k[k[k[k]][k]]][k[k[s]][k[s]]][k[k[k]]]]", 
        "s[k][k[s]][s[s][k[s][k][k[s[s][k]]]][s[s[s[s]]][k[s][k]]]]", 
        "k[k][k][k[s[k]]][k[k][s[k][s][s[k][k][s]]][s]][s[s[k][s][k[s[k][k]]]]\
[k]]", "s[k][s[s]][k[k][k[s][s[k[k][k][k[s][k]][s]]]]][k[k][k][s][k[s][k[k][k[\
k[s]]][k]][k[s][s][s[s]][k[k]]]]]", 
        "s[s[s[s][s]]][s[s][k][k[s]][s[k[k[k]]][k[k]]]][k[k[k[k]]]][s[s[s[s[s]\
]]][s[s[s[s]]]][s[s][s[k]][s][k]]]", 
        "s[k[k]][s][k[s[s[s]][k][s]]][s[k[k]][s[s][s][k[s]]][s][s][s[s[k]][k[\
s]]]][s[k[k[k][k[s]]][k[k][s][s[s[s[s]]]][s[s][k][k[s]][k[s]]]]]]", 
        "k[s[s][k[k]][k[s[s][s][s[s[k]][s]][s]]][k[k[k]][s[s][k][k]]]][s[s][s[\
k[s]][s[s][k[s]]]][s[k[k[k]]]][s[k]][s[s]]][k[s[k][k[s]]][s[s]]]", 
        "s[s[k]][s[k]][s[k]][s[k][s]][s][k[k][s[k[k]][s[s][s[k]]][s[k[s][k][s[\
s]]]]]][k[k[k][k][s[k[s[k]]][s]]][k[k][s[k][s]]]]", 
        "s[k[s]][k[s]][k][k[k[s]][s]][k[k]][k[s][s[k]][k[k[k[s][s[k][s]]][k[s]\
]]][s[s][s][k[s]]]][s[s][s[s]][k[k][s][k[k][k]][k[k[k]][s[s]]]]]", 
        "k[k][s[s]][k[k[s][s]][k[k[s[k]]][s][k[k][k]]][k[s][k[s][k][k[k]][k]]]\
[s]]", "s[s][s[k][s[s[k][k]]]][s[s[s][s[k]]][k[s]][k[k[k]][s[k[k]][k[s[k]][s[\
k]]]]]][k[k][s[s]][s[s][s]][k[s]][k[s[k]]][k[s[s]][k[k]][s][s]]]", 
        "s[s][k[k[s[k]][s]][k]][k[s]]", 
        "s[s][s[s][k[s]][s]][s[s][k]][k[s[s][s]][k[k[k][k][k]]][s[k][s[k[s]]][\
k[s[k[s]]]]]][k[s]]", 
        "k[k][k[s[k]]][s[k][s][s]][k[k][k[k][k]][s][s[k[k]][k[s]][k[s]][k[k]][\
s[s[s][s][s[k][s][s][k[s]]]]][k[k][s][k]]][s[s[k[k[k[k]]]]][s]]]", 
        "k[k[s]][s][s][k[s[k]][s][s]][s[s[s][k[s[s[s[s]]]]][k]][k[k][s[k]][s][\
k[s][s]][k[k]]]][s[k[k]][s[s[k[s][s]]][s[k]][k][k[k]]][k[k[s]]]]", 
        "s[s[s][s[s[s[k[s]][k][k]]]]]", 
        "s[s][s][k][k][k[s][s[k]][s]][s[s[s[k][s]]]]", 
        "k[k][k[s[s][k[k]]]][s[k[s]][k[k]][k[k]]][k]", 
        "k[s][k[s][k[s[k][s][s[s]][s][k]]][k[s[s][s[k]][k[s][s[k]]]][k[k][s][\
k[s]]]]][s[s][s][s[s[k][s]][k[s]]][s[s[k]][k[k][k][k[k]]]]][k[s][s[s][k[k][k]]\
]]", "k[s][k[k][k][s[k[k][s][s][s[k[s][s[s]]]]]]]", 
        "s[s[k]][s[k[s][k]][k[s][k[k[s[k][k]][k]][k[k[k]][k[k]][k[s]][k[k]]][\
k]]]]", "s[s][k[k[s[k][s][k]]][k[s][k[s[s]][s[k]]]][k][k[s]][k[s[k]][k][k]][s[\
k[k][s[k[k[s[k]]][s]]]][k[s[s]]]][s[s]][k[k[k][s][k[s[s]]]][s[s]][s[s[s]]]][k]\
]", "s[s][k][s][s[s]][s[k[s[k]]][k[s]][k[k[s][s]][s[k[s]][k[s[s]][s]]][k][s][\
k][s][k[k][s[s][s]][k[s]][k[s][s[k][k]][s]]][k[s][s][s[s]]]]]", 
        "k[s][s[s]][k[k][k][s][s[k][s][s][s][k[s][k[k]]]][k[k[k]][k]][s][s[k]]\
[k]]", "s[k][s[s][k[s]][k]][s[k][s]]", "s[k][s][k][k]", 
        "k[k][s[s[k]][k[s][s]][k[k][k][k[s][s]]]][k[s[k][k[s]][k[s][k][s[k[s]]\
]]][k[k][k]][k[k]]]", 
        "s[s][s[k[k[k]]][k[k][s][k][k][k[k[k]][k[s[s[s]]]][s[s]][k[s[s][s][k][\
k]]]][k[s[k][k[s]]][k[s]]][s[s[s[s]][k]][s][s[s][s[k[s[s]][k]][k]]][k[s[k]]]]]\
]", "k[s[k][k[s[s]]]][k[k[k]]][s]", "s[k[k][k][k[k]]][s[k][s][s]]", 
        "s[s][s[k]][k]", 
        "k[k[k][s[s[k]][s[k[s[k][k]]]]]][s][k[k][s[s]][s[k[k[k[k[s]]][k[k][k][\
s]]][k][k[s][k]]][k[k][s]]]][s[s]]", 
        "s[s][k[s[k]][s[s[k][k[s]][k[k]]][k[k]][s]]]", 
        "k[s][s[s][s[s]]][s[k][k[k]][s[k]][k[k][s[k[k]]][k[k][k]][k[s]]][s[k[\
s]]]]", "k[s[k[k][k[k[k]]]]][s[k[k]]]", 
        "s[k][k[k][s]][k[k[s]]][s[k][s][k[k[s]][s[k]]][s[k]][s]][s[k[k]][s[k][\
s[s[k]]][k]][s[s]][k[k][k][s[k[s][k][k[k][s]]]]]]", 
        "s[k[s]][s[s][s[s]]][k[k]][k[s[k]][s[k]][s]]", 
        "s[s][k][k[k[k[s[k]]]]][k[k][k][k[s][s[s]]]]", 
        "k[k[k[s]][s[k[k][k][s]][s]]]", 
        "s[s[k[k]]][s[s][k][s][s[s][s]][s]][k[k][s][k[s][s[k]]][k]]", 
        "k[s[s[k[k]]]][s[k][s]][k][k[s[k[k][k][k[s]]][s[k][s[k[s]]][s][k]]][s[\
s]][s[k][k[s][s]]][k[k][k][k[s[s]]]]][s[k][k[s]]]", 
        "s[k][k][k][k[s][s][k][s[s]]]", 
        "s[k[k]][s[k[s][k[s]]][k[s][k[s]][s[s[k]]]]]", 
        "k[k][s[s][k[k[s]]][s[s[s]][k[s[k]]][k[s[s]][k[k][s[k][s]][k]]][k[k]]]\
[s[s]][s[s][s[s]][k[k][s[s[k]]]]]]", 
        "s[s[s][k][s]][s[k]][k[s][s]][k[s]][s[k][k][k[k[s]][s]][k[s[s]][s[s[k]\
[k[k]]]][k[k][s]]]]", 
        "k[s][k[k[s]][k][k[k[s]]]][k[k][s[s][k[k]][s[k][k[k[s]]][k]][k[k[k[s[\
k][s]][k]]]]][k[s][s]][s[k[k[s][k][k[k]]]][k[k][s[k]]][s[s]][s[k][s[k[s]][s]]]\
]]", "k[s][k[k[s][s][s]]][s[s[s][s[k][s[k]]]]][k[s][k][k[k[k]]]]", 
        "s[k[s[k[k][k]]]][k[s[s][s]][k[s][s[s[s][s]][k]]]][s[s]][s[k[k[s]]]][\
s[k][s[k][k[s][k]]]]", 
        "k[s][k[s[k[s[k]]]]][k[s][s][s]][k[s][s[s][s]][s][s[k[s][k]][k[k[s][k]\
][k[k][k]][k[k[k]]]]]][s[k[k][k[k][s[s][k][s]]]][s[k[k][k]]][k[s][k[k][s[k]]]]\
]", "s[k][k[s][k[k[k[s]][s[s]]]][k[k][s][k[k]]]]", 
        "s[s[k]][s[s]][k[k[s][k][k]][k[k]][k[k[k[s][k[k[k]]]]]][k[k[s]][k[s][\
s]][s[s[k[s]]][k[k]][s[s[s][k][k][s[k]][s[k[s]][s[k]][k[s][s]]]]]][k[s[s[s]]]]\
]]", "s[k][s[s[k]][k[k]][s[k[s]][k[s[s][s]]]]][k[k[k]][k[s][k][k]][s[s[s[s]]]]\
]", "s[k][s[s]][k[k[k][k]]][k[k[k[s[k]]][k][k]][s[k[k[k]]]][k[s]][k[k[k[k][s]]\
]][s[s[k][k][s]][k[k[k][k[s][s[s][k[k]]]]]]]]", 
        "k[s[s[s]][k][k]][k[s][k[s[s]]]][k[k][k][s[k[k][s[k]][s[k][s]]][s[k][\
s[k[k]]][s][s[s]]]][k[s][s[k]]][k[s[k[k]][k]][k[s][k]][k[k]]][k]]", 
        "k[k[k][s][k[k][k[k[s]]][k]]]", 
        "s[s][k[k][k][s[k[k[k[s]]][k[s]][k[s[s]][s[s[s]]]]]]][s[k]][k[k[k][s[\
k]]][s[s][k[k[s]]]]]", 
        "k[k[s[s]]][s[s][s]][s[k[k][k]][k[s][k[s]]][s[s][k][s[s]]][s[k][s[k][\
s]][s[k[k][s][k]]][k[s[s[s]][s]]][k][k[k][s][k][k[k[k][s[s[s[k][k[s]]]]]]][s]]\
]]", "s[s][s][k[k]][s[k][k][k[s[s]]][s[s[s[s]]]]][s[k][k[k][k[k[s]]]][s[k[s]][\
k[s]][k[k]][k]]]", 
        "k[s[k][s[k][s[s]][s[s[k]][k[s]][s[k[k]]]]]][s[s[s[k][k[k[k][s]]]][k[\
s]][s[s[k[s]]]]]][s[s[k[k]]][k[k]][k[k[k]]][k[k]]][s[s][s][s[s][s[s]][s[k]]][\
s]]", "s[k][s[s]][k[k][k[k]][s[k][k[k[s][k[k]]]]]][s[s][k]][k[s[s]][k][s[k]][\
k]]", "s[s[k]][k[k[k][k[s[s]][s[s[k[s]]][k[k[s]][s][k]][k[s[k]]]]][s[k[k]]][s[\
s[s]]]][k]][s[s][k[k[s]][s[s]]]]", 
        "s[s[k[k][k][k[s[k]]][k[k[k]][s]]][k[k][s][k[k[k][k]]]]][s[s][s][k[k]]\
[s[s][k][k[s]][k][k[k]][s[k]][k]]]", 
        "k[k][k][s[k[s]][s]][s][k[s][k[s]]][k[k[k]][k[k[s]]]][s[k][k[k][k]][s[\
s[s[k][k]][s]][k[k]][k[s[k[k]][k]][s[s][k[s]]][k[s][s[k[k[s][s[s[k]]][k]]]]]]]\
]", "k[s][k[k[s[s[s]][k]][s[k[k][k]]]][s]][s[k]][k[s][s][s]][s[k][s[k][s[k[k[\
s][k[k]]]][k[s][k[k]][k][k[k[s]]]][k][k[s][k][s[s[s[k]]]]]]]]", 
        "s[s[s[s][k[s]]]][s][k[k][k[s][s[s[k][s][k[s]][k]]]][s[k[k]][k[s[s]][\
k][s[k[k]]][s[k[k[s]][k]][s][k]]]]]", 
        "s[k[k][s][s][s[k][k]]][k][k[k][s][k[k][s][k]][k[k[k]][k][s[k][k[s][k]\
]]]]", "k[k[s][k[k]][k[s]][s[s]]][s][s[k][k][k][k[s]][k[k[s]][k[s[k]]]][k[s[s]\
]]][s[s][s[s[s[k][s]][k]][k][k[k]]][k[k][s[k[s]][k]][k[s]]]][k][s[k[s[s[s]]]]]\
", "s[s[s[s]]][s[k[s]][k[s]][k][s[k][s[s][s]][k[k]][s[k][k[k]][s[s]]][k[k][s][\
k[s]][s]]][k]][k[s[s][s[k[s][s]]]][s[k[k]]]]", 
        "k[s][s[k][k[k][s][k[k][k]][s]]][s[s[k]]][k[s][s[k][k]]][k[k[k[k[k[s]]\
[s[k]]]]]][s[s][s][s[k][k]][k]][s]", 
        "k[k][s[s]][s][k][s][s[s[k[k[k][k][k][s]]]]][s[k[k[k]][k]][k[s][s][k[\
s]][s[s][k][s[s]]]]]", 
        "s[s][k[s[s]]][k[k][s][s][s[s[s]]][s[k[k[k][s]][k[k[k]]][s][k[s[k]]]]]\
[s[s[s[s]][k[k]]]]]", 
        "k[s[k]][k[s][k[s][k][k]][k[k][s][k[k][s]]]][s[s][k[s][s[s][s]][s[s[s]\
[s]][k[k][s[k]]]]][s[s[k]][k[s]]]]", 
        "s[s][k][k[k][s[k]][k[s][k][s[k][s[k[s[s]]]]][k[k[s]][k]][k[k]]][s[s[\
k][k[s[k]]]]][s[s][k[s[k]][s][s]]]]", 
        "k[k][s[k]][k[s][k[k[s][k[k]]]][k[s]]][k[s][k][k][s[k]]][s[k[k[k[k][k]\
]]]]", "k[k[s[k]]][s][s[k][s][s[k]][s[s][k]]][k[s][s[k[s]]][s[s[s][k]][k][k[s]\
]][s[k][s][s][s]]]", "k[s[s[k[k]][s][s[k[s][k[s][s]][s[k[k]]]]]]]", 
        "k[s][k[k]][s[s[s]][s[k][s]]]", 
        "s[s[k]][k][k][s[k[s]][k[s][k]]][k[s[k][s[s][k]]]][s[k][k][k[k]][k[s[\
s]][k[s]][k[k][s][k[s[k]]][s[s]]]]]", "k[k[k]][k[k]]", 
        "k[s[s][k]][k[s[s][k]][s[k][s][k[s[s][s[k][k][s]]][s[k]][k[s][k][k][k[\
k][k][s]]][s][s[s][s[k]]][k[k[k]][s[k]]][k[k][s[s]][s[s][s]]]]]]", 
        "s[s[k[k][k]][k[k][k][s[s[s]]]][s[k[s][s[s]]][s[k[s]][k[s[s]][k]]][k[\
k[s][k][k[s[s]]]]]]]", "k[k[s[k][k][k]]][s[k]][s[s]]", 
        "k[s][s[s[s[s]][s[k]]]][k[k[s]][s[s[s]][s[k][s[k]][s][k]]]]", 
        "k[s][s[k]][k[k][k][s[k[k]]]][s[s][s[k][s[k[k]]][k]]][s[s[k]][s[k][k[\
s]]][s[k][s[s][k]][k[k][k[k[s]]][k[s][s]]]][s[s[k]][k[k[s]]][k[s][s[s]][k[k]]]\
]]", "k[s][s[s]][s[s[k][k]][k[k[s]]]][k[s[k][s[s][k[k]][s[s][k[k]][s[k][s][s]]\
[k[s][k]]]]][k[k][k[k[s[s[k[k]][s]]][k[s]]]]]]", 
        "s[k][k[k][s]][s[k][s[k][k]][k[s][k[s[s]]]]]", 
        "s[k[k[k][k[s][s][k]][s[s]]][k[s][k]][s[k][k][s[s[k]][s]]][s[s[s[k[k]]\
]][k[s]]]][k[s[k]]]", 
        "s[k][k][k[k[s]][k[s[k[k]]][s][s[s[s][k]]]][s[k][k[s[s]][k]]]][s[k[k[\
s]][s[s[s]]]][k[k[k]][k[s][s][k[s][k]]]][k[k[k]]]]", 
        "k[k][k[s[k[k]]]][s[s]][k[k][k[s][k]][k[s]]]", 
        "s[s][k[k]][s[k[s[s[k[k]]]][k[s][k[s]]]][s[k[s][s]][k[k[k][k[k]][s][s]\
[k]]]][k]][s][k[k][k][s[k[s]][s[s[k][k]][k]][s[k]]]][s[k[k[s][s][s]][s[k][k]]]\
]", "k[s][k[k]][k[k]][k[s][k]][k][k][k[s[k[s]][k[s]][s]][k][k[k[s]][s]]][k[s][\
s[k[s]][k][s[s[k]]][s[k[k]][s[s[s[k]]]]]][k][s[s]][k[s[s]]]]", 
        "k[k[s[k[k]][s[s]][s[k[k[k]]][s[k]]]]][k[k][k[k][k][s[k[s]]][k[k]][s][\
k[k][s][s]]]][k[k][k[s]][k[k[k[s]][s[s]]][s[k]]]]", 
        "s[s[k][k][k[s][s[k[k][k]]][k]]][k[k]][s[s][k][k[s][k[k]][s][k[k][k][\
s[k[s]]][k]][k]]][k[s[s]][s[k]][s[k[s][s[k][k[k]]]]][k[s[k][s]][s[k]][k[k][s]]\
]]", "k[s][k[k[k]][s][k[s]]][s[k][k[s]][s[s][s][s[s]][k][k]][k[k][s][s[k[s][s[\
k]]][k[s[s]]]]][s[s[k][k]]]][s]", 
        "s[k[s][s[k]]][s[s[k][s]][s[s][k][k[k][s[s][k[k[s]][s]]][s[k[k]]]]][k[\
k[k][s][s]][k[s[k[s[s]]][s][s]]]]][k[k][k][s][s]]", 
        "k[s[s[k]][s[s[s][s[k]][s][k[s[k]][s][s]][k[k]]][s[s][k[k]][k]]][s[s[\
k]]]][k[k[k][s][s]][k[k[k][k]][s]][s[s]][s[k[s[s][s]][s]][s[s][s][s][s[s][k]]]\
]]", "k[k][s[k[k]][k[s]]][k[s[s]][s[s[k]][k[k]][s]][k[s][s[s]]]][k][k[s][s][k[\
s[s[k]][k]]][k[k]]][s[k[k][s]][s[s]][k[s]][k]]", 
        "k[k][s[s[s]]][k][s[k][s[s][k[s[k]][k[s]]]]][k[s[k]][k[k[s]]][k[s[s]]]\
][s]", "s[k[s]][s[k]]", 
        "s[s][s[s]][s][s[k]][s[k][s[s[k]]][k[k[s][s]]]][s[k][k[k]]]", 
        "k[s[k][k[k]]][k[s][s[k]]][k][s[s[k]][s[s][s]]][s[k[k]][k[s][k[k][s[s]\
[k][s[k[k]]][s[s]]][s[s]]]][k[s[k[k][k[s]][k[s][s]]]][s[s[s]]]]]", 
        "s[s[k[k]]][k[s[s][k][k][s]]]", 
        "s[k[s][s[s[k][k][s[k][k]]]]][k[k[k]][k[s]][s[s][k[s][k][s][k[s]][k[s]\
]][s[s[s[k]]][s[k[k]][k]][k[s]]]]]", 
        "k[k][s][k[k][s]][k[s][s][s[k[k][k][s]]][s][s[s[k]][s[k[k]]]][k[k[s]]]\
[k[s[s]][k[k]][s[k][k[s[s][s[k]]][s]][s[k[k]]]][k[k]]][s[s[k]][s[s[s]][s[s]]]]\
]", "s[s][k[s[s[k]]][k]][k[k][s[s][s]][k[k[k]]]]", 
        "s[s][s][k[k[k[k]]]][k[s][k][s[s[k][s[s][s]]]]][s[s][s[k[s[s]]][k[s][\
k][s[s[s[k[s]]]][s[s[s][k[s]]]]]]]]", 
        "s[k][s[k[k]]][k[k][s[k]][s][k[s][k[k]][s]][s[s]][s[s[s]][s[k]]][k[s[\
s]]]]", "s[k][s[s]][k]", 
        "k[k[s]][s][k[k][k]][s[s[k][s[s]]][s[k[k]][k][s[k[s]][s]]][k[s][k[k[k[\
k]]]][k[k]][s[k[k[s][s]][s[k][k]]][s[s[k][s]]][s[s]][s[k][k]]]]]", 
        "k[s[s][s[k[s[s][k][s]][s]][s[k[k[s]]]]]][k[k[k]][k[s]][s[s][k][s[s[k]\
][k[k]]][k[k][k][s[k]][k]]][s[k][s][s[k[k]]][s][k[s[s][s[s]][s]]][k[k][k][k]]]\
]", "k[k][s[k]][k[s]][k[s][k]][s[s[k][s]][s][s[k[k]][s[k][k]][s[s[k[s]]]][k[k]\
][s][s[k][k]]]]", 
        "k[s][k[k]][k[k]][s[k[s[s[k]]][k]][k[s[s]][k][s][s][k[k]]]][s[k[s[s]]]\
[s[k[s[s]][s[k]][s]]][s[k][s[k]][s[s]][s[k[s]]]][s[s[s]][k[k][k[s][k]]][s[k]]]\
]", "s[k[k][k][s]][s[k[k][k]]][s[s]][k[k][k[k]][s[k][s[s][k[k]]][k[k[s]]]][s[\
s[s]][k][s[k[s]]][k[k]]][s[s]]]", "s[s[k]][k[s][k][k][k[s]]][k]", 
        "k[k][k][s][k]", 
        "s[s][k[k[k[k][k[s]]]][k[k]][k[k]][k]][s[k[s]][s[k[k][k[s]]]][k[s]][k]\
[k[k]]][s[k][s[s]]]", 
        "k[k][s][k][s[s[k][k[s[s][k[s]]]]][s[k[s]][s][k[s][s][k[s]]]]][k][s[s[\
k][k]][k[k[s][k]][s[s[k][s]]][s[k[s][s]][s][s[k][k]]][k[k][s]]]]", 
        "k[s[s[k]][k]][s[k][k[k][k[k]]][k[k][k][k][s[k]]][s[s][k[s[s]][s[s[s[\
s]]]][k[s][s[k]]][k[s[s]][k]]]][s]]", 
        "k[s[k]][k][s[s[s][s[k][k[s]]][k[s[k]]]]][k[k[k[s]]][k[s]]][s[k[k[k[k]\
[k]]]][k[k[s]]][s][s[s][k]][k[s][k]][k[k[k]][k][s]][s[k][k[k[s[s][s[k[s]]]]]]]\
]", "k[k][k[k[s[s[k][s[s][s]]][s]]][s[s[k[k][s[k]]][s]]]][k[s[k]][k[s]][s[k]][\
s[s]]][s[s[s[s]]][s]][s[k][k[k][k]][s[s][k]]]", 
        "s[k][k[k[s[k]][k[s]]][k[k][k[k][s[k]]]]][s]", 
        "k[s][s[k][s[s]]][s[s[s[s[k][s]]]][k[k[s]]]]", 
        "s[k[s]][s[s[s]][k[k[k]]]][k[k][k[k[k]]][k]][s[k][s[s[s]][k]][s[s[s]]]\
][k[k[s]][s[s[s]]][k[s]][s[s][s]]]", 
        "s[s[k]][s][k[k][s[s][s]]][k[s[s]][k][k]][s]", 
        "s[k][k][k[k][s[s]]][k[s][k[s[s]]][s][k[k]]]", 
        "k[s[s[s][s][k]][k][s][k[s][k][k]][s[s[k]]]]", "s[k[s[s]][s]]", 
        "s[k[s][k]][s[s[k][k][s][s]]][k[s][k[k][s[k[s[s]]][s[s][s[s[s]]][s[k]]\
][s[s][s]]]][k[s[k]][s[s]][s[s]]]]", 
        "s[k[s][s][s[k][k]]][k[s][s[k]][k[k[s]]]][s[s[k][k]][s[s]]]", 
        "s[s][s[s]][s[k[s]]][k[s[k]]][s[s][s[s]]][s[k][k][s[k[k][k[k]][s[k[k][\
s[s]][s[k][k]]]][s][k[k]]]][s[s]]]", 
        "k[k[s][k[s[s]]][s[k[k]][k[k]]]][s[s[s]][s[s]][s[k][s]][s[s[k]][k][s[\
s[s]][s[s][k[k]][k]]][k[k[k[s][s]]][k[s[k][k]]][k][k[s][s[s]]]]]]", 
        "s[k][k[k[k][k[k]]][s[k]]][k[k[k][k]][k[s]]]", 
        "k[k][s][k[k][s][s[s[s[s[s]][s[k]]]]]][s[s[k[s[k[k]][s[s][k]][s]]][s[\
k[k[k[k[s[s]]]]]]]]]", "s[s][s[s]][s][k[s[s]][s[k]][s][k[k[k]][k]]]", 
        "k[k][s][k[k][s[s]]][s[k][s[s[s[k]][k]]][k[k[s][s]]][s[s][k[s[s]]][k[\
k][s[k][s[k]]]]]][k[k[s][k[k][k[s][k[k]][s]]][s[s][k[k[k]]]][s[s][k[k][s]][k]]\
]]", "s[s][s[s][k]][s][s][k][s[s]]", 
        "k[k[k[s]]][k][s[s][k[s[s[s]][s][k[k][k]]]]][s[k[k][s][k[k][k][k[s[k][\
s[s]]][s[s]]][k[k][s][s][s[k][s]][s]][s[k[k][s[k[k]][s]][s]]]]]]", 
        "k[s[k][k][s]][s[s][s[k]][k][s[s[s]][s][s][k[k]]][s[s[s]][k][s][s[k[k]\
]][k[s[s[k[s[s]]]]]]][s[s][s[s]]]]", 
        "k[k][s[k]][s][k[k[k]][k[k]][k[k]]][s[s[k][k][s[s][k[s]][s]][s[k][s][\
k]]][s[k][k[s][s][s][s[k[s]]][k[s[s]][s[k]]]][s]]]", 
        "k[k][s[k]][k][s[k][k]][k[s][s]][s][s[k[k[s]]][s[k]][k[k[k][k][k]]][s[\
s]][k[k]]][s[s]][s[k[k[s[s][s[k]]]]]][k[s][s][k][k[k][k[k[s]]]]]", 
        "s[k[s]][k[k[s]][s][k[k][s[k]][s][s]][s]][s[k][k[s[k]]][k[s[k][k[s]]]]\
[k[k][k][s][k]]][s]", 
        "k[s][s[k][k[s[s]]][s[s][k[s[k]]]][s[s][s]]][k[s[s[k]]][s][k[k]][s[s][\
k]]]", "s[s][k][s][s][k[k[k][s[s[s]][s[s[s]][k]]]]]", 
        "k[s[k]][s[k[k]]][s[k][s[s]][k[k[k][k][k]]]][s[k[s][k[k[k]][s[k][k[k][\
k]]]]]][k[k[k][k[k][k[s]]][s]][k[s]][k][k]][s[s[k[s]]][s[k][k]]]", 
        "k[s[s]][k[k[s]][s[s]][k[k]][s[s[k]][s[k][k]]][k[k][k[s]]]]", 
        "s[s[s]][s[k[k][k]]][k][s[s]]", 
        "s[s][s[k[s[k[s]][s]][s[k]]]][k[s[s]]][s[k][s][k][s[k[k][s[k[k]]]][s[\
k]][s[s][k[k[s][s[s][k[k][s]]]]][s[k[s]]][s[k][s][k][s[s][k][k[k][k]]][k[k]]]]\
]]", "k[s[k[s]][s]][s[s[k]][s[k[k[k]][k[k]][k[k]]]][s[s][k]]][s[s[s[s]]][k[k[\
s]]]][s[s][s[k][s[s]][k[k][k[s]]][s[s[k]]]][k[k[k[s][k[k]]][s[k][k][s[s]]]]]]\
", "k[s][k][k[k]][s][k[s][s[s[s[k]]]]][k[k][k]][s[s[k[k][k]]]]", 
        "s[s][s[k[s][s][k][k][s[k]][s[k][s[s]]][s]]]", 
        "s[k[k[k][k]]][k][s[s[s][k[s]][k]]][k[k][k][s[k][k]][s[k]][k][k[k[s][\
s[s]]][s[k[k]]]]][s[k][k][s[s]][s]]", 
        "s[s][s[s][k[s[s][k]][s]][s[k[k]]]][s[k[s]]][k[k[s[k][s[s[s[s]]][s]]][\
k][k[s]]][s[k[s]]][s[s]]][s[s][k]]", 
        "s[s][s[s[s][s[s][k]]]][k[s[s][s[k][s[s[k[s[s]]]][s]][k]]]]", 
        "s[s[k[s]][k[k[s]][k]][k[k[k][s]][k][s][s[s][s[k]][k[k]]]][s[s][s[k]][\
s[k][k[k]][k][k]][s[s[s]][s[k][s[k[k]]][s[k]]]]]]", 
        "k[k[s]][s][k[s[s][s[s]]][k[s]]][k[s[s[k]]][k][k[k]][s[s]]]", 
        "s[k][k[s][k]][s[k][k[s[k][k]]]][k[s][k]][k[k[s][k]]][k[s[k[k][k][k]]]\
[s[k[s][s]][k]][k[s][s[k[k[s][k]]]][k[s]][s[s]]]]", 
        "k[s[k][k[k][s[k][k]]]][s[k[k][s]][k[k[s]][s[s[k[s[k][s[k]][k[s][k][k[\
s[s]]][s[k]]]][s[k]][k[k[k]]]]]]]]", 
        "k[s[k][k]][k][s[s]][s[s]][k[s][k][s[s]]][k]", 
        "k[k[k][k]][s[k[k][s[s][s]][k[k][k][k][s][s[s][k[s]][k[k][k]][s[k][s[\
s[k]]]]]]]][k][k[k][s][k[s]][s[s][k][k][s[k[k[k[s]][s]]]][s[k][s[k][s]][s[s]]]\
]]", "s[s][k[s[s]][s[k[k]][s][k]][k[s][k[k[s[s]]][k[s[s][k[k][k]]]][k]][k[s][\
k[k[k]][s[s]]]]]]", 
        "k[k][k[s][k[k]][k[k][k[k][k[s][s[s]]]][s]]][s[s[s][k][s[s[k][s]][s[s]\
]][s[k[s][k][s]][s][k[k[k[s]]][k[s[k]][s[s]]]][s[k[k][k[s]]]][k[k[s][s[k]]]]]]\
]", "s[s[k[k][k[k]]]][k[k][s[s][k][k]]][k[k][s][k[s[k[s]][k[k]]][k]]][s[k][k[\
k][k][s[k]][s[k][s]][s[k[s]][s[k][k]]]]][s[s][k[s]][k[k]][k[k[s][s[s]]]][k]]",
         "k[s][k[k][k[k[k][k]]]][k[k][s][s[k][s[s]][k[s]][k[k][k][k][k[s[k]]][\
k[s]][k[k]][s]]]][k[s][k][k[s][s[s[s[s][k]]][s[s]]]][s[s[s[k]]]]]", 
        "s[s][s[s][s[s][s][s][k[k]]]]", 
        "k[k[k]][s[s]][s[s[k[s]]][s[s]][k[s][k[s][s]][s]][s[k[s]]]]", 
        "s[s[k[s[k][s[s][s[k]]]]]][k[s[k]][k[s][s][k[k[s[k[k]]]]]]][k[s[s][s]]\
[s[s][k[k][s]][s[k[s]]]][k[s]][k[s[k]][k][s][k[k[k[k]]][s[s][k[k][k]][k]][k]]]\
]", "k[s][s[k[s][k][k[s]][k[s[k][s[k]]][k][k][s][k[k[k]][k[s]][s[s[k[s]][s]]]]\
]]][s[s][k][k]]", 
        "s[s][s][s][s][s[s][s[k[k][s[k][k]]]][k[k[s[s[s]][s[s[s]][k][k[s[s][s]\
]]][k[s[k]]]][k]]]]", 
        "k[s[s]][s[k]][s[k]][s[k[k[s]][k[k][k[s[k]]]][s[k][s[s][k[s][k][s]]][\
k[s]]]][s[s][s[k]]]]", "s[s[s[s[s]]][s]][s][s[k][s]]", 
        "s[s][k][s[s[s[s]]]][s[s[s]]]", "s[s][s][s][s[s]][s][s[k[s]]]", 
        "s[s][s][s][s[s][s]][s[s][s]]", "k[s[s[s]]][s][s][s[s][k]][s]", 
        "s[s][k][s[s][s][s[s]]][s[k]]", "s[s][k][s[s[s][s[k]]]][s[s]]", 
        "s[s[s]][s[s]][k][s[s][s][s[s][k][k]][s]][s]", 
        "s[k[k][k]][s[s[s[s[s][k]]]][k[s]][s][k][s]]", 
        "s[s[s]][k][k[s][s][s[s]][s[s]]][s[s[k][s]]]", 
        "s[s[s]][s][s[s[k][s[k]]]][s[s[s[s]]]][k[k]]", 
        "s[s[s][k][s[s][k]][s[k][s][s[s]][k]]][k[s]]", 
        "k[s][k[s[k]]][s[s[s[s]]][s[k]]][k[s][s]][s]", 
        "s[s][s][k[s[s]][s][s[k]]][k[s][s[k]][s[s]]]", 
        "s[s][s[k][s][k]][s[s]][s[k[s]]][k[s][k]][k]", 
        "s[s[s]][s[s]][k[s]][k[s[s]][k[k]][s[s[s]]]]", 
        "s[s][s[s[s][s][s[s[s]]][s]][s[s][k]]][k[k]]", 
        "s[s[k][k[s]][s[s[s]]]][s[s[s[s]][s][s]]][k]", 
        "k[s[s][s][s[s]][s]][k[s][k][k][k[k][s]]][s]", 
        "s[s][s][k[s][k]][s[s][s[s][k]]][s][s[s[s]]]", 
        "s[s[s[s][k[s]]][k[s]]][k[s][k]][s[s[s[s]]]]", 
        "s[s][k[s]][s[s][k[s][k[s]]]][s[s][s[s[s]]]]", 
        "k[s][s[s]][k[s[s[s[s]][s[s]]][s][s[k][s]]]]", 
        "s[s[s][k]][s][s[s][k[s[k][s[s]]]]][s[k]][s]", 
        "k[s][k][s][k][s[k[s][s][s[s][k]]]][k][k[s]]", 
        "k[s[s[s[s][s]]]][s][s[s]][s[k[s]]][s[k[k]]]", 
        "s[s][k[s]][s[s][k[s]]][k[s][s][s[s][k[k]]]]", 
        "s[s[s]][k][s[s][s[k][s]]][k[s]][k[s][k][s]]", 
        "s[s[s]][s[k[s][s]][s]][k[s[s]][k[s]][k[s]]][k[s][k[k[s]]]]", 
        "s[s][s][s[s][s[s[k]]]][k[k][k[k[k][k]]][s[s]][k]][s[s[k]]]", 
        "k[k][k][s[s][k[s][s[s[k]]]]][k[s]][s[s[s[s]]]][s[k][s][s]]", 
        "s[k[s[s]]][s[s[s[s]]][s[s][k[s[s[s][s]]][s[k[k][s]]]]][s]]", 
        "s[k[s]][s][s[s][k[k]]][s[s]][s][k[s][s[k]][k][k[k[s]]]][k]", 
        "s[s][s[s][s[k][s[s][k]]]][s[s[s]]][k[s][k[k]][s[s[k]]]][s]", 
        "k[s][k][s[s][s[k]]][s][s[s][k[s]][s][s[s][s]][s[s]]][s[s]]", 
        "s[s][s[s[k]][s]][s[s[s]]][s][k[s][s][k][k[k[k]][k[k][k]]]]", 
        "s[s][k][k[s][s][s[k[s]][s[s][k]]][s[s]]][s[s][s][s][s[k]]]", 
        "s[s[s]][k[s[s][s][s[s[s[s]][s][s[s]]]][s[k][k][s[k]][k]]]]", 
        "s[s[k][k][s][s[k[s]]]][s[k[k]]][s[s][k]][s][s][s[s[s]][s]]", 
        "s[s][k[k[k[k]][s]]][s[s][s[s]]][s[s][k[s]][s[s]][s[s[s]]]]", 
        "s[s][k[s]][s[k][k[k]][s[s]][s[k[s]]]][s[s[s]][s[s][s]][k]]", 
        "s[s][k[s]][s][s[s][s[k[k]]][s[s][k][s[s]]]][s[k][k[k][k]]]", 
        "s[s][s[s]][s[k][k][s][s[s]]][k[s][k[s[s]][k[k]]][k[s[s]]]]", 
        "s[s][s[s[k]][s[k]][k[k]]][s][s[s[s]][s[s]]][s[s][k[k]][k]]", 
        "s[s[s]][k][s[s][s][s][s][s[k][s][s[s]][k[k][k]]]][k[k][k]]", 
        "s[k[s[s][k[s[k]]][k[s][k][s][s]]][k[k[k]]][s[s[s]][s[s]]]]", 
        "s[k[s][s][s]][s[s[s]][k]][k[s[k][k]][k][s[s[s]]][s]][s[s]]", 
        "s[s][k[s[s]][s[k]]][s[s][k][s[s][k[s][k]]][k[s][k][s[s]]]]", 
        "s[s[s[s[s]]]][k[s]][s[s]][s[k[k][s[s[k]]][s]][k[k]][k[k]]]", 
        "k[s[s]][s][s[s[s]][s[s]][k[s][k]]][s[s][k[k[s[s][k[k]]]]]]", 
        "s[k[k]][s[s][s][s[s[s]]][s][k[k]]][k[s][s][s[s[k][k[s]]]]]", 
        "k[s][s][s[s]][s[s]][s[s][k[s][k[k[k]]]]][k[s][k][k[s[k]]]]", 
        "s[s][k[s[s]][s]][s[s]][k[s][k[k][s]]][s[s]][k[k[k]][k[k]]]", 
        "s[s[s]][k[s[s][k]]][s[s][s][k[k][s][s][s[k]][s[s[k[k]]]]]]", 
        "k[s[k]][s][s[s[s]]][s[s[s[s][s]]][s[s]][s]][s[k[s]][k[k]]]", 
        "s[s[k][k][s[s]][s]][k[s][k][k]][s[s]][s[k][s[s][k[s[s]]]]]", 
        "k[s][s[k[k][s]]][s[s[s[k]]][s[s[k]][s]][s[s][s]][k[s][k]]]", 
        "k[s[s][s][s][s[s]][s[s]]][s[k[s][s]][k[s]]][k[k[s][s]][k]]", 
        "s[s[s]][s][s[s[s[k]]]][s[s][s[k]][s[k[k]][k[s[k][s]]]][s]]", 
        "s[k][k[k]][s[s[s][s[k]]]][s[s][s]][k[s][k[k][s][k]][k[k]]]", 
        "k[s][k[s][s[s]]][s[k][s]][k[s][s[s]][s[k]]][s[s[s][k]][s]]", 
        "s[k][s[k[s[k]][s][s[s[s[s]]][s[s[s[s[s][k]]]][s][s]][s]]]]", 
        "s[s[s][s[s]]][s[k[s[k]][k][k]][k[s]]][s[s][s][s][k[s][k]]]", 
        "s[s[s[k]][s[s[s][k]]][s[s][s][s]][s[s][s][s[k][k[k]]]]][k]", 
        "k[s[s][s[s]][k[s[s]][k[s][k[k][s]]]][s][s[s]][k]][k[k][k]]", 
        "s[s][s[s][s[k[k]][s][k[k]]][s[k[k]]]][s[s]][s[s[s][k]][s]]", 
        "s[s[s][s[s][k[s[k]]]]][s][k[k][s][s][k[k]][s[k][k[k][k[k]][s][s[s][k]\
]]]]", "s[s[s][k]][s][s[s][k]][k[k[s]][k][k][k[k[s][k[k]][k[k[s[k[s]]]]]][s[k]\
]]]", "s[k[s][s[s]]][k][s[s][s[k]][s[s][s[k[s[s]]][s]]][k[s[k[s[s]][s[k]]]][s]\
]]", "k[s[s[k]][s[s][s[s[s]]][s[s]][s[s]][s[k]]]][k[k][k[s][k[k][k[k[s]][s]]]]\
]", "s[s[k[s[s]]]][s[k][k]][s[s][k[k]][k][s[s][s[s][s[s]]][s[s[k][s]]]]][s[s]]\
", "s[s][k[s[k]][k[s][s]]][s[k[s]][k][s[s[s]][k[s[s[s]][s]]][k[k]][s[s][k]]]]\
", "s[k[s][k]][s[s]][s[s[k][s]][s]][k[s][k][s][s]][s[k][k[s]]][s[s][s[s][s]]]\
", "k[s][s[s[k][k]]][s[s[k]][s][s[s]]][s][s[s][s[k[s][s][k]]][k[s[s]][s]]][k]\
", "k[s[s]][s[s]][s[k]][s[s][k[s]]][s[k[k[s[s][s]][s[k][s]]]][s[s[k]]]][s[k]]\
", "k[s[s[s[s[s]]]]][k][s][k[k[s[s][k[k]]][k[k]][k[s[s]][k][k[s]]]][k[k[s]]]]\
", "k[s[s][k[s]]][s[k]][s[s][k][s]][s[s][s[s[k][s]][k[s]][k]][s[s[k][k[k]]]]]\
", "s[k][s][s][s[s[s][k]]][s[s]][s[s][s[s]][s[k[s[s]]]][s][k[k][s][s][s]][s]]\
", "s[s[s][s][s[s]]][s[k[s]][k[s][s]][s]][k[s]][k[s]][s[s][k][s][s[s[s[k]]]]]\
", "s[s[s[s]]][s[k][s]][s[s][k[k][k][k][s]][s[k[k]][s[s[s][s[k]]][k[s][k]]]]]\
", "s[s][s[s[s]]][s[s]][s][k[k[k]]][s[k][k][s[s]]][s[s][k[k][k[k[s]][s[s]]]]]\
", "s[k][s[s][s][s][k[s][s[s]][s][s]][s][s[s][k]][s[k[k]]][s[s[s[s][s[s]]]]]]\
", "s[k[s[s]]][s[s][s[s[k]]]][s[s[s][k]]][s[k][s[s[k]][s[s[k][k]][s[k][k]]]]]\
", "s[s][s[k][s]][s[k]][s[s][s[s]][s[s[s[s]][s[s][s[s][k]]][s[s][k][s[s]]]]]]\
", "s[k[s]][k[s[k]]][s[k][k]][s[s[s]][s][s[k][k[s]]][s[k[s]]][k]][s[s[k][s]]]\
", "s[s][s][s][s[s[s][k[s[s]]][s[s][k[s]][k][s[k][k[k]]]]]][s[s[k]]][k[s[s]]]\
", "k[s][s][k[s][s[k]]][s[s]][s[s][s]][s[k][k[s][k]][k[s[s[k]]][s]][s[s][s]]]\
", "s[s[s]][k[s[k]]][s[s[s]][s[s]][k[s[s[s][s][s]]][k[k[s]][k[s][s[s][k]]]]]]\
", "s[k[k][s]][s][s[s[s]][s]][s[s[s[s]][s[s[k[s]]]][k][k[s[s]]]]][s[k[s[k]]]]\
", "s[s][k[s][s[k]]][s[s][s[s][k][k][s[s[s]]][k[s[k][s[s]]]]]][k[s][s][s[s]]]\
", "s[s[s]][s[k][k][s[s][s][k[s]][s[k]][s]]][s[s][s[s][k[k]]]][s[k[k[k]][s]]]\
", "s[s][k[s]][s][s[s][s[k[k]]]][s[s][s[k[k[k]]]]][s[s[s][s]][k[k][k][s][s]]]\
", "s[s][s[k]][s[s][k]][k[s[s]][s][k]][k[k][s[s[s[s]][k]][k][k[s[k]]]][k[k]]]\
", "s[s][s[s][k]][k[s][s][k[s[s[s][k[k]]][s]][s]][k[k[k[k[s]]][k[s]]]]][s[s]]\
", "s[k][s[k][k[s]]][s[s[s][s][s]][s[s[s[s]]][k[s[s]]][k]][s[s]]][k[s[s[s]]]]\
", "s[s][k[k[k]]][s[k[s][k[k]]][s][k[s[s]][s[k[s]]]]][s[k[s]][s][s][s[s][k]]]\
", "s[s][k[s][k[k[k]][k]][s[s][k]]][s[s[s]]][s[s][s][k[s[k]][k[s][k[k]][k]]]]\
", "s[s[s]][s[s[k[s[s]][s[k]]]][k[s][k][s[s[s]]][s[s][k][s[s]]]][s[k][k[k]]]]\
", "s[s][s[s[s[s]]][s[k[s]][k]][k[s[s]][s[s[k][k[s]]]]]][s[s[k]][s[k]][k[k]]]\
", "s[s][s[k[k][s[k][k]]]][s][s[s[s][s[s[k]]]]][k[s[s]][k[k][k[s[s]][s[k]]]]]\
", "k[k[s][s][s[s]]][k][s][s[s][s][s[s][k[k]]]][k[s][s][s[s][k[s[k][k[s]]]]]]\
", "s[s[s][k[k]][s]][s[k[k]]][s[s[s][s[k][k]]][s[s[k[k]]]]][s[s][s][k][s]][s]\
", "s[k[s][k][s]][k[s][k]][s[s][k][s[s[s][k[k]]][k[s][s[s][s][k[k]][k][k]]]]]\
", "s[k[s[s]][k][s[s][k[s][s]]][k[s[k[s]]][s]]][k[s[s]][k]][s[s]][s[s[s[s]]]]\
", "s[s][s][k][s[s[s]][s][s[s[s[k]]]]][s[s][s][k[k][k[s[k]][k[k[k[s][s]]]]]]]\
", "s[s[s[k][s[k]]]][s[k][k[s]]][s[s][k[k][s[s]]][s[s][k][s[s][k]]]][k[s[s]]]\
", "s[s][k[k]][k[s[s[s]]]][k[s][k[s]][s][s[s]]][s[s]][s][s[k[k[k][k[k][k]]]]]\
", "s[s[s][s[s]]][k[s][k]][k[k][k][k[s][k][s[s][k[k][k]]]][k[s][s][k[k[s]]]]]\
", "s[s[s[s][s[s][s]]]][s[s[k][s]]][s[k][s][s[s][s[s[s[s]]][k][s]]][k[k][s]]]\
", "k[k][k[k][k]][k[k][k][s]][k[s]][s][s[s[s]]][s[s][s]][k[s][s][k[s][k]][k[s]\
][k[s]]][s[k]]", 
        "k[k][s[k][s[s[s]]][s[k]]][s[s[s[s][s[s][k[k]]]]][s][k[s][k[k]][k[s][\
k]]][k[k[s[s][k]]]]]", 
        "k[s][k][s[s[s]]][k[s][k][s[k][s[k][k[s][k]]]]][s[s[k][k]]][s[k[s]][k[\
k[s][k[s]]]][k[k]]]", 
        "k[s][k[k]][s[s[s]]][s[s[k][s[k]][s]][s[k[k]][s]][s[k]]][s[s[s]][s[s][\
k]][k[s[s]][s][k]]]", 
        "s[k[s][k[k[s]]]][s[k[k[s][k]]]][k[s[s[s]]][k[s[s]]][s]][s[k][s[s][s[\
k[k]][s[k]][k[k]]]]]", 
        "s[s[k]][s[s][s][s[s[k]][s][k[s][k]][k][s[s]][s[s[s][s[k]]][k[k[s]]]]]\
[s[s[k]][s[k[s]]]]]", 
        "s[s][s[s][s[s]][s][s]][k[s][k[s]][s[s]][k[s[s]][s[k[k]]]]][s[k[k[k][\
s[k]]][s]][k[k[s]]]]", 
        "s[s][s[k[k]][s]][s[s][k]][s[k][s[k][s[s]]][s[k[s]][k[s]][s[s][k[s][s[\
s][s]]]]][s[k][k]]]", 
        "s[s][s][s[s[s]]][k[s[k[s[s]]]][s[s]][s[k]][s[k[s[s]]]][s[s][k]]][k[k[\
k]][k][k[k][s][k]]]", 
        "s[s[s[s][s[s]]]][s[s][k][s[k][k[s][k[k]]]]][k[k][k[s[s]]][k][k[s][k][\
s[k][s]]][s[s][k]]]", 
        "s[s[s]][k[k][s[k[k][s]]][s[k][k[s][s[k]]]]][s[s][s[s]][s[s][s[s][s][\
k[s]]]][s[s]][k[k]]]", 
        "s[k][k][s][s[s]][s][s][k[k[k]][s][s]][s[k][s[k]][k[s][k][s[s[s[s]]][\
s[s][k[k[k]]][s]]]]]", 
        "s[s][k[s][k[s[s]]]][k[k[s[s]][k][k[s][s]]][s][k[s[s]][k]]][s[s[k][k[\
s[s[k]]]]]][k[s][k]]", 
        "s[s][s][s[s][s[k[s][s]]][s[k][k[k[k][s]]]][s]][s][s[k[s]][k[s][k[s][\
s]]]][s[k][k[s][s]]]", 
        "s[s[s]][k][s[k[s]]][k][k][k[s][s[k][s]][s[s[s]]][s[s][k[s][s[k]]]][s[\
s][s][s[k][k[s]]]]]", 
        "s[s][s][s[k][k[k[k]]]][k[s][k][k[k[s][s]][s[k]][s[k[k][k[s]][s][s][k[\
k]]]]][k[s][k[k]]]]", 
        "s[k][k][s][s[s]][s[k]][s[k][s[k]]][s[s[s]][s[s]][s][s]][s][s[s][s][k]\
[k[k][s[k[s]]]][k]]", 
        "s[s][s[s][s][s][s[s[s]][k[s[k[s][k]][k[s][k]]]][s]][k[s[s[s]]][k[s]][\
s[k]][s[s[s]][s]]]]", 
        "k[s][s][s[k][s[k]][s[s[s[s]]]]][s[k[k[k][k]]]][k[s[s[s]][s[k][k[k][s[\
s]]]]]][k[k][s[k]]]", 
        "s[s][k[k][k][s][k[k[s[s]]]]][s[k][s]][s[s[s][k]][s[s[k]][s[s]]]][s[s[\
s]][k][s[k][k[s]]]]", 
        "s[s][s][k[k][k][s[s[s]]][k[s[k][s]]]][k[k[s[k[s]]]][k[s][s][s]][k[k]]\
][k[k][s[s][k][s]]]", 
        "s[s][s][s[k][s][k[k]][k][k[s[s][s][s[s[s][k]]][s]]]][s[k]][s[s][s][k[\
k][k[k]][k][s[s]]]]", 
        "s[s[s[k]]][s[k]][k[s[s]]][s[s]][k[s][k][s[s][s]]][k[k[k[s][k]]][k[s]]\
[s[k][s]]][s[s[k]]]", 
        "s[s[s]][s[k[s]]][s[s][s][s[s]][s[s[k]][s[s[s]][k]]]][s[s][k[s]][k[k]]\
[k[k][k[s[k]]]][k]]", 
        "k[s][k][k[k[s[s]]][s]][s[s]][k][s[s][k[s[k]]][s[s[s[s[s[s][s]]]][k[s]\
]]]][k[s][k][k][s]]", 
        "k[s][k[s]][s[s[s]]][s[s][s[k[k][k][k]]]][k[k[s[s]]][s[s]][k[s][k][k][\
s[k]][k[k[k]]]][s]]", 
        "s[s[s][s[s]]][s[s][s[s][s[k]]]][s[s]][k[k][s]][k[s[k]][s][s[k]][k[k[\
s[k]][s[k][s]]]][s]]", 
        "s[k[k]][s[s[k[s]]][s[k[s[s]][k]]]][s[k[k]][s[s][k]][s[s][s]][s[s][k][\
k[k[k]][s[s][k]]]]]", 
        "s[s][s][s[s[s]]][k[k][k[k]][s][s[k]][k[s[k]][k[k]][s]][k[k[s][s[s[k]]\
]]]][s[s][k][k]][k]", 
        "k[s][k[k]][k][s][s[s[s]][k[s][k]][s]][k][s[s][k[s]][s[k][k[s]][s[s][\
s[s]]][s[s[k]]][s]]]", 
        "k[s][k][s[s[k]][s[s[s]][s[s][s]][k[s][k]]][k[s][s][k[s]][s[k]][s[k]]]\
[k[k[k[k][s]][s]]]]", 
        "s[s][k[s[s[s]]][s[s[s]]]][s[s][s[k][k]][s][s[s[s]]]][s[s[k][s][k][s[\
k]][k[s][k[k]][s]]]]", 
        "s[s[k[s[k]]]][k[k]][s[s[s]][k][s[s[k]][k][s][k[s[k[s]]][s]][s][s[k[s]\
[s][s[k][s]]]]][s]]", 
        "s[s][k[s[k][k[k[k[k]]]]]][s[k][k][k[k]][s][s[k[s][k][s[k][k[s][s][s]]\
]]][s[s]]][s[s][s]]", 
        "s[k[s]][s[s[k][s[k][s]]][s][s[s][k[s]][s[k[s[s]]][s]]][s[s[k]][s[k[s]\
[s][k[s][k[k]]]]]]]", 
        "s[k[s][k]][k[s[s]]][s[s[s]]][k[k][k[k[s[s]]][s[s]]][s[s[s[s]][k]]]][\
k[s][s[k][k[k][k]]]]", 
        "s[s[s]][s[s]][s][s[s[k][k]][k[s]][k[k][s]][k][k][s[k[k]][s[s[k]][k[k[\
k]]][k[s[k[s]]]]]]]", 
        "s[k[k][k[s][k[s[k]]][k[k]]]][k[s][k[k]][s[k[k[s[k]][k]]]][s[s]]][s[s]\
[s][s[s][s]]][s[s]]", 
        "s[s[s][s]][s][s[k[s][s][s]][k][s][k[k[k[k]][s][s[s]]]][s[k]][k][s[k][\
s][k[s]][k][s[s]]]]", 
        "s[s][s[s[s]]][s[s[s]][s][s[s][s][s[s][k][s[k][k[k]]][k[s]]]]][s][k[s]\
[k[k]][s[s[s]][s]]]", 
        "s[s[s][k][s]][s][s[s[s[s][k][k[s]]]]][k[k][k][s[k][k[k]][s][k[s]][s][\
k[k]]]][k[s][s[s]]]", 
        "s[s][k[s[s]][k[k[k]]]][s[s][s[k][k[s]]]][k[s[k]][k[k]][s[k[k[k]]][k[\
k[k]][k][s][k][k]]]]", 
        "s[s[s[s][s]][s[k[s][k[s][k]][k]]][k[k][k][s[s[s][k]]][s[k[s]]]]][k[k[\
s]][k[s][s][s]]][k]", 
        "s[s][s][s[s[s[s]]][s[s][s[s][k][k[s][k[k[s][s]]]]]][s[k[s][s[s]][k][\
s[k]]]][s]][k[k][s]]", 
        "k[k[s[s[s][s[s][k]]][k[s][s]][k[s[s][s[k][s]]]]][k[k[k]]]][k][s[s[s]]\
[k][s]][s[s][s]][s]", 
        "s[k][k[s[k]][k]][s[s[s]][k][k[s[s][k]][s[s]][s[s]][s[k][s[s]][k]]][s]\
[s[s]]][s[s[k][s]]]", 
        "k[s][s[k]][s[k][s]][k[s[k]]][s[s][k][k][k[s]]][s[s][k[k]]][s[s[k[k[s]\
[k]]]][s]][s[s][s]]", 
        "k[s[k[k]]][k[k[k][s]]][s[k[k[k]]]][s[s[s]][s[k][k]][s[s[k]][s[s][s]][\
s[s]]][s[s[s]][s]]]", 
        "s[s[s[k]]][s[k][s[s][k[k][s[k]][k[k]]][k]]][k[s[s]][k[s][k]][k[s][s][\
s]][s[s][k[s]][s]]]", 
        "k[s][k[k[s]][k]][s[s[s[s]][k]][s][s[s[k][k[s]][s[s][s]]]][s]][s[s[s[\
s][k[k][k]][k[k]]]]]", 
        "s[k][s][s][s[s[k][k]]][s[k[s]][s[s]][s[s][s][k]]][s[s][k][s][k[k[k]]]\
[k]][s[s][k[s][s]]]", 
        "s[s[s[s]]][k[s][s][s[k[s][s[k[k][s]]]]]][s[s][s[s]]][s[k[s[k]][k[s]][\
k[s[s]][s[s]]][s]]]", 
        "s[s][s[k[s]]][s][s[k][k]][s[k][k[k]]][s[s[s[s[k][s]]][s[s][s[k[k[s]]]\
]]][k[s][s][k[k]]]]", 
        "s[s][s[s]][k[s][k[k][s][s][k[k[s[k]]][s[k]]]]][s][s[s[s]][s[s][k[s]]]\
][k[k[s][s[k]]][s]]", 
        "s[s][s[s[s][s[s[s]][s[k][k]]]]][k[s][k][s[s]]][s[s][s[s][k]][k[s]][s[\
s[k]][s[s][k[k]]]]]", 
        "s[s][s[k][s[s]]][k[s[s]][s][s[s][s]]][s[s][k[s[k[k][s]][s[s[k][s][k]]\
][k[s[k[k]][k]]]]]]", 
        "s[k[s[s]]][k][k[k]][s][s[k][k[s[s]]][s[s]]][s[s][s[k[k]][s[k[s]]][k[\
s]]][k[s[s][k]][k]]]", 
        "s[s][s[s]][s[s[k]]][s[s[s]][s[s][k]][s[k[k]]][s]][k[k[s][s[s]]][k][s[\
s[k]][s[k[s][k]]]]]", 
        "s[s][s][k[s][s]][s[k][s]][s[s][k][s[s[s]]][s[k][k][k][k[s[s]][s[s]]][\
k[k[s]]]][s][k[s]]]", 
        "s[s[s]][s[k][k[s]][s[s][s[s]][k[k][s]]]][s[k[s[s]]]][s[s[s[s]][k[s[s[\
k[s]]]]]][k]][s[s]]", 
        "s[s][s[s][k]][k[s][k[s[k]]][k[s]][s[s[s[s][k[s]]]]][k[k[k][k][s]]]][\
s[k][k[k][s][k[s]]]]", 
        "k[k][s[k]][s[s[s]][k[s][k][k[s][s][s[s][s[s]]][s][s[s[s]]][k]]][s[s[\
k]][k]][s[k][s][s]]]", 
        "k[s][k][s[s][k]][k[k[s]][k[k]]][k[s][k][s][s[s][s[s[k][k]][k]]][k[s]]\
[s[s[s][k[k[s]]]]]]", 
        "s[s][k[s]][s[s[k][k[s]]][k[s[s[k[k]]]]]][s[s[s[k[k]]]]][s[s][k[k[s]][\
s[s[k][k]]][k]][k]]", 
        "s[k[s][s[k[k]][k[k]]][s[s][s]]][k[k][k][s[s[s[s]][k]][s[k[s]]]]][k[s[\
k]][k[s][s[k]]][k]]", 
        "k[s][k][s[k[k[s[s[k]]]][k[k]][s]]][s[k][k[k]]][s[s[s]][k[k][s[s][s[s]\
]][s[s][k][s[s]]]][k[k][k[k[s]]]]]", 
        "s[s[s][s]][s[s[s]][s[s]]][s][s[k[s]][s]][k[k]][k[s[s[k][s][s]]]][s[s[\
k][s]][k][s[s][k]]][s[s[k][k[s]]]]", 
        "s[s[s[s][k[k][s]]]][s[k[s][k[s]][s[s[s][s]][s[s][k]][k]][s][s[s]]]][\
s[s]][k[s[s][k]]][k[s[k][k][k]][k]]", 
        "s[s[k]][s[s[s]][k[s]][k[k[s]][k[s][k]][k[s[s[k]][k]]][s[k][k[s[s][k[\
k]]]]]]][s[s[s]]][k[k][k[s][s[k]]]]", 
        "k[k][k[s]][s][s[s]][s[k[s]]][k[k][s[k]]][s[k[s][s[s[k[k]]][s]][s[s][\
s[s[s]]]][s]][s[s[s][s[s][k[s]]]]]]", 
        "s[s][k[s][k[k]]][s[k[s]][s][k]][s][k[s[k[k]]][k]][s[s][s[k[s][s[s[k]]\
][k]]]][s[s][k[k][k][s]]][k[k[s]]]", 
        "k[s][s[s][s]][s][s][s[s]][k[k][k[k][s[k]]][k][k[k[k]]]][k[s][s][s[k][\
k[s[s][s[k]]]][s]]][s[s[s]][s[k]]]", 
        "s[s][k[k]][s[k[s]]][s[s[s][k][s[s[s]]]][k[s]]][k[k[s[k[k]][k[k]]]][k[\
s][s[k]][k[k]][k[k]]]][k[s[s]][s]]", 
        "s[k][k][k[k]][s[k][s]][s[s][s[s]][k[k[s][s]]][s[s[s][s][s[s][s][k[k]]\
][s[s[s][k][s][s]][s]][s[s[s]]]]]]", 
        "k[k][s[k[k]][s][k]][s[s][s[k][k][k][s]][s[k[s][k]][k[k][s]]][s[s[s]]]\
[k[k[k][k[s]]][s][s][s[s][s][s]]]]", 
        "s[s][s[s]][s[s][s][s[s][k[k][k[k[s]][k[k[s]]][k[s[k]]]][k[s]]]]][k[s[\
s]][s[s[s]][k[k][k[k]]]][s[s[k]]]]", 
        "s[s][k[s]][k[s][k[k[s]]][s]][s[k[s]][k[s][k][s][k][s]][k[s][s]]][k[k[\
s]][s[k[s[s]][s]]]][s[s][k[s[k]]]]", 
        "s[s][s][s[s[s]][k]][k[s][s][s][k[s][k]][k[s[k][s]]][s[s[s]][s][s][s[\
k[k][k[s[k]]]][k[s[s[k[k]]]][s]]]]]", 
        "s[k][s[k]][s[s[s]]][s[s]][k[s][k[k]]][s[k][s[k[s]][s][s[s]]]][s[s][s[\
s[k]]]][s[k[k[s[s][k[k]]][s][k]]]]", 
        "s[s[s[k]]][s][s[s][s[k[k[k]]]][s[s][s]][s[s[s][k[k]]][k[s]][s[k[k[s]]\
]][s[k[s][k][k[s[k]][k][s][s]]]]]]", 
        "s[k[k[k][s]][s[s]][s][k[k[k]]][k[s][s][s][s[k[s[s[k]][s]]]]]][s][s[k[\
s][s][s[k[s]]]]][s[s][k[k]][s[s]]]", 
        "k[s][s][s[s][k[s][s][s[s[s[s][s]]]][s[k]]][s][k[s]][k[k[s[s][k]]][s][\
k[k]]]][k[k[k[k]]][s[s][k[s][s]]]]", 
        "s[s][k[s]][s[s][s[k[s[k]]]][s]][k[s][s[k[k]]]][s][s[k][s[s[k]][k[k[s]\
]]][k[s][s[k][k]][k[s][s][s[k]]]]]", 
        "k[s[k]][k[s[k[k]]]][k[k][k[k[s[s][k]]]]][s[s]][s[s][s[k]][k[s][k[k]]]\
[k[s][s][s[s[s]][s]]][s[k[k][s]]]]", 
        "k[s[k][k[s[s]][k[k][s[s]][k[s]]]][s]][k[k][s[k]]][s[s[s][k]][s][s[s[\
s][s[s][k][s[s[k]][s]]]]]][k[s[k]]]", 
        "s[s[s][k[s]]][s[s][s][k][k][s[k][s]][k]][s[s][k[k[k][k[k]]]][s[k][k[\
s]][s[s][k]]]][k[s[s][s[s]]]][k[k]]", 
        "k[k][s[k[s]]][s[s[s][s][s][k[s][s]][s[k][k][s[s[k[s]]]]]][s[k]][s[k[\
k]][s][k][k[k][k][s][s]][s[k][k]]]]", 
        "s[s[k][s[k[s]]]][k[k[s][k[k]]][k[s][k]]][s[k[k[s[s[s[s]]][s]][s[s]]]]\
[s[k[k]]]][s[s][s[k]][s[s[s][k]]]]", 
        "k[s[s]][s[k[s[s]][k[s][k[s]]]]][s[s[s]][k[s[s[k[k]]]]]][s[k][k[s]][k]\
[s[s[s]]]][k[s][s[k]][s[s][k][s]]]", 
        "s[s][s][s[s[s]]][s[s[s]][s[s]]][s[s[s]][s[s[s][k][s][k[s]]]][k[s]][k[\
s]][k[s][k][k][k[s][k[k]][s[k]]]]]", 
        "s[s][k][s[k][k][s[k[s][s]]]][s[s][s][k]][k[s][k][k[s]][s][s[k[k]][k][\
s][k][k][k][k]][k[s[s]][s[s[s]]]]]", 
        "s[s[s]][k[s[k][s][s][s[s]][s]][k]][s[s[k[k][s[k][k[s]][s]]][k]]][k[k[\
s[s][s[s]][s]][k[s[s][s]][k][s]]]]", 
        "s[k[k]][k][s[s[s][s[s[k[s]][s[k[s[s]]]]][s[s][s[s[s]][s]][k[s][k]]]]]\
[k[k[s][s[k]]]][s[s][k[s][k]][s]]]", 
        "k[s[k]][s[s][k][k[k[k][s[s]]][k][s[k]]]][s][s[s[s]][s[k][k][s]][k[s[\
s]][s[s][k[k[k]]]][s[s][s[k]]]][s]]", 
        "s[s][k][s[s][k][s[s[k][k[s][k]]]]][s[k][k[k][k]][s[k]][s]][s[s[s[k[k[\
s][s]]]]][s[s][s[k][s[k[k]]][k]]]]", 
        "s[s[k][k]][k][k[s]][s[s]][k[s][s[s][s[k[s][k[k]]]]][s[k][k[s[k]][s]]]\
][s[k[s][s[s[s]]][s][k[s[k]]]][s]]", 
        "s[s[s][s[s][s]][k[s][s[s]][k[k]]][s[s][s][s][s[s]]]][s[k][k][k[k][k[\
k]]][s[s[k[k]][k[s][s]]]][k[s][k]]]", 
        "s[s][s[k][k[s]][s][s[s][k[k][k][s][s[k]]]]][k[s[s]]][s[k[k][k[k]][s[\
s[s][k][s[k]]][k[s]]][s[s]][k[k]]]]", 
        "s[s][k][s[s][s[s]][k][s[s]][s][s][s][s]][k[k][k[k][s[s]]][s[s]]][k[s]\
[s[k][s]][k[s[s]][k[s[k][s]]]][s]]", 
        "s[s][k[s][k]][k[s[s]][s]][s[s[k]][s][k]][s[k][k][s[s[k]]][k[s[s][k]][\
k][s]]][s[s[s[s[s]]]]][s[s[s][s]]]", 
        "s[s][s][s[s[s][k]][s[k][k[k][s]]]][s[s][k[s]][s][k[s]][k[s][s[k][k][\
k]]]][k[s[k][k[s]]][k[s][s]][k[k]]]", 
        "k[s][k[k][s][s[s][s[k]][s[k[k]]]][s][s]][k[k[s][s[s]][s[k][k]]][s[s]]\
][s[k][k[s]]][s[s[k][s[s]]][s[s]]]", 
        "k[s[s]][s[s[k]]][s[k[s][k][s[k][k[s]]]][s[s[s][k]][k]][s[s[s][k[s[k[\
k]]]]]]][s[s[s]][s[k][k][s[s]]]][s]", 
        "k[s][k][k][k][s[k][k]][k[k][k][s][s[k[s]]]][s[s[s[s]]][k[k]][s[s[s]][\
s[s][s]]][k[s[s][k][s[s][s[s]]]]]]", 
        "k[s[s]][k[s[s[k]][s[s[s]]]]][k[s][s[k]][s][k]][k[s][k][s][k][k][s[s]]\
][s[k[s][s[s]]][k[s][k][k]][s[s]]]", 
        "k[s][s[s]][s[s[s]][k][s[s]]][s[s][k[s][k]][k[k]]][k[s[s][k]][k[k][k][\
k[k][k[k]]]][k[s[s][s]][s[k[k]]]]]", 
        "s[s][s[s][k[k]]][s[s][k][k][s][s[s][k][s[s][s[s[k]]][k[k][s]]]][s[s]]\
[k]][s[s[s]]][s[s][s[s]]][s[s][s]]", 
        "s[s[k[s]][k[s]]][s][s][k[s][k][s[s]][s[k[k[s][k][k][s][k]][s[s]]][s[\
s][k[s]]]][k[s][s[k]][s[s]]][s[s]]]", 
        "s[s[s[s][s]]][s[k]][s[k[s]][k]][k[k][k][s[s]][k][k[s][s]]][s[k[k]]][\
s][k[s][k][s[s][s[s[s]]]][s[s[k]]]]", 
        "k[k][k[k]][k[k][k[s]]][s[s][s]][k[s[s]][k[k]][s[s]][k[s[s][k[s][s]]]]\
[s]][s[k]][k[k][s[k]][s[k[s]]][k]]", 
        "s[s][s][k[s[s[s][s]]][s[s]]][k[s[s[s][k][s]]][k[s][s]][s[k[k[s]]]]][\
k[s[s]][s[k[s]][k]][s[k][s[k][k]]]]", 
        "s[s][k][s][s][k[s][k[k[k]][k]][s[k[s]]]][s[s][s[k]][k[s]][s[k][s][s[\
k][s]]]][s[s][s][k[k[s[k]]][k[s]]]]", 
        "s[s][k][s[s][k][s[s][k]]][s[s[s][k]]][s[k][k[s[k]]]][s[s[s][k]][s[k][\
k][s]][s[s[s][s[k[s[k]][k[k]]]]]]]", 
        "k[s[k[k]][k[s][k][s[s[s]]][s[k[s]]]][s[s[s]][s[s[s]]][s[s]][k[s]]][s[\
s[s[s[s]]][k[k][k]][s]][k[k]]][s]]", 
        "k[s[s[s]][s][s[s[s]][k[k[s]][s[s]]][s[s[k]][k[k]][k]]][s[s][k]][s[s][\
s[k[k]][k[s[s[k][s]]][k][s]]][k]]]", 
        "k[s[s][s[k[k][s]][k[s][s]]]][k[k][s][k[k[s]]]][k[s][k][s[k[s]]]][s[k]\
[k[s][k[s[k[s][s]]][s[k]]][s[s]]]]", 
        "s[s[k]][s][s][s[k][k[k][k[s][s]][k[k[s]]]]][k[s][k][s[s[k][k[s[k][s]]\
]]]][s[k][s[s][s[s]]][s[k][s]]][s]", 
        "k[s[k]][s[s[s][s]]][s[k][k]][s[s][k[k]][s[s][k[k][s]][s[s][k[k]]]][k[\
s[k[k[s]][k]][s][s]]][s[s[s]][s]]]", 
        "k[k][s[k][k[k][s[s][k]]]][s[s[s][k[s][s[s]]]][s][k[s[s]][k]][s[s[k]]]\
[s[s[s[s[k]][k][k]][s[k]][k[s]]]]]", 
        "k[s][k][s[s][s[s]][k[s[s[s[k]]]][s[s]]][k[s][s[s]][s[k][k[s]]]][s[s]]\
][k[s[s]]][k[k[s]][k][s[s[s[k]]]]]", 
        "s[k][s[k][k[k][s]][s[k[s[k][s[s[s]][k[s]][s][k]]]][s[k[s]]][k[s][s]][\
s[s[s][s][s]][s[s][s]][s[k][k]]]]]", 
        "k[s][k[k]][s[s]][s][s[s][k[s]][s[k]][k][k[s[s[s[s]]][s[k[k]][s[k][k[\
s[s[s][s]]]]]]]]][s[k][k[k[s[k]]]]]", 
        "s[s[s][k[k][s]]][s[s][s[s]][s[s][k[s][s]]][k[s][k][s[k[s]][s][k][s]]]\
][k[s[s]][s[k][k[s]][k[k][s][s]]]]", 
        "s[s][s[s[s[s]][s][k[s][s[s[s]]]][s]][k[k][s][k[s][s]][k][s[k[k]][s[s]\
]]]][s[s[k]][k[s]][k[k[s][k[s]]]]]", 
        "s[s[k]][s[s][k]][k[k[s][s[k[s[k]]]]][k][s[k[s][s[s]]][k[k[s][s]]]]][\
s[s[k[s[s]][k]][k[s][s][s[s][k]]]]]", 
        "s[s[s][k][k][k][s[k[s[s]]][k[s]][s][s[k][k][s[k[s]]]]]][s[k][k[k[k]]]\
[k[s[s[k[s]]][s[s]]]]][k[k[s[s]]]]", 
        "s[s][k[k[k[s]][k[k]][s[k]]][k[k][s][s[k[s][k]]]][s]][s[s[s[s[s][k]]][\
s]]][s[k][k[s]][k[s[k]]][s[s][s]]]", 
        "s[s][s][s[k][k[s[s][s]][s][s][s[s][k]][s[s]][s[k][s[k][k[k]]][s[k]][\
k[k]]][k][s[k][k][k[k[k][s]]][k]]]]", 
        "s[s[k[s][s[k]][s][s[k]]][s[s][s]][s[s][s][s]][s[s][s[k]][s[k][k[s[k]]\
][k[s][k[k]]]]][k[k[s[s]]][s[k]]]]", 
        "s[s][k[k][s[k]]][s[s[s[s]]]][k[k[s[k[k]]][s]][s[s[k][s][s]][s[s]][s[\
s]]]][k[s][s[k[k[s]][k[s]][s][s]]]]", 
        "s[s][k[s[s[s]]][k[s[k]][s]][k[s[s]][s[s][k]]]][s[s][s[s]][k][s[s][k[\
s][s[s]][k[s]]][s[s][s[s][k[s]]]]]]", 
        "k[s][k[s][s]][s[k[s[s]]][k[k[s[k][k]]]]][s[k]][k[s][k][s[s]]][s[s[s[\
s[s]]]][s[k[k]][s]]][k[k[s][s[k]]]]", 
        "s[k][s[s[s]]][s[s[s][s][k][s[s]][k]][k[s][k]][s[s[s][s][s]]][s[k[s][\
s[s][s[k]][k]][k]][s[s[s][k]]]][s]]", 
        "s[s[s]][s[s[s[s]]][s]][k[k]][s[k[s[s[s]]][s[s[s]]]]][s[k]][k[k[s[s]]]\
[s][k[s]][k[s]]][k[s][s][k][s[k]]]", 
        "s[k[s][k][s]][s[k[k]][s][s[k][s[k]]][k]][s[k][k][s[s][s]][k[s][s[s]][\
s[k][k]][s[k[k[s]]][s[s[k]]][k]]]]", 
        "s[k][s][k[s][k[s]]][s[s][k[s[s]][k]][k[s][k][k][k[k]][k[s][k[k]][s[k]\
]]][k[s[s[s[s]]][k]][k[s[s][k]]]]]", 
        "s[s[s]][s[k[s]][s]][s[k][s[s][s][s[s[s]]]][s[s]]][k[s][k][k[s]][k[k[\
k[s[s]][k]]]][k[k[k][k][k[k][s]]]]]", 
        "s[s[s]][s[k][k[s][k][s[s][k[k]]]]][s[s[s][k[s]]][s[k]][k[s[k][s]]][s[\
s[s][k]][k[s]][s[k][s[s[s][k]]]]]]", 
        "s[s[s]][s[s[k]]][k[s[s][s[k]]][k[s[s][k][k[k]]][s[s]]][k[s[k][s[k]]][\
k[s][s[s][k[s[k]][k[k]]]][k[s]]]]]", 
        "k[s[k[k]]][s[s][s][s[k]]][s[s][s][k]][s[s[s][s]][s[s][k]][k[k[s][s[k]\
][s]][k[s][s[k]][s[s]]]][s[k[s]]]]", 
        "s[s[s]][s][k[s][k[s][s]][s[k[k]]][s[s]]][k[s][s][k[s][k[s][s][k[s][s]\
][k[s]]]][s[s[k]][s[k[k]][s[k]]]]]", 
        "k[s[s][s]][k][s[k[s[k]][k][s[s]][s]][k[s]]][s[s[s[s]]][s[k]][k[s[s]][\
k][s[k][k[k[k][k[s[k]]]]]]][s][k]]", 
        "s[s][k][s][k[k]][k][s][s[k[s]][k][k][k[s[k]][s]]][s[s[s[s[s]][s]]][s[\
k]]][s[k[s[s[s][k[k]]]][s[s]]][s]]", 
        "s[s][k][s[s[s][s[k][s][k[s]][s][k][s[s[s]]]]]][k[s[k]][s[k][k][s[k][\
k]]]][s[k][k[k][k[k[k][k][k[s]]]]]]", 
        "s[s][k[s[s][s]][s[s]]][s[k[k[s[s]]][k[s]][s[s[s]]]][s[s]]][s[s][s][k[\
s]][k][s[s[s[k]][s[s][k]]][k[s]]]]", 
        "k[s[s[s]][s[s][s][s][s[s[k[k]]][s[s][s]]]][k[s][s[k]][k[s[k][s]]]]][\
s[s][s[k][s][k[k[s][s]]]]][s[k[s]]]", 
        "k[s[s]][k][k][k[s[k[s][k]][k][s[s][s]][s]]][s[k][s[k[k[k[k[k[k]]]]]][\
s[s][s[s[k][k][s[s]]]][k[s][s]]]]]", 
        "k[s][k[s][k[k][s[s[s]][s]][k[k]]][s[s[k[s]][s]]]][s[s][k[k]][s[k][k]]\
[k[s][k][s[s][s[k]]][s[s][k[s]]]]]", 
        "k[s][s][s[s][s[k]]][k[k]][s[s][s][s[s]][s[s[s[k]]]]][s[k[s][k]][s[k[\
k[k]]][k[k[s[s][s]]]]]][k[k[k][s]]]", 
        "k[k][k[s][s][s][k[s[k[s]][s[k][s]][k[k[k]]]]][s[s[k]]]][s[s[s[s]]][s[\
s][k]][s[s]][s[k][k[s][s][s[k]]]]]", 
        "s[s[k[s]]][k[s[s][s][s[s]][k[k][s][s]]][k[s]][s[s][s[k[s][k]][k]]][s[\
s[k]][s][s[s[s]][s[k]]][s[k[s]]]]]", 
        "k[s][s[k][s]][s[s][s[s][s]][s][s][k[s[s]][k][k[k]]][s[s][k[k[s[k]][s[\
s[k]]]][s]]][s][s[s][s[s][k]][k]]]", 
        "s[k][s[s[s]][k[s[k]]]][s[s[s[s]]][k[s][k][s]][k[s[k]][k[s][k]][k[s]]]\
][s[s[k[k]]][s[s]]][k[s][k][s[s]]]", 
        "s[s][s][k[s][s][k[k[s[s]]][s[s][s[k][s][s]][k][s[s[s]][s]][s[k]]][k[\
s][s[s][k[k[k]]]]]]][s[s[k][s]][k]]", 
        "s[s][s][s[s[s][k]][k[s]]][k[s][k[s][k][k[k][k]]][s]][k[s[s[s]][k]][k[\
s][k][s]][s[k][k][s[s][s[k][s]]]]]", 
        "s[s[k[s][s]]][k[s[s[s]]][s[s[k]][k[k][s[k]]]][k]][k[s][k[s[k]]][s[k[\
s][k][s]][s[k][k[k]]]]][k[s][k[k]]]", 
        "k[s[s[s[k]]][s[s][s]]][k[s]][s[s][k][s][s][s[s][s][s[s][s]][s[s[s[k[\
s][k]][k]]][k][s[s[s]][k]][k[s]]]]]", 
        "s[s[s][k][k]][s[k][s]][s[s][k[k][k][k[s][k[k[s]][k[s]]][s[s]]][k[s]]]\
[s]][s[s[k][k]][k[s[s]]][k[k][k]]]", 
        "s[s[s][k[k]][s[s[k]]]][s[s]][s[k][k[k]][s[k][s[k]]][k[s[s][k[k[s][s[\
k]][s[k]]]][s[k[s[s]]]]]][k[k]]][s]", 
        "k[s[k[s]]][s[s]][s[s][s[k][s][s][k[k][s[s]]][k]][s[s[s]][s][s[k[s]][\
s[k]][k[k]]][s[s[s]]][s[s[k]][k]]]]", 
        "s[s][s[s[k]]][s[k[s][k]]][k[k[s][s]][k[s[k][k][k]][s[s[k]]][k][k]]][\
s[k[k][s][s][s[k][s[s[k]]]][s[k]]]]", 
        "s[k[s]][s[k]][s[k[k][s][s[k[s]]][s[s[s]]]][s][k[s[s][s[s][k][s[s][k][\
s[s]]]][k[s]]][k[s][s][k[s][s]]]]]", 
        "s[s[k][k[k]]][s[s[s][s]][s[k]]][s[k][s[s]]][s[s]][s[s][s]][s[k[s]][k[\
k]][s[s]][k[k][k][k[k[s]][k[k]]]]]", 
        "k[s][s[k][s[s[s]]][s[s]][k[s][s[s]]]][s[k][k[s]][k][s[s[s][s]][s[s]][\
s[s[s][s]]][k[k][k[s][k]][s[k]]]]]", 
        "k[s][k][s[s][k]][k[s][s[s][k[s][s[s]]][s[k[k][s]]][s[s]]]][s[s][k[k]]\
[k[s[s]][k][s[s[s]]][s[k[s]][k]]]]", 
        "s[k][k[k]][k[s][k][s]][k[k[s]][s][s]][k[s[s][s[s]]]][s[s][s][k[s[s[k]\
[k[k]]]][s[s]]]][k[k[s]][k[s][s]]]", 
        "s[s[s]][k[k[k[s][s[s][s]]]]][s[s[k[s][k]][s[k][k][s[s][s]]][s[s][s]][\
s]][s[s][s[k[s]]]]][k[k[s]][s[k]]]", 
        "k[s][k][s[s[s][s[k]]][k[s]][k]][s[s[s[k]][k[s]]][s[s][s]][s[s[s]][k[\
s[s]]]][k[s[s]][k][s]][s[s][k[s]]]]", 
        "s[k[s][s[k]]][k][s[s[k[s]][k[k[s[s][k]]][k[k][s][k[k]]]]][s[s][s[s]][\
s[s[s[s]][k]]][k[s][k]]][s[s][s]]]", 
        "s[s[k]][s][s[s[k]][k[s][s[s]]][s[s][s[s]][s][s[s[k][k]]][s][s[k[k[k[\
k[k]][k]]]][k][s]]][s[k][s][k[s]]]]", 
        "s[s][s][s[s[k[k]]]][s[k][k[k]]][k][s][s[s][s[s][s[s]]][k[k[s][s[s][s]\
]]][s[s][k[s]]][s[s][k[s]][k[s]]]]", 
        "k[s[s[k]]][s[k][s][k][s][k[k][s][k[s][s]]]][k[s[s][s][s[k][s[s][k][k]\
]][s[s[s]][s]][s]][s[s][k]][k[k]]]", 
        "k[s[s]][s[k]][s[k[k[s[s]][k[k[k]]][k]][k[s][s]][s[k[s][s][s]]]][s[s][\
k][k]][k[s[k]][k[k]][k[s][k[s]]]]]", 
        "s[s[k][k][s[s][s[k[k]][k]][s[s][s]]]][s[k][k[k][k[s]]]][s[s[s]][s[k][\
k][k[k[s]]][s[s[s]][k[k][k[k]]]]]]", 
        "k[s[s[s]][s]][s[k][k][k]][k[s[k][k]][k][s[k][s][s[s][s][s]][s[s][k[s[\
k[k]]]]]]][k[s[s[k[s]]]][s[k][s]]]", 
        "s[k][s[k[s[k][s[s]]]]][s[k[k]]][s[s][s][s[k][k]][s[k[s]][k[s][k]][s[\
s]]][s[s][k][k[s][s[s][k]]][s][k]]]", 
        "k[s[s]][s][s[s]][s[k[k][k][k[s][s[k[s]]]][s]]][s[s]][k[s[k[s[s[k]]]]]\
[k[k[k]][k[k[k]][s[s]][s[k]]][s]]]", 
        "s[s][k[s[s]][k][s[s][k[s]][s[s][k[k[k][s]]][s]][s[s][k]]]][s[s[k][s]]\
[s[s[k]][k[s][s][s[s]]][k[k]]]][s]", 
        "s[s[s]][k[s][k][s[s][s[s]]]][k[s][s][k[s]][k[k[s]][k[k][s[k]][k]]]][\
s[k][s[k][s][s[s[k]]]]][s[s][s][s]]", 
        "k[s[s[s][s]]][k][s][s[s]][k[k][s[k[s]]][s][k[s][s[k[k]]][s[s[k[k][k[\
k]]]]]][k[k][k[s]][s[k[s[k]]][k]]]]", 
        "s[s][s[k[s][k]][s[k[s]][s[k]][k[k][s]][s[s][s[s][k]]][s]]][s[s[s[s[s]\
[s]]]]][s[s[k[s][s[s]]][k[s[s][s]]]]][s[k]][s[k]]", 
        "s[s][k][k][s[s]][k[s][s[s][s]][s[k][s[k]]]][s[s[s]][s[k[s][s]][s[s]]]\
][k[s[s[k]][s[s]]][k[s[k]][s[s]]][k[s[k]]][s[s]]]", 
        "s[s][s[s][k[s[s][s]]]][s[s[s[s]]][s][s][s[s[k][s[s][s]]]]][s][s][k[k]\
[s][k[k[s[k][k[s]]]][s[k][k]]][k[s[s]][k][k[k]]]]", 
        "s[s][s[s[k][s[k][k]]]][s[s][s][k[k][s[s]][s[s][s]][k[s[s]][k[k][s]]]]\
][k[s]][s[k[s]][s[s[s][s]][k[k[k][k]]]][s[k[s]]]]", 
        "k[s][s][k[k[s]]][s[k][k[k]]][k[s]][s][s[k][s]][s[k][s][k][s][s[s][s[\
k]][k][k[s][s]]][s[k[k[k][k][k][k]]]]][k[s][s][s]]", 
        "k[s][k[k][k][s[s]][s][k[k[k]]][k[k]]][s[s]][s[s][s][s]][k[s[k]][s[s][\
s[k[s]]]][k[s[k[k][s]][k[s]][s[k]]]]][k[s[s]][s]]", 
        "k[s][s[k][k]][s[s][s[k[s]][k]][k[s[s]][k[s[s]]][s]][s[s][s][k]]][s[s]\
[k[k[s[k][s][k]][s]]]][k[s[k][s]][s[s]][s[s[s]]]]", 
        "s[s[s[s][s]]][s][s[k][k]][k][s[k[s]][k][s[k][k[s][s[k]]][s[k][k[k]][\
s]]][s[s][s[k]][s[s[k[k]]][k][k]][k[s[k[s]][k]]]]]", 
        "s[s[k][s[s]]][s[s[k]]][k[k[s][s]][s][s[s][k[k][s][k][k[s][s]]]][k[s][\
s[k]]]][s[k[k]][s[s[k][k][s]]][k[s][k[s[s[k]]]]]]", 
        "s[k[s]][s[s]][s][s[k][s[s][s[s][k[k]]]][s[k][s][k][k][k[s]][k[s][k[k]\
][k[k]]]]][s[s][k[k][s][k[s[k[k][s][s[s]]]]][s]]]", 
        "s[k][s[s]][s[k[s]]][k[s[s[k][k]]][s[s]][s[k]][s[s[s][s]][s[s]][k[s][\
s][k[s][s]][k[k[s][k]]]]][k][s[s][k][k][s][s][s]]]", 
        "k[s][k[k][k[k][k[k]]][k[k]]][s[s][k][k[s][k[s[k]][k]]][s]][s[s[s][s[\
s[s]][s]][s[s]][s[k][k[s[s]]]]]][s[k]][k[s][s[s]]]", 
        "s[k[s][k]][s[s]][k[k[s[s]][s][k[s][s[s][k][s]]][s[s]][k]][s[k]]][s[k[\
s][k[s]]]][s[k[s[k][k]]][s][s[k]][s[k][k]][s[s]]]", 
        "s[k][s][s][k[s][k[s]][s]][s[k][s[k]][k[s][s[k][k[s][k]]]]][s[k][s[k]]\
[s[s[s[s][s]]][s][s[s][k[s][s[k][k[k]]]]]][k[s]]]", 
        "s[k[s]][s[s][k[k]][k[s[k]]][k]][k[s[k[s]][s[s][k]]]][k[s][s][s][k][s[\
s[s][k]]]][k[s[s][k][k[k][k[s]]]][k[s[s]][s[s]]]]", 
        "k[s][s[s[s]]][s[k][k][k[s][s[k]]]][s[k][s][s]][k[s][s[s]][s[s[s][s[k]\
[s[s]]]]][s[s[s]]][s[k[s][s[s]][s[k]]][s[k[k]]]]]", 
        "s[s[s[s]]][s[s][s]][s[s[s][s[s][s[k]]]][s[s[s]]]][k[k[k]]][k[k[k[k[k[\
s][s]][k[s]]]]][k][k[s[s[s]]][k[s[k]]][k[k][s]]]]", 
        "s[s][s[k[s]][s[s[s]]][s[k]]][k[s][k]][s[s]][s[s[s]]][k[k][s][k][s][s[\
k][s][k]]][k[k][k]][k[s][s[s][k]][s][k[k[s]]][k]]", 
        "k[s][k[k]][s[k]][k[k][s[s]][s[k][s]][s[s][s]]][s[s][s[s[s][k]][k[s][\
s[s]]]]][s[s][s[s][s[s]][k[s]]]][s[s[k][k[k]][k]]]", 
        "s[s[s[s][k][s[s[k]][s]][s[s[s]]]][s][s[k[s][s[k]]][s[s]]][k[s]][s[s[\
k[s]]]]][k[s[s[k]]][k][k]][s[s][k][k[s]][s[s]][s]]", 
        "s[k][s][s[s][k[k[k]][k]][k[k][s[k][s][s]][s[s][k][s][s]][k[k][k][k[k]\
[s[s]]]][s[s][s]][k[s[s][s[s]]][s[s[k[s]]][k]]]]]", 
        "k[k][k[s]][s][k[s]][s[k[s][s][s[s[s[k]]]][s[s][k]]][k][k[k][s[s]][s[\
s][s]][s[s][s[k]][s[s][s]][k[s[s][s[s[k]]]]][s]]]]", 
        "k[s[s][k[s][k][s[k[k][s][k]]][k][k[s][k][s]]][s[s[s[k][s]]][s[s]]]][\
s[k[k]]][s[k[s][k[s[k[s]]]][k[s[s][s[k]]][s[k]]]]]", 
        "s[s[s][k[s[s]]]][s][s[s][s]][k][k[k]][k[s[s[s]][s[k][k][s[s][k][s[k[\
s]]]]][s[s][k[s][s[s]]][k[s[s]]]][k]]][s[s[s]][k]]", 
        "k[s[s[s][k][s[s]]]][s][s[s[s]][k[s]][k[s]]][s[s[s[k]]]][s[k[s[s]]][s[\
s]][s[k[s]]][s[s][k[k[k]]][k[s[k][s][k[s]][s]]]]]", 
        "s[k][k[s[s][k][s[s[k[k]]][s[s]][s[s][s[k]][s[s][s[s]]][s[s]]][s[s][s]\
[s[s][s][s]]]][k[k][s[s[k]][s[k][s][s[k]]]]]][k]]", 
        "k[s[s[s[s]]]][s[s]][s[s][s][s[s]][s][k[s][s]][k[s][k][k[k][s[k]][s[s]\
]]]][s[k[s]][k]][s[k[k]][k][s][s[k]][s[s[s][k]]]]", 
        "s[s[s][s]][k[s]][s[s[s][k]]][s[s[s]][s[s[k]]][k[s][k[s][s]][k[s][s][\
k[k[k][s]]]]][k[k[s[k]][k[k[s]]][k[k]][s][k[k]]]]]", 
        "k[s][s[k]][k][k[s]][s[s][s][s]][s[s]][k[s[k[k][s]][k[s[k][s[k]]]]][s]\
[s[s][s[k]]]][s[k[s][k]][k][s[k][k[k[s]]]][k[s]]]", 
        "s[k[s]][s[s][k]][k][k[k][s]][k[s[s]][s[k][s[s[k]]]][s[s][s]]][k[s][k[\
k[s[k]][s]]]][k[s][s[k[k][s[k[s]][k[k][s][k]]]]]]", 
        "s[s][s][k[s[k][k]]][s[s][s[s]][k[s][k]][s[s][s]][s[s][k][s[k][k[k[s]]\
][s]][s[s[k]][k][s[k][k]][k[s][s[s][k[k][k]]]]]]]", 
        "k[k][s[k]][s[s][s]][s][s[k][k][k[k][k[k]][s]][s[s[k]][k][k[s]][k[k]]]\
[s[k]]][k[s[s][k][k[s][k][s[s][k]]][s[k][s]][s]]]", 
        "k[s[s]][k[k]][s[s[s][k[s]]][s][s[s][s]][s[s][k[s]][s[k][k][s][s[k][s]\
]]][s[k][s[s]][s]][s[s[s[s]][k[s[k]]]]][k[k][s]]]", 
        "k[s][k][k[s]][k[s][k[s[s]]]][k[k][k]][k[k[s][k[k]]][s][s[k][s[s[k]][\
s[k[k][s]]][k[s]]][s]]][s[k[k]]][s[s][s]][s[s][s]]", 
        "s[s][k[k]][k[s[s][s][s[s][s]]][k]][s[s]][k[k[k[k][s]]][k]][s[k][k][k]\
[k[s[s]]][k][k]][s[s][s]][k[k][s[k][s][k[k]][s]]]", 
        "k[s[k[s]][s][s[s[s]]][k[k[k[s][s]]]][s[s]]][s[s][s][k[s[k]][k][s[s][\
k]]]][k[k[s]][s[s]][s][s][s[s][s]]][k[s[s[s]]][s]]", 
        "s[k[s[s][k]]][k[s][k][s[s][k]][s][s[s[k][s]][s][s][k[k[k[s[s]]]][s[k[\
k]]][s[k][k[k[s]][s[s]][k[k[k[k]]][k[s][k]]]]]]]]", 
        "k[s[s]][k[s][k[k]][s]][s[s[s]][s[k[s]][s][k]][k[s]]][s[s][s][k[s]][s]\
[s][s[s][s]][k[s][k[s]][k[k]]]][s[k][s[s]]][s[s]]", 
        "k[k][s[s[k[s]]][s[s]]][s[s[s]][s][s][k[s[s[k][s[k]]]]]][k[s][s[s[s]][\
k][s[k[s]]]]][s[k][k[s][s][k[s][k[s[s[s]][k]]]]]]", 
        "k[s][k[k][s]][k][s[k[k[s]]]][s[k][s[k]][s[k][k[s[k][s]]]]][s[s[s[s]]]\
[s[s]][k[s][k[s][k]][s[s]]]][k[s[s][s]][s[k][s]]]", 
        "k[s[k]][k[k]][s][s[s[k][k]][k[k][s][k[k[k]][s]][k[k]]]][s[k]][s[s][k[\
s[s]][k[k[k]]]][s[k][s[k]]][s[s][s[k[s]][k]]][s]]", 
        "k[s][k][s[s[s[k]]][s[s]][k[s]]][k[s[s][k[s]]][k]][s[s[s][k[k[k][s]]]]\
[s[k][k[s]]][s[k[s]][s]][s]][s[s][s[s][s]][k[s]]]", 
        "s[s[s][s[s]][s][s[k]]][k[s][k[s]][s[s][k]]][s[s][s]][k[k][k][k][s[k][\
s][k[k]][k[k]]][s[s[s]][s[s]][s[s[s]][s]]]][k[s]]", 
        "s[s][s[k]][s][k[s[s]][s]][k[s][k[s[k]]][k]][k[k[s[s]][s][s]]][s[s]][\
s[k][s[s[s[k]]]]][k[k][s][s[k][k][k]][s][k[k[s]]]]", 
        "s[s[s]][k[s][s[k]][s[s][k]][s[k[k][k][s[s][k]][s][s[k][k][s][k[k]][s[\
s][k][s[s]]][k[k]]][s]]][s[s][s[s][k[s][s[s]]]]]]", 
        "s[s[k][s[k][k[s]][s]]][s[s][k[k[k[k]][k]]]][k[s[s]][s[k[k][k[s][s[s]]\
[s]]][s][k[k[s]]]][s[s[s]]]][k[s][s[s]][s[s[s]]]]", 
        "s[s[s][k][s]][k[k][k][s][k[s[s]]]][k[s][k][s[s[k]]][s[k]]][k[s][k[k[\
s]][s[s[s]][s[s][s][k[s]][k[s[s[k]][s][k[k]]]]]]]]", 
        "k[k[s][k[s]][s]][s][s[s[s]][s[s]][s[s][k]]][s[s][s[k][k][k]]][s[s][s[\
k[s]][s[s]][k][k[s]]][k[s[k]]][k[k][s[k[k][s]]]]]", 
        "k[s][s][s][s[k][k]][k[k][s[k]][s[s][s]][s[s[s]][k[k]][k[s][s][s][s[k]\
][k][k[s][s][s[s[s]]][k]]]][s[s[k][k]]][s[k[k]]]]", 
        "k[s[k[s[s]][s]]][s[s][s[k]]][s[s][k[s][k[s][s[s[s]]]]][s[s[s[k]]]][s[\
k[k]]][k]][k[s][k[k]][k[s][k][k[k]][k[s][k]]]][k]", 
        "s[s[k[k]]][s[k]][s][k[k][k[s][s]][k[s[k]]]][s][s[s[s][k]][s][k[k][s[\
k[k]]][s[k][k][k][s][k[k][s]][s]][k[s[k]]]][s[k]]]", 
        "s[s[s]][k[s][s]][s[s][k[s]][s[s]]][k[k[s][k][k[s[s][s][s[k[k[k][s]][\
s]][k[s[k[k]][k[s[s]]]]]]][k[s[s]][s[s][s][k]]]]]]", 
        "s[s][k[s][s[s[s]]][s[k]][k[k[s]][k][k[s[k]]]]][k[s[s][k]][k][s[s]][k]\
][k[k[s[k][k[k[s]]]]][s][k[s[s]][k[k]]][s[s[k]]]]", 
        "k[s[s[k]][s[s[s]][s]]][k[k[s]][k[k[s[s]]][s[s[s][s]][s[k]]][s][k[k[s]\
]]]][s[s[k]][s[k[s][k[k]]][s]]][k[s][s[s]][k[k]]]", 
        "s[s[s]][s[k[s]]][s][k[s][s]][k[k[s][k]][s][s[k][k][s][s]]][s[s[k[k]]]\
[s][k][k[s[k]]][s]][k[s][k][s[s]][s][k]][k[s][s]]", 
        "s[s[k[k]]][k][s[k][k][s[s[s]][s[s]]]][k[k][k[s][s[s[s]]][k]][s]][k[s]\
[s[s]]][s[s][k[k][k[k][s[k][k[k]][k[s][k[s]]]]]]]", 
        "s[k][k[k][s[s]]][s][k[k[s][k[k]]][k[k]]][s[s][s][k[s][s][s][k[k][s][\
s[s][s]][k]]][s]][s[k][s][s[s][s[k]][s][k[s][k]]]]", 
        "s[s[s][s[s[s]]]][s][k[k][s][s][s[k[s][s]]][s][s]][s[s][s[s][k][s[s][\
s][s[k]]][k[k]][k[k[s[k[s]][s[s[k]]]]][s[k][k]]]]]", 
        "s[k][s[k][k][s[k]][s[k[s]][k[s]]]][s[s][k[s][k[k[k][s][k]]]][s[s[k][\
s][s[s]][k[s[k]]]]][k[s][k[k[k[s]]]][s[s][k[k]]]]]", 
        "s[s][k][s][k[s]][s[s]][s][s[s[s][s[s][s][s]][k][s[k]]][s[k][s][k[s][\
s]]]][s[s][k[k][k[s][s]]]][s[s[k[k]]][k[s][s][s]]]", 
        "k[s[s[s][s]][k][s[s][s[s][s][s]]]][s[k]][s[s][s[k[s][k]][s[k]]]][s[s]\
[s]][s[s][k[s][k]]][s[k[k[s]][k][k[k]][k][s[k]]]]", 
        "k[k][k[s]][k[s[s[s[k]][s[k]]]][s][k[s[s]][s[s[k][s]]]][k[k][k[s[k]]]]\
[k[k[s[s]][s]][s][s]][k[s[s]][k][s[k][s][k][k]]]]", 
        "s[s[s]][k[s[s]]][k[s[s]]][s[k][k[s]][s[s][k][k[k][s[s]]]]][s[k][k][s[\
s[s]][s][s[k]]][k[s][s[k]][k[k][k]][k[k][s[s]]]]]", 
        "s[s[s][k[s[s]]]][s[s]][k][k[k][s]][s[s[k]][s[s][s[s][s]][k[k][k[k[k][\
s][k[k][s[k]]]]][s[s][k]]][s][s[k[k][s[s]]][k]]]]", 
        "k[s][k][s[s[s]]][k[k][k[s]][s][s[s]][s[s]]][s[s[k]][k][s[k[s][s]]][k[\
k][s[k]][k][k][k[k][k]][k]][s]][k[s[k][s]][k[s]]]", 
        "s[s][s[s]][s[s]][s[s]][k[s[s]][k[s[k[s]]][s[k[k]][k][s[k]]]]][k[k[k]]\
[s[s]]][s[s][s[s][s]][k[s[s]][k[k]][k[k[s]]]][k]]", 
        "s[k][s][s[s]][k[k]][s][k[k[s][k[k]][s][k][s[k[s][s[k][k][s[k]]]][s]]]\
[s][s[s]]][k[k[s]][s[s[k][k[s]]]][s[k][k[s[s]]]]]", 
        "s[k][s][s[s][k]][s[s[k][s]][s[s][s][k[s][s][s[k[s]]]][s[s[s][k][k]][\
s[s[k][k][k][k][k]]]]]][s[k[s[k]]][s[k[s][k]]]][k]", 
        "s[s][s][s[s[s][k][s[s[s]]]][k[s]][s[s][s]]][s[s[k]][k]][k[s[s]]][s[s[\
s]][k][k[s]]][k[s][s[k]][s[s[s][k]][k[k][s[s]]]]]", 
        "s[s][k[k]][k[s[k][s]][k[k]][s[s[s[s]]]]][s[s][k[s[s]]][s[k][s][k]][s[\
k][k][k[s][k[s]][s][s[s][k]]][s[k][s][s]]]][s[s]]", 
        "k[k][s[k]][s][k[s[s[s]]][k[k[k[k][k]]][k]]][s[s[s[s][k]][s]][k[s][k[\
s]]][s][s[s]]][k[s][k][s[s[s]]][s]][s[k][k[k[k]]]]", 
        "k[s][s[s]][s[s]][k[s[s[s][k]]][k[k[s][k[s]]][s[s][k[s]]]]][k][s[k[s[\
k][k[k][k]]]]][s[s][s][k[s][s][s]][k[s][k[k[k]]]]]", 
        "k[s[k]][k][k[k][k]][s[s][k][s[s]][s][k]][k[s[s[k]][s[s]]][k][s[k][k]]\
[k[s][s]]][k[s[k][k][s][k[s][s][k]]][k[k[s[s]]]]]", 
        "s[k][k[k[k]][s[k[s][k][s]]]][s[k[s]][s[s[s]]][s[s][k][s]][s][k]][s[k]\
[k][s[s][s][s[s[s][s]]]][s[k[s[k[s]]]]][s[s[s]]]]", 
        "s[s[s][s[k]]][s[s][k]][k[k][s[s]][k][k[k][s[s][k[k]]]][k[s[s]][k]][s[\
s[s[k][k]]]][s[k]]][s[s][k[s][k]][s[k][s][s[s]]]]", 
        "s[s][s][s][s][s][s][s[s][s][s][s[s[s][s[k][s[s]][s[s[k][k]]]]]]][k[k]\
[k[k]][k[s[k]][s][s]][s[k][s[s[k[k]][s]]][s[s]]]]", 
        "k[k][k[k]][s[s[s][k][s]][k][s[s[s][s]]][s[k][s[k]][s][s][k][k]][k[s][\
k[k]][s][s][s[s][k[s[s[k]]]][k[k][k]][k[s][k]]]]]", 
        "k[s][k][s[s][s]][s[k[s][s[s]]][k[s][s[s]][s]][k[k]]][s[k][k][k[s[s[k]\
][s][k[s][s][s[s]]][s]]][s[k][s][s]]][k[k][s[k]]]", 
        "s[k[s][s[k]][s[s[s[s]][k]][k]][k]][s[s[s][s]][s[s][k]][k[s[s]][k[s[k]\
[s[s]][k[k]]]][s[k][s]][k[s][s[s]][k[s][s[s]]]]]]", 
        "s[k[s]][s[s][k[s[s[k]]]][k]][k[s]][k[s]][s][k[s][k][s[s]][s[k[k]][k]]\
][k[s][k][s[s[s]][s[s][k]]]][k[k[s[k]]][s[s[s]]]]", 
        "k[k][s[s]][s[s][s[s]][s][s[k[s]][s]][s[s[s][s[k]]]][s[s][s[k][k][s[s]\
[s]]][s[k][s[s[s[s]]]]][k[k][k[s]][k[s][s[k]]]]]]", 
        "s[k[s][s[k[s]]]][s][s[s][s[s]]][s[k][k[k][s][k[s][s[k][k]][s[s]]][k[\
s][k][s][k[s[s]]]][k[s][s][s[k]][s]]][s[s][k[s]]]]", 
        "s[s[s]][s][s[k[s][k]][s]][k[k][k[k]][k[s[s]][k]][k[s][k[k[k]]][k[s]][\
s[s[k][s]][s]][k[s[s[s]]][s[s][k][s[s]][k[s]]]]]]", 
        "s[s][s[k[k]]][k[s[s][k][s][s[s][k[s][s]]]][k[s[k]]][s[s[s][s]][s][k[\
s]]]][s[k[s[k[k]]]][k[k]][k[s]]][k[k[k[s]][s[s]]]]", 
        "s[k[s][s][s[k[s]]][k[k]]][s][s[s[s[k][k[k[s]]]]][s[s][k[k[k[s[s]]][s]\
][s[k][k]]]][k[s[k][s[k]]][k][k[s[s]][s[k][k]]]]]", 
        "s[s][s][s][s[s]][s[s][k[k]][k[k][s[k]][k]]][s[s][k[s[k][k[k]]][k][k[\
k]][k[s][k][s[s]][k[s]]]]][s[s[s][s]]][s[k[s]][s]]", 
        "k[s[s][s]][k[k[k]][s]][s[s[s]][s]][s[s[s]][s[k][k[s]]][k[s]]][s[s][s[\
k[s][k]]][s[s][k]][k[s][s]][k[k]]][s[k]][s[s][s]]", 
        "s[s][k[s[s[k[k][s]][s]][s]][k[s[k]]][k[s][k][s][k][k[s][k][s][k[s[k]]\
[s[k]][s][s[s][s]][s[k[s]]]]]][s[k][s[s[k]]][k]]]", 
        "s[s[s]][s[s[s][k][s]][s[k[s][s[s[s]]]]]][k[k][k[k]][s[s]][k[s[s]][s[\
s]]][k[k][k]][s[k[s]][k[s][s[k]][k[s][s]]][k[k]]]]", 
        "k[k[s[s[s]]][s][s][s]][k][s[s[k]][k[s][s]][s]][k[k[k[s][k[s]]]][k[s][\
k[s]][k]][k[s]]][s[k][s[k[k]]][k[s]][k[k][k]][k]]", 
        "s[s][s[s[k[k][k][k]]][s]][s][s[s][s[k][s[k][s][k[s][k[s]]]]]][k[k][k]\
[s[s][s[s]][k]][k[s[k][k[k]][s[s]]]][s[s][s][s]]]", 
        "k[s[k][s][k]][k][s[s[s[k]][s][s[k[s][k][k]]]][s[k][s][s[s][k[s[k]][k[\
s[s]]]]][s[s][s[s]]]][s[k][k[s]][s][s[k[k][k]]]]]", 
        "k[s[s[s][k]][s[k]]][k[k]][s[k[s][s]][s][s[k[s]][k][s[s][k[s[k[k[s[k][\
k]]][s]]]]]][s]][s[k[s[k]]][k[s][k[s]][s[k]]]][s]", 
        "k[s][k[s]][s][s[k]][s[k[s]][k[k[k]]][s[s]][s[s[s[s]]]][k[s[k[s]]]][k[\
s[s[k]][k][k][s[k][k]]][k]]][s[s]][s[s[s][s[s]]]]", 
        "s[s[k][k[s][s[s[s]]][s[k]][s]][s[s[s]][s[s]][s[k][k[s][k[k]][k][s[s][\
k]]][s[s[k][k[s]]][k[k][k[s][s]][s[s]][s][s]]]]]]", 
        "s[k][s[k[k][k[k]]][s][k[s]]][k[s[s]][k][s[k[s[s]]]]][s[s]][k[s][s[k][\
s][s[k][s]]][k[s][k[k][s]]]][s[k][k[s][k[k][s]]]]", 
        "s[k[k]][s][k[s]][k[k]][s][s[k][k]][k[s][s[k][k]]][s[s][k[k[s]][k[s[k]\
[k[s]][k][s[k]]]]]][s[k[s][s[s]]][k[s]][s[s]][s]]", 
        "s[k[s]][s[k[k][s][k[s]][s[k[k][k]]]]][s[k][s[s[s]][k[k[k]][s[k[s[k]]]\
]]]][s[s][s[s]][s[s][k[k]]][s[s][k[k][k][k]][s]]]", 
        "s[s[k[k][k][k][k[s[s]][s[k]]]]][s[s][s[k[k]]][s[k][s][s][k[s][s][s]]]\
][s[s[s][s]][k[k[k[s][s]][s][k[s]][k[s[s[k]]]]]]]", 
        "s[s][s[s][k][s[s[s]]][s[s[s[k[s][k]][s][s[k]]][s[k]]][k[k[s[s]]][s]]]\
[s[k[s][k[k[k]]][s]][s[k[s]][k[k][s[k]]][k]][s]]]", 
        "k[k][k][k[s[k][s[s[s][k]]]][s][s[k]][k[s][k[s][k][s[k[s][k]][k[s][s]]\
]][s[s[s][s]][k[s]][s[s]][s[k[s]][s]][s][s[s]]]]]", 
        "s[k][k][s[s]][k[s]][k[s][s[k[k][k[k[k]][s[s]]]]][s[k]]][s[s[s[k[s[s[\
s]]]]][s[s]]]][s[k[k]][s[s][k[k][s][k[k[s[k]]]]]]]", 
        "k[s[s]][s][s[s[s[s]]][s[s][k][s]]][s[s][k[s[s[s][k][s[s[s]][s]][k[k]]\
]]][s[k][s[s[s[k]]][k][k]][s[s]]][s[s][k][s][k]]]", 
        "s[k[s]][k[s][s][s[k[s[s[s]]]][s][s]][s[s]]][k[s][k[k]][s][s][k[k][k[\
s[s]][s]][k[s][k][k[s[s]][k][k[s]]][s[s][k[s]]]]]]", 
        "s[s][s][k[k][s[k[k][k]]][s[s[k[k[s]][s[k][k][s]][s[s]]]][s[k][s][s[k[\
k]][k][s][s][k[k]]]][s[k][k]]]][s[s][s][s[k]][k]]", 
        "s[s][k[s][k]][s[s[s]]][s[s][s[s]][s[k][k]][k[s][s[s]][k[s[s][k[k][s]]\
[s[s]]][k[k[s[s]]][k[k][k]]]][k[s[k][s]]]][s[s]]]", 
        "s[k[s]][s[s][s[s]][k[k[k][s[k]]][s[s]]][k[k[s]]]][s[k[s]][k]][s[k[s[\
s]][s[k][k]]][s][s[s][k][s[s]][s[s]]][k[s[s]][s]]]", 
        "s[k][s[s][k][k[s[s][s]][s[s[k[k]]]][s[s[s]][s[k[s[s]]]]]][s[k]][k[s][\
s[s]][s[s]][s[k[k[s]]]]][k[s[k]]][k[s[k[k[s]]]]]]", 
        "k[s][k[k]][k[s][s]][s[s]][k[s[s]][s[s]][k[s][k[k][k]]]][k[k][k[k]][s[\
s[s]]][k[s][k[k[s[s]][k][s[s][k]]]]][s[s]]][k[k]]", 
        "s[k][s][k[s][k]][s[k[s][s][k]][k[s][k[k]][s][s]][k[s[s]]][s[k[k][k[s[\
k]]]]]][k[s][s[s[k][s]]]][s[s[k][s]]][k[k[k[k]]]]", 
        "s[s[s][s[k][k[k[s]][s[k]]]]][s[s[s]][k[s][k[k[s][s][k]][k[s][k][s[s][\
k][s[k][k][s][k[k[k]]][k[s]]]]]]][k[s][s]]][s[s]]", 
        "s[s[s]][s[s[k][k[s]][s[k][s]]]][s[s]][s[s][s[k][s[k]]][s[k][k][s[s]]]\
[k[k][k[s][k[k][s]]]][s[k][s][s[s][k[s]][s]]][k[s][s][k[s][k]]]]", 
        "k[s][k][k[s[s][s]]][s[k]][k][s[k][k[k]][k[s][k][k[k][k[s]][k]][s[s][\
k[s][k]][s[s][k[s]]][s[s[s[s]]][s[k[k]][s[k][s[k][k[k[k]]]]]]]]]]", 
        "k[s][k[s]][s[s][k[s]][s[s][s[s]][k[k]][s][s[k[k]]]][s[s][s]][k[s][k[\
s[k]][k[k]]][k[s][s]]][k[k][k[s[k]]][k[s[k[s][s]][k]][k[k][s]]]]]", 
        "s[s[s][k[s]]][s][k[s]][k[s][s[s][k[s]]][k[s[s][s[k][k]]][k[s][s[s[k]]\
][k[s]]]][k[s[s]]]][s[s]][s[k][s[s[s][k]]]][s[s[k[s]][k][k][k]]]", 
        "s[k[s][s[s]]][k[k][k[s]][k][s[s][k]]][k[s][s[s[s]]][s]][s][s[s][k[s[\
s][s][s[s[k[k[s]]][k]]][s[s[s]]][k[s]]]]][k[k[k]][s][s][k[s][s]]]", 
        "s[s][s][s[s]][s[s][k[s[s][s[k]]][s]][s[s[s][k]][s[k[k][k][s[s]]]][s[\
s][k]]]][s[s[s[k]]][s[k]][k][k]][k[s][k[k][k][k[k]]][s[k]][k[k]]]", 
        "k[s][s][k[s[s]][k]][s[s[s]]][k[k][k[s][k[s]]][s[s[s][s[s]]]][s[k[k]][\
s][s]][k[k[s[s[s]][s[s][s[k]]][s][s[s][s[s]]][k]][s[k[s]][s]]]]]", 
        "s[k[k[s]][s[s[s]][k][k]][k]][s[s][k]][s[s[s][k][s[s][s]]][s][k[s[k]][\
s[k]][k[k][k]]][s[s[k[s][s[k]][s]]][s[k[k]][s][k[s]][k][s][s]]]]", 
        "k[s[s][k]][s[k[s][k]]][s[s][s[k]]][s[k[s][k]][k[k[s]][s][s][k][k[k]]]\
][s[k[s]][s][s[s[k]]][k[s[s]][k]]][k[s[k[s][s[s][s]][k[s][s]]]]]", 
        "k[k[s[k][k[s]][s]]][k[s][k]][s][k[k][s[s][k[s][s]]][s[k][s][s[s][s][\
s[s]]][s[s]][s[k[s[s]]][s]][s[k][k][k[s]]][k[k[k]][k[s[s]][s]]]]]", 
        "s[k[s]][s[s[s][s]][k[s[s][s][s]][k[k][k[s[k[k][s]]]][s[s[s]]]][s[s][\
k[s][s]]]]][s[s][s[k][s][s[s]]][s[s[k][k]]][s[s[s]][s[s][k]][k]]]", 
        "k[s][s[s][s]][s[s][s[k]][s[s[s]][s][s[k]][s[s[s][k]]]]][s[s[s]][k][s[\
s][k[s][k[s][k][k[k]][k]]]]][s[k[k][k[k]]][s[k]]][k[s][s][k[k]]]", 
        "s[k[k]][s[s[s]][s[s[k][s[k]]]]][k[k]][s[s[k[s]]]][k[s][k[s[s]]][k[k[\
s]]][k]][s[s][s[s][k[s]][s[s[k][k]][s]][s[s][k[s[k]][k][k[k]]]]]]", 
        "s[s][s][k[s][k][s]][s[k][s[k[s]]][s[s][s[k]]][k[k][s[k][k[k[s]]][k]]]\
][k[s[k][s[k][s[s]][s[k[s]][k[k]]][s]]][k[s][s][k[k][k]][k[s]]]]", 
        "k[k[s][s]][s][s[s[s][k[s]][s[k]][s[s]][s[s[s][s][k[k]][s][s]][k]]][k[\
k[k]][s][k[k[k]]]]][k[k][k[s[s]][s]]][s[k][k][s[s][k][s[k][s]]]]", 
        "s[s][s[k[s][k][k]]][k[s[s][s][s[s]]][k][k[s[s]]]][k[k][k[k][k]][s[k][\
k[k[k]]][s[s]][s[k][k]][s[s][s[k]][k][k[k[s]]]][k]][s[s][s[k]]]]", 
        "s[k][k[s]][s[k][s[k]][k]][s[s[s[k[s]]]][s[k[k][k[s[k]]][s[s]]][s[s][\
k][s[s][k[k]]][s[s[s][k[s][k[s]]]][s[s][s[s]][k]][k[s[s]][s]]]]]]", 
        "s[s][s][k[k[s][s[s[s]][k[k]][s[s[k]]][k[s]]][k[k]]]][s[s[k[k]]][s]][\
s[s[s[s][k[s]][s[s]]]][s[k[s][k[s][s[s]]][k[k]]]][s[k][k[s[k]]]]]", 
        "k[s[k][k][s][k[k[s]][k][s[s]][s][k[k[s]]][s[s[s]]]][s][k[k[s][s]][k][\
s[k][s][s][s[k[s]]][k[k][k[s][s]][s[s[k[s]]][k[k[s]]]]]][k[s]]]]", 
        "s[k][s[k][s[k[k[k[s]]]][s[s[s[k]]]]][s[s[s][k]]][s[k]][s[k[s][s][s]][\
s[s[s[s[s]]]]][k[s[s]][k[k[k]]]]][k[s[k]][s[k[k]][k[s[s]][s]]]]]", 
        "k[s][s][s[s[k][k]][s[s][s[k[k][k][s[s]]][s[s]]][k[s][s][s[s][k]][s]]]\
[s[k][s][s[s][s[s[s]]]][s[s[k]]]]][s[k[s][s][s[s][s]][k[s][s]]]]", 
        "s[s[k]][s[k[k]]][s[s[k][k]][s[k][s[k]]][s]][s[k[s]][k][s[s[s][k]][k][\
s[k[s][s][k[s][s][s]][k[s]]]][k[s][s[k][s][s[s[k]]]]]]][s[k]][k]", 
        "k[k[s][k]][s[s][k]][s[s[k][k]][k[s]]][k[k][k][k]][k[s[k[s][k]]][k[k]]\
[s[k]][k[s[s[s[s][k][k]]][s[s[s]]][k[s][s[s[k][k[s[k]]]][s]]]]]]", 
        "s[k][k][s[k[s][s]][k[k[s]][s[s][s]][k[k][k[s][k[s]]]][s[s][s[k][s[s]]\
][s[s]][s[s][k]][k[s[s[s][k][k]]][k[s[s]]]]]]][s[s][k[k[k]][k]]]", 
        "s[s[s]][s][k[s][k][s[s][k]][k[s]]][k[k[k]][s[s]]][k[s[s][s][s[k]]][s[\
k]][k[s[k]]][k[k[k]]]][s[k][s][s[s[s]][s[s][s][k]]][k[k]][s[k]]]", 
        "s[s][s[k][k][k]][s][s[s]][k[k][k[k][s[k]]]][k[k][s[s][s][s[s]]]][s[s]\
[s[s[s[s]]][s[s][k[k[k[k][s]]]]]][k[k][s][s[s][s][s]]][s[s][s]]]", 
        "k[s[k]][k][s[s[s]][k][s]][s[s[s][s][s[s[s[s[s]]][k][s[k[s[k]]][s]]][\
s[s][s]]]][s][s[s][s[k]]][k[s]]][s[k][k[k[s]]][k[s]][k[s][k[s]]]]", 
        "s[s][s[k][s[k][s]]][k[s[s[k][s]]][k]][k[k][s][k[s[s[s][k[s[s[s]]]]]][\
k[s[s][k[k]]][s][k[k[s]]]]][k[s[s]][s[k][s]][s[s][s[s][k][s]]]]]", 
        "s[s[s][s[s[s]][k[s]]][s[s[k]]]][s][s[s[s]]][k[k[k][k][s[s]][k[s[k][k[\
s]]]]][s[k][s][s[s][k[k]][k[k]]][s[s]]]][s[s][s]][k[k][s[s[s]]]]", 
        "k[s][s][k[s][s[k]]][s[s[k[s][k]]][s][s[s[k]]][s[k][s]][s[k][s[s[s][s]\
[s][k]]]][s[s[k][k[k[k]]]]][k[s[s]][s[s[s]]]]][k[k][s[k][k]][k]]", 
        "k[s[s]][s[k[k]]][k[s][k[s][k][k]][s[k]][s[s][s[s]][s[s]]][k[k[s[k[k[\
k]][k]]]]]][s[s[s]][s[k[s]][k[s[s]]]][s[s][k[s][k]]][s[s[k][s]]]]", 
        "s[k[s][s][k]][s[s[s[s]]][s[k]]][k[s[s[k]][s[k[s][k]]]]][s[k][k][s[s][\
s[s]][s[k][s][s[k]]]][k[s]]][s[s[k][k[s[k]][k[s[k]]]]][s[s][k]]]", 
        "s[s][s[k][k][s][k[k][k][k[k]]][k[k[k][s]][k][s][k[k][s[k]][k]]]][s[s]\
[k][s[s][s[k]]][s[s[s]][s[s[k][k]]]]][k[k][s][s][s[k][k[s[k]]]]]", 
        "s[s][k[s][k[k][s]]][k[s][k][s[k]]][s[s]][k[s][s[k][k]][s[k][k][k[s][\
k]]][s[s[k]]]][s[k][s[s[k]][s]]][k[s][k[k][s][s][k[s][k][k[s]]]]]", 
        "s[s[s][s[k]]][k][s[s[k[s]]][s][s[k[s][k[s]]][k[s][k[s[k[k]]]][k[k[s]]\
[k[s]]]]][k[k[k][k]][k[s][s[k]][k[s]]][s[s[s][s][s]][s[s][s]]]]]", 
        "k[s][k][k[s[k[s][s][s[k]]]][k[k][s[s[s[s]][k[s]]]]]][s[k[k]][s[s]][s[\
s][s]][s[k[s][k][k[s[s]]]][k]][s]][k[s[k]][s][k[s][k[s][s][s]]]]", 
        "k[s][k[k[s]]][s[s[s[k[s]]]][k]][s[s][k]][s[s][s[s][k][k[s][k[s]]]][s[\
s[k]][k]]][s[s][s[s]][s[k][s[s[s[k]]]]][s][k[s][s][k]]][s[s[s]]]", 
        "k[s[s][k]][s[s][k[s[k]]][s[k][k[k[k]]]]][s][s[k[s][k[s]]][s[s][s]][s[\
k[s]]]][s[s[s[s[s]]]][s[k[k[s]][s[k]][k]]][s[s][s[k[s]][s[s]]]]]", 
        "s[k[s]][k[s][k]][k][s[s][s][s[s[k[s[k][k[s][k]]]][k[k[s]][s[s[s[s][s[\
k]][s]]]][k[k[s[k][s[s]]]]]]]]][s[s][s[s[s][k][s]]][s[s[k][k]]]]", 
        "k[k][s[k[k]]][s[s[s]][s[s][k][k[s][s]]][s[s[k[k]][s[s][s]][s[s[k]]][\
s]][s[k[s]][k[k][k][s]]]][s[s][s[k][s][s][k]][k[s[s][s[k]][k]]]]]", 
        "s[s][s[s]][s[k[s[k][s]]][k[s]]][s][s][k[s][k][k[k][s]][s[s[s]][k[s]][\
k[s]]]][s[s][k[s[k]][s[k]]][s[k[s]]][s[k[k]][s][s[s[k]]][k]][s]]", 
        "k[s][k[s][s[k]]][s[k[s][k][s[k][k[s][s[s]]]][s[k]]]][k[s[s]][s]][s[s]\
[s[k]][k[s]][s[s[k][s][k[s]][s[s][s[s][s[k][s]][s[k[s]][s]]]]]]]", 
        "s[k][s][k[k[s[s][k][s]]]][s][s][s[s]][s[s][k[s][s]][s[s][s[s][s[s]][\
s]]]][s[s[k][k[k[s]]]][s]][k[s][s[s]][k[s][s]][s[k][s[k]][s[k]]]]", 
        "k[k][s][s[k[k]]][s[k[k]]][s[s][s][k[k[s][s[k]][s][s[s][s]]]][s[s][k[\
s]]][k[s][s[k]][s[s[s[k]]]][k[s][k[s[k][k]]][s[k[s][s[k]][k]]]]]]", 
        "k[s[s[s]]][k[s][k]][s[k][s[k]]][k[k][k][k[s]][s[s[k]][k[s]]][k[s]][s[\
k]]][k[s[s][s[k]]][s[s[s]]][k[s[k][s][k][s[s]][k[k]]][s[s[s]]]]]", 
        "s[s[k][k[s[k[k]]][k]]][k[s][s][s][k[k]]][s[s[s][k]][s[s]][k][s[k][s[\
s][s]][s][s[s][s[s][k[s]]]][k[s][s[s[k][k]]][s[s]]][s]]][k[s[s]]]", 
        "s[k[k][s[k][s]][s[k][s[s]]][k[s[s]]]][s[s][k]][k[s][k[k][s[s[k[k]][s]\
]][k[k][k][s[s]]]][s[s[s]][k][s[s]][s[k]][k]][s]][k[s][k[k[s]]]]", 
        "k[s][k[k]][s[s[s][s]][k[s]]][k[s[s]][k][s[s][s[k][k[k]]][s]][s[k[s[k]\
][s][s[k][s][k[s]][s]][s[k][k][k]]][s[s][s[s][s[k]]]][k]]][s[s]]", 
        "s[k][s[s]][s[s[s[s]][k[s]][s]][k[s[k[s]][k[k][k]][s[k[k]]]]]][s[k][s]\
[s[s]]][s[s[k]][s[s[k]]]][s[k][s][s][s[s][s][k[s[s][k]]][k]][k]]", 
        "k[k][k][s[k]][s[s[k[k]]][s[k[k[k[k][k]]][s[k[s[k]]][s]]]]][s[s][s[s[\
k]]][k[s][s[s]]][s[s[s]][k][s[s[s]]][s][s[s][k[s][s]]]][k[k][k]]]", 
        "k[s][k][s[k[k]][k][k[k]][k]][k[s][s[k][s][s]]][s[s][k[s]][k[s]]][s[s]\
[k][s[s][s]][s[s[s[s][k]][s[k[s]][s[k][s]]]][s[s[s]][s[k][k]]]]]", 
        "s[s[s]][k[s[s][s[s][s][s[s[k]]][k[s[k]]]][k]]][s[s][k[k[k][k]]][s[s][\
s][k]][s[s[s]][s[k[s[k]][k][s[s]]]][k[s[s]][s[k][s]]]][k[k][k]]]", 
        "k[s][k[s][s]][s[s][k[s]][s[s[s][s]][k[s[s]]]][s[s][s[k]]]][s[s][s[k][\
s[k]][s[s][k[k][s]]][k[k][s[k]][k]][s][s[k][s]]]][s[k[k[s]]]][s]", 
        "s[s][k[s][k[k]]][s[s[s[s]][k]][k[s]]][s[k[s[s][k[k]]]][s[k][s[k]]][s[\
k[k]][s[k][s[s]][s][s[s]]][s[k[s[k][s]][s[s[s[k]]]]][s[k][s]]]]]", 
        "s[s[k]][s[k]][k[k][s[k]][s]][k[k[s]][k][k[k]][s][s[k[s[k[s]][s[s]][s]\
]][s]][s[s][s[k][k[s][k[s]]]]][s[s][k]]][s[k[s[k]][s][k[k[s]]]]]", 
        "s[s][s[s[s]][s[s[k[s[k]]][k[s]]]][k[k[s]]]][s[k][k][s[s[k]][k][s[s]]]\
[k[k][k[k]][s]]][k[s][k[k]][s[k][s[k]][s[s]][k]][s[k[s[s][s]]]]]", 
        "k[s[s][s[k[s]][s[s][s]]][k[k][s[s][k][k]][s][s][s[k][s][s[s][k[k]]]]]\
][s[k[k]][k[k]][s][s[k[k]]]][s[s][k[s[k]][k[s]][s][s[k[k]][k]]]]", 
        "s[s][s][s[s[s]]][k[s][s[k][s[s]]]][k[s][k[s]][s]][k[k[s[k]][s[k][k]]]\
[k[k[k]][s]]][k[s][k][s[s][s[s[k]]][s]]][s[s][k[s][s[s]][s[s]]]]", 
        "k[k][k][k[k]][s[s]][k[k[k]][s]][s[s[k[s[s][k][s]]][s[k][s[k[s[s]]][k]\
][s[s[s]]]]][s[k[s]][s[s]][s]][k[s][s][k[k][k][s]][s][k[s[k]]]]]", 
        "s[k][s][s[k[k][s][s][k]]][s][s][s[s][s[s][s[s]][k[s[s[k]]]][s]][k[s[\
k]][k[k]][k[k]][s[k[s]]][s[s][k][s[k[s]][s[s]][k]][s][k[s[k]]]]]]", 
        "s[s][s][s[s[s]]][s][s][s[s[k][k]]][s[k[s[k[k]]][s]][s][k[k[k[s]][s]]]\
][s[s[k]][k[k]]][s[s[s[k][s[k]][k]]]][s[s[k]][s][k][k][s[k[k]]]]", 
        "s[s][k][s[s]][s[k][s[k]][s][s[k]][s[k[s]][s[s][k]]][s[s][k[k][k]]]][\
s[k[k][k][s]][s[k]][k[s[s]][k[s]][k[k[k]]]]][k[s[s[s][s[s]]][s]]]", 
        "s[s[s]][k[s[s][k[s]]]][s[s[k[k[k]][k[s[k]]]]]][s[s][k[s[k[k]]][s]]][\
s[k[k]][s[s][s[k[k]]]]][k[k][s][k[k[k]]][s[k[s]][s[s[s[s]]]][s]]]", 
        "k[s[s[s[k][k][k][k[s][k[k][s[k][k][s[s]]]]][k[k[s]]][s[s[s][k]]]]][k[\
s]][s[s][k][s[k][k[k[k][k[k]]]]]][s[k][s[s[k]][k][s[k]]][k[s]]]]", 
        "s[k[s[k][s]]][s[s][s[k][s[s]][s[s][k[s]]]][s[k[s[s]][s[s[s][s[s[k]]]]\
]][k[s][s]]][s[s]]][s[k[k][k][k[k]]][k][s[s][s][s[k][k[s[s]]]]]]", 
        "s[s][s[s][s][k[s[s]]]][s[s[k[k]]][s[k[s]]][k[s][s[k]]][s]][k[k][k][s]\
[k][k[k[k]][s[k[s]]]][s[s]][k][s][s[s][s[s][s[s]][k[s[s][k]]]]]]", 
        "s[s][s][k[s]][s[k]][k[k][s][k][s[s[s]][k[s][s[s[k]][s]][k][k[k]]]][s[\
s][k[k[s]][k[s[s]]]][s[s]][s[s[s[s]][k][s[k]]]][s[k][k]][k[s]]]]", 
        "s[s[s][k[s][s[k]]][s[s][k[s[s]]]]][s[k[s[k]]]][s[s[s[s[k]]]][k[s][s][\
k[s][k][k[k[s][k]][k[k[k]]][s[s]][s[k[k]]]][k[k]][s[s][k[k]]]]]]", 
        "s[k[s[s[s]]][k[k]]][s][s[k][s[k[s]]]][s[s][k[s[k]][k[k][k]][k[k[s][k[\
k][k]][k[s]]]]]][k[s][k][k][s[k][k[k][k]]][s]][s[s[s[s[s[k]]]]]]", 
        "s[k][s[s][s[k[s]][s[s[s][k]]]][s[k[s]][s[s]][k[k]]][k[k][k][s][k[s][\
s[k[k]]][s[k[k]][s[k]][s[s]]][k[s[k][k[k]]][s[k[k][k][s]]][s]]]]]", 
        "k[k[k][s[s]]][s[k[s[s]]][k[k[s]][k]][s[k][s[k]]]][s[k[s][k][k[k]]][s]\
[s[s[s]][s[k][s]][s][s[k[s][k]][s]]][s[s][k[k][k][s[k]]][k[k]]]]", 
        "k[s][k][k[s]][s[s][s][s[s]][s[s][s[s][s][s]]][s][s]][k[k[s][k[k]][s[\
s][k[k[s][k]][k]]][s[k][s[k[k]][k[s][s]][k][s[s][k[s][s]][k]]]]]]", 
        "s[s][k][s[k][s[k[s[k[k]]][k]][s[s[s]]][k[k[k]][s]][k[k[k]]]][s[s][s[\
k[s[s][s[s[k]]]]][s]][s[k][s][k[s[s][s[k]]][k[k][k][k]]]][s[s]]]]", 
        "s[k[s[k][k]][k][s[k][s[s]]]][s[k][k]][k[s][k[s][s]][s[s][s][s]]][k[k]\
[k][k[s[k]][s[k]][k[s][s]]][s[k[s]]][s[k][k[s[k]]][s][k[s][s]]]]", 
        "s[s[s]][k[s]][s[s][s[s]][k[k][s]][k[k[s][k[s]][s]][s[k][k][s[s]]][k[\
s[k][s][s[s[k][k]]]]]][k[s][s[k[s[k[s]][k]]]][s[s]]]][s[k][k[s]]]", 
        "s[s[s][s[s[s]]]][s[s]][s[s]][k[s][k[k]]][k[k][k[s[s][s][k[k][k]]]]][\
s[s][k][k][k][s[k[k]]][s[k[k][k][k[k]]][k][k[s][s[k][s]][s[s]]]]]", 
        "s[s[s[s]]][s][k[s[s]][s][k]][k][k[s[k[k][s]]][s[k[s][s[k[k]][s][s]]][\
s[s]][k[k][s[k[s]][s][s[k][k][k]][s[k]]][s[k[k][s][k]][s[s]]]]]]", 
        "s[s[s][s][s[s][k[s]]]][k[k][k[k]]][s[s[k][s]][k[k[s]][k]]][s[k][k][s]\
[k[s][k][s[k]]][k[k][s][s[s[s[s]][s[k]]]]][k[s[k[k][s][s][k]]]]]", 
        "s[k][s][k[s[s[s]][s][k[k[s]][s[s[s]]]][k[k][s[k]][s]][s[k][s[s]][s]][\
s[k]][s[s[s][s[s[k[s][s[k[s]][k[k]]]]]]][s[s[k]][s]]][s[s][s]]]]", 
        "s[s][k[k[s]][s[k[k]][k[s][s]][s[k][k[k]]]]][s[s[s][s]][k[k][s[k][s][\
k[s[s[k[k]]]]]]][s[s[k[s[k]][s[s][s]][k]][s[s[k[k]][s[k]][k]]]]]]", 
        "s[k[k]][s[k][s][s]][s[k][s[s][s[s][s][s[s[k]]]][s][s[k[s][s]][s[s[s[\
k[k][k]]]]]][k[k[s]][k[k[s]]][s]][s[k][k][k[k][s[s]][s[k[s]]]]]]]", 
        "k[s][k][s][k[k[s[s][s]][s[k[s][s]][s[k]]]][s[k]][k[s[s][k[k][s]][s[s[\
s]][s[s[k[s]]]]]][k[k[s][s[s]][k][k[s]][s[k][s][k]]]]][s[k[k]]]]", 
        "s[s[s[k][k]][s][k[s][s[s]]][s[s][s[s][k][s]]][s[s]][k[s][s][k[k[s][s[\
s[s]][s[s]]]]]][s[k][k][s[s][s][s][s[s[s[s]]]]]]][k[s][s][k[k]]]", 
        "s[s][s[s]][s[k[s[s[k][k]]]]][k[s[s[s][k][s][s[k]]]][k][s[k][s[k]]][s[\
s][s[k[s]][k]]]][k[k[k][s[k]][s][s[s][s[k]]][k]][s[s[s][k[s]]]]]", 
        "s[s[s][s[s][k]]][s][s[s][s[k][s[k][k]]][s[s][k][s][k][k[k][s][s[s]]][\
s[k[s[k[k]][k]]][k]][s[k[k][s[k][k[k][k][s][s]]]][s[s[s]][k]]]]]", 
        "s[s[s][k[s[k]]]][k][s[s][s][k[k][s[s]]][k[s[s]][k[s[s][s[k]]][s[s[s[\
s]][k[k][s[s[k][k]]]]]]]][s[s[k]]][k[k[s][s[k][k[s]]][s[s][s]]]]]", 
        "k[s][s[k]][s[s[s]][k[k][k][s]]][k[s][k[k][k][k[s]][s[k[k]][k[s[k]]]]]\
][k[k[s][s][s[s[s]]][k[k][s[s]]]]][k[k][k[s][k][k[k[k[k[k]]]]]]]", 
        "k[s[s]][s[k]][k[s][k[k]]][s[s][s[k][k]]][s[s[k][k]][s]][s[k[s]][k[s[\
k[k][k[k][k[s]]]]]][k[k[k[s][s][k][k[s]]]]]][s[k[s[k][s[s][s]]]]]", 
        "s[s[s][k]][k][s[k[s][k]]][s[s[s][k][s][s[s[k][k]]][k[s]]][s[k[k][s[s[\
k][k[s]]]][s]]]][k[s][s[s][s]][s[k][k[s]]][k][k[k]][k[k][k[k]]]]", 
        "s[k][s[k][k[s][k]]][s[s][s]][k][s[s[s[s][s]][s[s]]][s[s[k[s]]]]][s[s]\
[k][s[s][s[k][s[k[s]]]]][s[k[s][k]]][k[s]][s[s[k[s]][k[k[s]]]]]]", 
        "k[s][s[s[k]][k[s][s][k][s[k][s]]]][s[s[s][s]][k]][k[k][k][s]][k[s[s[\
s[s][s]]]][k[k[s]][k[s[k][k][k[s]]]][s[k[k]]][s[k]]]][k[k][s[k]]]", 
        "k[s[k][k]][k[k][s[k[s]][s]]][k[s][s[k[s]]][s[k[k][k[k]][s][s[s]][s[s]\
]]][s[s[k]]][s[s]][k[s[s]][k[k][s][s]][k[s][s[s]]]]][s[s][k][s]]", 
        "s[s][k[k][s][s]][s[s]][s[s[k]][s]][s][s][s[k][k[k[k[k[s[s][k]]]]]][s[\
k[k]][s]]][s[k[s][k][k[k[s]]]][s[k[s][k][k]]]][s[s][s[k[s]]][k]]", 
        "s[k][s][k[s][k[s]][k[k]][k[k][k[k[s[k][s]][k]][k[s[k[k[s]]][s]]]][s[\
s][s[k]]][k[s]][s[s][k[s[s]]]]]][s[k[s][s[s]][s[k][k[s[k[s]]]]]]]", 
        "s[s][s[s][s[s][k[k[k[s]]]]]][s[k[s[s]]][s[k][s[k][k]][k[s]][k]][s[s][\
s[k][k]]]][s[k[k][k]][s[k]][k[s][s][s[s[k[s]]]][s[k][s][k[s]]]]]", 
        "s[s][s][s[s][s][s[k[k]][k][s[s]][s[s]]]][k[k][s[s[k][s[s[s]]]]][k[s[\
s]][k][s][s[s][k[s[s[s[k[k]]]]]]]][s[k][s][k][k[s[k[s]]][s[k]]]]]", 
        "s[s][s][s[s[k[k][s[k[s][s]]]][k[k][s]]][s[k[k][s[s]]]][s[s]]][k[s[s[\
k[s]][s][s[s][k]]]][s[k][s][k[k[s[s]]]][s[s][s][s][s[s[s[k]]]]]]]", 
        "k[s[k[s]]][s[s[k][s[k][k]]]][k[s[s][s[s[s]][k[k]]]]][s[s][k[k]]][s[s]\
[k[k][s][s][s[s]][s]][s]][k[s[s]][s[k[s]][k[s[k]][k][k[s]][k]]]]", 
        "k[k][s[k]][s[s][k[s][k][k]]][s[s][k[k[s]]]][s[s][s[k[s[s]]][s[s[k]][\
s][k[k]][s[k[k[s[k]]]]][s[k]]][k[k]]][s]][s[s][s[k[s]][k[s]][s]]]", 
        "s[s[s][k[k]][s[s[s][k]][s[k][k[k]]][s[s]]]][k[k][s][k[k][k[s][k]][k[\
k]][k]]][s[s[s][s]][s[s][s]][k[k[s][k[k[k][k][s]][s[s[k][s]]]]]]]", 
        "k[s[s[s][s[k[k][s]]]][s[s[k][s[s[s][s]]]]]][s[s][s][k[k][k[s]]][s[k[\
k[k[k[k[k]]]]]][k[s[k[k][k]]]]][s[s]]][s[k][s][k][s[s][s[s]]][s]]", 
        "s[s[s][s]][k[k][k[k]][s][k[s[s]][s[s]]]][k[s[s[s]]][k]][k[s][s[k]]][\
k[k[k]][s[s[k]][s[s][s][k[k]][s[s][k[s]][k[k][s[s][k]]][k]][s]]]]", 
        "s[s[s]][s][s[s][s][s[s]]][k[k[k[s]]][k[k[k][s]]][k[k][k][s[k[s]]][s[\
k[s[s]][s[s]]][k]]][s[s][s[s]][k[s]]][s[k][k[k[s]][s[k]][s[k]]]]]", 
        "k[s][k][s[s][k[s]][s]][k[s[s][k[s]][s[k]][s[s][k]]]][k[s][k[k][k][s[\
s[k]][k]]][k[s[k]][s[k[s[k]]]][s]][k]][k[s][k][k[k[s[s]]][k][s]]]", 
        "k[k][k[s][k[s]][s]][k[s][k[k]][k[s]][s][k[s[s]]][k[k][s[k]][k][k]][s[\
s][s[s][k[k[s]]]][s[s[s]][s]][k[s[s]][k[k][k][s][k[s]]]][k[k]]]]", 
        "k[s[s][k][s]][k][s[s][s[s]]][s[s][s][k[s][k[k]]][s[k][s[s]][s[k][k]]]\
[s[s[k[k[k]][k[s][s[k][k]]]]][s[s][s[k[s]][s]][s[s[s]][k[k]]]]]]", 
        "s[s][s][s][s[k][k[s]]][s[k[k]][k][s[k][k]][k[s[s]]][s[s]][s[s[k[s][k[\
k[k]][s]][s[s][s][k[s]]]]][k[k[s][k[s]][s[s[k][k[s]]]][k[s]]]]]]", 
        "s[k][k[k][k[k]][s]][s[s[k][s[s]]]][s[s][k][s[s][s]][s[k[s]][s][k[s]]]\
[s[s][s[s]][s[k]]][s[k][s][k[s[s]][s[k[k]][k]][s]][s[k][s[k]]]]]", 
        "k[k][s][s][k][s[s]][s[k[s]]][k[k][k][s][k[s][s]][k[k[s]][s][k[s[s]][\
s[k]]]][s][k[s][k][k[k]]]][s[s]][s[s]][s][k][k[s[k]][s][s[s]][s]]", 
        "k[s][s][s[s[s]][s][s[s][k]][s[k]]][s[s][s]][s[s]][s[k[s[s][k]]][s[k[\
k]][k]][k[k][s[s]][s[s[s]]][s[k[s]][k[s][k]][k][s[s]]][k[s][s]]]]", 
        "s[k][s[k][k[k]]][s[s[s]]][k][s[s[s[s]]][k[k[s]][s]][s[s]][k[s][s[s[k]\
]][s[s]][s[s[k[s]][k][s]]]]][k[k][s[s[s][k][k[k[k]][k]][k[s]]]]]", 
        "s[k[s][k[s[s[s]]]][s]][s][s[s][k[s][s[k]]][k[s][k[k][k[k]][s[s][s[k]]\
[k]]][s[k][k[k]][k[s][k[s][s][k]]]][k[s[s][k]]]][k[s][s[s[s]]]]]", 
        "s[k[s][s[s][k][s][k[s]]]][k[k]][s[s][k[k]][k[s][k[s]]]][s[k[s]][s[s[\
s]][k[k][k][s]][k][s[k][s[s]]]]][s[s[k]]][s[s[s][k][k[s][s][s]]]]", 
        "k[s[s[k][s]][s[s][s]][k[s][s[s]][s][s[k[s[s]][s]]]][k[s[k[s]]][k[k][\
k]][k[k[s[s][k]]][k[s[s]]]][k[s]]][s[k[s]][s[k][k[s]][k]][s[k]]]]", 
        "k[s][s[k]][s[s[s][s][s[s]][s[k[k][s[s]][s[k][k[k]]]]]]][s][s[s][s[k][\
k[s]]][k[s]][k[s[k]][k[s[k[s]]]][s][k[k[s]]]][k[s[s]][k[s[k]]]]]", 
        "s[s][s][s[s][s[s]]][s[s]][k[s[s]][s[s]]][s[s][k[k]][k[k[s]][s[k[s]]]]\
[k[k][k][k][s]][s[s[s]][s][s[s[s]]][s[k][k][s][s]]]][s[s[k][s]]]", 
        "s[k[s]][s[s][s]][s[s[s[s][k]]][s[s[k]][s[k][s][k[k[s[k][s[s]]]][s[k]]\
][k[s]][s]]]][k[k[k]]][k[s[s[k][k]]][s[k[s]]]][s[s][k[k][k][s]]]", 
        "s[k][k[k]][s[s][k]][s[s][s[s]]][k[s][s[k[k]]][s][k[k][k]]][s[s][s[s][\
s[k][k[s[s]][k[s][k[s][k]]]]]][k[s]]][s[k][s[s]][s[k[k[s]][k]]]]", 
        "s[k[s]][s[s][s[s]]][s][s[s][s[s]]][s[s[s]]][s[s[s][k[s]]][s[s]][s]][\
k[k][s[k[k][s]][k]]][k[k][k][k[k][s[s]][s][k]][s[s][s][k[k[s]]]]]", 
        "s[s[k][k]][s][s[k][s][k[s]][k[k[s[k[s]]][s]]][k[s][s[k][s[s]][s[k]][\
s[s[k[k]]][s[k[s[k[s]]]]]]][s]][k][s[k[s[k][k]][s]][s[k[k]][k]]]]", 
        "s[s[k]][s[k]][s[s[k]][s[s]][k][s[s][s][k][s[s][k][s[s]]]][s[s]][s[k[\
k]][s][k][k[k[k[s]]][s]][s[s[k[k]][k[k][s[k[k[s]]]]][s[k][s]]]]]]", 
        "s[s[s[s][s]][s[k][k[s]][k[s]]]][s][s[s][k]][k[s[s]][s[s][k[s][s[s][k[\
k]][k]]][k][k[k]]][s[k][s]]][s[k][k][k[s][k[k][k[s]]][k[s][k]]]]", 
        "s[k[s][k]][k[s][s]][k[k[k[s]]][k[k]][k[s]]][k[s[s[s][s]][k[k[k]]]][k[\
k[s[k[s]]]][s[s]]][s[s[k]][s[s[s]][s]]]][k[k[s][k]][k[s[k[k]]]]]", 
        "k[s][k][s[s]][s][s][s[s[k]][k[k[k[s[k]]][s[k]][k]][s[s]]][k[k][k[k][\
k[k]]][k]]][k[s][k][s[k[s[s[s]]]]][s[s][s][k[k[s[k[k]]][s[k]]]]]]", 
        "s[s][k][s][k[s[s][s][s][s[s][s[k]][k[s[s[s][k][s[s][k][s[s[k]]]]]]]]]\
[k][s[k][k]][s]][k[k][k[k[s]]][s[s]][s[k][k[k[k]][k[s]]][s[k]]]]", 
        "s[s[s[s][k[s]]][s[s[k]]][s[k[s][s]]]][k[s[s[s][k]]][k]][k[s[k][s[s][\
k[k]][k[s][k[k[k]]][k[s]]]]][s[s[k][s[s]][s[k][k]]][s[s][k][s]]]]", 
        "s[s[s][s]][s[k]][s[s][s[s][k[s][s[s]]][k]]][s[s[k]]][s[s][s][k[k][k[\
k]][s]][k[s][k][s[s]][k[s[s[k][s]]]]][k[k][k[k]][k][k[k][k[k]]]]]", 
        "s[s[s][k]][s[k][k]][s][s[s]][k[s][k[s]][s[s]]][k[k[s][k]][k][s[k]][k]\
][s][s[s[k][s[k[s]]][k[s][k[s[k]]]]][k[k][k[k[k]][s]]][s[k[k]]]]", 
        "k[s][s[s[s]]][s[k[k]][s[s]]][k][s][k[s[k]][s[s][k]][k[k[k[k]][s[k]][\
s[k]]]][s[k[k][k][s[k][k][s[s]]]]][s]][s[k][s[k]][s]][s[k][k][s]]", 
        "k[s[s][k]][k[s[k]][k]][s[k][s[s[k][k]][k[k[s[k]][s[s[k][k][s[k]]]]]]]\
][s[s][k[k[s]][s]][s][s[s]][s[s]][s[k[k][k[k]]][k[k][s[k][s]]]]]", 
        "s[s][k[k[s]][s][s][k[s]][s[s[s[s]]][s[k[k][k]][k]]]][s[s][k][s][k[s][\
s][s[s[s]][k[s]][s[s]]]]][s[k]][s[s[k][s[k[k[s[k][s[s]]][s]]]]]]", 
        "s[s[s][k]][s[k[k[k]][s]]][k[s[s]]][s[k][s[s]][s]][s[s][k[s]]][k[k][k]\
[s[k[s][s][s[k[s][s]][k[s[s]]][s[s[s]][s]]]]][k[k][k][s][s[s]]]]", 
        "s[s[s[s][s]][s]][s[k][k[s[k[k]]][k[k][s]]][k]][s[s]][s[s[k[k]]][k][s]\
[k[k]][s[s][s][k]][k[s][k[s][k][s[k][k[s]]][k[s]]]][s[s[s[s]]]]]", 
        "s[s][s][k[s[s]][s[s[k[s]]]][k][s[s[k][s[k]]][s[s[k]][s[s][s]]]][k[k][\
s[s[s]][s[k[s][k[k]]]][s[k[k]]][k[k[k]]]][s[k[s]]][k[s][k][s]]]]", 
        "s[s[s]][s[s[k[k]][s][s[s[k][s[k][s[s]]]][k]]][k[k[s]][s[s]]]][k][k[k[\
s][s][k[k]]][k[k][k]][k[s[s]]][s[s]][s[s][s[k][k]]]][k[s][k[k]]]", 
        "k[s][k][k[s][s[s][k]][s[k[s[k][s]][s]]]][k[s][k][s[s[k]][s]][s[k[k]]]\
[k[s[s]]]][s[k][k[k][s[s]][s[k][k][s]]][s[k]][k[s]][s[s][s]][s]]", 
        "k[s[s]][k][s[s[k[k]]]][k[s[s]][s][k[k[s]][s]]][s[s][s]][s[k][k[k[k][\
s][k[s]]][s[k[s[k]]]][s[k[k]][s[k][s][s[k[k][k][k[s]]][s]]][k]]]]", 
        "s[s][s][s[s[k][k[s[s[k]][k]]]]][s[k[s]]][k[s[s]][s][s[k][s]]][k[k][s[\
k]][s][s[s][k[k[k]]]][s[s][s[s[s]]]]][s[k][s[s]][s][s][s[k[k]]]]", 
        "s[s][s[s][s]][k[s[s][s[s[k]]]]][s[s[k[s][s[k][s]]]]][s[s[k][k[k[k]]][\
s[k[k]]][k[s]]][s][k[k[k]]][k[k][s[k[k]]][k[k[s[k]]][s[k][k]]]]]", 
        "s[k[s][k[k][s]]][s][k[k[s[s][s[k]]]]][s[s]][s[s][k[s][k[s]]]][k[s[s]]\
[s[s[s[k[s]]]]]][s][k[k][k[k][s]][s][s[k[s[k[k]]]][k][s[s]]]][s]", 
        "s[k][s][s[k][s[s][s][s[s[s[s[s]]][k][s]]]][s[k][s][s[k][k[s]]]][s[k[\
s[s]][s[s]][s[s]]][k]][s[s][k[s[k][k[s][s]]]][k[s[s]][k][k[s]]]]]", 
        "k[s[k][s]][s][s[s[s][s][s]]][s[s]][s[s]][s[s][k[k[k]][k][s[s]][s[k[s]\
][s][s]][k[k][k[s[s][s[k]][s][s]][k[s][k[k][k[k[s]][s][s]]]]]]]]", 
        "s[s][s[s[k]]][k[k[s][s]]][k[k[k][k[k]]]][k[s[s[s[k]]]]][k[s][k[s]][s[\
k]][k][s[k[s][k][s]][s][s[s]]]][s[k][k[s][k][s]][k[s][s[k]]]][s]", 
        "s[k][k[k][k[s][k][s[s]]][s[s][s[k][k]][s[s[s[k[s]]]]][s[k[s][k]][s]][\
k[s][k[k][s[k][s][s]][s[s][s]]]]][s[s][s[k][s[s][k][k][s[k]]]]]]", 
        "s[s][k[s]][k[k][k][s[s[k[k][s]][s]][s[k]]]][s[k][k][s[k[s]]][s[k[k][\
s]]][k[k][k]][s[s[s[s[s]]]]][s[s]][s]][k[k[s][s]][k[s[k][k[k]][s][k[k]]][k[s]]\
]]", "k[s[k][s]][k][s[s[s[k]][k][s[k][k]]]][k[k][k[k[s]]][s[s]][k][s][k[k]]][\
k[s][s][k][k][k[s[k[s[s][s[s][k]]]][k][s[s[s]][s[s]][s[s[s[s]][s]][s]]]]]][k]\
", "s[k][s[s]][s[k][k[s[s[s]]][k[s[k[s][k][s[s]][k]]]]]][s[s[s[s]]][s][s[k][k[\
s]]]][s[s[s]][s[s[k][k[k]][s[k][s]]][k[k]][k[k]]]][s[k[s][s]][s][k][s[k]]]", 
        "s[s][k[k[k][s]][k[k[s]]][k[k[s[k]]][k][k][k[k[s]]]]][s[s][s][k[s][s[\
k]][s][k[k][s[s][k[k][s[k][k]]][k[k]]][s[s][s[s][s]][s[s]][k][k[s][s]]]]][s]][\
s]", "s[s][k[k[s]]][k[s[k[k]]][s[s][s]]][s[s][k[k][k[k]]][s[k[s][s][k[s[s][s[\
k][k[k[s]]][s[s][s]]]][s[k][k[k][s[s]][s[s]]]]]][s]][k[s[s[k][s[k]]]][k[k]]]]\
", "s[k][s[k][s[s][s][k[s]]]][s[k][k[k][k][s]][k[k][k]][s[s[s][s]][k[k[s]][k[\
k][s[k[k[s]]][s]]]]]][k[k[s]]][s[s][k[k][k][s[s[s]]]][k[s[k][s[s[s]]]]][s]]", 
        "s[s[k[k]][s][k[k]]][s[s[s][s[s][s]][k[k][k[k[s]]]]][s[s[k[s][s]][s[k[\
s]]][s]][k[k[s]]]][s[s[s][s][s[s[s[s]][s][s]]]][k[k[k]][s[s[s[s]][k][k]][k]]]]\
]", "k[s][k[s][k[k[k]][s[k]]]][k[s][k][k[s[s]]][s[k[s]][k[k][s][s]][s[k[k]]][\
k[s][k[k]]][s[s[s]]]][k[s][k][k][k[s][k[s][s[s[k]]]][s[k][k[k]][s[s]][s]]]]]",
         "s[s][s][s][s[s][k[s]]][s[s][k][s[s][s]]][s[k][k[s]][s][s[k[k]]]][k[\
k[s]][k[s][s][s][k][k[k[s]][k]][s[k]][s[k[k[k]][s[k]][k]][s[k[s]]][k[s][k][k]]\
]]]", "k[s][s][s][s[k]][s[s][s[k][s[k[k[s][s[k[k]]]]]][s[k]]][k[k][k[s]][s[s[\
k][k[k]]]]][k][s[k[k[s[s]]]][k][k][s[s[s]][s][s[k][s]][k[s][k[k][k]]]]]][k[k]]\
", "k[k][k[k[s[k]]][s[k][s]]][k[k][k[k]][s[k[s][k]]][k[k][k[k][k[k[s]]]]][s[k[\
s][s]][k[s][s[k]][k[s]][s]]]][s][s[s[k][k][s[s[k[k][s]]]]]][k[s[s[s[s]]]]]", 
        "s[s[s][s][k[s[k]]][k]][s[s][s[k[k[k]]]]][k[k][s[s]][k[s[s[s]][k[s]][\
s[s[s]]]]]][s[k[s]]][k[k[s]][s[s[s][s[k]]]][s[s][k][k[s][k[k][s]][s]][k]]][s][\
s]", "s[s[s[k]]][k][s[s][s[k]]][s[s][s[k[k]][s[k]][k[k[s]][k]][s]]][s[s[s[s[s[\
k]]][k[s]]]][k][k[k][s[s]][s[s][k[s[k[s[k]][s]]][s[s]][s[s[k[s[k]]]][s]]]]]]",
         "k[s][s[s]][s[s][s]][s[k][k][k[k][s][s[s[s][k[s]]]]][k[s[k]][k[s][s][\
s[k]]]][s[k][k[s[s]]][s[k]]]][k[s[s[s]][s[s[s[k]]]][s]]][k[k][k]][k[s[s]][k[s]\
]]", "k[s][s[k][k][s]][s[k[k][k]][s[s][s]]][s[s][k[k][s[k[s][k]]]][k[s][k[k[s]\
[k]]][s[s[s]]]][s[s][k[k][s[k][s]]]][k[s[k]]][s[k[s[k]]][s[s[k[s]][k[k]]]]]]",
         "s[s][s][s[k[s[k]][s[k[k]][s]][s[k[k][s][k[k][s]]]][s[s]][k]]][k[s][\
s[s[k]]][k[s][s[s[k]]]][k[k[s][s][s[s]]]][s[s][s[s[k][s[k][k]][k][k[s][s]]]][\
k]]]", "s[s][k[s][s[s][s[s][k]]][k]][s[k[s]][s[s]][k[s[k][s[k][s[s]]]]][s[s[s]\
][k][s[s]]][s[s[s[s][s[k]][k]][k[s[s]]]][k[s[k]]]][s[s][k[s][s][k[s]][s[s]]]]]\
", "k[k][k][s[s][s][s[s[s]]][s][k[s][k]][s[s]]][k[s[k]][k]][s[k[s]][s][k[k[s][\
k[s]][s]][s]][s[k[s]][s[s][s]]][k[k[k][k]][s[s][s[s][k]]]][k[k[k]][k[k]]]]", 
        "s[s[s][s[k]][s][s[s]][s[s][s[k[s]][s]][s[s][s][k[s][s][k]]]][s[s[k]][\
s[s]]]][k[s[k][s][s[k[s[k]]]]][s[k][k[s[k]][k][s][k[k[k][k]][k][s[k[s[s]]]]]]]\
]", "s[k[s][s[k]]][s[k][k]][s][s[k[s[s]][k[k][k]][s[s[k][s][k][s[s]]][k[s]][s[\
k[k]][s[s[k]][s[k]]]][s[s[k][s[k]]]]]]][s[k][s][s[s][s[s][s][k]][k[k[s]]]]]", 
        "s[k[s][k][s[k][s[k][s]]][s[k[s[s[s]][s][s[s[s][k]]]][k][s[k[s][s[s[s[\
k][s]]]]][s[k]]]]][k[s][s[k][s]][s[k]][s[k[s[k]][s[k][s[k][s[s]]]]][k[k][k]]]]\
]", "s[s][k][s[k]][s[s]][s[s][k]][s[s][k][k[k][k][s[k[k]][s[k[k[k]]]][s[k][k[\
k][k]][s[s]][s[k][s[k]]][s[k][k][s][k[s][k[s]][s][k]]][s[k[k]][s[s]]][k]]]]]",
         "s[k][k][k[s][k]][s[s]][s[k][s[k]][s[s][s[k]][s]][s[s[s[s[k]]][k[s]]]\
][s[k][k][s[s][k][k][k]]]][s][s[s[k][s][s][s[s]]][s[s][s][k[s][s]][k[s]][k[k]]\
]]", "s[s[k[s]]][s[s[k[k]]][s[s][s]]][s[k]][s[k[s[k][s[k][k][s[s][k]]]]]][s[s]\
[s[k]][s][s[k][k[s]]]][k[s[s][k][k[s][k[k][s[s][k[s]]]]]][k[k[s[k]]]]][s[s]]",
         "k[s[k[s]]][s[k][k]][s[s][s[s[s][k[k[k][s]]]][s[s[s]]][s[k][k[k[s[k]]\
][k][s]][s[s[s[k]][s][k[s[s][s[k]]]]][s[s]]]]]][k[s[s]][s[s]][k[k]][s[k][k][k]\
]]", "s[s[k]][s[s[s[s]]][s]][s[s][k]][k[s[k]]][k[s][k[k][k]][s[k[k[s]][k]]][s[\
s[k[k[s][k]][s]][s[s]]]][s[s[s[k]][k[k][s[s[k[k]]][k][s[s][s]]]]][s[k[k]]]]]",
         "s[s][s[k[s][k]]][s[s[s]]][s[k[k[k[s]][s][s]]]][k[s][k][s][s[k][k[s[\
k[k[s]]]]][k[s[s]][s]][k[s][s[s]][k][k[k[s]]]]]][k[k][k][k][s[k[s[s[s[k]][s]]]\
]]]", "s[k][s[k][k[k[k]][k[k[k]]][s]]][s[s][s]][s[s[s[s][s[k]]]]][s[s][s[s[k]]\
[k[k[k[k]][k]][s[s]][k[s][s[s]][k][s[k[k]]]]]]][s[k][s[k][s]][s[s][s[s][k]]]]\
", "s[s][s][k[s]][s[s[k[k]][k[k[s][s[s][k]]]]][s[s][k[k][k]][s[s[s[s]]]][s[s][\
k[k][s[k]]][s[s]][s][k[k][s[s[s[k]]][k][k[s[s]]][s]]][s[k[s][k[k[s]]]]]]]]", 
        "s[s[k[s][k]]][s][s[s][k[s]][s[k][s[k[s][s]][k[k[s]]]][s[k[s][k[k[s][\
k][s][s]][k[s][k]]]]]]][k[k[s]][k[k]][s[s][s[k][s]][s[s][k[k]][s[s][k[s[k]]]]]\
]]", "k[s[s][k][s[s[s]]][k[s]][s[s]]][k[s[k[k]]][k][k[k[k[s]][k][k]]]][s[s[k][\
s][k[k]][k[k][k]]][k][s[k[k][k[s]]]][s[s][s]]][s[s[k[k[s][s]]]][s[s[k]][k]]]",
         "s[s[k]][s[k[s]][s][k[s][k]]][k[s][s][s][s[s[s]]]][k[s[s]][k[s]][s[k]\
[k][s[k[k]][k[k]][s[s][s]]][s[s][k[k]]][s[s[s][k[s[k][k[k]]]]]][s]][s[s[s]][s]\
]]", "s[s][s[k[s]][s[s]]][k[s[k[k][k][s]][k][k]][k[k]]][k[k[s]][s[k]][s[s]][s[\
k[s]][k[s[s[k[s]]]]][k][k[s][s][k[s]][k[s[k[s][k]]]]]][k[s[s]][k][k[k[k]]]]]",
         "s[s[s[k[k[k][k[k]]][s[s][k]]]]][k][k[k][k][s[s[s]][s[s]][k][k[s[s]][\
s[k[k]]][s[k[k][s]][k[k[s]]][s[s[s]]]][s[k]]]][s[s[s]][s[k]][k]][s[s][k[s]][k]\
]]", "k[s[s]][s[k[k]][k]][k][s[s[s]]][s[s][s[s[k[s]]][s[k]][s[s][s[k][k]][k]][\
s[k[k]][s[k][s[k]]]][k[s][s[s]][s[s][s[k][k][k[s][k]][k[s][k[s][s][k]]]]]]]]",
         "k[k][k][k[k[s]][s[k[k[k]]]][k[s]][k[s]][k[s][s][k[k[s][s[k]][k[k]]]]\
[k[s][s[s]][k[s]][s[k[s][k][s]][s][s[k[s[s]]]]]][k[s][s[k]][k[s[s]][k[s][s]]]]\
]]", "s[k[s][s[k][k][k][k[k]][s[k][s][s]]]][s[s][s[s]][k[k]]][s[s][s[k]][k][k[\
k][k]][s[s[s][s]][k[s[s]]][s[k][k[k[k][k]]][s][s[s]]][s[k[k]][k[s][k][s]]]]]",
         "s[k][k][s[k[s]]][s[k][s[k]][s[s[s]][s][s]][k[s][s][k[k]][s][s[s][k[\
k[k]][s][s[s]]]]]][s[s][k[k][k[s][s]][k][k[k[k]]]]][s[s[s[s]][s][s[k]]][s]][k[\
k]]", "k[s][k[k][s[k[s]]][k[s][k[s[s]]]]][s[s[s[s]][s][s[k][k[k]][s[s][k]]][k[\
s[s[s][s[k][s]]][k][s[k]][k][k[k]][k[k][s[k][k[k[s[k]]]][k[s[k][k[s]]]]]]]]]]\
", "s[k[s]][s[s[k]][s[k][s[k]]][s[s[s][s]][k]][s[k]][k]][s[s[s]][s[s[s]]][k[k[\
s][k][s[s]]][k][s[k][k[k][s[k][s[s]]]][k[s[s][k[s[k]]][k]][s][s[s]][k]]]]]", 
        "s[k[s]][s[k][s[k][k[k][k][k]][s][k[k]]]][k[s[s][k][s[s[s]]]][s[s]][s[\
s[s[s]][k[s][k]]][k[s][k][k[k]]]][s[s[k]]][k[s][k[s][s[k[k][k][k][k[k][s]]]]]]\
]", "k[s][s[k][k][k[k[k]][s]]][s[s][s[s]]][k[k[k][k]][s[k[k]][k][s]]][k[k[s][\
s[s]]][s][k][s[k[k]]][k[k][s][s][s[k[k]][s[s]]][s[s[s[s]]]][k[s[s[k][k]]]]]]",
         "s[s[s[s[k]]]][k][s][s[s][s]][s[k]][k[s][s][s[s[s]]][s][s[k]][s[k][k]\
][s[s][s[s[k[k]]][k[s][k][k[k]][s]]][k[k[s][s[s[k][k]][s[k]]]][k[k][s[k[s]]]]]\
]]", "s[s][s][s[s]][s[k[s][s[k][k]]]][s[k[s][k][k][s[k[s][s][s[s]]]]][k[k[s]][\
k[s]][s[k][s][s][k[s][s]]][k[k[k]][k][s[s[s][k][s]][k[s[s[k]][s][k][s]]]]]]]",
         "s[k][k][s[s[k]][k[s]][s[k][k][k]][s[s][s]][k[k[s][s[k]][s][s[s][s][\
k[k[k]][k[k]]]]][s[k]]]][s[s]][s[s[s]][s[s[k]][s[s[s]]][k[s[k]]][k[k[s[k[s]]]]\
]]]", "s[k][s[k][s[k[k]]]][s[k[k[s][k[s]][s[s[s]][k]][s[k][k[s[s]]][s[k[s]]][\
s][s[s][s]][k[k[s]][k[k][k]][k[k[k]][k[s][s]]]][k[s][s[s]][k[s]][s]][s[k]]]]]]\
", "s[s][s[k][k[s][s[k[k]]]][s[k[s]]][s[s[k][s][k[s[s]]]]]][s[k][s[s[s][k[s]][\
k]]][s[s][s][s[k][s]]]][s[s[s[s]]][s[k][k][k][s]]][k[s][s[s][k]][k][s][s]]", 
        "k[k][s][s[s[k[s]][s[s[s]]]][k][s[s[s]]][k[s][k]]][s[s][s[k]]][s[k[s][\
k[s][s[k[k]]]]][s[s[k][s[k]][s][k[k][k]]][k[s]][k[k][s[k[k[k]]]]]]][s[s][s[k]]\
]", "s[k][k][k[s[s]][k][k[s][k[s]][s]]][s[s]][k[s][k][s[s][s[k[s]]][k]]][s[k[\
s]][k[s[k[s]][s][k]][k[k][k[s[s]]][s]]][k[k[k]][s[k][k]]]][k[k[s]][k]][k[k]]",
         "s[s][k[s][s][k[s]][s[s[k]]]][s[k][k[k[s[k]][s][k]]]][s[s[s]][k][s[k]\
[k][s[s]]][k[k][s][s[s][s][s]][k]][k[k[s]][s[k][s[k[s][s[k[k]]]]]][k][s[s][s]]\
]]", "s[k[s][s][s[k[s[s]][k[s[k]]]]]][s[k[s][k[s]][k[s]]][k[s]]][s[s[s]][s]][\
k[k[s]][s]][s[s[s[s[s]]][k[k][k[k][k[s[k]]][s[k][s[s[k][s]]]]][s[s]]]][s[s]]]\
", "s[s[s]][s[s[s]]][s][s[k[s[k][k]]]][s[s[k[s][k[s]][s[s]]][s[s[k]][k[s][s[k[\
k]]]][s[s[s][s][k[s]][s[s][k[s][k[s]]]]]][k[s][s][s[k][s[k][s]]][s[k]]]]]]", 
        "k[s[s]][k][k[s]][s[k[s][k][k[s]][s[s][s]]]][s[s[k[s]]]][s[s][k[s]][k[\
k][s][s][k[k]][s][s[k][k[s[k[k]][s[k]]]][k[k[k][s]]][k[k[s][s[k]][k[k[s]]]]]]]\
]", "s[s[s][k][s[k[s]][k]][k[s][k][k]][k]][s[s[k]][k[s]]][k[k][k[k]][s[s[s[s][\
k][s[k][s][k[k[s[s]][s]]][s]]][s[k][k][k][k][s][s][k[k][k]]]][k[s][s]]]][s]", 
        "s[s][s][k[s]][s][k[k[k[k]][k[s]]][s[s][s[k][s]][s]][k[k][k[k]][s[s[s]\
[k[k]]]]]][s[s][s][s[s[s]]][k][s][s][k[k][k][s[s][k[k][k][s[s[k]]][k[s[k]]]]]]\
]", "s[s][s][k[s]][k[s][k]][k[k][s]][k[s[s[k][k[s][s]]]][k[k][k[k][s]][k[s]]]]\
[k[k][k[s[s]]][s[s[k][s[s[k]]]]][s[s[k[s][s]][k]][s[k]][k[k[s[s][s[k]]]]]]]", 
        "s[s[s[k][s]]][k[s][k]][k[s][s[k[k]][s]][s]][k[s[s[s]]][k[s[s]][s[k][\
s[k[k]]]]]][k[s[k][k]]][s[k[s]][k[s]][k[k]][s[s][k[s[s[k]]][k[s[k[s]][s[s]]]]]\
]]", "s[k][s][s[s[s[s]][k[s][k[k][k]][s][k[k]]]][k[s[s[k][k[k[s[s]]]]]]]][s[k]\
[k][k[k][s[k]][k][k][s[s[k]]][s][s[k[s][s[s[k]][k]]][s[k][s[s]]][s[k[k]]]]]]",
         "k[s][k][s][s[s][s][k[s[s[s]]]][s]][k[s][s[k[s][s[s]]][k[s[s][s[k]]][\
k[s]][s[s[s[s]]][k[k][k][s][s][k][k][k]]][k]]]][k[k][s[s[s]][k]][s]][s[s[s[s]]\
]]", "s[s[s[k]]][s[k][k[s[k]][s[k[s]]][s[s[k[s]]]]]][s[s][k[s[s]]][s[k[k[s]][\
s[k]]][k[s][k[k]]]][s[s][s]]][s[s[k]][s][s[k][s[s]]][s]][s[k][s[s][s[s]][s]]]\
", "s[k][s][k[s[s][k][s[k][s][s[s]][k[s]][s[k][s[k[k][s[s]]]]][s[k][s[k]][s][\
s[k][s]][s]]][k[k][s[k[s]]][s[s[k[s]][k[s][s[s[s][k]]]]][k[s[k]]][s[k]]]]]]", 
        "s[k][s][k[s][k][k[s][s[k][k]]]][k[s][s]][s[s][k[s]][s[s][k]]][s[s][k[\
s][k]][k[k][k]]][s[s][k][s[k][s[k][k[s[k[s]]][k][k[k]]]]][s[k[s[s]][k]][s]][k]\
]", "k[s[s]][s[k][s][k[k]][s[s][s]][k[s]][s[s][k[k][k]]]][s[k[s][k[s[s]]][k]][\
s[k]][s[s][s]]][k[s[s[k]][s[s[s]]]][k]][s[k][k[k[s]]][s[s[k][s][k[s][s]]]]]", 
        "k[k[s[k]][s]][s[k[k[s]]]][s[s][s[s][s[s][k]]][s[s][s][s[s[k][s[s]][k[\
s]][k]][k[k][k][k]][k]]][s[k][s[s]][s[s[s][s][k]][s[k][s][k[s]]][s[k]]]][k[k]]\
]", "s[s[s]][s][s[s]][s[s][k[s[k]][s[s[k[s]]][s]]][s[s[k][s[s]][s]][s]]][k[k][\
k[k][k[s]][k[k][k[s]][k[k][s[s][s][s]]]][s[s]]]][s[k][s[k[s]]][s[k[k][k]]]]", 
        "s[k[s][k[k[s][k]][s[s]]][s[s[k]][s[k[s][s]]][k[s]][s[k][k[k[s]]]]][s[\
k[k[s]]][k[k]][k[k[s]]][k[s][s]][s[s][k]]]][s[s[s]][s[s[s]][s][s[k]][s[s]]]][\
s]", "s[s[k[s][k[k][k]]][k[k][k]]][s[k][s[k[s]]][k[s[k][k[k][s[s][k]]]][s[k[k]\
][s]][k[s[s][s]][s]]]][s[s[s][s[k]]][s[k]][k[s[s][k]][k[k][s[k][s]]][s][s]]]",
         "k[s][s][s[s][s][s[s]]][s[k[s][s][s[s]][k[k[k][s]][k][s[s[s]]][s[k]][\
s[s]]]]][s[k][s[s][k[s]][k[k]]]][s[s][s[k[s[s]][k[k]]][k[s[s]][s[k]]]][k[k[s]]\
]]", "s[k[k][s[k[s]]][k[s[k]]][k[s][k[k]]][s]][s[s][s[k[s][k[k]][k[s][k[k][s][\
k][k[k]]]][s[s][s]]]][k[s][k[s][k]]]][s[s][s]][s[k[k[k]]][k[k[s][s[s][s]]]]]",
         "s[k[s][s][s]][s][s[s][k[s]]][s[s][s[k[s][k[s]]][s[k][s][k[k]]][s[k]]\
[s]][k[s]][k[s[k][k][k[k]][s[s[k]][s][s][s]]][s[s][k][k][k]][s[s[s][s[k[s]]]]]\
]]", "s[k[s][s[k[s][k[s][s]]]]][s[s][s][s[k]]][s[k[s[s][s]]][k[k][s[k]]][s[s]]\
[k[s][k]][k[k[s][s[k]][k[s[s]][k][k[k[s][k][k[s][k]]]]]]][k[s][k]]][k[s][s]]",
         "s[s][s[s[k[s[s]]]][k[k[k][s[k]]]][k][k[s][k[s][k][s[k][s][k][s]]]][\
k]][s[s[s[s[s]][k]]][s[k][s[s][s[s[k][k]]]]][s[s]][k[s][k[k][k[s[k]]]][s]][s[\
k]]]", "s[k][k][s[s][k[k[k]]][k[k][s[k]][k[s]]]][s][s[k][s][s[s][k]]][s[s[k][\
k[k]]]][s[s][s[s[k][k]]][s[k[s][s[s]][s]][s[s]][s[s][s][s]]]][s[s][s[s]][s[s]]\
]", "s[k[s]][k[s[s][k[s]]][k[k][s[s][k[k][s[s]][k][s]]]][s[s][s[k]]][s]][s[k[\
s[k]][k[s]][s[s[s]][k][k]][s[k[k][k[k[k][k[k[k]]]]][s[s[k]]]]]][s[k[s[k]]]]]",
         "k[k[s]][s][s[k]][k][k[s][s][s[s][k[k[k]][s[k]]]][k[s][k[s][k]][s[k]]\
[k[s][k]]][s[k][s][s[s]][s][k[s[s]][k]]][k[k[s][s]][s][s]][s[k][s][k][k[s]][k]\
]]", "s[k][s][s[s][k][s[s]]][k[s[s]][k[k]][k[s]]][s[k][s[k[k][s][k[s][s[s[k[s]\
]][k][s]][k[s[s][s[s]]]]]]]][s[k][s]][s[s[k]][k[k[s[k]]][s[k][k]][k[s][s]]]]",
         "k[s][k[s]][s[s[k[k]]][k[k][k[k][k]]][s[s[s]][s[s[s[s[k]][k[k[s[s][s]\
][s[s]]][s[k][k][k[k]]]]]]]]][k[k[k][s[s]][s]][s[k]][s]][s[k][s][s[s][k]][k[k]\
]]", "k[s[s[s]][s[s][s]][s[s][k[k[s]][k]][k[s]][s[s[s][k]]]][s][s[s[s]][k[s][\
s[s][s][k]][s[k][s[k][k[k]]]][s[k][s][k[s]][k[k[s]]]]][s[s][k[k][k]][s[s]]]]]\
", "s[k[s][k[s]]][k[k[s][s[k[s][s][k][k[k[s]]]][k]]]][k[k[s][s]]][k[s][s]][s[\
s][s][s[k[s][s][k[s]]]][k[s][s[s[s]]][k[s]]]][s[k][s][s[k][k[s]][k][s]][s]]", 
        "s[s][k[s[k][k[s][s][k[k]]]][k[k[s[k[k][k]]][k[s[k][s]]]][k][s[s[k[k]]\
[k[k]]]]]][s[k[s][s][k]][k[s][k]][s[s][k[s][k]]][s[s][s]][s[k][s[k][s]]][k[k]]\
]", "s[k][s[s]][s[s]][s][k[s[s]][k[s[s[s]]][s]]][s[s][k][k[s[k[k]]][s]]][s[s][\
s[k[k]][s[s][k]]][k[k[s]][k][s[s[k]]]][k[k[k][s[s]]][k[s]][s][k[k][k]][s]]]", 
        "s[s][k][s][s[k][s[k[k][s[s][s]]]]][s[s[s]][s]][s[k][s[s[s[s[k]][k]][\
s]][s]][s[k][k[k]][k[k[s][k[k][s]][s[k][k[k]]][s[s[k]][s][k[s]]]][k[k][s[s]]]]\
]]", "s[s[k[s]][s][k[s]]][s[s][k]][s[s][k][s[s[k]]]][k[k[s]][s[s]][s[s][k]][s[\
s][k[k[s[k[s]]]][s[k][k[s]][s[s[k]]]][k[k][s][s[s]]][k[k[s]]]]]][k[s[k]][s]]",
         "k[s][k][k[s[s][s]][k[k]][s[s[s][s]]][s[s][s]]][s[k[k[s][s][k[s][s[k]\
[s]]]][k[s[k]][k[k][s][k[k]][s[k]][k[s[k]][k[k]]][k[s]][s[k][k[s[s]]][k[k]]]]]\
]]", "s[s][k][s[s[s]]][k[s[s[s]]][s[s[s[s]]][s][k[s]][k[k[s][k]]]][s[k[s[s]]]]\
[s[k[k[s]]][k][s[k]][k[s]][s[s][s][s[s]][s[s][k][s[s]][s[s[k]]]]]]][k[s[k]]]",
         "s[s][k[s[k[s]]][k[k[s]]][k[s[s][s]][k]][s[k][k[k][k[k][k[k[k]]]]]][\
s[k][s[k[k]]][s][k][k]]][s[s][s[k[k]][s][s]][s[s[s]]][k[s][k[k]][k[s][k[k]][s]\
]]]", "s[s[s]][s[s][k[s]][s]][k[k[s]][k][s][s[s[k[s[s][s]]][k]]][s[s][s[k[s[s[\
s]]]]]][k[s[k]][s][s]][s[k][k[s]][k][s][k[s[s][s[k[k]]][s]][k][k[s][s[k]]]]]]\
", "s[k[s[k[s]]][k[s][k]][s[s]][k[s[s][k]][s]][k[s[s]][k[k]][s[k[s][k]][k]][s[\
s[k[s][s]]]][s[s][k[k]][k[k][s]]][s[s[k][s]][s[k]]][s[k][s][s[s]][s[k]]]]]", 
        "k[s[s[s][k]][k][k[s][s][s[s]]]][k[s][k][s][s[k[s[k]][s]]][s][s[s]][k[\
s][k[s][s[s][s]][s[s]][k[s]][s[s][k]]]]][s[s[s[s]][s[k]][s[k][s[k[k][k]][k]]]]\
]", "s[s[s][k]][s[s[s[k]]]][s][s[k][k][k[s[s]][s[k[k]][k]]]][s[s[s[s[k]]][k[s]\
]]][s[s[s]][s[k]][s[k][s]][s[k[s][s]][s][k[k[s]][s[s[k][s[k]]]][s[s][s]]]]]", 
        "k[s][s[k[k[k]]]][s[k][s[k]][s[s[k]][s[s[k]]]][s[k[k]]][k[k][k[s]][s[\
s[k[k]]]]]][s[s[s][k]][s[s[k][s[s][k[s[s]]]]]][s[s[k]][s[s[s][k][k][s]][s[s]]]\
]]", "s[k[s]][s[k][k][s][k[k][s[s]][s[s][s]]]][s[k[s]][s[k][k][s]][s[s[s][k][\
k]]][s[s[s]]][s[s[k[s[k][s]][s[s]]]][k[s][s[s]][k[k[s]][k[k]][s[k]]][k[k]]]]]\
", "s[s][s[k][k][k[k][k[s][s]]]][k[s[s]][s[k[s[s[s]][s]]]][s[k][k[k][k]]]][k[\
s][s][s[s][s[s[k][s]]][s[k][k[s]][s[s][k[s]][s[s][s]]]]]][k[k[s]][s][k[k]]]", 
        "s[k][s][s][s[s][k[k]]][s[s][s[s][s]][s[k][k[s]][s][s[k]][s[k][k[k][k[\
k][s][k][s[k]]][k[s]]][k[k][s[s[k]]][s[s[s]]]]][s]]][s[k][k[s[k[k]]][s][k][s]]\
]", "s[s[s][s[k]]][s[k[k][k]]][k[s[s]][k][s[k]][s][s[s]][s[k[s]]][s[k[k]][s[k[\
s][k]]][k[s[s][k]][k[k]][k]][k[k][k]][s[k[s[s]]][k][s[k[k[s][s][s]][k]]]]]]", 
        "k[s][s[k][k[s[s]][s[k]]][s[k][s[k]][s[s]][k[s[s]][s[k]]]]][s[s[s]][s]\
[s[s[k][s]][s[s][s]][s[s][k[s][k]][s[k][s]][s[k][s[k]]]][k[s][k[s]][k[k][k]]]]\
]", "s[s][k[s[k]]][k[s][k[s]][s[s[s]][s][s[s]]]][s[k][k[k[k[s][s[s]]][s[k]]]]]\
[k[k[s][k][s]][s[s[k]][s][s[k]]][s[s[k]][s][s[k][s][k[k[k]][k[s][k][s]]]]]]", 
        "s[k[s[k]][s[k]][s[k][k[s[k]]]][s[s][s[s[s[s]][k]][s[k][k][k[k]]]]]][\
s[k][k[s]][s[s][s[s[s[s]][s]]]]][k[s[k]][s][s[s][s[s[k]][s[s[k]]]][k][k[k]][s]\
]]", "s[s[s[s[s]]]][k[k][s]][s[s][k][s[s]][s[k[s][s][s[k[k]]]]][k[s[k][s[k[s]]\
]]]][s[s[s]][k[k[s]][k][s][s][k]][k[s][k[k]][k[k[s][s[s][s[k]]]][k[s[k]]]]]]",
         "k[s][s][s][s[s]][s][s[k[s]][s[k]][k]][s[k[k]][s[k[s]]][k[s]][k][k[k[\
k][s[s][s]]][s[s[s][s]][k[k]]][k[s][s[k]]]][s[k]][k[s][s[k]][k[s[s]]][s[k[k]]]\
]]", "k[s][k][s[k][s]][k[k]][s[s[s]][s][s[s]][k[s][k][s][k[s]][s[s[s]]]]][k[k[\
s[k[s][k[k[k]][s[k[s]]][s]]]]][k[s[k][s][s[k][k]]]][s[k][s][k[k][k[k][k]]]]]",
         "s[s][k][s[s][s][s[s]][k[k[s][k]]][s[k[s]]]][k[s[s][s][s[s[s]]][k[s]]\
[s[s[s][s][k[s[s]][k[k][s]]][k]]]]][s[s[k]][k][k[k[s][s]][k[k][k[s]]][s[s[s]]]\
]]", "s[s[s]][k[s][s]][k[k]][s[k][s[s]][s[k]][s][s[s[s[k][s][s[s]]]]][s[s][k]]\
[s[k][k[k[s][k]]]]][k[s][s[k[s]][k]][k][s][s][k[s][k[s]][s[s][s[k]][s[s]]]]]",
         "k[s][s[s]][k[k[s]][k][s][k[s[s][s]]][k[s][s[s][s][k]]]][k[s[s[k]][s[\
k]][s]][s[s]][s[k][s]]][s[k[s]][s[s[s[s[k]][s]][k]][s[k]]][s[k]][s[s][s[s]][k]\
]]", "s[s[s]][s][s[s][s[k][k[s]]][s[k][s[k]]]][s[k[s]][s[s]][k][k[k]][s[s][k][\
k[s][s][k[k][s]]]]][s[s[k][k][s][k]][k[s[s][k]][s[k][s[k]][s[k[s[s[k]]]]]]]]",
         "s[s][k][s[s[s][k[s[s[s]]]]][s[k]]][k[k[k]][s][k[s]][k[s][k[k][s][s][\
k[k]]]][s[k]]][s[s][s[k][k[k[k][s[k][s[s]]]]]][s[s][k[s]][k[s][k[k[k]]]][k[k]]\
]]", "k[s[k[s][k[s]]]][k[k[k]]][s[s][k]][s][s[k][s]][k[k[s[s]][s]][s[s[k][k][\
s]]][s[s]][s[s][s[s]][k][s[k[k[s]]]][s[k]][s[s]]]][k[s[k][k[s]][s[s][s[k]]]]]\
", "s[s[s[k[s]]]][s[k[s[k][k[k]][s]][s[k[s][s]]][k[k][s[s]]][s[s][k[s]]][s[s]]\
]][s[s[k]][s][s][s[k][s[k[k]]]]][k[k[s[k][k]][s[k][s]]][s[k[s]][k][k[k]]]]", 
        "s[s[s[s][k[k]][s]]][k[s[s]][s][k[s][k][s][k[s]][k[k[s]]][k][s]]][k[k[\
s]][k[k[s[s[k][s]]][k[k][k[k[s]]][k]]][k[k]]][s][s[k]][k[s[s[s]][k[s]][s[k]]]]\
]", "k[s[k[s]]][s[k][s[k]]][k[s][k][s[k[s[k[k][k][k[k]]]][s[k[s[s][k]]][k[s][\
k[k[k[s]]]]]]]][s[s][s][s[k[s[s][k]][k[k][s]][k]]][s[k][s][s[s]][k[s[s]]]]]]",
         "k[k][k][s[s[k]]][k[k[k][s[k][s[k[k]]]]]][s[s[s][s]][s][s[s[k[s[s]][\
s[s]]][s[s][s[k]]]]][k[s][s][k[s[s]][s][s]][k][s[k][s][s][k[k][k]][k][k[k]][k]\
]]]", "s[s[k][s[s[s]][s]][k[s][k][s]][k]][s][s[k][s]][s[k[s]][s][s[s][s[k][k[\
s]]][s]][s[s][s][k]]][k[k[s]][s][s[k[k]][s[s]][k[k[s][k[k[k[s[k][k[s]]]]]]]]]]\
", "k[k[k]][s][s][s[s[s][s]][k[k][s[s][s][k[s]][s[s][s[s[k][s]]]][k]][k][s[k]]\
][s[s][s][k[s][k]][s[s][k][s[s][k][k[s][k]][s[s][s[k[k][k]]]][s[s[k]]]]]]]", 
        "k[s][k][s[s][k[s]][s[s[k]][s[k[s][s]][s[k[s]][k[k]][k[s][k]]]]][s[s][\
k[k][k][s][s]]][k[k][k][k[s[k]]][s[s][s][s[k]][s[k[k]][s[s][k]][s[s][k[s]]]]]]\
]", "k[s][k][s[s[s]][s[k][k]]][s[s[s[s][k]][k[k]]]][k[k][s[s][k[s]]][s[k[s][s[\
s][k]]][k[k][s[k]]][k[k][s[s[s]][k]][s][k[s][s[s]]][s[k][s[k[s]][s]]][k]]]]", 
        "k[s[s][s[s][k[s[s]][s]]][s[s]][s[s[k]]]][k[k][s[k][s[k]]][k[s[s]][k]]\
][k[s[s]][k][k[s]]][k[s[k][s[k]][s[k][s][k[k]][s[s[k]][s][s]][s[k][s[s]][k]]]]\
]", "s[k[k]][s[s[s]][k]][k[s][k[k[k]]][k[s[k][k]][s[s]]]][s[k[k][s][k][k[k][k]\
[k[s]][s[k]]]]][s[s][s[k][s]][s][s[s][s[k]][s[s[k]][k]][s[s[s]][s[s][k]]]]]", 
        "s[s][k][k[k[k][k][k[s[s]]][s[s[k]]][k[s[k]]]][k[k][s[k]][k[s][k][s]][\
k]]][s[k][k][s[k[k]]][k[s][s][k[s[s][s]][s]][s[s][s]]]][k[k][k][s[k][s[k]][k]]\
]", "s[k[s]][s][s[k]][s[s][s][s[s][k][s]]][k[k][s][s[k][s[k[s][k]][s]][s[k[s][\
k]][s]][s[k[k]][s[k]][s[s][s[s][k]][s]]]][k[k[s]][s[s][k][k[k[k]]][s[k]]]]]", 
        "s[s[s][k[s[s[s]]]]][s[k][s][s][s][k][k][k]][s[k[s]][s[k]][s[k]][k[s[\
k[s][s]]][k][k[k][s[k][k][k[k[k][k][k[s[s]][s]]]]]]]][k[s][s[k][s[s]][k[k[k]]]\
]]", "k[s][s[k][k[s]][k[k][s][k[s]][s[s][s[k[k[k]][k[k[s[k][s[k]]][k[s]]]]][k]\
[k][s]]]]][k[s][s[k]][s[s]][s[s][s[k][k[s]]]][s[s][k]][k[s][s][s[s[k]]]]][k]",
         "s[s[s[s]]][k[k][s[k[k]][k[k]]]][s[s]][s[k][s[s[s]]][k[s][s[k[k]]][k[\
s][s[k]]]][s]][k[s[s][k]][k[k][k[k]]][s[k][k[s]]][k[s][k][k[s]]]][k[k][k][k[k]\
]]", "s[s][s[s][k][s]][s[s[s][s[s]][s[k]]][s[s[s[s]]][k[k][k[s]][k[k[s]]][s]]]\
[s[k][k]][s[s][s[s]]][k[k[s]][k[k[k[s]]]][k[k]]]][k[s[k]][k][s[s][k[s]]][s]]",
         "s[s][k[s[s][s[s]]]][k[s][s[k][s]][s[k[s]][k]]][k[s[s[s][s[s][k[s]][\
s]]]][k[s][s[k]]][s[k[k[s]]][k[s[s]]][k][k]]][k[s[s[s]]][k[k]][s[s[k]][s][s[k]\
]]]", "k[s[s]][s][k[s][k[s]]][s[s][k[s][k]]][k[k][k][s[s][k][k]][k[k[s]][s[k][\
s[s]][s[k[k]]][s]][s[k][k][s[k[s]]][s]][k[s][s[k][s]][s[k[s[k]][k[s]]]]]]][k]\
", "s[s[s]][s][s[s]][s][s[k][k]][s][k[s][k[s][s][k[s]]][k[k[s][k[k][s]]][k[s[\
s]][k[k[k][s]]]]][s[s][s[k]]][k][k[s[k[k]]][s[s[s][s[s[k][s[k][s]][k]]]]]]]", 
        "s[s[s][k][k[s][s][s][s[k]][s]][k]][s][k[s][s][k[k[s][s[s[s]][k[k[k]][\
s[k]]]]]][k[s][k[s]][s[k][s[s]]][s[s[k][s[k[k]]]]][s[s][s[s]][k[s][s]]][s[s]]]\
]", "k[s][k[s[s[k]]]][s[s[s[s]]][k[s][k[k]][s[s[k[s[k]]][s[k]]][s]]]][s[s][k]]\
[k[k[s]][k][k[s][k[s]]]][s[s][k][k[k][s[k][k][s[s]][s]]][k[k][s]]][s[k[s]]]", 
        "s[k][k][s[s[s]][s]][s[s[k[s]]][k[s[k][s]]][s[s][s[s]][s[k][s[s][k[s[\
s]]]][k]]]][s[s]][s][s[k[k]][s][k][k[s][k]]][s[s][s[k][k]][k[k][s[k[k]]][s][k]\
]]", "s[s][s[k][s][k]][k[s][k[k[k]][k]]][s[s[s]][k[k][s]]][k[s[s[s[s]]]][k][s]\
[k[s[k][s][k[k]]][s][k][s[s]]]][s[s[k][k][k[s]][s]][k[s][s[k[s]]][s][k[k]]]]",
         "s[s[s][s[s[s]][s][k[k][s[s][k][k[s]]][k[s[s]]]]][s[s][s[k[s]][k[k][\
s][k[s][k[s]]]]][k[s[s]][k[s]][s[s[s][k]][k][s][k[k][k]]][k]][s[s[s[s]][s]][s]\
]]]", "s[s][s[s][s[s][s][s]][s]][s[s[s[k[k]]]][k[s[s]]][k[k[s]]][k[s][k[s][k]]\
[k[s[k[s[k]]][s]][k][s[s]]]]][s[s[k][s[s[k][k[k]]][s]]][s[s][s]]][s[k[k][k]]]\
", "s[k[k[k][s]]][s[k[s][k]][s][s[s][k[s]]][k[k[s]][s][s[s]][s[k[k][s]][k[k[s]\
][k][s][s]][s[s][k][s[s][s[k]][s]]]]][k[k][s[k][k][k[k][s]]]]][s[k][k[k]]]", 
        "s[s[k[k]][k]][s[s]][s[k]][s][k][s[s[s[s][k][s]][s]][k[k[k]][k[s[k]][\
s[s]][s[k][s][s[s]]]]][s[s][k][k[k][k]][k[s][s[k][k][k][k[k][s]]][s[s][s[k]]]]\
]]", "s[k][k][s[s[s]][s]][s[s[k[s]]]][s[s[s[s[s]][s][s]][s[s[k][s]][s][k[s]]]]\
][s[k][k]][k[s][k[s][s]]][s[k][k[s]][k[k[k][s[k]][k[k]]]][s[k]][s[k][s[k]]]]",
         "s[s[k][s][k]][s[k][s]][k[s[k][k]][s[s][s[s][s[s]]]][s[s[k[k][k[s]]]]\
][s[s[s][s]][k[k][s][s][k]]][s[s[k[s]][s]][k[k][k[k[k]]][k[k][s[k]]][s[k[s]]]]\
]]", "s[s[s]][s][s[k[k][k[k[s][s[k]][s][s[s[k]]]]][k[k][k[k]]][k[k[s]][k][s[k[\
s]]]]][k[s[k]][k[k]][k[k][s[k][s][s[k]]][s[k[s[s]]][k][k[s]]]]]][s[s[s[s]]]]",
         "s[s[k[k]][k][s[k[s[s[k[s]]]]][s[s][s][s][s[s[k][k[k]]]]][k[s][s[k[s]\
]][s]][s[s[k][s[k]][k[s]][s[s[k][s[k[k][k]]][s[s[s][k][k][s]]]]]][k[k][s[k]]]]\
]]", "k[s[s]][s[s]][k[k[k[k[s]][k[s]]]][s[k]]][s[s][k[s[k]]][s[s[s][s]]][k[k][\
s][s[k[s]][k]][s[k][s[k]][s[s][k]]]]][s[s[k][s[s]]][k[s[k[s]][s][s[k]]][k]]]",
         "s[k][k[k][k][k[s][k[k][s[s]]][s[k[k[s]]][s[k[s[s]]]][s][s[k]][k[k][\
k[s[s]]]]][s[s][k[s]]]]][s[s][k][s[k[s[s][k[k[s]][k]]][s]]]][s[k][s[s][k[k]][\
s]]]", "k[k][s[s[s][k][s][s]][k[s[k[s]]][s[s][s]][k]][k][k[s[k[k]]][s][k[s]][\
s[s]][s]]][k[s[s]][s[s][k]][k[s][k[k][s]]][s[s][s[k]][s[s]]][s[k[s[s][k[k]]]]]\
]", "s[s[s]][s[s][k][s][k]][k[s][k][s[s][k[s]]]][s][s[s[s[s]]][k[s][s][s[s]]][\
s[s][k[s]]][k[k[s]][k][s]][k[k][k[k][s[k[s][s]][k[k][k]]][s[k][k[k[s]]]]]]]", 
        "s[s[s]][k[s[s][s[s][k]][s[s[s]][s[s][s[k[k]]]]]][k[s[k[k]]]]][k[s[s][\
s[k][k][k]]][k][s[k][s[k]][s[s]][s[k][k]][k[s][k[s[k]]]]]][k[s[s]][s[k[k]][k]]\
]", "s[s][k[k][s[k][k[k]][s]][k]][s[s[s[s]][s[s][k[s[s][s][k]][s[s[s]]][s]]]]]\
[k[s[k][s]][k][k[s][s[k][k]][s[k][k][s[s]][k[k]]]][k[s[s]]][s][s[k][s][s]]]", 
        "k[s[k]][k[k]][s[s][s][s[s[s]]][s[s[s][k[s]]]][k[k][k][k[s[s]][k][k[k]\
[k][k[s]]]][s[s[k]][s[k[k[s[s]]]]][s[k][k[k][s[s][k]]][k[s]][k[s][s]][k[k]]]]]\
]", "s[s[s[s]]][s[s[s][s[s]]]][s[k[s]][s[s][s]]][s[s][k[s]][s[s][k]][k[k[s]]][\
s[s]]][k[k[k][k][s][s][k][k[s][s][k[s]][s[k]][s][k[k][k[s][k[k]][s[k]]]]]]]", 
        "s[s[s][s[s]][s]][s[s[s][k[k[k][s]]]][k[s[s][s[k[s]]]]]][s[k[s]][s[s]]\
[s]][k[s][s][s]][s[s[k[k[k[k]]]][s[k[k]][s]][k[s]]][k[s]][k[s[k][s[s][k][s]]]]\
]", "s[s][k[k][s]][s[k[k[s[k]]]]][s[s][k]][s[s[s]][s[k][s][k[s][k[s][k][k[k][\
s]]]]][k[s[k][k[s]][s[s[s[s]]][s[s[k]][s]]]][k][s[s[k]][k][s[s[s][k]][k]]]]]",
         "s[s[s]][s[s[s]][k[s]][s][s[s][s][s]][s[s[s]][s[k]][s[k][k[k]][s]][k[\
s][k[k]]]][k[k][k][k[s[k]]][k[s][k]][s[s]][s[k][k[k][s[s[k][s]]][s[s]]]][k[k]]\
]]", "s[s][s][k][k[s][s[k][k]][s[s]][s[k[k]][k[s[s]]][s[s][s[s]]]]][s[s][s[s][\
k[k[s]]]][k[s[s][s][s]][k[k][k[s][s][s]]]][s[k][k[k][k][s][k[k[k[k]]][s]]]]]",
         "k[s[s[k]][s[k][k[k][k]]][k[s][k[k]][s[k][s]][k][s[k[s[k][s[k[s]]]][\
s]]]][s[s[s[k][k]]]]][s[k]][s[k[s[s[k][k[k]]][s]]][k[k][s[s]][s][k][s][k[k[k]]\
]]]", "k[s][s[s[s][k]]][s[k[k]][s][k][s[k]][s[s][s][s[s]][s][s[s][k[s][k[k]]]]\
[k[s]][k[s[s[k][s][s[k[s]][s]]][k[s]]][s[k]]][k[k[k]][s[k][k[s][s[k]]][s]]]]]\
", "s[s[k[k[k]][s[s]]]][k[k][k[k][k]][k]][k[s][s][k[s][k]][s[k[k[s][k]][s[k]]]\
][k[k][k][s][s[k][k[s]][s[k][k][k[s]]][s[k[s]][s[k]]]]][s[s[s][k[s[s]]]]]]", 
        "s[s][k][s[s][s[s]][s[s][k]]][s][s[s[k]][k][k][k[s[k][k][k[s]][k[s]]][\
s[k][k]][s[k[s]][k][s[s]][k[k]][k][s[k[s]][k[k]]]]][s[k[k]][k][s[k[s][k[k]]]]]\
]", "s[k][s][k][s[s[s]]][k[s][k]][s[s]][s[k][s[k]]][s[s[k[k][k]][k][s[s]][s[s[\
s]]][s[s[s]]][k[k][s][s]]][k[s][s[s][s]][s[s][s[s[s[s]][k]]]]][k[s[k][k]]]]", 
        "s[k[k[s][k[s]]][k[k[s]][k[s[s[s]]]][s[k]][s]][s[s[k[s][s]]][k[s][s][\
s[k[s]]][s[s][s[s]][s][s]]]]][s[k[s[s][k]]][s][s[s][k[s[k]]][k[s]]][s[k[k]]]][\
s]", "s[s][k[k]][k][k[s[s]][k[k]]][k[s[k[s]][s][s]][k[s][k[s][s[s]]]]][s[k[s]]\
[s[k]][s[s[k]][s]][s]][s[k][s][s[k[s][s]][s[k]]]][s[s][k[k[k]]][k[s][k][s]]]",
         "s[s][k[s[s]][s[s[s]]][k[s[s[s]]][s[k[s]]]]][s[s[k[s]][s][k]]][s[k[k]\
]][k[k[s]][s[k][s][k[s][k[k][s]]][k[s[k]]]][k[s]][k[s]][k[s[s]][s[s[s]][s]][k]\
]]", "s[s][k[k[s[s[k]]]][k[s[s]]][k[s[s]]][k[k[k]][s]]][s[s][s][s[s][s[k]]][s[\
k[s][k]]][s[k][s][k[s[k]][s]]]][k[s[k]][s][k[s[k[k][s[s]]]]][s[k][s][k[k]]]]",
         "s[s][s[k[k[s][s]]][k][s[s][s]]][s[s][k[s][s][s]]][k[s][s[s]][k][s[s]\
[s]][k[s[s]][s]][s[s[k[k[s]]][k[s[s][k[k]]]]]][k[s[s][k[k[k]]]][k[k][s][s][k]]\
]]", "s[s[s[s]][s[k][k[s[s]]][k]][k[s[k][k[k]]][k[k]][s][s[s][s[k][s][s]][s[s]\
]]][s[s][s][k[s]][k[s[k]][k[s][s]][k][k[k]]]]][k[k[s][k][s[s[k]]][k[k[s]]]]]",
         "s[s[s][k[k[s]][k[k][s[s[k]][s[s[k]]][s[k]]]]]][s[k[s][k]]][s[k[s][s]\
][s[k][s]][k[s][k][k[k][s[k]][s[s]][s][k][k[s][s[s[k][k[k][s][s]]]]][k[s[s]]]]\
]]", "k[k][k[k][s]][k[s][s][s][s[s]]][s[s][s][s][k[k][s[s[k]][k[k]]]][s]][s[s[\
s][s[k[s[s]]]]][k[s][s]]][k[s[s][k[s][s[s]][s[k][k[s[s][k[k[s]]]]][k[k]]]]]]",
         "s[s][s][s][k[k[s]][k]][k[s[k[k][s[s][k]]]][k[s[s][k[k]]]][k[k][k[k[\
k][k[s]]][k[k]][s]]]][k[k[s]][k][s[s[s][s]][s[s][k]][k[k]][s]]][s[s][s[s][s[k]\
]]]", "s[k][s[s]][k[k]][k[s][s]][s[k][s]][k[k][k[s[s[s]]]]][s[k][s][k][s[s]][\
s[k][k][s]][s[k]]][s[s[s[s][s[s]][s[k[s[s[s]]]]][s]][k[s][s][s[s][s]]][k[s]]]]\
", "s[k[k]][s[s[s][s[s]]][s[s][k]]][s[s][k[k[k[s]]][s[k][s]]][k[s[k[k]]][k][s]\
[s]][s[s[s][k[s]][k[s][s]][s[k]][s[s[k][k]]]][k[k][s[k][s[k]]]][s[s][s]]]]", 
        "k[s][s[k[s][s[k]]]][s[k][k]][s[k][k[s[k][s[k]]]][s[k][s[k][s[k]]][k[\
k][s]][k[s[s][k][s[s][s]][k]]]][s[k[k]]][s[k]]][k[s][k][s[s[s]][s[s]]]][k[s[k]\
]]", "k[k][k][s[s[s]][s[s]][s[k[k][k[s]][s[s][k]][k[k]][k[s]][s[s]]][k[k[k]][\
s[k]]]]][s][s[s[k][s]]][s[k[k]][s][s[s[s]][s[k[k]]][k]][s][k[k][s][k][s[s]]]]\
", "s[s][s[s[k[k][k]]]][s[k][k][s[s][k]][k[k[k][k[k]]][k]]][s[s[k][s][s][s[s]]\
]][s[k][s][s[k[s]]][k[k[s]][k[s]]]][s[k][s][k[s[k][k]]][s[k][s][s[k][k]]]]", 
        "s[s[k[s[k]][k[s]][s[s]]]][k[k]][s[s]][s[s]][s[k[s]][s[s]][s][k[s][s][\
k]]][k[s][k[s[s][k[k]]][k][k[k[s[k]][k]]][s[k][k][s]]][k[k][k[k]]]][s[s]][s[s]\
]", "s[k][s][s][k[s][s[s[k][s]][s[s][s]]]][s[s][s][s[s][k][s]][s[k][s][k[k[s[\
s][s[k][k]]][s[k[s][k]][k[k][k]][k[k]][s]]]][k[k][k[s[s]][k][k]][s[s][s]]]]]",
         "k[k[s][k]][s[k[k]][s[s]][s[k]][s[s]]][s[s][s[s][s][s[k[s]][s[s]][k[\
s][s[s][k[s][s]]][k[k][k[k]][s]][k[s][k[k[k]]][k][s[s]]]]][s[s[k]][k[s]][k[k]]\
]]]", "s[s][k][s[s[k]][s[s][s][s[s]]]][s[k[s]][s[k[s]][k[s[k]]]][k[k][s[s]][s[\
k][s][k[s]][s][k[s[k]]][s[k]]]][k[k[k[s[s]]]][k[k][k][k[k[k]][k[k[k]][k]]]]]]\
", "k[k[k]][k][s[s[k]]][s[s[s][s]][s[k]]][s[s][k[k][k[s]][k[s][s]]]][s][s[s[k]\
[k[s[s]]]][k[k][s][s[k][s[k[s][k][k]]]][s][s[k][s[k][s[s]][k]]][s[s[k]]]]]", 
        "s[k[k]][s[k][s]][s[k][s][s[s[k][k][s]][s[s][k[k]][s][s[s]][k[s][k[s[\
k]]][s]][k[k[s[s][s]][s[k[s]]]][s]][s[k][s[s]][s[s]][k[s][k[s]]]]][s[k][k[s]]]\
]]", "s[s][k[k[s[s][s]]][s[k[s]]]][s[s[k][s][s[k][s]][s[k[s][s[k[k[s]]][s[k]]]\
[s]]][s[s][s[k[k[s][k]]]]][s[s][k][s][s[k[k]]]]]][s[k][k][s[s][k[s]]][s[s]]]",
         "s[k[s][k[s]]][s[k[s]][s][s[k[s][k]][k[s][s][k[s][k]][k[k]]]][k[k][k[\
k]][s[s][s]][s[k[k]]]]][s[s[s]][s[k][s]][s[s][s][k[s]][k[s[s]]][k[s[k]][k[s]]]\
]]", "s[s][s][k[s][s][k[s[k]][s[s][s][k][k[k]]][k]]][k[s][s[s[s[s[s]]]]][s][k[\
s]]][s[s][k[s]][s[k]][s[s][k[k]][k[k]]]][k[k[s][s[s[s[k]]]]][s[s][k][s[s]]]]",
         "k[k][s[s]][k[k][s]][s[k[k[k[s][k[s][s[s][s]]][s][k]]]][k[k[s[s]][s][\
s]][k]]][s[s][s[k][k][s][s[k[s][k]][k]]][s[s]][s[k][k][s[s[s]]]]][s[k[k]]][s[\
k]]", "k[k[s]][s[k[s]][k][k[s[k]][s][k[k]][s[k][s]][s[k]]]][s[k][s[s][s]][k]][\
s[k[s[k[k][s]][s][s[k[k]]]]][s[k[s][s][k[s][k]]][s[s][s][s]]][s[s[s]][s]]][k]\
", "k[s[s[s]][s][s[s][s][s]]][s[k[k[s]][k[k[s[s]][s]]]][k[s[s]][k[s][k][s[s[k]\
]][k]][s[k[k][k][k[k]]]]]][k[k][s][s[k][s[s[k[k]][k]]][k[s]][k[k][k][s]]]]", 
        "s[s][k[s[s]][s[s[k[s][s][s]]]][s[k][k[s[s]][k[s]][s[s]][s]][k[k][s][\
k][k[k[k][s]]][s[s]]]][k[s[s]][s][k[k[s[k]]][s[k[s]][k]]][s]][s[s][s[k][k][s]]\
]]", "s[s][s[s][k[s]][s[k[s[k][s[s]]]]][s[s[s[s[k][k]]]]][k[s][k][s][k[s][k[s[\
k]][k[k[k]]][s[k][k[s]][s]]]][s[k[s]][k[s][k[s[k][k[s]]]]][k[s][s[s][s]]]]]]"}\
, "Output" -> {
       True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        True, True, True, True, True, True, True, True, True, True, True, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False}], 
    "Predictions" -> {
     False, True, True, True, False, True, True, True, True, True, True, True,
       True, True, True, True, True, True, True, True, False, True, True, 
      False, True, True, True, True, True, False, True, True, False, True, 
      True, False, False, True, True, True, True, True, False, True, True, 
      True, False, True, False, False, True, True, True, True, True, True, 
      True, True, True, True, True, True, True, False, True, False, True, 
      False, True, True, False, True, True, True, True, True, True, False, 
      True, True, True, True, True, True, False, True, False, False, True, 
      True, True, True, True, True, False, True, True, False, False, True, 
      True, True, False, True, True, True, True, False, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, False, True, True, False, True, True, True, True, False, 
      True, True, False, True, True, True, False, True, False, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, False, False, True, False, True, True, 
      True, False, True, True, True, True, True, True, False, False, False, 
      True, False, True, True, True, True, True, True, True, True, False, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, False, True, False, True, True, True, 
      True, True, False, True, True, True, True, True, True, True, True, 
      False, True, True, True, True, True, True, True, True, True, True, True,
       True, True, False, True, True, True, True, False, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      False, True, True, True, False, True, True, True, True, True, True, 
      True, True, True, True, False, False, True, False, True, True, True, 
      True, True, True, True, True, True, True, False, False, False, True, 
      False, True, True, True, True, True, True, False, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, False, False, False, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, False, 
      False, True, True, True, True, True, True, True, True, True, True, True,
       False, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, False, True, True, True, True, True, 
      False, True, True, False, True, False, True, True, True, False, True, 
      True, False, True, True, True, True, False, True, True, True, False, 
      True, True, True, True, False, True, True, True, True, True, True, True,
       True, True, True, True, True, True, True, True, True, True, False, 
      True, True, True, True, False, True, True, True, True, True, False, 
      True, True, True, True, False, True, True, True, True, False, True, 
      True, True, True, True, True, True, False, False, True, True, True, 
      True, True, True, True, True, False, True, True, True, True, True, True,
       True, True, True, True, True, False, False, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, False, True,
       False, False, True, True, True, True, True, True, True, True, True, 
      True, False, True, True, True, True, True, False, True, True, True, 
      True, False, True, True, True, True, True, True, False, False, True, 
      True, True, True, False, False, False, True, True, False, True, True, 
      True, True, False, True, False, True, True, False, True, True, False, 
      True, False, True, True, True, True, True, False, True, True, False, 
      False, True, False, True, True, True, False, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      False, True, True, True, True, True, True, True, False, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, True, 
      True, True, True, True, True, True, True, True, True, False, True, True,
       True, True, True, True, True, True, True, True, False, True, True, 
      True, True, True, True, True, True, True, True, True, True, False, True,
       True, False, False, True, True, True, True, True, False, True, True, 
      True, True, True, True, True, True, True, True, True, True, True, False,
       True, True, True, True, True, True, False, False, True, False, True, 
      True, True, True, True, False, True, False, True, True, True, False, 
      False, True, True, True, True, True, True, False, True, False, False, 
      True, True, True, True, True, True, True, True, True, True, False, 
      False, True, True, False, True, False, False, False, False, False, 
      False, False, False, False, False, False, True, False, False, False, 
      False, False, False, True, False, False, False, False, False, True, 
      False, False, True, False, False, False, False, False, False, False, 
      False, False, False, False, False, False, False, False, False, False, 
      False, False, False, False, False, False, False, False, False, False, 
      False, False, False, False, True, False, False, False, False, False, 
      False, True, True, False, False, False, False, False, False, False, 
      True, True, False, False, False, False, False, False, False, True, 
      False, False, False, False, False, False, False, True, False, False, 
      False, True, False, False, False, False, False, False, False, False, 
      False, False, True, False, True, False, True, False, True, False, False,
       False, False, False, False, True, False, False, False, True, False, 
      False, True, False, True, True, False, False, False, True, False, False,
       True, False, True, False, False, True, False, False, True, True, True, 
      False, False, True, False, False, False, True, False, False, True, 
      False, False, False, False, False, False, False, True, False, False, 
      False, True, False, True, False, True, True, False, False, True, False, 
      False, False, True, False, True, False, False, False, False, False, 
      False, False, False, True, False, False, True, False, False, False, 
      True, False, False, False, True, False, False, True, False, False, 
      False, False, False, False, False, True, False, False, False, True, 
      False, True, False, False, True, False, True, False, False, False, 
      False, True, False, False, False, True, False, True, False, False, 
      False, False, False, False, True, True, False, False, True, False, 
      False, True, False, True, False, False, True, False, False, False, 
      False, False, False, False, False, True, False, True, True, False, 
      False, False, False, False, False, False, False, False, False, True, 
      False, False, True, True, True, False, True, False, False, True, False, 
      False, False, False, True, False, False, True, False, False, False, 
      False, False, False, False, False, False, False, False, False, True, 
      False, True, False, False, False, False, False, True, True, False, True,
       False, True, True, False, True, False, False, True, True, False, False,
       True, False, False, False, False, False, False, True, False, True, 
      False, False, True, False, False, True, False, False, True, True, False,
       True, False, True, False, False, False, True, False, True, False, 
      False, False, True, False, False, False, False, False, True, False, 
      True, False, False, False, False, True, False, False, False, False, 
      False, True, True, False, False, False, False, True, False, False, True,
       False, False, False, False, True, True, False, True, True, False, 
      False, False, False, True, False, True, False, False, True, True, True, 
      True, False, False, True, False, False, False, True, False, True, False,
       False, True, False, False, False, False, True, True, False, False, 
      False, False, False, False, False, False, False, False, True, False, 
      True, False, False, False, False, False, False, False, True, True, True,
       False, False, False, False, False, False, True, False, False, False, 
      False, True, True, True, False, False, True, False, False, True, True, 
      False, True, False, False, False, False, True, False, True, True, True, 
      False, True, False, False, True, False, False, False, False, False, 
      True, True, True, False, True, True, False, True, False, False, False, 
      True, False, False, False, True, False, False, False, False, True, True,
       True, True, True, True, False, True, True, True, True, False, False, 
      True, False, True, False, True, False, True, False, False, False, False,
       False, True, False, False, True, False, True, False, True, True, True, 
      True, False, False, False, False, False, False, False, False, True, 
      False, True, False, False, False, False, True, True, False, False, True,
       False, True, True, True, True, True, False, True, True, True, True, 
      False, False, False, True, False, False, True, False, False, False, 
      True, True, True, True, True, True, False, False, True, False, False, 
      False, False, False, False, False, False, False, False, False, False, 
      True, True, True, True, False, False, True, False, True, False, True, 
      False, True, False, False, False, False, False, False, False, True, 
      True, False, True, False, False, False, True, False, False, False, True,
       True, False, False, True, True, True, True, False, False, False, True, 
      True, True, False, True, True, True, False, False, True, True, False, 
      False, False, True, False, False, True, True, False, False, True, False,
       False, True, False, False, True, True, True, False, False, True, False,
       False, True, False, True, True, False, False, False, False, True, 
      False, True, False, False, True, False, False, True, True, True, False, 
      False, False, True, False, False, False, False, False, False, False, 
      True, False, False}, "LogProbabilities" -> CompressedData["
1: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
OInU0abVzz604FOARuDDSjb+B+Y854s=
     "], 
    "CountMatrix" -> {{496, 231, 0}, {125, 602, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwN0v1zDwQAwOEve8GseYmWOy+ZvE0RmvfNkpYkb/NSRtxwrWJknbfJsiM1
87ZZmujyMoZEuZzIlVPe7nI5qbEhnXlfo2Yymp4fns9f8GmZPG14ao1AIHBL
imoGAmc4SzElnOM8F/iDi/zJJUq5zBWuco0b3KSMvyjnNn9TwR0qucu/3KOK
+zzgP6p5SCAoEKhBTYIIJoRQalGbOoRRl3AeIYJ61KcBDWlEYx4jksdpQlOa
0ZwWPEFLomhNG9rSjvZE04Gn6UgnnqEzXehKDN3oTk960Zs+xBJHX+J5jn70
J4EBDORlBvEKgxnCMIaTyEhG8SpJjGUc45lAMpOYzBukMIWpTGM675DGu8xk
FrOZw1zSmcd8MnifTBaymA/JYgnZLGMFK8khl1Xk8TGryWcNa1nHZ3zOejaw
iQK2UMhWtrGdL9jBTnbxFbv5hj3sZR/7+Y4DfM8PHOQQP3GYIxzlGMf5mRP8
wklOcZrfKOIMZymmhHOc5wIXuUQpl7nCVa5xnRvcpIxyblFBJXe5RxX3eUA1
D6kR7H2CCCaEUGpRmzqEUZdwIqhPAxryKI2IpAlNaU4LomhFa9rQlna0J5qn
6EgnOtOFZ4mhB73oQyxxxNOP5+lPAi8ygJcYyCAGM4ShDCOREYxkFKMZQxJj
Gcd4JpDMRCYxmRTeZgpTSWU6M0hjNnNIZx7vkcECMlnIIj5gMVksIZulLGM5
K1hJDrnksZpPyGcNn7KWdaxnAxvZRAGbKWQr29jOTnbxNbvZw16+ZR/7OcBB
DvEjhznCUY5xnBOc5BS/cprfKeIMxZRwjvOUcp0blFHObf6hgjtUcpd7VPGA
aoJCvEgIodSiNnUII5wI6lGfBjSiMZE0I4pWPEkb2tKeaDrQha7E0I3u9KAn
vehNH2KJoy/xvEACAxjIIAYzhKEMYziJjGA0rzGGJMbxOuNJZiIpvMlbpDKD
NGYyi9nMJZ35ZLCATBayiI/IIpulLCeHXFaRx2ryWcNa1rGeDWykgM1soZCt
bGM7O/iS/wHHdvkq
       "], CompressedData["
1:eJwNw0lIFFAAANCv1SkkSBLTFiWDIC0jaaFDmImICCEtGiHZoqjlZDhFkWFI
pkQbhAiCIxR1MaEwJAgLsZOGIVHQJXMiK0JMCYSQeg9e5olIWUNCCGHaeGII
P5113uQlIaSZ7gazzDbPXRZYaJHFHvCgR6zwqJVWedJqa62z3gbPG7XZa7Z6
3TY7vOUdu+w25gMf2e8zBxz0hUMOO+KoY4474Xs/OumUcWf87Zzz/nHBRcPS
EJJc4SpTTDXNdNeaYaZZbjbHXLe7w53udo97zbfQEksts9wKK62y2hprrTNi
o01GveBFL3vVFlttt8P7dtpjzF4f2+cT+33qgM8d9KVDvvK1w75x1DHfOu47
J/zgJz876RenjPvVb0773R/+csZZ51zwr4v+MywLIcFEl5vkSpNNMdXVppnu
Gte53gwz3egms81xi1vNdZt55rvPAvdbZLEllnrIw5Z7zONWecrTVltjvWc8
a8RzNtpk1EtesdkWW23zhu3e9LZ3vWenXXbbY8xeH9rnf8mNdhY=
       
       "], {}}, {CompressedData["
1:eJwVzj0ohAEAgOGPKCaDI0Xqc1iQv0zKX2TBoPxM1BlEYruNukUpXKeUxSC6
QZGfyICFsCiRyyYzZbGJPIand33D2NzgbFYQBPP8N5ciSignpJIqaqinkSY6
6KKbXgYYYoRRxokxwSQzLJBgkSVWSLLNDml2OeSIY0645IFHXnjjky9yjOdR
SIRiQiqIUkUtffQzwBTTxFlkmSQp1tlgky3SnHHBFXfc80yGV9754JsffsnP
DoICIpRSRkgFUaqpoY4GmmmhlTba6aSHYcaIk2CVFGtskGaPfQ445YxzLrjm
hlseeSLDH/SzPAs=
       "], CompressedData["
1:eJwl1QWTFgQQgOGPPDqlU0VKuruODoGj++jmSOmQkEYkpeGAobskpA84GgGR
FGlQkJAUhefGmX3+wM7svp+2CQvpES0QCDSNHgiYQAxiEpsg4hCXeMQnAQlJ
RGKSkJRkJOcTUpKKNKQlHenJQCYy8xmfk5VsZCcHOclFbvKQj4IUojBFKEox
ilOCkpSiNGUoS3mCqURlqlKN6tSgJrWoTR3qEkI96tOQJlF7oRnNaUFLQmlN
O9rTgU50pgtd6U4PwuhJL3rTh77042v6M4CBDGIwQxjKcEYwklGMZgxjGccE
JjKJKUzle6YxnRnMZBaz+YE5zGUe81nAQhaxmCWEs5wVrGQVa1jLOtazgY1s
ZTs7+JGd7GI3e/iJfeznAAc5xGEiOMJRjhHJcU5wklOc5gznOM8FLvILl7jM
Fa5yjevc4Dducovb3OEu97jPAx7yiD/4k8c84SnPeM4LXvKK17zhLe/4h/f8
y398IOCYohGdGMQiNkHEJR7xSUBCEpGYJCQlGSlIRWrSkJZ0pCcDGclEZrKQ
lWxkJwc5+ZLc5CEv+chPAQpSiMIUoSjFKE4JSlKK0pShLOUoTwWCqUglKlOF
qlSjOjWoTR3qEkI96tOAhjSiMU1oSjOa04KWtCKU1rShLe1oTwc60omudKM7
UY8sjJ70ojd96Es/+jOAgQxiMEMYyjCGM4JvGMkoRjOGsYxjPBOYyGSmMJVp
TGcGs5jNHOYyj/ksZBGLCWcpy1jOClayitWsYS3rWM8GNrKJzWxhK9vYzg52
sovd7GEv+9jPAQ5ymAiOcJRIjnOCk5zmDGc5x8+c5wKX+JXLXOEq17jODW7y
O7e4zR3uco/7POAhj3jME/7iKc94zgv+5iWveM0b3vKO93wgKlbRoppFDGIS
i9gEEYd4xCcBCUlEEpKSjOSkICWpSE0a0pKBjGQiM1n4gmxkJwc5yUUe8pKf
AhSiCEUpRnFKUIrSlKMCwVSkMlWoSjWqU4Oa1OIralOHuoRQj/o0oBGNaRL9
/443ozktaEUorWlDW9rRng50pBOd6UJXutGdHoTRk170pg996Ud/BjCQQQxm
CEMZxnBGMJJRjGYM3zKWcYxnAhOZxGS+YyrTmcFMZjGbOcxlHvNZwEIWsZgl
hLOUZSxnBStZxWrWsJYNbGIzW9jKNnawk13sZi/72M8BDnKICI4RyXFOcJJT
nOYMZznHBS5yiY925ySp
       "], {}}}, "ExtendedClasses" -> {False, True}, 
    "Weights" -> SparseArray[Automatic, {1454}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0014326189821182945`, "SingleEvaluationTime" -> 
    0.0060203333333333333`1., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.74048435719049*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"46dac19d-ce53-40e9-a8d2-83ca237fa225"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluation", "Subsubsection",
 CellChangeTimes->{{3.739926154534072*^9, 3.7399261574440002`*^9}, {
  3.740425882645151*^9, 
  3.740425883886059*^9}},ExpressionUUID->"bd6f64b3-4e26-4690-a5ec-\
9bb33580c54a"],

Cell["\<\
A machine learning solution to this problem is only useful if the accuracy is \
greater than 0.5 (i.e. more accurate than a random coin flip). We test the \
accuracy of the classifier:\
\>", "Text",
 CellChangeTimes->{{3.7404804162773867`*^9, 
  3.740480424066238*^9}},ExpressionUUID->"3e7d18fd-af90-46ef-afbc-\
f93c8bfa189f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier1", "[", "\"\<Accuracy\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7404254412083387`*^9, 3.7404255039876013`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"5a26e3db-72ce-422e-a892-9199487d26d7"],

Cell[BoxData["0.7551581843191196`"], "Output",
 CellChangeTimes->{{3.7404254478182898`*^9, 3.740425504304514*^9}, 
   3.740484368606769*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"7900fd58-5734-4636-b812-6555b66fd7e9"]
}, Open  ]],

Cell["\<\
This, while not outstanding, is passable for a first attempt. We find the \
training accuracy:\
\>", "Text",
 CellChangeTimes->{{3.740480426158381*^9, 
  3.7404804523676147`*^9}},ExpressionUUID->"0cf07352-48b8-4485-bf68-\
1d6867b6aaa9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "HaltClassifier1", "]"}]], "Input",
 CellChangeTimes->{{3.74048046502005*^9, 3.740480476598872*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"b54ece50-5ebc-4226-bc5e-31f381078b5b"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Text\"\>"},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","False","True"},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"Markov\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 2, "Length" -> 2, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                    TypeSystem`Atom[Integer], 2], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[153.], 
                    TypeSystem`PackageScope`AtomShape[34]]], 2, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[2124339271], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                    TypeSystem`Atom[Integer], 2], "HandleQ" -> True, 
                    "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[2124339271]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["Order", 
                    Style[
                    "Order", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1204740310][{
                    Key["Order"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1204740310][
                    GeneralUtilities`Slice[
                    Key["Order"]]], "Mouse"], 
                    ImageSize -> {{153., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["4"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1204740310][
                    GeneralUtilities`Slice[
                    Key["Order"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["MinimumTokenCount", 
                    Style[
                    "MinimumTokenCount", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1204740310][{
                    Key["MinimumTokenCount"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1204740310][
                    GeneralUtilities`Slice[
                    Key["MinimumTokenCount"]]], "Mouse"], 
                    ImageSize -> {{153., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1204740310][
                    GeneralUtilities`Slice[
                    Key["MinimumTokenCount"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1204740310][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1204740310]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1204740310][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1204740310][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association["Order" -> 4, "MinimumTokenCount" -> 0], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                  TypeSystem`Atom[Integer], 2], 
                 Association["ID" -> 63750342521301]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "71.2619357583611332529`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "3.7748710977087269747`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.6371219356294368641`3.",
                   "\", \"", "0.7881167795377859164`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.6371219356294368641`3., 
                  ", ", 0.7881167795377859164`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.538634285184707351`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0326841679443290317`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.4732659492960492598`3.",
                   "\", \"", "0.6040026210733654422`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.4732659492960492598`3., 
                  ", ", 0.6040026210733654422`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "7.15`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "699.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}],"examples per second",
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"134.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1456","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"14.6`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8582027174921448}, {
                    3.912023005428146, -0.12358796882538098`}, {
                    5.521460917862246, -0.5611255622298935}, {
                    7.060476365999801, -0.6187184445134339}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.6758811606981904}, {
                    2.302585092994046, -0.43639688771947943`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.8582027174921448}}, {{
                    3.912023005428146, -0.12358796882538098`}}, {{
                    5.521460917862246, -0.5611255622298935}}, {{
                    7.060476365999801, -0.6187184445134339}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6758811606981904}}, {{
                    2.302585092994046, -0.43639688771947943`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.7174963849825414}, {
                    2.302585092994046, 0.981530887122965}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{3.912023005428146, -0.3338369615161066}, {
                    3.912023005428146, 0.05004390719698534}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -0.6069975361484359}, {
                    5.521460917862246, -0.517265856914535}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.060476365999801, -0.681317197083145}, {
                    7.060476365999801, -0.5598085135299934}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1231412524095123`, -0.7259143353041617}, 
                    PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.7007696201804107, 0.8582027174921448}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, -0.7259143353041617}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.7007696201804107, 0.8582027174921448}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5033183699043406}, {
                    3.912023005428146, 0.614504167523627}, {5.521460917862246,
                     0.6943627490760415}, {7.060476365999801, 
                    0.7126193575836113}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5938494646530095}, {
                    2.302585092994046, 0.6039820438852087}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5033183699043406}}, {{
                    3.912023005428146, 0.614504167523627}}, {{
                    5.521460917862246, 0.6943627490760415}}, {{
                    7.060476365999801, 0.7126193575836113}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5938494646530095}}, {{
                    2.302585092994046, 
                    0.6039820438852087}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1231412524095123`, 0.47979134532086204`},
                     PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {0.5033183699043406, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, 0.47979134532086204`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {0.5033183699043406, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8582027174921448}, {
                    3.912023005428146, -0.12358796882538098`}, {
                    5.521460917862246, -0.5611255622298935}, {
                    7.060476365999801, -0.6187184445134339}}]}, 
                    "Markov"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1231412524095123`, -0.7259143353041617}, 
                    PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.7007696201804107, 0.8582027174921448}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, -0.7259143353041617}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.7007696201804107, 0.8582027174921448}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8582027174921448}, {
                    3.912023005428146, -0.12358796882538098`}, {
                    5.521460917862246, -0.5611255622298935}, {
                    7.060476365999801, -0.6187184445134339}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.6758811606981904}, {
                    2.302585092994046, -0.43639688771947943`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.8582027174921448}}, {{
                    3.912023005428146, -0.12358796882538098`}}, {{
                    5.521460917862246, -0.5611255622298935}}, {{
                    7.060476365999801, -0.6187184445134339}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6758811606981904}}, {{
                    2.302585092994046, -0.43639688771947943`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.7174963849825414}, {
                    2.302585092994046, 0.981530887122965}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -0.3338369615161066}, {
                    3.912023005428146, 0.05004390719698534}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -0.6069975361484359}, {
                    5.521460917862246, -0.517265856914535}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.060476365999801, -0.681317197083145}, {
                    7.060476365999801, -0.5598085135299934}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1231412524095123`, -0.7259143353041617}, 
                    PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.7007696201804107, 0.8582027174921448}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, -0.7259143353041617}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.7007696201804107, 0.8582027174921448}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5033183699043406}, {
                    3.912023005428146, 0.614504167523627}, {5.521460917862246,
                     0.6943627490760415}, {7.060476365999801, 
                    0.7126193575836113}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5938494646530095}, {
                    2.302585092994046, 0.6039820438852087}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5033183699043406}}, {{
                    3.912023005428146, 0.614504167523627}}, {{
                    5.521460917862246, 0.6943627490760415}}, {{
                    7.060476365999801, 0.7126193575836113}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5938494646530095}}, {{
                    2.302585092994046, 
                    0.6039820438852087}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1231412524095123`, 0.47979134532086204`},
                     PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {0.5033183699043406, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, 0.47979134532086204`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {0.5033183699043406, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8582027174921448}, {
                    3.912023005428146, -0.12358796882538098`}, {
                    5.521460917862246, -0.5611255622298935}, {
                    7.060476365999801, -0.6187184445134339}}]}, 
                    "Markov"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1231412524095123`, -0.7259143353041617}, 
                    PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.7007696201804107, 0.8582027174921448}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, -0.7259143353041617}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.7007696201804107, 0.8582027174921448}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{413., {145., 152.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> ".SF NS Text", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.740480479288734*^9, 3.740484053814513*^9, 
  3.740484374850007*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"190ec5be-f4a7-4a10-adc2-c0f5b1eea0f5"]
}, Open  ]],

Cell["\<\
The training accuracy (71.3%) is slightly lower than the testing accuracy \
(75.5%) - this is surprising, and is probably due to a \[OpenCurlyQuote]lucky\
\[CloseCurlyQuote] testing dataset chosen.\
\>", "Text",
 CellChangeTimes->{{3.740480487527821*^9, 3.74048054139643*^9}, {
  3.740480712883862*^9, 3.7404807566618834`*^9}, {3.74048438222314*^9, 
  3.740484475605577*^9}},ExpressionUUID->"aa4b74ca-1394-4fc3-9614-\
55adbcb72281"],

Cell["\<\

We calculate some statistics from a confusion matrix plot:\
\>", "Text",
 CellChangeTimes->{{3.740481118419588*^9, 3.740481125740654*^9}, {
  3.740481941746729*^9, 
  3.740481949060005*^9}},ExpressionUUID->"b4fa6994-5606-4d8c-ad77-\
8c06852c7c4b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier1", "[", "\"\<ConfusionMatrixPlot\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.74048030887759*^9, 3.7404803158249598`*^9}, {
  3.740480368583826*^9, 3.740480373958458*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"b09603cc-bf55-4fc6-838a-98c9740557d8"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9270785513095142, 0.8428929812114132, 0.5987359021539609}, {
   1., 0.42, 0.}}, {{0.9106787405195954, 0.5087294359132212, 
   0.004447055595091467}, {0.8959932927971247, 0.7151715105692517, 
   0.3144116329400328}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["496", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "496", "\" examples of \"", "False", "\" correctly classified\""},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7987117552334944`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.6822558459422283`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7359050445103857`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{496, " examples of ", False, " correctly classified"}], 
         Row[{"Precision = ", 0.7987117552334944}], 
         Row[{"Recall = ", 0.6822558459422283}], 
         Row[{"FScore = ", 0.7359050445103857}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["125", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "125", "\" examples of \"", "True", "\" misclassified as \"", 
             "False"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.20128824476650564`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.171939477303989`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{125, " examples of ", True, " misclassified as ", False}], 
         Row[{"Column fraction = ", 0.20128824476650564`}], 
         Row[{"Row fraction = ", 0.171939477303989}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["231", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "231", "\" examples of \"", "False", "\" misclassified as \"", 
             "True"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2773109243697479`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.3177441540577717`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{231, " examples of ", False, " misclassified as ", True}], 
         Row[{"Column fraction = ", 0.2773109243697479}], 
         Row[{"Row fraction = ", 0.3177441540577717}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["602", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "602", "\" examples of \"", "True", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7226890756302521`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.828060522696011`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7717948717948719`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{602, " examples of ", True, " correctly classified"}], 
         Row[{"Precision = ", 0.7226890756302521}], 
         Row[{"Recall = ", 0.828060522696011}], 
         Row[{"FScore = ", 0.7717948717948719}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "727", "\" example\"", "\"s\"", "\" of class \"", "False"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.6822558459422283`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{727, " example", "s", " of class ", False}], 
        Row[{"Recall = ", 0.6822558459422283}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "727", "\" example\"", "\"s\"", "\" of class \"", "True"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.828060522696011`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{727, " example", "s", " of class ", True}], 
        Row[{"Recall = ", 0.828060522696011}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "621", "\" example\"", "\"s\"", "\" classified as \"", "False"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7987117552334944`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{621, " example", "s", " classified as ", False}], 
        Row[{"Precision = ", 0.7987117552334944}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "833", "\" example\"", "\"s\"", "\" classified as \"", "True"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7226890756302521`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{833, " example", "s", " classified as ", True}], 
        Row[{"Precision = ", 0.7226890756302521}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["False", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["True", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["727", TraditionalForm]}, {0.5, 
       FormBox["727", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["621", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["833", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["False", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["True", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.740484477669931*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"5b651904-4818-4192-8ef5-273895026f3d"]
}, Open  ]],

Cell["\<\
Accuracy: 0.76
Misclassification rate: 0.24

Precision (halt): 0.722 (when \[OpenCurlyQuote]halt\[CloseCurlyQuote] is \
predicted, how often is it correct?)
True Positive Rate: 0.83 (when the combinator halts, how often is it \
classified as halting?)
False Positive Rate: 0.32 (when the combinator doesn\[CloseCurlyQuote]t halt, \
how often is it classified as halting?)

Precision (non-halt): 0.799 (when \[OpenCurlyQuote]non halt\[CloseCurlyQuote] \
is predicted, how often is it correct?)
True Negative Rate: 0.68 (when the combinator doesn\[CloseCurlyQuote]t halt, \
how often is it classified as not halting?)
False Negative Rate: 0.17 (when the combinator halts, how often is it \
classified as not halting?)\
\>", "Text",
 CellChangeTimes->{{3.740481965344619*^9, 3.740482005064703*^9}, {
  3.74048203786355*^9, 3.740482194837697*^9}, {3.740482545989325*^9, 
  3.7404825480857058`*^9}, {3.74048871664889*^9, 3.740488727668037*^9}, {
  3.740488844654306*^9, 3.740488893183358*^9}, {3.740488949325603*^9, 
  3.7404889647214746`*^9}, {3.740490179309887*^9, 
  3.7404902036602287`*^9}},ExpressionUUID->"2ddc1765-e6c6-4ae8-b0db-\
9380e9573a0f"],

Cell["\<\
A confusion matrix plot shows that the true positive rate is larger than the \
true negative rate - this would suggest that it is easier for the model to \
tell when an expression halts than when an expression does not halt. This \
could be due to the model detecting features suggesting very short run time \
in the initial string - for instance, a combinator k[k][<expression>] would \
evaluate immediately to k and halt - however, these \[OpenCurlyQuote]obvious\
\[CloseCurlyQuote] features are very rare.\
\>", "Text",
 CellChangeTimes->{{3.740480303697596*^9, 3.7404803048488493`*^9}, {
   3.740480763568055*^9, 3.740480777928233*^9}, 3.7404808421223917`*^9, {
   3.74048118984022*^9, 3.74048123207508*^9}, {3.740481266257896*^9, 
   3.740481268218774*^9}, {3.7404816419984417`*^9, 3.7404817276733637`*^9}, {
   3.740482239367524*^9, 3.74048225580508*^9}, {3.740482286891347*^9, 
   3.740482299804778*^9}, {3.7404823299509563`*^9, 3.7404823398463297`*^9}, {
   3.740482497070096*^9, 3.7404825157105103`*^9}, {3.7404825514065247`*^9, 
   3.740482684152157*^9}, {3.740482831103426*^9, 3.740482938054487*^9}, {
   3.740488974022978*^9, 3.7404890002081623`*^9}, {3.740490223199986*^9, 
   3.740490224097994*^9}, {3.740490273595742*^9, 
   3.7404902769280663`*^9}},ExpressionUUID->"3d81c819-10a5-4ac1-8463-\
f69ae1a38a9d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random Forest Classification on Rasterised Expression Images", \
"Subsection",
 CellChangeTimes->{{3.740491421379088*^9, 
  3.740491443133326*^9}},ExpressionUUID->"b2ea1a59-d518-4cca-acbd-\
ef0122773997"],

Cell["\<\
Analysing strings alone, without any information about how they are actually \
structured or how they might evaluate, could well be a flawed method - one \
might argue that, in order to predict halting, one would need more \
information about how the program runs. Hence, another possible method is to \
generate a dataset of visualisations of the first 5 steps of a combinator\
\[CloseCurlyQuote]s evaluation like so:\
\>", "Text",
 CellChangeTimes->{{3.739886617967916*^9, 3.7398866272985353`*^9}, {
  3.7398870969146233`*^9, 3.739887107194312*^9}, {3.740491451283589*^9, 
  3.7404914994126368`*^9}, {3.740491544368476*^9, 
  3.740491545882697*^9}},ExpressionUUID->"9e51bc69-a7a4-4c3a-ba38-\
58a7bd1fca2b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SKRasterize", "[", 
  RowBox[{
   RowBox[{"RandomSKExpr", "[", "50", "]"}], ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.7404915071758127`*^9, 3.74049153460012*^9}},
 CellLabel->
  "In[136]:=",ExpressionUUID->"7d739f5b-843c-4f2e-af31-675f684e1b74"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt1V9KAzEQx/GiIl7DO4iv4hXqCSrUJ0GoD+IJvY5HsH0NjOkwm/xmtt8F
/+x+kkl2Z5Lcv35s3642m83n3fHXdvf1fDjsvl9uTzf73fvjw/76+O/p9uf4
c7Npr9+n/+/b5+3fXjyrv3f8qC89f29/b3yrfZb5LR0/6ur8jq7vpesj2j9b
/at97d9Xvb6inm39ePtnd/X+qa7v0fPzxs92PkddXV+j42d/v6hnPz/U60ed
/2r5sdpXzX/ULy3/1erLO/7a9v/We++L4ziO4xFvr97zXhyrvzd+9vl54y/d
3/t9Rs9vtKvr49LzN3r+o33t+Vt6fczOb7b16e2vdvbHsfPzxq+2P0Zdnf/Z
9VN9f5y9P0Sd+oi5Ov/V8me1r5r/qFfLX7b6WNp774vjOI7jl+htO+veihft
f+58luqvju8d32o/6/t6x4869RFzdf6r5c9qXzX/Ua+Wv2z1MdrV63t0/Ozr
k/qY279a/qqfD2vPX/bzzTu+1T5rf7WzP46dnzd+tf2x5+r8zq6P6vvf7PUf
deoj5ur8V8uf1b5q/qNeLX/Z6kPla12fnL++8aNOfcRcnf9q+bPaV81/1Kvl
L1t9eL33PjiO4ziO4ziO4ziO4/gcb6/ecyter3/1+Od+x1njj/4+VnvV/NSu
rp/q8/N6lv0Rx3Ecx3Ecx3Ecx3Ecx/G83l6951Y8b3+r/azxvf298a32qvmp
XZ0/dX6ov9yurq/q8/N6lvMPx3Ecx3Ecx3Ecx3Ecr+Z/gtKv1Q==
    "], {{0, 6}, {199, 
    0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{645.4156249999994, Automatic},
  ImageSizeRaw->{199, 6},
  PlotRange->{{0, 199}, {0, 6}}]], "Output",
 CellChangeTimes->{3.740491535318858*^9},
 CellLabel->
  "Out[136]=",ExpressionUUID->"0c249bb6-4904-48fc-8a2c-6459a0b01037"]
}, Open  ]],

Cell["\<\
and feed these into a machine learning model. Although it might seem that \
this method is pointless - we are already evaluating the combinators to 5 \
steps, and we are training a model on a database of combinators evaluated to \
40 steps to predict if a combinator will halt in <=40 steps, the point of the \
exercise is less to create a useful resource than to investigate the \
feasibility of applying machine learning to this type of problem. If more \
computational power was available, a dataset of combinators evaluated to 100 \
steps (when even more combinators will have halted) could be created: in such \
a case a machine learning model to predict whether or not a combinator will \
halt in <=100 steps would be a practical approach as the time taken to \
evaluate a combinator to 100 steps is exponentially longer than that taken to \
evaluate a combinator to 5 steps.\
\>", "Text",
 CellChangeTimes->{{3.740491547397306*^9, 3.740491605398342*^9}, {
   3.740491640917163*^9, 3.740491982656328*^9}, 
   3.740492043351799*^9},ExpressionUUID->"9cfc38b1-6adc-47d2-b557-\
fbd403c539cf"],

Cell[CellGroupData[{

Cell["Training", "Subsubsection",
 CellChangeTimes->{{3.740492046497778*^9, 
  3.740492047293795*^9}},ExpressionUUID->"bd7578d4-c943-4c9f-b0ba-\
9d5030021db7"],

Cell["\<\
We generate a dataset of 2000 random SK expressions with depth 5, 2000 \
expressions with depth 10 ... 2000 expressions with depth 50, evaluated up to \
40 steps:\
\>", "Text",
 CellChangeTimes->{{3.740491547397306*^9, 3.740491605398342*^9}, {
  3.740491640917163*^9, 3.740491982656328*^9}, {3.7404920489725237`*^9, 
  3.740492055010828*^9}},ExpressionUUID->"7d9a8085-7fd6-4824-a114-\
283117b8760e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rasterizedlengths", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"GenerateTable", "[", 
       RowBox[{"n", ",", "40", ",", "2000"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "5", ",", "50", ",", "5"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.740492062786827*^9, {3.740492609035822*^9, 3.7404926106893797`*^9}, 
   3.740492644610075*^9},ExpressionUUID->"fa7b5e99-9915-4fb4-8101-\
0c8ede10db25"],

Cell["\<\
In order to train a model on rasterised images, we must evaluate all SK \
expressions in the dataset to 5 steps and generate rasterised images of these:\
\>", "Text",
 CellChangeTimes->{{3.740492119952969*^9, 3.740492166893791*^9}, {
  3.7404922436911917`*^9, 3.74049226853999*^9}, {3.740492373717393*^9, 
  3.740492374374346*^9}},ExpressionUUID->"694f2071-0ece-419b-92f0-\
434e28736c9b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RasterizedTrainingData", " ", "=", " ", 
   RowBox[{"CreateRasterizedTrainingData", "[", "rasterizedlengths", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7404924523965178`*^9, {3.740492612226945*^9, 
   3.740492615835507*^9}},ExpressionUUID->"fecd3f56-4dff-45c2-93c1-\
4b4d325412a1"],

Cell["We then train a classifier on this data:", "Text",
 CellChangeTimes->{{3.740492455814231*^9, 
  3.740492470643834*^9}},ExpressionUUID->"021f7ebf-746b-492f-91c3-\
d05e78700170"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RasterizeClassifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"RasterizedTrainingData", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<RandomForest\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740442726954522*^9, 3.740442736111888*^9}, {
  3.740492618676139*^9, 3.740492620049718*^9}, {3.740493517448004*^9, 
  3.7404935223220577`*^9}},ExpressionUUID->"4ee4db51-55e4-4f82-8177-\
db78d235b127"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Image\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Image\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1456", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1456, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Image"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Image"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Fill" -> 
             Image[CompressedData["
1:eJytmF1qU0EYhuMP4i7ENVh7G9xCXUGEVgVBqBfiUqpuoEvItVcB/6AgBAQJ
kZJS8apKq9iazOkzh3nmfJxWPJBOZ955v/n+zyS3Hzzd2Lo6GAye3Vz+2Rg9
v7e9PXpx/8Zqsjl6sr62eW3572p6a/m5vvzcSc/ekPHlzuqZDF+l8WC4ltbf
5PU07EyHd9P64XCQno95NA4P+X38rfR8qvjgyAFHP/C36fmcceRF+oMjJ9Kf
fch/ndb/ZH18Prj1PkvPl4pvOeCcb/2MW47Pvyi/wWcZZ7/tKPnjkI/fwJmD
o1fkH/Y7T2yf40v+Ov7MwW2/8Si/I/nGHVfsMx8e8ytp/yLMn4dp337mub7A
B+cPfkb+h5Sn36r4cd7jtO97tqsZd7P8bnxS8cv+Mc7ng5fxG2c53fzo/FZ/
6g+cdfcJ8zkX/nraf1bxmYObj33g7p/s78Z3c/00+p1Wdc0IbvnkB7j1Kv1/
WvnFfPcN891fSv+2fOdfxLd9zg/wMn/b/kj8wF2/fXzsBHdfcH2bxznuH94X
8V3/nO/+At7X3/xedf9xX7N+lu/7Qbf/ZhWf0f6xXOLn/ole4NhvvzHS/5iX
cmbn7/ffld3G4XOucfxpPc2PcNtV+u8k45yD3eCN3HnGy/idVHnLfnDOLe2Y
V/Kt3/s0P67479L8a8bZD85oPiPnRTzkG4/mlt/H9whuOyP53XKmF5breLq+
XN/OK0bfH5zH7i/OE+OMzkPklX1kVuERv8zLvep8477/IN/9zfUV4V5H3qO0
/qvSn/wBL+u7jZtx5wc4+jmPjFuO9bNfXF9l3k9766/xf12/ZXyPqzrgfHDO
dV1H9eS4wov41o/zjJd2LSp9XZ8Rn++FrmvklvZMq/7le3spv61D7HBdst/x
tD/tB+dPxLe/+/pU6SfbM6/st5/7+qtx/Ez+Ol/gle+faZVffj/5PPNtt3HW
/9f7Dxx5rqPGjp+Vv42bV/6u8SP7E7+wD9xyzS/rfZH3uS8ycq8Gh1++z2K+
770+t4/v331sv+vOfaf7XtnG3XiU/4634+h8dp+5bP8q33uHQb9fVHzr7b7C
3P3N9Rr1LecneUD+RvFxfrLOfufnv+KO62Vxy3d9ub6JTzM/kj/2tf8or7uO
Gj2OgvVFxu1f493r7b2y/D5yIPsnFc/fu5lbjr9nRnz8xb4+vvWz//y7r/Vi
H/hfI0anwA==
               "], "Real", ColorSpace -> "RGB", Interleaving -> 
               True], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Type" -> 
             "Image", "Version" -> {11.3, 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ConformImage", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
             "Example" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJANiFuBGMQeBaNgFIyCUTAKRsEoGAXUAgCE1gzq
               "], "Byte", 
               ColorSpace -> "RGB", Interleaving -> True], 
             "Version" -> {11.3, 0}, "ID" -> 5995053796462683370, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImageExtractNumericalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "Input" -> Association[
              "f1" -> Association[
                "Type" -> "Image", "Weight" -> 1, "Dimensions" -> {133, 6}, 
                 "Channels" -> 3]], "ExtractorName" -> "ImagePixels", 
             "ExtractorVersion" -> "V1", "FeatureNumber" -> Automatic, 
             "Version" -> {11.3, 0}, "ID" -> 2174472491957739952, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8901912692949392733]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5272359975513785890, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3197017005843221070]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       False -> 0.49999999999999994`, True -> 0.49999999999999994`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2190, 6, 411, 2310, 2295, 2227, 2143, 2300, 
            2365, 830, 2238, 2264, 858, 480, 1217, 2170, 488, 1754, 1724, 
            2102, 2094, 1026, 123, 2108, 1710, 300, 948, 321, 1257, 553, 887, 
            730, 1111, 662, 1492, 621, 1809, 243, 2121, 1797, 625, 242, 670, 
            1354, 52, 807, 876, 1230, 760, 2027, 66, 45, 274, 2055, 238, 18, 
            1739, 441, 2085, 531, 1665, 1664, 820, 896, 145, 1254, 767, 1017, 
            20}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9921568632125854, 0.1764705926179886, 
            0.8980392217636108, 0., 0.6470588445663452, 0.0313725508749485, 
            0.7411764860153198, 0.2235294133424759, 0.8313725590705872, 
            0.5803921818733215, 0.4156862795352936, 0.4000000059604645, 0., 
            0.43529412150382996`, 0.6078431606292725, 0., 
            0.43529412150382996`, 0.5764706134796143, 0.29411765933036804`, 
            0.4901960790157318, 0.95686274766922, 0.37254902720451355`, 
            0.0313725508749485, 0., 0.8352941274642944, 0.125490203499794, 
            0.7215686440467834, 0.9921568632125854, 0.32549020648002625`, 
            0.12941177189350128`, 0., 0.9882352948188782, 0.4431372582912445, 
            0.8549019694328308, 0.0117647061124444, 0.5764706134796143, 
            0.0235294122248888, 0.7921568751335144, 0.8627451062202454, 
            0.4901960790157318, 0.003921568859368563, 0., 0.0235294122248888, 
            0.10196078568696976`, 0.1882352977991104, 0., 0.2078431397676468, 
            0., 0.01568627543747425, 0.5176470875740051, 0.46666666865348816`,
             0., 0.0313725508749485, 0., 0.9921568632125854, 
            0.6549019813537598, 0.9803921580314636, 0.26274511218070984`, 
            0.10588235408067703`, 0.01568627543747425, 0.30980393290519714`, 
            0.3803921639919281, 0.007843137718737125, 0.22745098173618317`, 
            0.21176470816135406`, 0., 0.8509804010391235, 
            0.48627451062202454`, 0.48627451062202454`}], "Children" -> 
          RawArray["Integer16",{{2, 39}, {3, 5}, {-1, 4}, {-2, -3}, {6, 18}, {
            7, 15}, {8, -12}, {9, 12}, {10, 11}, {-4, -5}, {-6, -7}, {
            13, -11}, {-8, 14}, {-9, -10}, {16, -16}, {17, -15}, {-13, -14}, {
            19, 35}, {20, 30}, {21, 29}, {22, 28}, {23, 27}, {24, 
            25}, {-17, -18}, {
            26, -21}, {-19, -20}, {-22, -23}, {-24, -25}, {-26, -27}, {31, 
            34}, {32, -31}, {33, -30}, {-28, -29}, {-32, -33}, {-34, 36}, {37,
             38}, {-35, -36}, {-37, -38}, {40, 57}, {41, 44}, {42, 
            43}, {-39, -40}, {-41, -42}, {45, 49}, {46, 47}, {-43, -44}, {-45,
             48}, {-46, -47}, {50, 51}, {-48, -49}, {52, 56}, {53, 
            54}, {-50, -51}, {-52, 55}, {-53, -54}, {-55, -56}, {58, 64}, {59,
             61}, {60, -59}, {-57, -58}, {-60, 62}, {63, -63}, {-61, -62}, {
            65, -70}, {66, 68}, {67, -66}, {-64, -65}, {-67, 
            69}, {-68, -69}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 
            1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 
            2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 
            2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2218, 1614, 36, 1018, 106, 855, 81, 2280, 
            1202, 1044, 678, 1351, 648, 813, 604, 1793, 603, 807, 285, 1334, 
            842, 891, 723, 1730, 472, 826, 878, 549, 11, 1682, 2075, 1399, 
            2222, 913, 1231, 1283, 2001, 68, 1769, 778, 1269, 2134, 14, 1518, 
            1651, 1325, 1529, 400, 243, 2109, 269, 1999, 1740, 2332, 1201, 
            876, 1604, 2128, 2174, 1799, 659, 1835, 990, 169, 2093, 175, 756, 
            1132, 2001, 782, 1528, 1254, 1662, 1266, 1599, 100, 873, 692, 
            1627}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DpD8T378XZ37ge
bv/2TY79zh0Wdu1tbPZfPhfbnz7lZf/zR4X90ydP7A4ecLD5/++f3dcvX+y6
u7jsZ86QsANqZbh44YLd3Dlz7O7euWP3/1+d/dYtW+ymTxOz//3rl93DBw9s
gdju5YsMu/fv3gHNOGB3+tQpsL7nz57Z7dyxw5YBCiZOmABSbwPCIH5jA4Nt
bw+PPYg9a6ak/edPRWD261dZ9kA5G5i+SxcD7e/fu2c3e5YUULwBLA5SC2Rb
d7Szg9xpv3zZMrsXz9PtQe6bOmUK0L0y9iB7VixXtwe6yQakdstmY3uIvQ02
IL/DzAeFBYju7+uzA7rH7uSJE2D3P3yQAHY7AG+ulF0=
           "], 
          "Children" -> CompressedData["
1:eJwdiXkvFwAAQN/cCl1SSkqHKGehdOvWwcYn0Eb9VduPzXwroUO6UUkpSScq
nVRIJ9Lrxx/vbW8v5cSZsqoQoDoqqLKK2qJAoKKuPDoYxadrKk9WBnILTs38
0iAhs2wglHWEsYZw4olgPpH8NIp5RBPDHP46l2n1n7HEMeWkE/7xt79cwCJ+
uJDvjvvNMRezkgSSWcIyRl3KiIl89YvLSeKzww65gk9+9IPvXUUK73zroKt5
42vX0u8rB+wzlfWkk8ZzX/rCZz51I0VksIVMcsgimyf2+tgec8lnE3ls5qGP
7PaBXRbQ6X3vuZU9FLKLbexkO7e96w46vOMt221zN63e9IbX3csh9nHJa+7n
qgc4SItXvOxhimn2okc4zgWPcowmz3vOEuot5ayNNvgfY9eo/A==
           "], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 
            1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 
            2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 
            2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2219, 1999, 1265, 68, 583, 1847, 1610, 524, 
            2207, 2197, 479, 2284, 170, 1629, 447, 121, 1998, 414, 2017, 2104,
             1483, 1013, 1202, 778, 1252, 408, 1287, 514, 863, 144, 2136, 
            2374, 110, 2315, 567, 1317, 807, 2135, 806, 1999, 871, 150, 1609, 
            990, 1270, 1779, 1635, 1657, 947, 2038, 39, 1112, 910, 1718, 2106,
             1746, 168, 1326, 2037, 1406, 1051, 820, 1758, 580, 2118, 219, 
            482, 2023, 839, 1102, 279, 1683, 354}], "NumericalThresholds" -> 
          RawArray["Real32",{0.929411768913269, 0.8627451062202454, 
            0.3803921639919281, 0.5411764979362488, 0.2862745225429535, 
            0.5333333611488342, 0.6431372761726379, 0.501960813999176, 
            0.5843137502670288, 0.8823529481887817, 0.0313725508749485, 
            0.29019609093666077`, 0.5058823823928833, 0.5568627715110779, 
            0.2705882489681244, 0.6117647290229797, 0.27843138575553894`, 0., 
            0.4117647111415863, 0.27843138575553894`, 0., 0.0117647061124444, 
            0.5176470875740051, 0., 0.29411765933036804`, 
            0.20000000298023224`, 0.125490203499794, 0.07058823853731155, 
            0.003921568859368563, 0.5764706134796143, 0.6117647290229797, 0., 
            0.35686275362968445`, 0.01568627543747425, 0.18039216101169586`, 
            0., 0.10588235408067703`, 0.6470588445663452, 
            0.003921568859368563, 0.6823529601097107, 0.007843137718737125, 
            0.3529411852359772, 0.9019607901573181, 0.4627451002597809, 
            0.4274509847164154, 0.6392157077789307, 0.27450981736183167`, 
            0.6901960968971252, 0.5215686559677124, 0.7529411911964417, 
            0.6509804129600525, 0., 0., 0.4313725531101227, 0.800000011920929,
             0.6980392336845398, 0.6901960968971252, 0.8666666746139526, 
            0.7568627595901489, 0., 0.027450980618596077`, 
            0.01568627543747425, 0.5058823823928833, 0.9921568632125854, 
            0.05882352963089943, 0.21568627655506134`, 0., 0.3921568691730499,
             0.615686297416687, 0.9137254953384399, 0.9960784316062927, 
            0.686274528503418, 0.9019607901573181}], "Children" -> 
          RawArray["Integer16",{{2, 38}, {3, -37}, {4, 29}, {5, 25}, {6, 
            21}, {7, 15}, {8, 14}, {9, 12}, {10, 11}, {-1, -2}, {-3, -4}, {
            13, -7}, {-5, -6}, {-8, -9}, {16, 18}, {
            17, -12}, {-10, -11}, {-13, 19}, {20, -16}, {-14, -15}, {22, 
            23}, {-17, -18}, {24, -21}, {-19, -20}, {26, 
            27}, {-22, -23}, {-24, 28}, {-25, -26}, {30, 34}, {31, 33}, {
            32, -29}, {-27, -28}, {-30, -31}, {35, 36}, {-32, -33}, {-34, 
            37}, {-35, -36}, {39, 58}, {40, 48}, {41, -46}, {42, 46}, {43, 
            44}, {-38, -39}, {45, -42}, {-40, -41}, {-43, 47}, {-44, -45}, {
            49, 56}, {50, -54}, {51, -53}, {52, -52}, {53, 54}, {-47, -48}, {
            55, -51}, {-49, -50}, {57, -57}, {-55, -56}, {59, 71}, {
            60, -70}, {61, 64}, {62, 63}, {-58, -59}, {-60, -61}, {65, -69}, {
            66, 68}, {-62, 67}, {-63, -64}, {69, 
            70}, {-65, -66}, {-67, -68}, {-71, 72}, {73, -74}, {-72, -73}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 
            2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 
            2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 
            2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2205, 792, 1642, 769, 1217, 568, 593, 852, 
            2235, 807, 871, 185, 1555, 927, 483, 1280, 449, 871, 1262, 417, 
            2092, 1802, 168, 2151, 478, 2237, 936, 1486, 1245, 1865, 10, 799, 
            1410, 837, 852, 153, 1321, 466, 582, 1006, 1237, 1172, 13, 1796, 
            2121, 510, 806, 2143, 440, 294, 12, 951, 2106, 1597, 1210, 1757, 
            649, 1771, 1738, 508, 1746, 71, 2074, 3, 906, 2155, 1745, 1774, 
            529, 191, 105, 828, 722, 402, 1780, 2066, 841, 855, 14, 1538, 807,
             259}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI4gJxP/+1tr//fPH
rrury27iBAG7gwcO2C5etAhE2yxcoGALkgeK2z58kGDb1spqv3HDBruuTk77
o0dc7Fau0LDftNHQ/uWLF3Zr1+jYvXiebs8ABU+fPLFrbmoCqllhB9RrBzLz
x/dy+7dv3tj9//fPbuqUKXbz58nZ371zxw6o33b6tGl2IH0XL1wA2u1gD6Rt
f/+qsm9vY7MH2Q2ys7GBwX7vHhugXIDd2TM+9iA3wuybNVMSqO6BzYb1+vY7
d1gA3WlgN3nSJLCZIPOvXrkCdi9Qry1IDGgWWC/QfWB+awuL/cwZEkD3xNjt
2W0NNNvBrrODwx7kBqBZtvPnzbNbuGCBzdw5c4D+eQDWAzITZj8AbBufBA==

           "], "Children" -> CompressedData["
1:eJwdkFlTDQAARs9UVLZQtiytJISi7FJJsub6BZkJT5q5zDR+lBbKTgmlxZrK
Uir7Fsm+5HTr4XwzZ763k3SoPHA4DDgeFZpAaUVeMFh68mB0SIqPnSg7UhbM
zDk69gdChI2TQTjRRBDFBCKZyIj633/+9Y+/ncQSJjOdKUxjKj/85U+/G8M3
vzqDxcwklVj6jWMhs1jAbOKZw1yG/eKQ8/jsJwedz0c/+N53LiKRtybwxtcm
kcwrX/rCFJ47YJ/P7LXHNFawlGWk89inPvGRy+m2y04fupICVpHDarLJZA1Z
3LfDB95zLXe9423bXcdW1rOZDWyizY202uItm93CDZu8aS75bCOP6zZ6zQbr
vep2iimkiB1c8oqX3cl5L3rBXZSwmz2c86x72Uedte6nxjOettoDoY6nrLLS
Ucqorvk=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 
            1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 
            1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 
            1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 
            2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2123, 2232, 2064, 1222, 2084, 408, 1668, 1768,
             1387, 51, 1793, 6, 1759, 2013, 1620, 2237, 1644, 1819, 1063, 
            2251, 138, 1035, 2095, 1850, 1239, 1830, 1255, 408, 673, 163, 98, 
            249, 2179, 384, 869, 867, 1768, 434, 1264, 828, 151, 488, 692, 
            573, 2190, 1260, 37, 1081, 85, 419, 102, 1000, 1451, 22, 951, 
            1290, 1492, 1974, 332, 2109, 2059, 600, 454, 2041, 1409, 1353, 
            1283, 901, 32, 1361, 872, 2110, 1146, 614}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.6745098233222961, 0.9764705896377563, 0., 
            0.05098039284348488, 0.25882354378700256`, 0.5843137502670288, 
            0.5960784554481506, 0.0117647061124444, 0.49803921580314636`, 
            0.48235294222831726`, 0., 0.019607843831181526`, 
            0.7529411911964417, 0.6823529601097107, 0.9450980424880981, 
            0.21960784494876862`, 0.5058823823928833, 0., 0.5411764979362488, 
            0.0117647061124444, 0.5647059082984924, 0.0235294122248888, 
            0.007843137718737125, 0.0313725508749485, 0.5529412031173706, 
            0.250980406999588, 0.23529411852359772`, 0.4470588266849518, 0., 
            0.529411792755127, 0.03529411926865578, 0.0235294122248888, 0., 
            0.49803921580314636`, 0.01568627543747425, 0.501960813999176, 
            0.6980392336845398, 0.0235294122248888, 0., 0.0117647061124444, 
            0., 0.8313725590705872, 0., 0.23137255012989044`, 
            0.545098066329956, 0.7686274647712708, 0.18431372940540314`, 
            0.01568627543747425, 0.2666666805744171, 0., 0.18039216101169586`,
             0.29019609093666077`, 0.0784313753247261, 0.003921568859368563, 
            0.7058823704719543, 0., 0.7686274647712708, 0.3686274588108063, 
            0.9921568632125854, 0.729411780834198, 0.34117648005485535`, 
            0.6313725709915161, 0.843137264251709, 0.04313725605607033, 
            0.1411764770746231, 0.019607843831181526`, 0.250980406999588, 
            0.5333333611488342, 0., 0.0235294122248888, 0.027450980618596077`,
             0.43529412150382996`, 0.29411765933036804`, 
            0.34117648005485535`}], "Children" -> 
          RawArray["Integer16",{{2, 59}, {3, 34}, {4, 12}, {5, 7}, {
            6, -3}, {-1, -2}, {8, -9}, {9, 10}, {-4, -5}, {-6, 
            11}, {-7, -8}, {-10, 13}, {14, 31}, {15, 29}, {16, -25}, {17, 
            23}, {-11, 18}, {19, 21}, {-12, 20}, {-13, -14}, {-15, 
            22}, {-16, -17}, {24, 25}, {-18, -19}, {26, 28}, {
            27, -22}, {-20, -21}, {-23, -24}, {30, -28}, {-26, -27}, {
            32, -32}, {-29, 33}, {-30, -31}, {35, 44}, {36, 42}, {37, 41}, {
            38, 39}, {-33, -34}, {-35, 40}, {-36, -37}, {-38, -39}, {
            43, -42}, {-40, -41}, {45, 51}, {46, 47}, {-43, -44}, {48, 
            50}, {-45, 49}, {-46, -47}, {-48, -49}, {52, 55}, {53, 
            54}, {-50, -51}, {-52, -53}, {56, -58}, {57, 
            58}, {-54, -55}, {-56, -57}, {60, 65}, {61, 63}, {-59, 
            62}, {-60, -61}, {-62, 64}, {-63, -64}, {66, 69}, {-65, 67}, {
            68, -68}, {-66, -67}, {70, 74}, {71, 72}, {-69, -70}, {-71, 
            73}, {-72, -73}, {-74, -75}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 
            2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 
            2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 
            2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2199, 1248, 1203, 588, 1310, 2136, 9, 2017, 
            522, 1664, 1081, 1104, 2204, 1327, 1593, 867, 649, 2094, 2099, 
            714, 1000, 1813, 412, 1671, 1758, 882, 1998, 1585, 2046, 1098, 
            425, 1679, 1759, 984, 2211, 1229, 1467, 1684, 1749, 1640, 2019, 
            1777, 2159, 1688, 868, 128, 966, 1007, 2091, 1633, 168, 1364, 
            1887, 1964, 1416, 1599, 433, 2145, 1055, 799, 839, 254, 1732, 38, 
            1212, 2031, 757, 1341, 673, 711, 2023}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9803921580314636, 0.9686274528503418, 
            0.23529411852359772`, 0.5098039507865906, 0.0313725508749485, 
            0.9333333373069763, 0.6431372761726379, 0.054901961237192154`, 
            0.4745098054409027, 0.6196078658103943, 0.0117647061124444, 
            0.5568627715110779, 0.003921568859368563, 0.8901960849761963, 0., 
            0.13333334028720856`, 0., 0.250980406999588, 0.0941176488995552, 
            0.007843137718737125, 0.7647058963775635, 0.019607843831181526`, 
            0.05098039284348488, 0.3450980484485626, 0.8980392217636108, 
            0.529411792755127, 0.4313725531101227, 0.01568627543747425, 
            0.47058823704719543`, 0., 0.21176470816135406`, 
            0.5529412031173706, 0.0313725508749485, 0.43529412150382996`, 
            0.8196078538894653, 0.003921568859368563, 0.3137255012989044, 
            0.003921568859368563, 0.5058823823928833, 0.027450980618596077`, 
            0.9725490212440491, 0., 0.8549019694328308, 0.01568627543747425, 
            0.772549033164978, 0.5764706134796143, 0.5058823823928833, 0., 
            0.25882354378700256`, 0.05098039284348488, 0.3137255012989044, 
            0.4274509847164154, 0.5607843399047852, 0.1764705926179886, 
            0.38823530077934265`, 0., 0.7372549176216125, 
            0.019607843831181526`, 0.0235294122248888, 0.5882353186607361, 
            0.23529411852359772`, 0.01568627543747425, 0., 0.0235294122248888,
             0., 0.20000000298023224`, 0.019607843831181526`, 
            0.7686274647712708, 0., 0.22745098173618317`, 
            0.4156862795352936}], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 41}, {4, 6}, {-1, 5}, {-2, -3}, {
            7, 39}, {8, 35}, {9, 25}, {10, 19}, {11, 18}, {12, 14}, {-4, 
            13}, {-5, -6}, {15, -11}, {16, 
            17}, {-7, -8}, {-9, -10}, {-12, -13}, {20, 23}, {-14, 21}, {-15, 
            22}, {-16, -17}, {-18, 24}, {-19, -20}, {26, 34}, {27, 31}, {
            28, -25}, {29, 30}, {-21, -22}, {-23, -24}, {32, 
            33}, {-26, -27}, {-28, -29}, {-30, -31}, {36, 38}, {-32, 
            37}, {-33, -34}, {-35, -36}, {40, -39}, {-37, -38}, {
            42, -42}, {-40, -41}, {44, 52}, {45, 50}, {46, -48}, {47, -47}, {
            48, 49}, {-43, -44}, {-45, -46}, {-49, 51}, {-50, -51}, {53, 
            65}, {54, 56}, {-52, 55}, {-53, -54}, {57, 60}, {58, 
            59}, {-55, -56}, {-57, -58}, {61, 63}, {62, -61}, {-59, -60}, {
            64, -64}, {-62, -63}, {66, 69}, {67, 
            68}, {-65, -66}, {-67, -68}, {70, -72}, {71, -71}, {-69, -70}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
            2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 
            1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 
            1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2228, 2258, 379, 880, 802, 537, 2053, 2122, 
            1613, 1960, 1607, 1187, 1078, 534, 2087, 4, 863, 49, 878, 651, 
            1797, 2151, 222, 2341, 1425, 28, 1722, 1850, 1728, 769, 386, 190, 
            2066, 5, 957, 402, 1670, 844, 1254, 1294, 1425, 304, 2011, 1104, 
            1732, 934, 1382, 432, 1863, 1055, 2234, 2062, 1755, 851, 1189, 
            428, 1382, 132, 18, 910, 849, 601, 690, 133, 1272, 167, 1125, 
            2039, 1383}], "NumericalThresholds" -> 
          RawArray["Real32",{0.6352941393852234, 0.5686274766921997, 
            0.019607843831181526`, 0.18039216101169586`, 
            0.019607843831181526`, 0.7803921699523926, 0.47843137383461, 
            0.843137264251709, 0.9372549057006836, 0.22745098173618317`, 
            0.3529411852359772, 0.14509804546833038`, 0.05098039284348488, 
            0.48235294222831726`, 0.3137255012989044, 0.6117647290229797, 
            0.054901961237192154`, 0.5529412031173706, 0.21568627655506134`, 
            0.007843137718737125, 0.9411764740943909, 0.572549045085907, 
            0.9843137264251709, 0.5411764979362488, 0., 0.7843137383460999, 
            0.18431372940540314`, 0., 0.7176470756530762, 
            0.019607843831181526`, 0.9725490212440491, 0.7843137383460999, 
            0.7450980544090271, 0.48627451062202454`, 0.364705890417099, 
            0.0235294122248888, 0.003921568859368563, 0.7529411911964417, 
            0.07450980693101883, 0., 0.7058823704719543, 0., 
            0.9019607901573181, 0., 0.0117647061124444, 0.003921568859368563, 
            0.019607843831181526`, 0.8745098114013672, 0.9843137264251709, 
            0.0470588244497776, 0.8392156958580017, 0.6509804129600525, 
            0.9803921580314636, 0.572549045085907, 0.0784313753247261, 
            0.007843137718737125, 0.3921568691730499, 0., 0.5176470875740051, 
            0.8156862854957581, 0.21176470816135406`, 0.4431372582912445, 
            0.019607843831181526`, 0., 0.8313725590705872, 0.3843137323856354,
             0.250980406999588, 0.08627451211214066, 0.1921568661928177}], 
          "Children" -> 
          RawArray["Integer16",{{2, 36}, {3, 27}, {4, 8}, {5, -5}, {6, 
            7}, {-1, -2}, {-3, -4}, {9, 24}, {10, 23}, {11, 16}, {12, -11}, {
            13, 14}, {-6, -7}, {-8, 15}, {-9, -10}, {17, -19}, {18, 20}, {-12,
             19}, {-13, -14}, {-15, 21}, {22, -18}, {-16, -17}, {-20, -21}, {
            25, 26}, {-22, -23}, {-24, -25}, {28, 30}, {-26, 
            29}, {-27, -28}, {31, 32}, {-29, -30}, {33, 35}, {
            34, -33}, {-31, -32}, {-34, -35}, {37, 52}, {38, 47}, {39, 45}, {
            40, 44}, {41, 43}, {
            42, -38}, {-36, -37}, {-39, -40}, {-41, -42}, {-43, 
            46}, {-44, -45}, {48, 51}, {49, 
            50}, {-46, -47}, {-48, -49}, {-50, -51}, {53, 68}, {54, 63}, {55, 
            62}, {56, 58}, {-52, 57}, {-53, -54}, {59, 60}, {-55, -56}, {
            61, -59}, {-57, -58}, {-60, -61}, {64, 65}, {-62, -63}, {
            66, -67}, {67, -66}, {-64, -65}, {-68, 69}, {-69, -70}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 
            1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 
            1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 
            1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2183, 801, 789, 1203, 2101, 2261, 2009, 1403, 
            1292, 1367, 580, 265, 641, 260, 93, 1009, 627, 1717, 2262, 1332, 
            513, 11, 2130, 2112, 33, 935, 1992, 2299, 949, 508, 807, 2056, 
            789, 2198, 720, 474, 92, 868, 1845, 2138, 801, 306, 1459, 644, 
            2079, 1033, 1101, 1207, 1727, 2000, 1207, 1046, 1316, 1373, 811, 
            1695, 2121, 1, 407, 1561, 79, 900}], "NumericalThresholds" -> 
          RawArray["Real32",{0.7215686440467834, 0.0235294122248888, 
            0.0235294122248888, 0.9803921580314636, 0.4470588266849518, 
            0.0313725508749485, 0.9058823585510254, 0.8666666746139526, 
            0.3960784375667572, 0.572549045085907, 0.019607843831181526`, 0., 
            0.01568627543747425, 0.01568627543747425, 0.13725490868091583`, 
            0.8039215803146362, 0., 0.1921568661928177, 0.40392157435417175`, 
            0., 0.2666666805744171, 0.3960784375667572, 0., 
            0.14509804546833038`, 0.48235294222831726`, 0.43529412150382996`, 
            0.01568627543747425, 0.01568627543747425, 0.30588236451148987`, 
            0.6705882549285889, 0.5529412031173706, 0., 0.0117647061124444, 
            0.32156863808631897`, 0.4470588266849518, 0.545098066329956, 0., 
            0.01568627543747425, 0.48235294222831726`, 0.3137255012989044, 0.,
             0.4274509847164154, 0.12941177189350128`, 0.7764706015586853, 
            0.5607843399047852, 0., 0., 0.5254902243614197, 
            0.01568627543747425, 0.0470588244497776, 0.4941176474094391, 
            0.0235294122248888, 0., 0.4313725531101227, 0., 
            0.4274509847164154, 0.6823529601097107, 0.7882353067398071, 
            0.16470588743686676`, 0.3803921639919281, 0.4156862795352936, 
            0.}], "Children" -> 
          RawArray["Integer16",{{2, 40}, {3, 19}, {4, 6}, {5, -3}, {-1, -2}, {
            7, 13}, {8, -10}, {9, 12}, {10, 
            11}, {-4, -5}, {-6, -7}, {-8, -9}, {14, 16}, {
            15, -13}, {-11, -12}, {17, 18}, {-14, -15}, {-16, -17}, {20, 
            26}, {21, 22}, {-18, -19}, {23, 25}, {
            24, -22}, {-20, -21}, {-23, -24}, {27, 38}, {28, 30}, {-25, 
            29}, {-26, -27}, {31, -36}, {32, 37}, {33, 36}, {-28, 34}, {
            35, -31}, {-29, -30}, {-32, -33}, {-34, -35}, {
            39, -39}, {-37, -38}, {41, 49}, {42, 46}, {43, 45}, {-40, 
            44}, {-41, -42}, {-43, -44}, {47, 48}, {-45, -46}, {-47, -48}, {
            50, 57}, {51, 56}, {52, -54}, {-49, 53}, {54, 
            55}, {-50, -51}, {-52, -53}, {-55, -56}, {58, 60}, {
            59, -59}, {-57, -58}, {-60, 61}, {-61, 62}, {-62, -63}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 
            2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 
            2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 
            1, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2186, 774, 990, 1393, 1886, 51, 661, 1840, 
            1836, 1240, 204, 2268, 1295, 869, 189, 1612, 1501, 1822, 151, 24, 
            2375, 1818, 1241, 57, 1762, 497, 12, 2279, 856, 2168, 2126, 1146, 
            90, 1348, 2186, 901, 47, 1783, 1370, 2159, 814, 1744, 1679, 875, 
            1561, 2043, 1255, 2028, 1999, 954, 339, 2157, 1951, 115, 99, 136, 
            538, 1207, 1305, 206, 1029, 1417, 1751, 67, 362, 1608, 1055, 1006,
             1341, 1298, 1602, 1272, 414, 236, 678, 1253, 1375, 1666, 239, 
            841, 390, 259, 1623}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5AZDMT37sbanzzh
YdfXy2v//Nkzu4cPHtgcPeJi19HObv/vb639wgUKtqdPnbJ7+iTFfu+ePXa3
b92ya2xgsN2319Z+5owZdgcPONgyQMG5s772ILqxocGmv4/PfsVydfv3797Z
gcROnjgBVrdxg4H9vLmy9q0tLUBzGmwXLlhg9/dPjf2UycL2IDdMnTIFrP7m
jQi79rY2u9WrtOxB5sHMnDRREKiXxQ7k5vPn/MD2Xb0SAtZz5XKw/f9//+wm
TxICunuBTXsbmz3I7SAa5JedO3aA1b1+9cquu6vLDuSmXTst7UH+hbrbFmT+
4kWL7EBqrl8Ls58xXRxoP4MNSB7kV5D41i0mdh8/fLDr7+sD6/v/r84e5F4A
0EWbUg==
           "], "Children" -> CompressedData["
1:eJwdiWlTDQAAAHei9JAjhByJIuQIFaLkrpDe+wXPTOpTZp5mjP/kLpIQORJC
7jNUknJU7iPr6cPuzM6m7tkX3BsD7I+PKhg+UBiJhA+GAtEoqqouryiPZOVU
/v+hKDHDrGIE8YwkjliG1L/+cRS//WWAhYwmiTFMZiyJJDCecXz3pz+cwGcn
8sVvfnXQSQzY7yen8NEPTmUW05jJdGbw3mT67PWdPb6129k8MYWnzmE+qczl
jV3O46VpvLLTdDp87QIyaPeFz33mIlaymOVkspQlPPSxj3zgMu57zyxuu4I7
3rXNW7aaTT43zSGX9axmDTe87lqumMdV19Fsi9e87CUL2MoGtlDIZjayiSYv
esFGz3vOsza4jSBn3E4RZRSzmxJ2UO9pd1LjLkqp85QnrfWExz3mUY8Y4rCH
/AfwcrD4
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 
            1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 
            2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 
            1, 2, 2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2174, 2264, 781, 1959, 280, 2183, 1224, 1990, 
            424, 1652, 1754, 2157, 1354, 1825, 518, 844, 2373, 1286, 1675, 
            1605, 2034, 410, 1996, 1997, 2103, 863, 997, 2269, 1253, 2243, 
            2085, 1791, 2245, 152, 2166, 1508, 2098, 1133, 1254, 177, 1310, 
            470, 2194, 1622, 131, 1718, 1338, 2157, 1305, 1054, 1301, 969, 
            2057, 1200, 74, 440, 258, 1363, 1296, 1085, 404, 1878, 566, 824, 
            1636, 1998, 1383, 49, 50, 1271, 1237, 280, 926}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.9764705896377563, 0.21960784494876862`, 
            0.0313725508749485, 0.0117647061124444, 0., 0.9098039269447327, 
            0.6784313917160034, 0., 0.35686275362968445`, 0.062745101749897, 
            0.4941176474094391, 0.9803921580314636, 0.003921568859368563, 
            0.9764705896377563, 0.572549045085907, 0.04313725605607033, 
            0.47843137383461, 0.4000000059604645, 0.7019608020782471, 
            0.027450980618596077`, 0., 0.027450980618596077`, 
            0.9686274528503418, 0.7764706015586853, 0.0117647061124444, 
            0.007843137718737125, 0.37254902720451355`, 0.0117647061124444, 
            0.05882352963089943, 0.13725490868091583`, 0.019607843831181526`, 
            0.24705882370471954`, 0.003921568859368563, 0.003921568859368563, 
            0.6274510025978088, 0., 0.25882354378700256`, 0.7019608020782471, 
            0.3490196168422699, 0.9607843160629272, 0.007843137718737125, 
            0.007843137718737125, 0., 0.5843137502670288, 0.545098066329956, 
            0.10588235408067703`, 0.8980392217636108, 0.8274509906768799, 
            0.21568627655506134`, 0.9882352948188782, 0.23137255012989044`, 
            0.6039215922355652, 0.15294118225574493`, 0., 0.8588235378265381, 
            0.8352941274642944, 0.9764705896377563, 0.46666666865348816`, 
            0.29411765933036804`, 0.5764706134796143, 0.3137255012989044, 
            0.03921568766236305, 0.8352941274642944, 0.5647059082984924, 
            0.04313725605607033, 0.29411765933036804`, 0.01568627543747425, 
            0., 0.9843137264251709, 0., 0.5803921818733215, 
            0.9764705896377563, 0.0117647061124444}], "Children" -> 
          RawArray["Integer16",{{2, 48}, {3, 23}, {4, 6}, {-1, 5}, {-2, -3}, {
            7, -21}, {8, 18}, {9, 11}, {-4, 10}, {-5, -6}, {12, 17}, {
            13, -12}, {14, -11}, {15, 16}, {-7, -8}, {-9, -10}, {-13, -14}, {
            19, 22}, {20, -18}, {21, -17}, {-15, -16}, {-19, -20}, {24, 39}, {
            25, 36}, {26, 28}, {27, -24}, {-22, -23}, {29, 31}, {
            30, -27}, {-25, -26}, {32, 33}, {-28, -29}, {34, 
            35}, {-30, -31}, {-32, -33}, {-34, 37}, {38, -37}, {-35, -36}, {
            40, 44}, {41, -42}, {42, -41}, {-38, 43}, {-39, -40}, {45, -47}, {
            46, -46}, {47, -45}, {-43, -44}, {49, 52}, {50, 
            51}, {-48, -49}, {-50, -51}, {53, 66}, {54, 62}, {55, 58}, {
            56, -55}, {57, -54}, {-52, -53}, {59, 61}, {-56, 
            60}, {-57, -58}, {-59, -60}, {-61, 63}, {64, -65}, {-62, 
            65}, {-63, -64}, {67, 73}, {68, 69}, {-66, -67}, {70, -72}, {
            71, -71}, {72, -70}, {-68, -69}, {-73, -74}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 
            1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 
            2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 
            1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2112, 2204, 2310, 863, 2053, 2375, 2363, 2063,
             2059, 1959, 2298, 1342, 2373, 2102, 1899, 506, 1349, 895, 842, 
            1975, 11, 65, 2021, 1620, 943, 1578, 1374, 2205, 2158, 1888, 1797,
             197, 2079, 1487, 88, 424, 438, 220, 1868, 801, 151, 907, 1711, 
            390, 2001, 1653, 1660, 411, 2038, 1230, 2005, 854, 2013, 1353, 
            462, 2079, 1209, 2114, 1856, 1017, 906, 251, 1749, 1350, 489, 
            2036, 1702, 1516, 845, 2116, 42, 762, 1285, 460, 41, 807, 417}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DpC8S/f1XZ378X
Z//9W5n9tq2m9p8+Ftq/f/fO7t7dWPuvX77YvXmdbc8ABf19fPZPHifb792z
x66xocFm9qxZdi3NzPZbt5jYr161yu7liww7mNrdu3bZnTzhYf/xQ4HdwgUL
bFauWGE3ZbKwPVCN/dEjLnazZkrag+z4/euX3b+/tfaNDQy2IDPmzpEBmwHk
g+39+aPCft5cWfu/f2pAamy+fS0Fiz988MBm8SIluNtevnhhe/CAgw3IjSC7
QW5rb2OzP3/unN33b9/AZu7Ybg5Xf/jQIbAYyG6Y2Nw5c+w6OzjA7gXxQf5f
u2YN3E8gcGC/vT0Adk2IDg==
           "], "Children" -> CompressedData["
1:eJwdiWlTDQAAAHcKXZJQuZJyJbocObokpYf3Jb+gZopPmXmaafwtJRHlFqJy
hEQiR65cUUnbqw+7MzubXnuquj4COB0dVnVNU1koVHPmeEw4Ag2NdSfqQvkF
J+d+MEzEPKVEkskCUlhIEosYM4p4opk0hsXEMm0c/9UZ/znlEhJJYCkT/vWP
4y7ju8v54W9X8MufJvPFb351JVtYxUZWk8Fn17CW9aTy3nV88JNpjPrRd6Yz
4lvfuIFhX7uJQYfczCtf+sIBt7KTLHrcxg62k89zs8khj1z6feZTn/jYRz60
z153sZ/d7KWAPTzwvt3ecx9d3vWOhZRQRDG3veVNb3jdax6gkjIOctUrllNB
p4fo8LKXbPcwVVz0ggGOcYRzHqXVNs8b5KwtNjsLP2Kk/g==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 
            1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 
            1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 
            2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2208, 1600, 1220, 14, 830, 2310, 1271, 2116, 
            2022, 1282, 1244, 1233, 1542, 50, 1286, 2099, 1844, 147, 27, 606, 
            1618, 2316, 2367, 1607, 2021, 647, 1024, 754, 412, 1226, 2242, 
            2246, 123, 916, 379, 1334, 1999, 130, 2131, 1689, 1386, 28, 1253, 
            505, 1646, 2000, 554, 2150, 2091, 1844, 1502, 1358, 829, 1618, 
            525, 324, 1632, 437, 1287, 2048, 813, 2269, 1530, 2114, 1305, 259,
             113, 1169, 113, 1673, 146, 852}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9254902005195618, 0.9411764740943909, 
            0.8313725590705872, 0.9725490212440491, 0.9019607901573181, 
            0.9764705896377563, 0.6470588445663452, 0.8549019694328308, 
            0.529411792755127, 0.7176470756530762, 0.7960784435272217, 
            0.9843137264251709, 0.23529411852359772`, 0., 0.5882353186607361, 
            0.4000000059604645, 0.13725490868091583`, 0.7529411911964417, 
            0.48627451062202454`, 0.8196078538894653, 0., 0.4941176474094391, 
            0.5333333611488342, 0.6392157077789307, 0.34117648005485535`, 
            0.9960784316062927, 0.9725490212440491, 0.7529411911964417, 
            0.27450981736183167`, 0.2235294133424759, 0.06666667014360428, 
            0.0117647061124444, 0.16470588743686676`, 0., 
            0.18431372940540314`, 0.5843137502670288, 0.5568627715110779, 
            0.3450980484485626, 0.9137254953384399, 0.5764706134796143, 
            0.3176470696926117, 0.0117647061124444, 0., 0.2862745225429535, 
            0.8117647171020508, 0.4117647111415863, 0.38823530077934265`, 0., 
            0.7215686440467834, 0.47843137383461, 0.40784314274787903`, 
            0.3176470696926117, 0.529411792755127, 0.20392157137393951`, 
            0.0313725508749485, 0., 0.529411792755127, 0.6352941393852234, 
            0.6235294342041016, 0.45098039507865906`, 0.6470588445663452, 0., 
            0.6235294342041016, 0.027450980618596077`, 0.8705882430076599, 
            0.9725490212440491, 0.0235294122248888, 0., 0.08627451211214066, 
            0., 0.48627451062202454`, 0.8627451062202454}], "Children" -> 
          RawArray["Integer16",{{2, 36}, {3, -35}, {4, 35}, {5, 34}, {
            6, -30}, {7, 24}, {8, 22}, {9, 21}, {10, 17}, {11, -8}, {
            12, -7}, {13, -6}, {14, 15}, {-1, -2}, {-3, 16}, {-4, -5}, {18, 
            19}, {-9, -10}, {20, -13}, {-11, -12}, {-14, -15}, {
            23, -18}, {-16, -17}, {25, -29}, {26, 31}, {27, 29}, {-19, 
            28}, {-20, -21}, {30, -24}, {-22, -23}, {32, 
            33}, {-25, -26}, {-27, -28}, {-31, -32}, {-33, -34}, {37, 63}, {
            38, 62}, {39, 55}, {40, 50}, {41, 48}, {42, 45}, {43, 
            44}, {-36, -37}, {-38, -39}, {46, -43}, {47, -42}, {-40, -41}, {
            49, -46}, {-44, -45}, {51, 52}, {-47, -48}, {53, 
            54}, {-49, -50}, {-51, -52}, {56, 58}, {-53, 57}, {-54, -55}, {
            59, -60}, {60, -59}, {61, -58}, {-56, -57}, {-61, -62}, {-63, 
            64}, {65, 68}, {66, 67}, {-64, -65}, {-66, -67}, {69, 
            70}, {-68, -69}, {71, -73}, {72, -72}, {-70, -71}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
            1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 
            1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 
            2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2227, 1664, 4, 1199, 37, 1137, 723, 2123, 
            2228, 1497, 1367, 1826, 66, 586, 961, 959, 1551, 2164, 1095, 85, 
            1800, 1684, 402, 1873, 575, 1414, 1680, 1680, 1870, 2241, 163, 
            302, 70, 1397, 1050, 1144, 606, 658, 1345, 414, 2111, 384, 1606, 
            288, 196, 1350, 249, 890, 1320, 1644, 1636, 2109, 1269, 1724, 
            1220, 2184, 70, 785, 1297, 566, 854, 897, 1300, 2218, 593, 1599, 
            1246, 846, 2146, 654, 651, 233, 1715, 1336, 2010}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.9843137264251709, 0.6509804129600525, 
            0.8627451062202454, 0.9411764740943909, 0.7607843279838562, 
            0.19607843458652496`, 0.01568627543747425, 0.019607843831181526`, 
            0.5254902243614197, 0.24705882370471954`, 0.8117647171020508, 
            0.886274516582489, 0.48235294222831726`, 0.23137255012989044`, 
            0.0941176488995552, 0.0117647061124444, 0.42352941632270813`, 
            0.5137255191802979, 0.5647059082984924, 0.46666666865348816`, 
            0.3333333432674408, 0.5882353186607361, 0.4117647111415863, 0., 
            0.29411765933036804`, 0.8117647171020508, 0.23137255012989044`, 
            0.37254902720451355`, 0.0117647061124444, 0.6235294342041016, 0., 
            0.3843137323856354, 0.32156863808631897`, 0.0235294122248888, 0., 
            0.8901960849761963, 0.7176470756530762, 0.0235294122248888, 
            0.8470588326454163, 0.5921568870544434, 0.5568627715110779, 
            0.6549019813537598, 0., 0.7882353067398071, 0.7529411911964417, 
            0.07058823853731155, 0.5411764979362488, 0.0313725508749485, 
            0.4588235318660736, 0.8823529481887817, 0.3960784375667572, 
            0.5137255191802979, 0.3450980484485626, 0.20392157137393951`, 0., 
            0.3803921639919281, 0.5137255191802979, 0.21568627655506134`, 
            0.003921568859368563, 0.7607843279838562, 0.01568627543747425, 
            0.5254902243614197, 0.09019608050584793, 0.5686274766921997, 
            0.6666666865348816, 0.1568627506494522, 0.8666666746139526, 
            0.32549020648002625`, 0.03921568766236305, 0.501960813999176, 
            0.062745101749897, 0.6078431606292725, 0., 0.24313725531101227`, 
            0.48235294222831726`}], "Children" -> 
          RawArray["Integer16",{{2, 39}, {3, 36}, {4, -34}, {5, 32}, {6, 
            29}, {7, 9}, {-1, 8}, {-2, -3}, {10, 25}, {11, 15}, {12, -8}, {
            13, -7}, {-4, 14}, {-5, -6}, {16, 22}, {17, 18}, {-9, -10}, {19, 
            21}, {-11, 20}, {-12, -13}, {-14, -15}, {23, 
            24}, {-16, -17}, {-18, -19}, {26, 27}, {-20, -21}, {-22, 
            28}, {-23, -24}, {-25, 30}, {31, -28}, {-26, -27}, {33, 35}, {
            34, -31}, {-29, -30}, {-32, -33}, {-35, 37}, {
            38, -38}, {-36, -37}, {40, 69}, {41, 64}, {42, 57}, {43, 46}, {44,
             45}, {-39, -40}, {-41, -42}, {47, 50}, {48, 
            49}, {-43, -44}, {-45, -46}, {51, -54}, {52, 54}, {-47, 
            53}, {-48, -49}, {55, -53}, {56, -52}, {-50, -51}, {58, 62}, {59, 
            60}, {-55, -56}, {-57, 61}, {-58, -59}, {
            63, -62}, {-60, -61}, {-63, 65}, {66, 68}, {
            67, -66}, {-64, -65}, {-67, -68}, {70, 71}, {-69, -70}, {72, 
            74}, {73, -73}, {-71, -72}, {75, -76}, {-74, -75}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 
            2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 
            2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2153, 2258, 2011, 467, 1321, 1121, 618, 216, 
            765, 1801, 264, 1900, 1202, 1623, 2218, 1371, 2165, 87, 660, 1224,
             1667, 2087, 878, 2168, 1203, 488, 2049, 1249, 391, 1645, 444, 
            812, 345, 2126, 2089, 1953, 808, 1205, 346, 772, 1752, 456, 1009, 
            1016, 1713, 1211, 719, 1243, 1220, 113, 1718, 1088, 1382, 433, 
            2004, 510, 1094, 1702, 653, 1605, 1260, 1435, 1361, 1325, 774, 85,
             840, 843, 2088, 305, 1040, 927, 141}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9215686321258545, 0.5882353186607361, 
            0.9607843160629272, 0.2980392277240753, 0.8823529481887817, 0., 
            0.95686274766922, 0.9176470637321472, 0.08627451211214066, 
            0.003921568859368563, 0.01568627543747425, 0.7098039388656616, 
            0.42352941632270813`, 0., 0.3529411852359772, 0.9960784316062927, 
            0.10980392247438431`, 0.239215686917305, 0.007843137718737125, 
            0.125490203499794, 0.1882352977991104, 0.2235294133424759, 
            0.4000000059604645, 0.2666666805744171, 0.545098066329956, 
            0.0117647061124444, 0.8705882430076599, 0.09803921729326248, 
            0.0313725508749485, 0.20392157137393951`, 0., 0., 
            0.7607843279838562, 0.007843137718737125, 0.007843137718737125, 
            0.0784313753247261, 0., 0.007843137718737125, 0., 0., 
            0.4941176474094391, 0., 0., 0.5686274766921997, 
            0.21568627655506134`, 0.843137264251709, 0.21960784494876862`, 
            0.09019608050584793, 0.19607843458652496`, 0.007843137718737125, 
            0.34117648005485535`, 0., 0.5921568870544434, 
            0.30980393290519714`, 0.3607843220233917, 0.8156862854957581, 0., 
            0.9333333373069763, 0., 0.5333333611488342, 0., 
            0.07058823853731155, 0.38823530077934265`, 0., 0.5490196347236633,
             0.6117647290229797, 0.6549019813537598, 0.7372549176216125, 
            0.8392156958580017, 0.9882352948188782, 0., 0.125490203499794, 
            0.6078431606292725}], "Children" -> 
          RawArray["Integer16",{{2, 53}, {3, 28}, {4, 27}, {5, 21}, {6, 18}, {
            7, 9}, {8, -3}, {-1, -2}, {-4, 10}, {11, 16}, {12, 
            13}, {-5, -6}, {14, 15}, {-7, -8}, {-9, -10}, {-11, 
            17}, {-12, -13}, {19, 20}, {-14, -15}, {-16, -17}, {22, 25}, {23, 
            24}, {-18, -19}, {-20, -21}, {26, -24}, {-22, -23}, {-25, -26}, {
            29, 46}, {30, 35}, {31, 34}, {32, 
            33}, {-27, -28}, {-29, -30}, {-31, -32}, {36, 40}, {-33, 37}, {38,
             39}, {-34, -35}, {-36, -37}, {41, 42}, {-38, -39}, {43, 
            44}, {-40, -41}, {-42, 45}, {-43, -44}, {47, -52}, {48, 50}, {-45,
             49}, {-46, -47}, {51, -51}, {52, -50}, {-48, -49}, {54, 64}, {55,
             60}, {56, -58}, {57, 59}, {-53, 58}, {-54, -55}, {-56, -57}, {
            61, -63}, {62, 63}, {-59, -60}, {-61, -62}, {65, 70}, {-64, 66}, {
            67, -69}, {68, -68}, {-65, 69}, {-66, -67}, {-70, 71}, {72, 
            73}, {-71, -72}, {-73, -74}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 
            1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 
            2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 
            2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2133, 2254, 2034, 2002, 2126, 1298, 1203, 483,
             1286, 2023, 2062, 1796, 870, 2064, 1886, 1832, 475, 607, 1981, 
            2263, 1832, 1735, 1641, 542, 1281, 549, 2353, 1692, 195, 1743, 
            1692, 1757, 144, 1434, 1067, 212, 550, 946, 1005, 1203, 465, 1298,
             1749, 494, 1788, 2036, 2059, 1357, 2060, 1458, 237, 1339, 895, 
            2175, 1477, 533, 1257, 614, 1727, 1201, 2078, 1756, 1369, 1468, 
            1267, 1198, 1834, 1180, 2082, 402, 2031}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9647058844566345, 0.8823529481887817, 
            0.9960784316062927, 0.8078431487083435, 0.6901960968971252, 
            0.8352941274642944, 0.25882354378700256`, 0.01568627543747425, 
            0.1725490242242813, 0.4000000059604645, 0.9803921580314636, 
            0.9960784316062927, 0.16470588743686676`, 0.007843137718737125, 
            0.48627451062202454`, 0.24313725531101227`, 0.1921568661928177, 
            0., 0.062745101749897, 0.3294117748737335, 0.9215686321258545, 
            0.4274509847164154, 0.21568627655506134`, 0., 0.5058823823928833, 
            0.7647058963775635, 0.6274510025978088, 0.9843137264251709, 
            0.21176470816135406`, 0.9803921580314636, 0., 0.0235294122248888, 
            0.0117647061124444, 0.615686297416687, 0.003921568859368563, 
            0.01568627543747425, 0.08235294371843338, 0.4431372582912445, 
            0.125490203499794, 0.18039216101169586`, 0.5568627715110779, 
            0.6000000238418579, 0., 0.11372549086809158`, 0.250980406999588, 
            0.6274510025978088, 0.5843137502670288, 0.027450980618596077`, 
            0.01568627543747425, 0., 0.5686274766921997, 0.05098039284348488, 
            0., 0.27450981736183167`, 0.47058823704719543`, 
            0.18039216101169586`, 0.003921568859368563, 0., 
            0.20000000298023224`, 0.0235294122248888, 0.019607843831181526`, 
            0.9764705896377563, 0.3333333432674408, 0., 0.43921568989753723`, 
            0.6784313917160034, 0.5568627715110779, 0.0117647061124444, 
            0.46666666865348816`, 0.10196078568696976`, 
            0.21568627655506134`}], "Children" -> 
          RawArray["Integer16",{{2, 59}, {3, 29}, {4, 28}, {5, 25}, {6, 23}, {
            7, -18}, {8, 11}, {-1, 9}, {10, -4}, {-2, -3}, {12, -17}, {
            13, -16}, {14, 19}, {15, 16}, {-5, -6}, {-7, 17}, {-8, 
            18}, {-9, -10}, {20, 21}, {-11, -12}, {-13, 22}, {-14, -15}, {
            24, -21}, {-19, -20}, {26, 
            27}, {-22, -23}, {-24, -25}, {-26, -27}, {30, 40}, {31, 39}, {32, 
            34}, {-28, 33}, {-29, -30}, {35, 37}, {-31, 36}, {-32, -33}, {-34,
             38}, {-35, -36}, {-37, -38}, {-39, 41}, {42, 54}, {43, 53}, {44, 
            46}, {45, -42}, {-40, -41}, {47, -50}, {48, 52}, {49, -47}, {50, 
            51}, {-43, -44}, {-45, -46}, {-48, -49}, {-51, -52}, {55, 
            56}, {-53, -54}, {57, 58}, {-55, -56}, {-57, -58}, {60, 67}, {61, 
            66}, {62, 65}, {63, 
            64}, {-59, -60}, {-61, -62}, {-63, -64}, {-65, -66}, {-67, 68}, {
            69, 70}, {-68, -69}, {-70, 71}, {-71, -72}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 
            1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 
            2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 
            2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2180, 2306, 1602, 1654, 801, 2146, 1326, 20, 
            1287, 1703, 11, 2013, 1168, 1818, 3, 805, 1834, 2126, 1272, 486, 
            476, 43, 2213, 1787, 1863, 1200, 910, 400, 2067, 992, 1006, 1755, 
            2104, 2239, 1458, 1397, 264, 50, 1743, 1604, 1793, 1911, 2018, 
            861, 1660, 1790, 422, 1269, 143, 1628, 2117, 801, 1201, 1280, 
            2071, 83, 2085, 1607, 987, 811, 1261, 673, 171, 333, 1323, 895, 
            1677, 1222, 547, 1787, 922, 750}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9254902005195618, 0.800000011920929, 
            0.019607843831181526`, 0.929411768913269, 0.43921568989753723`, 
            0.9843137264251709, 0.9686274528503418, 0.2549019753932953, 
            0.8313725590705872, 0.8470588326454163, 0.4000000059604645, 
            0.9411764740943909, 0.0117647061124444, 0.01568627543747425, 
            0.33725491166114807`, 0.21176470816135406`, 0.13333334028720856`, 
            0.03921568766236305, 0.5764706134796143, 0.5764706134796143, 
            0.22745098173618317`, 0.3960784375667572, 0.04313725605607033, 
            0.07058823853731155, 0.0313725508749485, 0.04313725605607033, 
            0.01568627543747425, 0.0235294122248888, 0.019607843831181526`, 
            0.007843137718737125, 0.9960784316062927, 0.6705882549285889, 
            0.18431372940540314`, 0.9843137264251709, 0.09803921729326248, 
            0.0235294122248888, 0.9921568632125854, 0., 0.007843137718737125, 
            0.5843137502670288, 0.21568627655506134`, 0.0235294122248888, 
            0.37254902720451355`, 0., 0.125490203499794, 0.34117648005485535`,
             0.003921568859368563, 0.16862745583057404`, 0.19607843458652496`,
             0.06666667014360428, 0.3450980484485626, 0., 
            0.29411765933036804`, 0., 0., 0., 0., 0.239215686917305, 0., 
            0.003921568859368563, 0.4941176474094391, 0.4627451002597809, 
            0.20392157137393951`, 0.9725490212440491, 0.7254902124404907, 
            0.41960784792900085`, 0.6745098233222961, 0.4000000059604645, 
            0.37254902720451355`, 0.6549019813537598, 0.0235294122248888, 
            0.2862745225429535}], "Children" -> 
          RawArray["Integer16",{{2, 51}, {3, 26}, {-1, 4}, {5, 25}, {
            6, -22}, {7, -21}, {8, 24}, {9, 18}, {10, -11}, {11, -10}, {12, 
            16}, {13, -6}, {-2, 14}, {15, -5}, {-3, -4}, {17, -9}, {-7, -8}, {
            19, 21}, {-12, 20}, {-13, -14}, {22, 
            23}, {-15, -16}, {-17, -18}, {-19, -20}, {-23, -24}, {27, 40}, {
            28, 34}, {29, 31}, {-25, 30}, {-26, -27}, {32, -31}, {
            33, -30}, {-28, -29}, {35, 38}, {36, 
            37}, {-32, -33}, {-34, -35}, {39, -38}, {-36, -37}, {41, -50}, {
            42, 46}, {-39, 43}, {44, -43}, {45, -42}, {-40, -41}, {47, 49}, {
            48, -46}, {-44, -45}, {-47, 50}, {-48, -49}, {52, 64}, {53, 58}, {
            54, -56}, {55, -55}, {56, 57}, {-51, -52}, {-53, -54}, {59, 63}, {
            60, 61}, {-57, -58}, {-59, 62}, {-60, -61}, {-62, -63}, {65, 
            67}, {66, -66}, {-64, -65}, {68, -73}, {69, 72}, {70, 
            71}, {-67, -68}, {-69, -70}, {-71, -72}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 
            1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 
            2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 
            1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2202, 2239, 788, 407, 1837, 1035, 2259, 802, 
            2165, 2237, 843, 1733, 1775, 2200, 827, 2052, 424, 843, 2017, 
            1325, 1809, 18, 1728, 578, 1649, 2380, 2223, 520, 492, 854, 1830, 
            1773, 216, 2098, 1019, 1365, 1653, 1656, 529, 2108, 2152, 1705, 
            1619, 2161, 689, 1750, 603, 957, 2174, 1824, 740, 1400, 1067, 
            1242, 2131, 1317, 2139, 1839, 869, 869, 2117, 185, 954, 1713, 
            1710, 2069, 744, 1161, 877, 1998, 645}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9607843160629272, 0.9843137264251709, 
            0.0117647061124444, 0.003921568859368563, 0., 0.7568627595901489, 
            0.8627451062202454, 0.9411764740943909, 0.0117647061124444, 
            0.9686274528503418, 0.9882352948188782, 0.9019607901573181, 
            0.40784314274787903`, 0.9490196108818054, 0.45490196347236633`, 
            0.4941176474094391, 0.5490196347236633, 0., 0.14901961386203766`, 
            0.0117647061124444, 0.0941176488995552, 0.4745098054409027, 
            0.45098039507865906`, 0., 0.364705890417099, 0.3019607961177826, 
            0.21568627655506134`, 0.5176470875740051, 0.43921568989753723`, 
            0.5372549295425415, 0.9450980424880981, 0.09803921729326248, 
            0.9176470637321472, 0.1882352977991104, 0.7921568751335144, 
            0.364705890417099, 0.5529412031173706, 0.21176470816135406`, 
            0.4470588266849518, 0.019607843831181526`, 0.8980392217636108, 
            0.0313725508749485, 0.14901961386203766`, 0.4627451002597809, 0., 
            0.007843137718737125, 0.7019608020782471, 0.4588235318660736, 
            0.32156863808631897`, 0., 0., 0.23529411852359772`, 
            0.48235294222831726`, 0.08627451211214066, 0., 
            0.37254902720451355`, 0.06666667014360428, 0.47058823704719543`, 
            0.019607843831181526`, 0.1568627506494522, 0.48235294222831726`, 
            0.8392156958580017, 0.2666666805744171, 0.4627451002597809, 
            0.8352941274642944, 0., 0.0313725508749485, 0.01568627543747425, 
            0.7607843279838562, 0.3529411852359772, 0.27450981736183167`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 41}, {3, 34}, {4, 8}, {5, 6}, {-1, -2}, {
            7, -5}, {-3, -4}, {9, -32}, {10, 19}, {11, -15}, {12, -14}, {
            13, -13}, {14, 17}, {15, -9}, {-6, 16}, {-7, -8}, {
            18, -12}, {-10, -11}, {20, 30}, {21, 26}, {22, 25}, {23, 
            24}, {-16, -17}, {-18, -19}, {-20, -21}, {27, 28}, {-22, -23}, {
            29, -26}, {-24, -25}, {31, -31}, {32, -30}, {
            33, -29}, {-27, -28}, {35, 39}, {36, 38}, {
            37, -35}, {-33, -34}, {-36, -37}, {40, -40}, {-38, -39}, {42, 
            58}, {43, 51}, {44, 50}, {45, 49}, {-41, 46}, {47, 
            48}, {-42, -43}, {-44, -45}, {-46, -47}, {-48, -49}, {52, 
            53}, {-50, -51}, {54, 55}, {-52, -53}, {56, 
            57}, {-54, -55}, {-56, -57}, {59, 61}, {-58, 60}, {-59, -60}, {62,
             66}, {63, -65}, {64, 65}, {-61, -62}, {-63, -64}, {67, 70}, {-66,
             68}, {-67, 69}, {-68, -69}, {-70, 71}, {-71, -72}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 
            1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 
            2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 
            2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1805, 2268, 863, 773, 22, 352, 1311, 436, 
            2122, 1493, 1531, 105, 2127, 1711, 1652, 1793, 1186, 1796, 1959, 
            2367, 2231, 2193, 1371, 925, 2004, 118, 1736, 879, 2052, 1251, 
            2006, 1278, 1226, 934, 225, 1605, 1751, 1014, 1737, 1508, 471, 
            2208, 657, 818, 1319, 2075, 1605, 2009, 505, 1524, 45, 2191, 868, 
            1266, 2228, 999, 256, 801, 448, 418, 1665, 1660, 485, 554, 1621, 
            885, 103, 1215, 214, 845, 1368, 796}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9529411792755127, 0.9019607901573181, 
            0.9647058844566345, 0.10196078568696976`, 0.054901961237192154`, 
            0.8823529481887817, 0.2078431397676468, 0.929411768913269, 
            0.7686274647712708, 0.29411765933036804`, 0., 0.3490196168422699, 
            0.0235294122248888, 0.5490196347236633, 0.1882352977991104, 
            0.003921568859368563, 0.30588236451148987`, 0.6078431606292725, 
            0., 0.0313725508749485, 0.3960784375667572, 0., 
            0.5137255191802979, 0.29019609093666077`, 0.1725490242242813, 0., 
            0., 0.08627451211214066, 0.7529411911964417, 0.8078431487083435, 
            0.5607843399047852, 0.8078431487083435, 0.48627451062202454`, 
            0.8980392217636108, 0.09019608050584793, 0.49803921580314636`, 
            0.43529412150382996`, 0.9803921580314636, 0.529411792755127, 
            0.37254902720451355`, 0.27450981736183167`, 0.9725490212440491, 
            0.8352941274642944, 0.5490196347236633, 0.05882352963089943, 
            0.9058823585510254, 0.007843137718737125, 0.3803921639919281, 
            0.8784313797950745, 0.4156862795352936, 0.6509804129600525, 
            0.545098066329956, 0.11372549086809158`, 0.43529412150382996`, 0.,
             0., 0.615686297416687, 0., 0.9529411792755127, 
            0.9019607901573181, 0.9843137264251709, 0., 0., 
            0.0117647061124444, 0.0470588244497776, 0.0313725508749485, 0., 
            0.250980406999588, 0.9725490212440491, 0.5568627715110779, 
            0.501960813999176, 0.26274511218070984`}], "Children" -> 
          RawArray["Integer16",{{2, 46}, {3, 29}, {4, 28}, {5, 8}, {6, 
            7}, {-1, -2}, {-3, -4}, {9, 27}, {10, 25}, {-5, 11}, {12, 
            13}, {-6, -7}, {14, 17}, {15, 16}, {-8, -9}, {-10, -11}, {-12, 
            18}, {19, -20}, {20, 21}, {-13, -14}, {22, 24}, {
            23, -17}, {-15, -16}, {-18, -19}, {
            26, -23}, {-21, -22}, {-24, -25}, {-26, -27}, {30, 44}, {31, 
            43}, {32, -40}, {33, 42}, {34, 41}, {35, -35}, {36, 39}, {
            37, -31}, {38, -30}, {-28, -29}, {-32, 
            40}, {-33, -34}, {-36, -37}, {-38, -39}, {-41, -42}, {
            45, -45}, {-43, -44}, {47, 71}, {48, 52}, {49, 51}, {
            50, -48}, {-46, -47}, {-49, -50}, {53, 57}, {54, 56}, {-51, 
            55}, {-52, -53}, {-54, -55}, {58, 64}, {59, 62}, {60, -59}, {
            61, -58}, {-56, -57}, {-60, 63}, {-61, -62}, {65, 68}, {66, 
            67}, {-63, -64}, {-65, -66}, {69, 70}, {-67, -68}, {-69, -70}, {
            72, -73}, {-71, -72}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 
            2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 
            2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 
            2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2176, 2049, 802, 1303, 2304, 2024, 1725, 2213,
             2343, 416, 1637, 52, 1224, 556, 1015, 246, 930, 2231, 632, 371, 
            942, 1758, 173, 794, 731, 359, 2123, 2003, 812, 2048, 1232, 1551, 
            2289, 2135, 2300, 2219, 2171, 2319, 127, 883, 532, 463, 1624, 804,
             1727, 887, 1760, 2243, 1364, 565, 1280, 945, 2136, 1689, 950, 
            1997, 1799, 848, 1663, 429, 2125, 1324, 846, 2129, 1999, 1681, 
            1282, 1023, 21, 414, 801, 2032, 2122, 1718}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.9960784316062927, 0.9137254953384399, 
            0.8196078538894653, 0.01568627543747425, 0.9764705896377563, 
            0.4745098054409027, 0.48235294222831726`, 0.04313725605607033, 
            0.29411765933036804`, 0.5098039507865906, 0.007843137718737125, 
            0., 0.501960813999176, 0.1411764770746231, 0.43921568989753723`, 
            0.7843137383460999, 0.4588235318660736, 0.5215686559677124, 
            0.0313725508749485, 0., 0.003921568859368563, 0.9803921580314636, 
            0., 0.01568627543747425, 0.019607843831181526`, 0., 
            0.5607843399047852, 0.3607843220233917, 0.5372549295425415, 
            0.38823530077934265`, 0.5333333611488342, 0., 0.3294117748737335, 
            0., 0.2549019753932953, 0.027450980618596077`, 
            0.37254902720451355`, 0., 0., 0., 0., 0.027450980618596077`, 
            0.8627451062202454, 0.05882352963089943, 0.05098039284348488, 0., 
            0.0117647061124444, 0.0470588244497776, 0.5803921818733215, 
            0.5843137502670288, 0.062745101749897, 0.5529412031173706, 
            0.6000000238418579, 0.5058823823928833, 0.4313725531101227, 
            0.019607843831181526`, 0.9764705896377563, 0.16862745583057404`, 
            0., 0.0784313753247261, 0.4588235318660736, 0.003921568859368563, 
            0.7215686440467834, 0., 0.4274509847164154, 0., 
            0.0235294122248888, 0.0784313753247261, 0.0470588244497776, 0., 
            0., 0.7137255072593689, 0.007843137718737125, 
            0.4588235318660736}], "Children" -> 
          RawArray["Integer16",{{2, 49}, {3, 43}, {4, 42}, {5, 24}, {6, 14}, {
            7, 13}, {8, 10}, {-1, 9}, {-2, -3}, {11, -7}, {-4, 
            12}, {-5, -6}, {-8, -9}, {15, 20}, {16, 19}, {17, 
            18}, {-10, -11}, {-12, -13}, {-14, -15}, {-16, 21}, {-17, 22}, {
            23, -20}, {-18, -19}, {25, 27}, {26, -23}, {-21, -22}, {28, 40}, {
            29, 37}, {30, 36}, {31, 35}, {32, 34}, {
            33, -26}, {-24, -25}, {-27, -28}, {-29, -30}, {-31, -32}, {38, 
            39}, {-33, -34}, {-35, -36}, {41, -39}, {-37, -38}, {-40, -41}, {
            44, -48}, {-42, 45}, {46, 48}, {
            47, -45}, {-43, -44}, {-46, -47}, {50, 64}, {51, 63}, {52, 61}, {
            53, 60}, {54, 55}, {-49, -50}, {56, -56}, {57, -55}, {-51, 58}, {
            59, -54}, {-52, -53}, {-57, -58}, {
            62, -61}, {-59, -60}, {-62, -63}, {65, 68}, {66, -67}, {
            67, -66}, {-64, -65}, {69, 70}, {-68, -69}, {71, 73}, {-70, 
            72}, {-71, -72}, {74, -75}, {-73, -74}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 
            2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 
            1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 
            2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2149, 2252, 39, 842, 57, 1095, 533, 1676, 
            2319, 803, 2243, 962, 453, 2018, 489, 582, 1552, 527, 2028, 1687, 
            1270, 485, 1887, 2120, 2149, 1280, 1767, 473, 2090, 1195, 247, 
            1388, 211, 882, 2149, 15, 657, 904, 2198, 1340, 977, 2002, 1273, 
            1761, 888, 1999, 1737, 2012, 1996, 811, 85, 1609, 1155, 409, 1847,
             2178, 2223, 2115, 372, 379, 1453, 2013, 1650, 1087, 942, 2085, 
            513, 478, 1767, 156, 155, 408}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9411764740943909, 0.9215686321258545, 
            0.7607843279838562, 0.8901960849761963, 0.6549019813537598, 
            0.06666667014360428, 0., 0.2666666805744171, 0.9843137264251709, 
            0.5803921818733215, 0.6666666865348816, 0.9960784316062927, 
            0.20392157137393951`, 0.5647059082984924, 0., 0.7215686440467834, 
            0.0117647061124444, 0.019607843831181526`, 0.027450980618596077`, 
            0.46666666865348816`, 0., 0., 0.5843137502670288, 
            0.0941176488995552, 0.09803921729326248, 0.18431372940540314`, 
            0.24705882370471954`, 0.027450980618596077`, 0.12941177189350128`,
             0., 0.6313725709915161, 0.019607843831181526`, 
            0.03921568766236305, 0.5686274766921997, 0.0313725508749485, 
            0.22745098173618317`, 0.0470588244497776, 0.0941176488995552, 
            0.9725490212440491, 0.49803921580314636`, 0.3921568691730499, 
            0.9725490212440491, 0.26274511218070984`, 0.3843137323856354, 
            0.04313725605607033, 0.5333333611488342, 0.6039215922355652, 
            0.47843137383461, 0.95686274766922, 0.4627451002597809, 
            0.6000000238418579, 0.46666666865348816`, 0.3921568691730499, 
            0.8980392217636108, 0., 0.6784313917160034, 0.23529411852359772`, 
            0.9803921580314636, 0.9882352948188782, 0.7411764860153198, 
            0.45098039507865906`, 0.5803921818733215, 0.47058823704719543`, 
            0.22745098173618317`, 0.3019607961177826, 0.2980392277240753, 0., 
            0.0313725508749485, 0.2862745225429535, 0., 0.0470588244497776, 
            0.24313725531101227`}], "Children" -> 
          RawArray["Integer16",{{2, 57}, {3, 34}, {4, 28}, {5, -25}, {6, 
            24}, {7, 10}, {8, 9}, {-1, -2}, {-3, -4}, {11, 23}, {12, 22}, {13,
             19}, {14, 17}, {15, -8}, {16, -7}, {-5, -6}, {
            18, -11}, {-9, -10}, {-12, 20}, {
            21, -15}, {-13, -14}, {-16, -17}, {-18, -19}, {25, 27}, {
            26, -22}, {-20, -21}, {-23, -24}, {29, 33}, {30, 32}, {-26, 
            31}, {-27, -28}, {-29, -30}, {-31, -32}, {35, 50}, {36, 46}, {37, 
            41}, {38, 40}, {39, -35}, {-33, -34}, {-36, -37}, {42, 45}, {
            43, -41}, {-38, 44}, {-39, -40}, {-42, -43}, {47, -48}, {
            48, -47}, {49, -46}, {-44, -45}, {51, 56}, {52, 55}, {
            53, -52}, {-49, 54}, {-50, -51}, {-53, -54}, {-55, -56}, {-57, 
            58}, {59, 66}, {60, 62}, {61, -60}, {-58, -59}, {63, -65}, {-61, 
            64}, {65, -64}, {-62, -63}, {67, 70}, {68, 
            69}, {-66, -67}, {-68, -69}, {71, -73}, {-70, 72}, {-71, -72}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 
            1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 
            1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 
            2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2131, 2235, 781, 1617, 1500, 1666, 765, 2162, 
            2323, 2177, 1754, 40, 2121, 1991, 111, 1307, 419, 1235, 1609, 511,
             955, 1453, 457, 1663, 878, 1225, 588, 1996, 1020, 1782, 853, 
            1224, 2101, 1260, 1357, 958, 920, 817, 200, 195, 1542, 2153, 990, 
            1621, 860, 352, 1995, 48, 205, 439, 616, 405, 2038, 441, 606, 
            1727, 1332, 2140, 2046, 1738, 1998, 1206, 163, 2002, 1395, 892, 
            2047, 2120, 239, 1200, 780, 541}], "NumericalThresholds" -> 
          RawArray["Real32",{0.95686274766922, 0.95686274766922, 
            0.027450980618596077`, 0.6078431606292725, 0.23137255012989044`, 
            0.3803921639919281, 0.11372549086809158`, 0.0235294122248888, 
            0.9803921580314636, 0.26274511218070984`, 0.4941176474094391, 
            0.929411768913269, 0.729411780834198, 0.21176470816135406`, 
            0.9843137264251709, 0., 0.01568627543747425, 0.2235294133424759, 
            0.35686275362968445`, 0.8352941274642944, 0., 0.1921568661928177, 
            0., 0.007843137718737125, 0.05882352963089943, 0.5254902243614197,
             0.09803921729326248, 0.6274510025978088, 0.0470588244497776, 
            0.9411764740943909, 0.8666666746139526, 0.5882353186607361, 
            0.03529411926865578, 0.6901960968971252, 0.9490196108818054, 
            0.21176470816135406`, 0.4000000059604645, 0.4470588266849518, 
            0.30980393290519714`, 0.26274511218070984`, 0.6235294342041016, 
            0., 0.9411764740943909, 0.5333333611488342, 0.1568627506494522, 
            0.0235294122248888, 0., 0.21176470816135406`, 0.4588235318660736, 
            0.10980392247438431`, 0.003921568859368563, 0.7372549176216125, 
            0.5882353186607361, 0.6549019813537598, 0., 0.0117647061124444, 
            0.9647058844566345, 0.0313725508749485, 0.0470588244497776, 
            0.9921568632125854, 0.11372549086809158`, 0.062745101749897, 
            0.003921568859368563, 0.8078431487083435, 0.12941177189350128`, 
            0.20392157137393951`, 0.529411792755127, 0.6823529601097107, 
            0.7215686440467834, 0.364705890417099, 0.0117647061124444, 
            0.2666666805744171}], "Children" -> 
          RawArray["Integer16",{{2, 58}, {3, 32}, {4, 9}, {5, 8}, {-1, 6}, {
            7, -4}, {-2, -3}, {-5, -6}, {10, 22}, {11, 18}, {12, 17}, {
            13, -12}, {14, 16}, {15, -9}, {-7, -8}, {-10, -11}, {-13, -14}, {
            19, 20}, {-15, -16}, {21, -19}, {-17, -18}, {23, 27}, {24, 
            25}, {-20, -21}, {-22, 26}, {-23, -24}, {28, 30}, {-25, 
            29}, {-26, -27}, {31, -30}, {-28, -29}, {33, 52}, {34, 44}, {35, 
            43}, {36, 42}, {37, 40}, {38, -34}, {-31, 39}, {-32, -33}, {-35, 
            41}, {-36, -37}, {-38, -39}, {-40, -41}, {45, 50}, {46, 48}, {-42,
             47}, {-43, -44}, {-45, 49}, {-46, -47}, {51, -50}, {-48, -49}, {
            53, 54}, {-51, -52}, {55, 57}, {-53, 
            56}, {-54, -55}, {-56, -57}, {59, 60}, {-58, -59}, {61, 68}, {62, 
            65}, {63, 64}, {-60, -61}, {-62, -63}, {-64, 66}, {
            67, -67}, {-65, -66}, {69, 70}, {-68, -69}, {71, -73}, {
            72, -72}, {-70, -71}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
            2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 
            1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 
            1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2244, 1259, 1609, 1203, 2140, 1445, 1282, 105,
             15, 142, 451, 855, 1281, 844, 1653, 1847, 1297, 2219, 170, 2093, 
            1243, 2260, 1944, 2012, 1259, 32, 2068, 1661, 2291, 597, 2084, 
            460, 2190, 1201, 2174, 1359, 1766, 562, 273, 1356, 2073, 1203, 
            924, 1604, 437, 43, 1226, 2101, 472, 1248, 1394, 2081, 217, 2039, 
            636, 1077, 708, 598, 2131, 741, 487, 2093, 1685, 2041, 1199, 969, 
            207, 784, 1690, 885, 2057, 1255, 1758, 468, 1837, 1365, 1312}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DpC8T//9XZX74U
ZA9kMrS3tdk1NjRYP33yBEgz2IL4J0+csFu5QsMehN++ybFbuEDB/sH9ePtf
Pyvtd++ysl+4YIHd1y9f7GbNlLRvamS0v3vnjh1IbtpUUfuzZ3zsWltY7K5e
CbHr7emx27jBwPbWzUiwXUB7bD5++GC3d48N0MwFNqdPedlPnCBgCzJn7549
dgf229s/fPDA5u+fP3Y7d1jYffxQYD91yhS7x48e2TU3Mdlv37bNDmTOyRMe
dqdPnbLraGcH6bcH2QPyA0gMJH/wwAGbuXNk7P/9rbU/eMAB5H5bkPjxY25g
tUD/2QLdYTtxwgTblmZmkBoboN/B9NMnKXbfv5XZ//zxw+7cWV/7jRs22IHc
BAC0BaGq
           "], "Children" -> CompressedData["
1:eJwdkNkyFgAARs9QocXSgkokKpUlkkhCqKhu9ASaUV0x82fGeC1tsrVrI8pS
FNo3ivZQHT8X55s5892d5FP11adDgHPhwamuaSwNBGqaTkYEpbKuofZMbSA7
7+zCfyJIyCIphLKFJaxCl7KMFYSxnHAi+O8//zrnrDP+cSW//WUkm4jindG8
N4Z4VrOWn67hh99dxxdjieObX512yvVsZAMTfnbSBD74yY8m8sK3JrGZZN74
2le+dNwxU8llKzvZxlO3s4NR03juM0cc9om7SKfHDPaQSQ5ZZDPkbgYdsN/H
PrLPXh+6lyPkUco+islnP90W8MD7FnKQAxRxz7vescvb3rKE6970hoeooIxy
rnnVTjts9zBttnqUY1RSxRVbvOwlL3o82KzZC553HlhzpP4=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 
            1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 
            2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 
            1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2228, 2264, 1962, 1685, 2330, 604, 2013, 2168,
             2104, 416, 1705, 2119, 991, 1953, 1836, 1763, 429, 2087, 1077, 
            54, 1712, 1854, 2085, 1772, 2174, 374, 453, 1878, 2195, 2364, 246,
             2197, 2240, 1841, 26, 48, 1504, 1311, 2157, 4, 3, 627, 1603, 795,
             2007, 1597, 1294, 1450, 1946, 645, 1298, 2062, 553, 2039, 1933, 
            1448, 2121, 1260, 403, 580, 1678, 1341, 401, 954, 1666, 2101, 
            1336, 734, 1605, 7, 1576, 1546, 55, 37}], "NumericalThresholds" -> 
          RawArray["Real32",{0.8392156958580017, 0.21176470816135406`, 
            0.14509804546833038`, 0.6470588445663452, 0.5882353186607361, 
            0.7843137383460999, 0.772549033164978, 0.6941176652908325, 
            0.003921568859368563, 0.1568627506494522, 0.7882353067398071, 
            0.4901960790157318, 0., 0., 0., 0.007843137718737125, 
            0.4313725531101227, 0.3450980484485626, 0.0235294122248888, 
            0.9411764740943909, 0.7686274647712708, 0.6313725709915161, 
            0.364705890417099, 0.33725491166114807`, 0.10588235408067703`, 0.,
             0.12156862765550613`, 0.5568627715110779, 0.250980406999588, 
            0.15294118225574493`, 0.3764705955982208, 0.33725491166114807`, 
            0.019607843831181526`, 0.7764706015586853, 0., 
            0.29411765933036804`, 0.15294118225574493`, 0.3529411852359772, 
            0.8470588326454163, 0.5372549295425415, 0., 0.0117647061124444, 
            0., 0., 0.09803921729326248, 0.027450980618596077`, 
            0.3843137323856354, 0.0470588244497776, 0., 0.5411764979362488, 
            0.4588235318660736, 0.5843137502670288, 0.01568627543747425, 0., 
            0.1725490242242813, 0.003921568859368563, 0.6823529601097107, 
            0.45098039507865906`, 0.019607843831181526`, 0., 0., 
            0.9725490212440491, 0., 0.2666666805744171, 0., 
            0.027450980618596077`, 0.529411792755127, 0., 0.545098066329956, 
            0.8941176533699036, 0.8666666746139526, 0.03529411926865578, 
            0.29411765933036804`, 0.05098039284348488}], "Children" -> 
          RawArray["Integer16",{{2, 39}, {3, 20}, {4, 7}, {5, -4}, {
            6, -3}, {-1, -2}, {8, 18}, {9, 17}, {10, 14}, {11, 
            12}, {-5, -6}, {13, -9}, {-7, -8}, {-10, 15}, {
            16, -13}, {-11, -12}, {-14, -15}, {19, -18}, {-16, -17}, {21, 
            38}, {22, 37}, {23, 31}, {24, 29}, {25, -24}, {26, 
            27}, {-19, -20}, {-21, 28}, {-22, -23}, {-25, 
            30}, {-26, -27}, {-28, 32}, {33, 36}, {34, -32}, {-29, 
            35}, {-30, -31}, {-33, -34}, {-35, -36}, {-37, -38}, {40, 55}, {
            41, -54}, {42, 49}, {43, 46}, {44, 
            45}, {-39, -40}, {-41, -42}, {-43, 47}, {-44, 48}, {-45, -46}, {
            50, 51}, {-47, -48}, {52, 53}, {-49, -50}, {-51, 
            54}, {-52, -53}, {56, 57}, {-55, -56}, {58, 67}, {59, 64}, {60, 
            62}, {61, -59}, {-57, -58}, {63, -62}, {-60, -61}, {65, 
            66}, {-63, -64}, {-65, -66}, {68, -75}, {69, 70}, {-67, -68}, {
            71, -74}, {72, 73}, {-69, -70}, {-71, 74}, {-72, -73}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 
            2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 
            2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 
            1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2111, 1203, 1499, 619, 1315, 2213, 2228, 782, 
            1345, 2262, 2183, 1724, 2247, 20, 66, 1383, 1125, 1941, 1319, 87, 
            2180, 676, 2074, 1913, 21, 1380, 1879, 2258, 1936, 2131, 2038, 
            1724, 2346, 2136, 2240, 400, 2325, 1730, 966, 2054, 180, 2123, 
            2004, 1611, 2150, 817, 1640, 1831, 2004, 1759, 86, 822, 1344, 838,
             2030, 1729, 129, 948, 1296, 202, 1406, 945, 945, 305, 1808, 1200,
             604, 853, 700, 732, 1236, 737, 1237}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9725490212440491, 0.2235294133424759, 0., 
            0.2862745225429535, 0.9686274528503418, 0.7686274647712708, 
            0.5607843399047852, 0., 0.5921568870544434, 0.5803921818733215, 
            0.45098039507865906`, 0.29411765933036804`, 0.5803921818733215, 
            0.7372549176216125, 0.9921568632125854, 0.9921568632125854, 0., 
            0.1882352977991104, 0.41960784792900085`, 0.49803921580314636`, 
            0.003921568859368563, 0., 0.0235294122248888, 0.8470588326454163, 
            0.3333333432674408, 0.26274511218070984`, 0.003921568859368563, 
            0.3843137323856354, 0.9725490212440491, 0.18039216101169586`, 
            0.3333333432674408, 0.5215686559677124, 0.6431372761726379, 
            0.007843137718737125, 0.06666667014360428, 0.7058823704719543, 
            0.5098039507865906, 0., 0., 0.0235294122248888, 
            0.9372549057006836, 0.6980392336845398, 0.6196078658103943, 
            0.6078431606292725, 0.8470588326454163, 0.5921568870544434, 
            0.3333333432674408, 0., 0.3686274588108063, 0.027450980618596077`,
             0.5490196347236633, 0.3803921639919281, 0.572549045085907, 0., 
            0., 0.9490196108818054, 0.9019607901573181, 0.5411764979362488, 
            0.3490196168422699, 0., 0., 0.4627451002597809, 
            0.1882352977991104, 0.9960784316062927, 0.26274511218070984`, 
            0.10196078568696976`, 0.3843137323856354, 0.24705882370471954`, 
            0.0941176488995552, 0.21568627655506134`, 0.48235294222831726`, 
            0.4627451002597809, 0.027450980618596077`}], "Children" -> 
          RawArray["Integer16",{{2, 61}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, 42}, {8, 36}, {9, 12}, {10, -8}, {11, -7}, {-5, -6}, {13, 
            28}, {14, 21}, {15, -16}, {16, -15}, {17, 19}, {
            18, -11}, {-9, -10}, {20, -14}, {-12, -13}, {22, 26}, {23, 
            24}, {-17, -18}, {25, -21}, {-19, -20}, {27, -24}, {-22, -23}, {
            29, 34}, {-25, 30}, {31, -30}, {32, -29}, {
            33, -28}, {-26, -27}, {-31, 35}, {-32, -33}, {37, 41}, {38, 
            39}, {-34, -35}, {-36, 40}, {-37, -38}, {-39, -40}, {43, 57}, {44,
             56}, {45, 52}, {46, 50}, {47, -45}, {48, 
            49}, {-41, -42}, {-43, -44}, {-46, 51}, {-47, -48}, {53, -53}, {
            54, 55}, {-49, -50}, {-51, -52}, {-54, -55}, {58, -60}, {-56, 
            59}, {60, -59}, {-57, -58}, {62, 64}, {63, -63}, {-61, -62}, {65, 
            68}, {-64, 66}, {-65, 67}, {-66, -67}, {69, 71}, {
            70, -70}, {-68, -69}, {72, 73}, {-71, -72}, {-73, -74}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 
            1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 
            1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 
            2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2228, 323, 785, 220, 629, 217, 1258, 802, 
            1398, 498, 2060, 2018, 529, 1089, 2145, 972, 1470, 1743, 1673, 
            820, 1784, 830, 1981, 163, 1607, 678, 2151, 413, 1345, 39, 1625, 
            1013, 2320, 1659, 1791, 1323, 1251, 2164, 2004, 518, 83, 1533, 
            903, 2163, 804, 266, 1480, 573, 151, 68, 785, 426, 2047, 1532, 
            1288, 1694, 838, 1472, 155, 2038, 2070, 372, 876, 2012, 1326, 622,
             2109, 2122, 1689, 1780, 1694, 236, 2142}], "NumericalThresholds" -> 
          RawArray["Real32",{0.8392156958580017, 0., 0.6196078658103943, 
            0.4470588266849518, 0.48235294222831726`, 0.5803921818733215, 
            0.8549019694328308, 0.48235294222831726`, 0.3294117748737335, 
            0.003921568859368563, 0.18039216101169586`, 0.3450980484485626, 
            0.8078431487083435, 0.2549019753932953, 0.14901961386203766`, 
            0.686274528503418, 0.3843137323856354, 0., 0.8823529481887817, 
            0.8156862854957581, 0.4000000059604645, 0.6392157077789307, 
            0.12156862765550613`, 0.8313725590705872, 0., 0., 
            0.4274509847164154, 0.47843137383461, 0.9921568632125854, 
            0.35686275362968445`, 0.07450980693101883, 0., 0., 
            0.3960784375667572, 0.42352941632270813`, 0.7058823704719543, 
            0.9137254953384399, 0.8235294222831726, 0.6431372761726379, 
            0.3450980484485626, 0.3176470696926117, 0.10588235408067703`, 
            0.14509804546833038`, 0.250980406999588, 0.24705882370471954`, 0.,
             0., 0.545098066329956, 0.9960784316062927, 0.027450980618596077`,
             0.2862745225429535, 0.1411764770746231, 0.658823549747467, 
            0.20392157137393951`, 0.7098039388656616, 0., 
            0.027450980618596077`, 0., 0.2235294133424759, 0., 
            0.48627451062202454`, 0.9647058844566345, 0.9411764740943909, 0., 
            0.08627451211214066, 0.3137255012989044, 0.26274511218070984`, 0.,
             0., 0., 0.019607843831181526`, 0.529411792755127, 
            0.9686274528503418}], "Children" -> 
          RawArray["Integer16",{{2, 36}, {3, 10}, {4, 6}, {5, -3}, {-1, -2}, {
            7, 9}, {8, -6}, {-4, -5}, {-7, -8}, {11, 19}, {12, 16}, {13, 
            15}, {-9, 14}, {-10, -11}, {-12, -13}, {17, -17}, {-14, 
            18}, {-15, -16}, {20, -35}, {21, 35}, {22, 32}, {23, -28}, {24, 
            26}, {-18, 25}, {-19, -20}, {27, 28}, {-21, -22}, {29, 31}, {-23, 
            30}, {-24, -25}, {-26, -27}, {-29, 33}, {-30, 
            34}, {-31, -32}, {-33, -34}, {37, 65}, {38, 62}, {39, 49}, {40, 
            48}, {41, 47}, {42, 46}, {-36, 43}, {44, 
            45}, {-37, -38}, {-39, -40}, {-41, -42}, {-43, -44}, {-45, -46}, {
            50, 61}, {51, 58}, {52, 54}, {-47, 53}, {-48, -49}, {-50, 55}, {
            56, -54}, {57, -53}, {-51, -52}, {-55, 59}, {-56, 
            60}, {-57, -58}, {-59, -60}, {63, 64}, {-61, -62}, {-63, -64}, {
            66, 68}, {-65, 67}, {-66, -67}, {69, 71}, {70, -70}, {-68, -69}, {
            72, -74}, {-71, 73}, {-72, -73}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 
            1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 
            1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 
            2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2247, 1721, 1999, 1604, 71, 2144, 1521, 1464, 
            927, 11, 1989, 912, 2082, 596, 2206, 2129, 1834, 899, 1793, 1173, 
            1692, 409, 637, 218, 1801, 1676, 930, 1396, 2121, 263, 1462, 2141,
             1203, 178, 914, 551, 1997, 1612, 775, 427, 1663, 2021, 132, 589, 
            1756, 1206, 890, 1401, 61, 589, 70, 1327, 1385, 97, 601, 1505, 
            739, 354, 921, 1998, 667, 516, 2073, 250, 142, 425, 919, 408}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.9764705896377563, 0.8039215803146362, 
            0.9411764740943909, 0.48235294222831726`, 0.7764706015586853, 
            0.8901960849761963, 0.0235294122248888, 0.6392157077789307, 
            0.7490196228027344, 0.615686297416687, 0.33725491166114807`, 
            0.4000000059604645, 0.5921568870544434, 0.8627451062202454, 
            0.3803921639919281, 0.5607843399047852, 0.0235294122248888, 
            0.5686274766921997, 0.529411792755127, 0.0784313753247261, 
            0.5490196347236633, 0.6784313917160034, 0.929411768913269, 0., 
            0.11764705926179886`, 0.0313725508749485, 0.7215686440467834, 
            0.9921568632125854, 0.572549045085907, 0.9843137264251709, 
            0.003921568859368563, 0.6352941393852234, 0.18039216101169586`, 
            0.35686275362968445`, 0.5686274766921997, 0.843137264251709, 
            0.9411764740943909, 0.49803921580314636`, 0., 0.5215686559677124, 
            0.08235294371843338, 0., 0., 0., 0.027450980618596077`, 
            0.47058823704719543`, 0.03921568766236305, 0.5803921818733215, 
            0.0470588244497776, 0., 0.30588236451148987`, 0.47843137383461, 
            0.9921568632125854, 0.15294118225574493`, 0.48627451062202454`, 
            0., 0.49803921580314636`, 0.9215686321258545, 0.5254902243614197, 
            0., 0., 0.5843137502670288, 0.7254902124404907, 
            0.0784313753247261, 0.6352941393852234, 0., 0.5176470875740051, 
            0.5333333611488342}], "Children" -> 
          RawArray["Integer16",{{2, 32}, {3, 30}, {4, -28}, {5, 25}, {6, 
            23}, {7, -18}, {8, 10}, {9, -3}, {-1, -2}, {11, 22}, {12, 15}, {
            13, 14}, {-4, -5}, {-6, -7}, {16, 18}, {-8, 17}, {-9, -10}, {
            19, -15}, {20, 21}, {-11, -12}, {-13, -14}, {-16, -17}, {
            24, -21}, {-19, -20}, {26, 29}, {27, 
            28}, {-22, -23}, {-24, -25}, {-26, -27}, {-29, 31}, {-30, -31}, {
            33, 53}, {-32, 34}, {35, 46}, {36, 44}, {37, -41}, {38, -40}, {39,
             41}, {40, -35}, {-33, -34}, {42, 43}, {-36, -37}, {-38, -39}, {
            45, -44}, {-42, -43}, {47, 52}, {48, 51}, {49, 
            50}, {-45, -46}, {-47, -48}, {-49, -50}, {-51, -52}, {54, 63}, {
            55, 59}, {56, 58}, {57, -55}, {-53, -54}, {-56, -57}, {60, 62}, {
            61, -60}, {-58, -59}, {-61, -62}, {64, -69}, {65, 67}, {
            66, -65}, {-63, -64}, {68, -68}, {-66, -67}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 
            1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 
            1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 
            2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2149, 6, 1206, 2323, 2088, 2302, 1388, 535, 
            1640, 979, 2123, 1898, 2268, 1769, 2374, 2083, 679, 1753, 714, 
            270, 2239, 2324, 806, 258, 2165, 2007, 2140, 2187, 1602, 1775, 58,
             1276, 146, 2031, 197, 887, 833, 1609, 421, 476, 1261, 2052, 2111,
             1679, 1615, 956, 226, 1224, 1822, 2136, 300, 1157, 57, 1407, 
            1545, 1375, 505, 2128, 1381, 436, 49, 33, 858, 2020, 1701, 2061, 
            2003, 797, 453, 1696, 2023, 1225}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9843137264251709, 0.1764705926179886, 
            0.6313725709915161, 0.9960784316062927, 0.9450980424880981, 
            0.003921568859368563, 0.45098039507865906`, 0.9411764740943909, 
            0.38823530077934265`, 0.8745098114013672, 0.364705890417099, 
            0.01568627543747425, 0., 0.30588236451148987`, 
            0.10196078568696976`, 0.2980392277240753, 0., 0., 
            0.4745098054409027, 0.0117647061124444, 0.3686274588108063, 
            0.18431372940540314`, 0.5921568870544434, 0., 
            0.019607843831181526`, 0.2549019753932953, 0.5607843399047852, 
            0.3686274588108063, 0.8509804010391235, 0.3137255012989044, 0., 
            0.0313725508749485, 0.5058823823928833, 0.40392157435417175`, 
            0.027450980618596077`, 0.4431372582912445, 0., 0.5647059082984924,
             0.48235294222831726`, 0.3686274588108063, 0., 0.0941176488995552,
             0., 0.003921568859368563, 0.24313725531101227`, 
            0.07450980693101883, 0.9803921580314636, 0.48627451062202454`, 
            0.14901961386203766`, 0.40784314274787903`, 0.30588236451148987`, 
            0.3607843220233917, 0., 0., 0.5568627715110779, 0.658823549747467,
             0.12941177189350128`, 0.03529411926865578, 0.4431372582912445, 
            0., 0.23529411852359772`, 0.10980392247438431`, 
            0.4627451002597809, 0., 0.886274516582489, 0.686274528503418, 
            0.9764705896377563, 0., 0., 0.9843137264251709, 
            0.6117647290229797, 0.686274528503418}], "Children" -> 
          RawArray["Integer16",{{2, 56}, {3, 4}, {-1, -2}, {5, 25}, {6, 24}, {
            7, 18}, {8, 14}, {9, 13}, {10, 12}, {
            11, -5}, {-3, -4}, {-6, -7}, {-8, -9}, {15, -14}, {16, 
            17}, {-10, -11}, {-12, -13}, {19, 23}, {20, 21}, {-15, -16}, {-17,
             22}, {-18, -19}, {-20, -21}, {-22, -23}, {26, 42}, {27, 35}, {
            28, -32}, {29, 32}, {30, -27}, {-24, 31}, {-25, -26}, {33, 
            34}, {-28, -29}, {-30, -31}, {36, 38}, {-33, 37}, {-34, -35}, {39,
             41}, {40, -38}, {-36, -37}, {-39, -40}, {43, 48}, {44, 47}, {45, 
            46}, {-41, -42}, {-43, -44}, {-45, -46}, {49, 53}, {50, 
            51}, {-47, -48}, {-49, 52}, {-50, -51}, {-52, 54}, {-53, 
            55}, {-54, -55}, {57, 66}, {58, 63}, {59, 61}, {
            60, -58}, {-56, -57}, {-59, 62}, {-60, -61}, {64, 
            65}, {-62, -63}, {-64, -65}, {67, -73}, {68, -72}, {69, 71}, {
            70, -68}, {-66, -67}, {-69, 72}, {-70, -71}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 
            1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 
            1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 
            2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2153, 1248, 1846, 1262, 786, 813, 11, 2117, 
            2177, 2171, 379, 1285, 1302, 1149, 1132, 1865, 2168, 236, 539, 
            1694, 1823, 206, 1092, 980, 2304, 567, 1244, 218, 2054, 2344, 673,
             2116, 1599, 2229, 1867, 776, 1087, 150, 811, 2002, 1714, 197, 
            1294, 1664, 1727, 1453, 2279, 552, 1020, 41, 1263, 1639, 1161, 
            479, 1632, 2155, 1685, 133, 136, 1721, 1998, 1438, 1034, 532, 453,
             1452, 75, 1414, 839, 951, 915, 482, 1374, 599}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.9215686321258545, 0.9882352948188782, 
            0.7372549176216125, 0.501960813999176, 0.007843137718737125, 
            0.5333333611488342, 0.019607843831181526`, 0.40784314274787903`, 
            0.929411768913269, 0.7843137383460999, 0., 0.800000011920929, 
            0.10980392247438431`, 0.3686274588108063, 0., 0.6901960968971252, 
            0.6470588445663452, 0., 0.5411764979362488, 0.24313725531101227`, 
            0.0235294122248888, 0.46666666865348816`, 0.09019608050584793, 
            0.07058823853731155, 0.29019609093666077`, 0.3921568691730499, 
            0.10196078568696976`, 0.003921568859368563, 0.1568627506494522, 
            0.0235294122248888, 0.9803921580314636, 0.027450980618596077`, 
            0.019607843831181526`, 0.9764705896377563, 0.0470588244497776, 0.,
             0.0117647061124444, 0.9803921580314636, 0.9921568632125854, 
            0.7568627595901489, 0.9058823585510254, 0.0313725508749485, 
            0.6745098233222961, 0.6235294342041016, 0.12156862765550613`, 
            0.1921568661928177, 0.16470588743686676`, 0.501960813999176, 
            0.5137255191802979, 0.1921568661928177, 0.3607843220233917, 
            0.250980406999588, 0.7450980544090271, 0.0784313753247261, 0., 
            0.2823529541492462, 0.6235294342041016, 0.20392157137393951`, 
            0.9921568632125854, 0.3176470696926117, 0.0235294122248888, 
            0.01568627543747425, 0., 0.07058823853731155, 0.3803921639919281, 
            0.48235294222831726`, 0.9686274528503418, 0.8313725590705872, 
            0.1725490242242813, 0.7058823704719543, 0.26274511218070984`, 
            0.01568627543747425, 0.6549019813537598, 0.0235294122248888}], 
          "Children" -> 
          RawArray["Integer16",{{2, 57}, {3, 55}, {4, 33}, {5, 27}, {6, 8}, {
            7, -3}, {-1, -2}, {9, 22}, {10, 21}, {11, -15}, {12, 14}, {
            13, -6}, {-4, -5}, {15, 16}, {-7, -8}, {17, 19}, {-9, 
            18}, {-10, -11}, {-12, 20}, {-13, -14}, {-16, -17}, {23, 
            25}, {-18, 24}, {-19, -20}, {-21, 26}, {-22, -23}, {28, 32}, {29, 
            30}, {-24, -25}, {-26, 31}, {-27, -28}, {-29, -30}, {34, 43}, {35,
             39}, {-31, 36}, {37, 38}, {-32, -33}, {-34, -35}, {40, -40}, {41,
             42}, {-36, -37}, {-38, -39}, {44, 54}, {45, 53}, {46, 49}, {
            47, -44}, {-41, 48}, {-42, -43}, {-45, 50}, {51, 
            52}, {-46, -47}, {-48, -49}, {-50, -51}, {-52, -53}, {-54, 
            56}, {-55, -56}, {58, 73}, {59, 68}, {60, -66}, {61, 67}, {62, 
            64}, {-57, 63}, {-58, -59}, {65, 
            66}, {-60, -61}, {-62, -63}, {-64, -65}, {69, 71}, {
            70, -69}, {-67, -68}, {72, -72}, {-70, -71}, {
            74, -75}, {-73, -74}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 
            2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 
            2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 
            2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2171, 774, 674, 1602, 1635, 260, 2111, 523, 
            281, 1695, 1999, 1715, 1368, 234, 2001, 1607, 1804, 498, 2072, 
            2156, 756, 1444, 417, 60, 2063, 2051, 1695, 838, 41, 1670, 1724, 
            2042, 1340, 2122, 2186, 1834, 2168, 61, 1478, 2142, 1203, 537, 
            438, 1929, 1366, 838, 1714, 285, 1737, 3, 537, 2253, 191, 2004, 
            666, 934, 513, 189, 135, 1101, 2120, 2111, 1203, 2032, 256, 2148, 
            1007, 1236, 2104, 2066, 1198, 270}], "NumericalThresholds" -> 
          RawArray["Real32",{0.8313725590705872, 0.9960784316062927, 
            0.658823549747467, 0.019607843831181526`, 0.8392156958580017, 
            0.5568627715110779, 0.4117647111415863, 0.6509804129600525, 
            0.886274516582489, 0.5686274766921997, 0., 0.08627451211214066, 
            0.0117647061124444, 0.8941176533699036, 0.019607843831181526`, 
            0.8039215803146362, 0.9960784316062927, 0.09803921729326248, 
            0.07450980693101883, 0.615686297416687, 0., 0.019607843831181526`,
             0.9058823585510254, 0., 0.5568627715110779, 0., 
            0.09019608050584793, 0.40784314274787903`, 0.027450980618596077`, 
            0.5372549295425415, 0.29411765933036804`, 0.6078431606292725, 
            0.843137264251709, 0.843137264251709, 0.5764706134796143, 
            0.9921568632125854, 0., 0.3529411852359772, 0.04313725605607033, 
            0., 0.2666666805744171, 0., 0.3294117748737335, 
            0.6470588445663452, 0.6745098233222961, 0., 0.3333333432674408, 
            0.40784314274787903`, 0.6352941393852234, 0.062745101749897, 
            0.9921568632125854, 0.0235294122248888, 0.6666666865348816, 
            0.04313725605607033, 0., 0.03921568766236305, 
            0.23529411852359772`, 0.5960784554481506, 0.6039215922355652, 
            0.5058823823928833, 0.6823529601097107, 0.8039215803146362, 
            0.4117647111415863, 0.027450980618596077`, 0.49803921580314636`, 
            0., 0.07450980693101883, 0., 0.0313725508749485, 
            0.0235294122248888, 0.08235294371843338, 0.7098039388656616}], 
          "Children" -> 
          RawArray["Integer16",{{2, 49}, {3, 15}, {4, 14}, {-1, 5}, {6, 13}, {
            7, 10}, {8, -5}, {9, -4}, {-2, -3}, {11, -9}, {-6, 
            12}, {-7, -8}, {-10, -11}, {-12, -13}, {-14, 16}, {17, -48}, {18, 
            45}, {19, 30}, {20, 26}, {21, -21}, {-15, 22}, {23, 25}, {
            24, -18}, {-16, -17}, {-19, -20}, {27, -26}, {28, 
            29}, {-22, -23}, {-24, -25}, {31, 43}, {32, 40}, {33, 39}, {
            34, -33}, {35, -32}, {36, 38}, {-27, 
            37}, {-28, -29}, {-30, -31}, {-34, -35}, {-36, 41}, {-37, 
            42}, {-38, -39}, {-40, 44}, {-41, -42}, {46, 48}, {
            47, -45}, {-43, -44}, {-46, -47}, {50, 62}, {51, 56}, {52, 
            55}, {-49, 53}, {-50, 54}, {-51, -52}, {-53, -54}, {57, 61}, {58, 
            59}, {-55, -56}, {60, -59}, {-57, -58}, {-60, -61}, {63, 
            69}, {-62, 64}, {65, 67}, {66, -65}, {-63, -64}, {-66, 
            68}, {-67, -68}, {-69, 70}, {71, -73}, {72, -72}, {-70, -71}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 
            2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 
            2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2133, 405, 2133, 1690, 2309, 1800, 2261, 489, 
            2199, 7, 118, 1859, 382, 2293, 256, 753, 1694, 1655, 1785, 1643, 
            1814, 1427, 970, 2018, 1611, 2099, 1996, 1240, 1680, 1378, 1076, 
            2135, 1716, 2069, 20, 1147, 1070, 412, 588, 1806, 1201, 812, 1338,
             2157, 1245, 667, 690, 682, 512, 1501, 84, 1311, 785, 1603, 1721, 
            2003, 1689, 1436, 939, 2005, 482, 138, 711, 665, 2130, 323, 1666, 
            1326, 1674, 2088, 619, 626, 551, 696}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9372549057006836, 0.18039216101169586`, 
            0.25882354378700256`, 0.95686274766922, 0.9647058844566345, 
            0.19607843458652496`, 0.16470588743686676`, 0.04313725605607033, 
            0.5490196347236633, 0.3607843220233917, 0., 0.9411764740943909, 
            0., 0.16078431904315948`, 0.2666666805744171, 0.6039215922355652, 
            0.2549019753932953, 0.40392157435417175`, 0.8784313797950745, 
            0.5921568870544434, 0.9843137264251709, 0.5803921818733215, 
            0.26274511218070984`, 0.615686297416687, 0.6509804129600525, 
            0.7529411911964417, 0.08627451211214066, 0.15294118225574493`, 
            0.37254902720451355`, 0.03921568766236305, 0.800000011920929, 
            0.007843137718737125, 0.9333333373069763, 0.5058823823928833, 
            0.6980392336845398, 0.003921568859368563, 0., 0.7647058963775635, 
            0.1411764770746231, 0.2078431397676468, 0.364705890417099, 
            0.29411765933036804`, 0.11372549086809158`, 0.14901961386203766`, 
            0.29019609093666077`, 0., 0.42352941632270813`, 0., 
            0.0235294122248888, 0.0784313753247261, 0.21176470816135406`, 
            0.11764705926179886`, 0., 0.7450980544090271, 0.5490196347236633, 
            0., 0.2862745225429535, 0., 0.05098039284348488, 
            0.40784314274787903`, 0.003921568859368563, 0.9921568632125854, 
            0.0470588244497776, 0., 0., 0.9921568632125854, 
            0.04313725605607033, 0., 0.6117647290229797, 0.8235294222831726, 
            0., 0.019607843831181526`, 0.5529412031173706, 
            0.11764705926179886`}], "Children" -> 
          RawArray["Integer16",{{2, 55}, {3, 5}, {4, -3}, {-1, -2}, {6, 24}, {
            7, 16}, {8, 14}, {9, 12}, {10, 11}, {-4, -5}, {-6, -7}, {
            13, -10}, {-8, -9}, {15, -13}, {-11, -12}, {17, 18}, {-14, -15}, {
            19, 22}, {20, -19}, {21, -18}, {-16, -17}, {
            23, -22}, {-20, -21}, {25, 51}, {26, 47}, {27, 46}, {28, 32}, {29,
             31}, {-23, 30}, {-24, -25}, {-26, -27}, {33, 39}, {34, -34}, {
            35, -33}, {36, -32}, {37, 38}, {-28, -29}, {-30, -31}, {40, 
            42}, {-35, 41}, {-36, -37}, {43, 45}, {
            44, -40}, {-38, -39}, {-41, -42}, {-43, -44}, {48, 
            49}, {-45, -46}, {50, -49}, {-47, -48}, {52, 54}, {
            53, -52}, {-50, -51}, {-53, -54}, {56, 65}, {57, 62}, {58, 
            60}, {-55, 59}, {-56, -57}, {61, -60}, {-58, -59}, {
            63, -64}, {-61, 64}, {-62, -63}, {-65, 66}, {67, 70}, {68, -69}, {
            69, -68}, {-66, -67}, {71, 73}, {72, -72}, {-70, -71}, {
            74, -75}, {-73, -74}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 
            1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 
            2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 
            1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2219, 1203, 1602, 2062, 2288, 2099, 1549, 140,
             304, 484, 1427, 750, 677, 1630, 2070, 1674, 895, 1203, 1330, 
            2083, 2021, 1345, 1, 818, 2096, 916, 518, 1934, 1472, 1670, 107, 
            2025, 2307, 2095, 331, 1499, 1282, 1597, 2108, 293, 376, 1614, 
            1204, 112, 801, 1602, 1699, 1989, 173, 1023, 2115, 791, 1668, 
            1402, 1727, 658, 610, 2100, 1528, 951, 762, 2069, 285, 487, 130}],
           "NumericalThresholds" -> 
          RawArray["Real32",{0.9960784316062927, 0.239215686917305, 
            0.019607843831181526`, 0., 0., 0.4000000059604645, 
            0.003921568859368563, 0.6823529601097107, 0., 
            0.10588235408067703`, 0.09803921729326248, 0.20392157137393951`, 
            0.48235294222831726`, 0.6823529601097107, 0.8666666746139526, 
            0.6666666865348816, 0.0117647061124444, 0.2666666805744171, 
            0.0117647061124444, 0.5137255191802979, 0.239215686917305, 
            0.9607843160629272, 0.35686275362968445`, 0.0313725508749485, 
            0.0941176488995552, 0., 0.003921568859368563, 0., 
            0.45490196347236633`, 0.42352941632270813`, 0.37254902720451355`, 
            0.2666666805744171, 0.7843137383460999, 0.8392156958580017, 
            0.9882352948188782, 0., 0., 0.9764705896377563, 0., 
            0.003921568859368563, 0.8705882430076599, 0.5921568870544434, 
            0.5254902243614197, 0.9176470637321472, 0.1764705926179886, 
            0.9686274528503418, 0.8470588326454163, 0., 0.8941176533699036, 
            0., 0.5137255191802979, 0., 0.5215686559677124, 0., 0., 
            0.2862745225429535, 0.3450980484485626, 0., 0.0117647061124444, 
            0.5568627715110779, 0.43529412150382996`, 0.5098039507865906, 
            0.3607843220233917, 0.5529412031173706, 0.5098039507865906}], 
          "Children" -> 
          RawArray["Integer16",{{2, 34}, {3, 6}, {-1, 4}, {-2, 5}, {-3, -4}, {
            7, 29}, {8, 12}, {9, 11}, {-5, 10}, {-6, -7}, {-8, -9}, {13, 
            15}, {14, -12}, {-10, -11}, {16, 27}, {17, 24}, {18, 22}, {-13, 
            19}, {20, -17}, {21, -16}, {-14, -15}, {-18, 23}, {-19, -20}, {25,
             26}, {-21, -22}, {-23, -24}, {28, -27}, {-25, -26}, {30, 
            31}, {-28, -29}, {32, -33}, {33, -32}, {-30, -31}, {35, 58}, {36, 
            45}, {37, 38}, {-34, -35}, {39, 44}, {40, 43}, {41, 
            42}, {-36, -37}, {-38, -39}, {-40, -41}, {-42, -43}, {46, 51}, {
            47, 50}, {48, -47}, {-44, 49}, {-45, -46}, {-48, -49}, {52, 56}, {
            53, 54}, {-50, -51}, {55, -54}, {-52, -53}, {-55, 
            57}, {-56, -57}, {-58, 59}, {-59, 60}, {61, -66}, {62, 64}, {-60, 
            63}, {-61, -62}, {-63, 65}, {-64, -65}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 
            2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 
            1, 1, 1, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2180, 1201, 2248, 401, 1188, 840, 2236, 2258, 
            2156, 1616, 1691, 860, 1230, 66, 115, 2067, 1903, 1392, 983, 216, 
            1624, 137, 678, 463, 1638, 189, 2317, 1911, 1776, 1755, 1722, 
            1248, 522, 2096, 2025, 1376, 1605, 414, 1772, 737, 2098, 155, 447,
             2127, 680, 1056, 2063, 967, 163, 98, 1531, 873, 160, 42, 1405, 
            2020, 1738, 1603, 1334, 1066, 161, 2067, 766, 1638, 883, 284, 
            2115, 1326, 1155}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9882352948188782, 0.9411764740943909, 
            0.95686274766922, 0.7215686440467834, 0.0117647061124444, 
            0.3019607961177826, 0.07058823853731155, 0.572549045085907, 
            0.43921568989753723`, 0.5215686559677124, 0.7607843279838562, 
            0.20000000298023224`, 0.3490196168422699, 0.23529411852359772`, 
            0., 0.0941176488995552, 0.364705890417099, 0.22745098173618317`, 
            0., 0.9921568632125854, 0.019607843831181526`, 0.3176470696926117,
             0.3529411852359772, 0.545098066329956, 0.003921568859368563, 
            0.7490196228027344, 0., 0.5843137502670288, 0.9372549057006836, 
            0.5882353186607361, 0.6039215922355652, 0.9098039269447327, 
            0.6627451181411743, 0.5372549295425415, 0.07450980693101883, 
            0.0784313753247261, 0., 0., 0.003921568859368563, 
            0.9411764740943909, 0.7176470756530762, 0.7607843279838562, 
            0.04313725605607033, 0.9490196108818054, 0.5411764979362488, 0., 
            0.0470588244497776, 0., 0.0313725508749485, 0.4313725531101227, 
            0.5176470875740051, 0.49803921580314636`, 0.8627451062202454, 
            0.7137255072593689, 0., 0.05882352963089943, 0.6627451181411743, 
            0.37254902720451355`, 0.3333333432674408, 0.5411764979362488, 
            0.0235294122248888, 0.5372549295425415, 0., 0.3333333432674408, 
            0.7882353067398071, 0.9921568632125854, 0., 0., 
            0.48235294222831726`}], "Children" -> 
          RawArray["Integer16",{{2, 44}, {3, -43}, {4, 31}, {5, 22}, {6, 
            8}, {-1, 7}, {-2, -3}, {9, 19}, {10, 16}, {11, 15}, {12, -8}, {-4,
             13}, {14, -7}, {-5, -6}, {-9, -10}, {17, 
            18}, {-11, -12}, {-13, -14}, {20, 21}, {-15, -16}, {-17, -18}, {
            23, 29}, {24, 26}, {25, -21}, {-19, -20}, {27, 
            28}, {-22, -23}, {-24, -25}, {30, -28}, {-26, -27}, {32, 41}, {33,
             40}, {34, 39}, {35, -34}, {36, 38}, {
            37, -31}, {-29, -30}, {-32, -33}, {-35, -36}, {-37, -38}, {
            42, -42}, {43, -41}, {-39, -40}, {45, 57}, {46, 51}, {-44, 47}, {
            48, -49}, {49, 50}, {-45, -46}, {-47, -48}, {52, 
            53}, {-50, -51}, {54, -56}, {55, -55}, {56, -54}, {-52, -53}, {58,
             62}, {59, 60}, {-57, -58}, {-59, 61}, {-60, -61}, {63, -70}, {64,
             65}, {-62, -63}, {66, -69}, {67, 69}, {-64, 
            68}, {-65, -66}, {-67, -68}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 
            1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 
            2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 
            1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2165, 2100, 432, 1326, 788, 1661, 1653, 1607, 
            1797, 2021, 1446, 825, 2000, 2060, 880, 513, 1832, 515, 2227, 
            1601, 878, 1737, 1159, 1176, 189, 2, 70, 434, 1662, 2029, 833, 
            1878, 421, 2204, 1017, 2219, 241, 996, 2064, 444, 2247, 1792, 
            2274, 2105, 403, 130, 63, 2037, 102, 896, 1999, 475, 1242, 2144, 
            1622, 1367, 2003, 192, 328, 282, 1594, 2115, 3, 769, 421, 402, 
            387}], "NumericalThresholds" -> 
          RawArray["Real32",{0.7372549176216125, 0.9215686321258545, 
            0.8705882430076599, 0.9725490212440491, 0.0117647061124444, 
            0.0117647061124444, 0.6549019813537598, 0.43529412150382996`, 
            0.40784314274787903`, 0.19607843458652496`, 0.07450980693101883, 
            0.8627451062202454, 0.47058823704719543`, 0.4274509847164154, 0., 
            0.41960784792900085`, 0.4000000059604645, 0.07450980693101883, 
            0.003921568859368563, 0., 0.6509804129600525, 0.5529412031173706, 
            0.9843137264251709, 0.5372549295425415, 0.6509804129600525, 
            0.0313725508749485, 0.5568627715110779, 0.3294117748737335, 
            0.27843138575553894`, 0.14901961386203766`, 0.10588235408067703`, 
            0.6000000238418579, 0.027450980618596077`, 0.019607843831181526`, 
            0.8823529481887817, 0., 0.0117647061124444, 0.0470588244497776, 
            0.5607843399047852, 0.47058823704719543`, 0.6000000238418579, 0., 
            0.027450980618596077`, 0.15294118225574493`, 0.250980406999588, 
            0.8980392217636108, 0.3333333432674408, 0.6392157077789307, 
            0.20392157137393951`, 0.30588236451148987`, 0.0470588244497776, 
            0.364705890417099, 0.6784313917160034, 0., 0.027450980618596077`, 
            0.7411764860153198, 0.019607843831181526`, 0.501960813999176, 
            0.27843138575553894`, 0.545098066329956, 0., 
            0.027450980618596077`, 0.3490196168422699, 0.0117647061124444, 
            0.15294118225574493`, 0.10196078568696976`, 0.}], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 40}, {4, 36}, {5, 34}, {6, 10}, {
            7, 9}, {8, -3}, {-1, -2}, {-4, -5}, {11, 22}, {12, 15}, {
            13, -9}, {14, -8}, {-6, -7}, {16, 21}, {17, 18}, {-10, -11}, {19, 
            20}, {-12, -13}, {-14, -15}, {-16, -17}, {23, 31}, {24, 26}, {
            25, -20}, {-18, -19}, {27, 29}, {28, -23}, {-21, -22}, {-24, 
            30}, {-25, -26}, {32, 33}, {-27, -28}, {-29, -30}, {-31, 
            35}, {-32, -33}, {37, 38}, {-34, -35}, {-36, 39}, {-37, -38}, {
            41, -42}, {-39, 42}, {-40, -41}, {-43, 44}, {45, 56}, {46, 54}, {
            47, 53}, {48, 51}, {49, -47}, {-44, 50}, {-45, -46}, {-48, 
            52}, {-49, -50}, {-51, -52}, {55, -55}, {-53, -54}, {57, 63}, {58,
             62}, {59, 61}, {-56, 60}, {-57, -58}, {-59, -60}, {-61, -62}, {
            64, -68}, {65, 66}, {-63, -64}, {-65, 67}, {-66, -67}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 
            2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 
            1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2192, 802, 1997, 2300, 1724, 856, 1625, 1335, 
            82, 1979, 2029, 2006, 509, 1730, 286, 1797, 79, 1540, 635, 67, 
            2199, 1664, 2025, 592, 1482, 1653, 1626, 1932, 36, 585, 1311, 
            2022, 1313, 1143, 1005, 878, 935, 1364, 937, 996, 340, 1422, 1203,
             2078, 1012, 252, 976, 1736, 2148, 372, 1096, 37, 487, 1754, 786, 
            1751, 1008, 430, 1899, 2004, 1243, 1998, 914, 136, 903, 2078, 605,
             1340, 983, 1200, 1309, 409, 150, 1635, 621, 1335, 2041, 460}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DpB8Q3b0TYP32S
Yv/7V5X92zc5dosXLbLbsF7f/vmzNPs/v6vt//+rswcqY+js6LCdOEHArrGB
wYYBCpqbmOyPHXW1nzhhgi2I3djQYA1UYz91ioj9yhUadiA1//7W2nd3dYHN
nD1rlt2c2dJg875/+2bX38dnf/XKFbuDBxxsFi5QsF27Rsf+zu1o+/v37tmd
O+trv3uXFVhta0uL3bevpfZLlyyxe/Y01X7/vn12QHfbAe2xu3Y11H7BfHn7
kydO2MHcBXSjLcjOgwcO2IDc0dvDA3QbA8iddm9eZ9t//VJiB7Ln+rUwe6Dd
dh8/FIDdvmqlpj3QHfY/f1SAzfr754/dtq2mYDd8+Vxsf/7cObD4wwcP7ADk
BJQS
           "], "Children" -> CompressedData["
1:eJwdiVlTDgAAAHdSKcpVzkSFkhJFRSWKkKOH+gU1U3mqmY8Z42cl5IyKDkLl
SMhNFwqlRK2Ph92ZnU2sqi+vCQFORwRVXnm2KBCoPFcRGYzSujPVtdWBzJxT
/35ZkJD/7GQBOwgljTBiCWcZC4kmgl9GMusioljMnDrvH3+7hKXMOO1Pp1xO
DCv47qQ//OaEK0lkFRtZzQbWEMda1jHuV7/42fUMO2Y8o4445CcTeO9HP5jE
VjaxmXe+dQsvTWbQFF75xtemso0XPnfAZ6aTwXae2O9TH/vIPnvNpJgs8tlF
Nj3u5qEPzGEvuezhvt3e865d5tFphwXso907FnLT/RRxgFZv22aLtzzISQ5R
SglHOMx1m73hNY9y1Sse4wTHueRlm7zoBctosNHz/gUccab9
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 
            2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 
            1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 
            1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2146, 2296, 4, 1754, 1675, 1600, 612, 1754, 
            1724, 35, 823, 1720, 2288, 51, 2224, 415, 876, 1710, 1612, 330, 
            616, 1830, 1215, 5, 1286, 470, 474, 866, 2114, 2079, 1148, 678, 
            1229, 3, 871, 343, 1397, 1272, 1038, 1322, 927, 1341, 1053, 21, 
            1487, 630, 1200, 416, 419, 1267, 2099, 51, 1748, 289, 1390, 9, 
            160, 315, 32, 320, 679, 1984, 1374, 1348, 1715, 801, 1326, 494, 
            440}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9921568632125854, 0.9803921580314636, 
            0.9411764740943909, 0.9215686321258545, 0.9019607901573181, 
            0.6039215922355652, 0.04313725605607033, 0.43921568989753723`, 
            0.007843137718737125, 0.501960813999176, 0.4588235318660736, 
            0.003921568859368563, 0.01568627543747425, 0.11372549086809158`, 
            0.08627451211214066, 0.07058823853731155, 0.5882353186607361, 
            0.5843137502670288, 0.2078431397676468, 0.09803921729326248, 0., 
            0., 0.7490196228027344, 0.6352941393852234, 0.7921568751335144, 
            0.4000000059604645, 0.9176470637321472, 0., 0.48235294222831726`, 
            0.5568627715110779, 0.5411764979362488, 0.5333333611488342, 
            0.0117647061124444, 0., 0.25882354378700256`, 0., 
            0.4745098054409027, 0., 0.4156862795352936, 0.24705882370471954`, 
            0.5529412031173706, 0.3137255012989044, 0.7960784435272217, 
            0.3686274588108063, 0., 0.13333334028720856`, 0., 
            0.6549019813537598, 0.7411764860153198, 0.9960784316062927, 
            0.1882352977991104, 0.529411792755127, 0.01568627543747425, 
            0.8470588326454163, 0.18039216101169586`, 0.5333333611488342, 
            0.572549045085907, 0.9882352948188782, 0.5490196347236633, 0., 0.,
             0.18039216101169586`, 0., 0.0470588244497776, 
            0.007843137718737125, 0.29411765933036804`, 0., 
            0.09803921729326248, 0.}], "Children" -> 
          RawArray["Integer16",{{2, 51}, {3, 23}, {4, -21}, {5, 22}, {6, 
            21}, {7, 19}, {8, 13}, {9, -6}, {10, 11}, {-1, -2}, {
            12, -5}, {-3, -4}, {-7, 14}, {15, 17}, {-8, 16}, {-9, -10}, {
            18, -13}, {-11, -12}, {-14, 
            20}, {-15, -16}, {-17, -18}, {-19, -20}, {24, 47}, {25, -45}, {26,
             46}, {27, 44}, {28, 43}, {29, 34}, {30, 33}, {-22, 31}, {-23, 
            32}, {-24, -25}, {-26, -27}, {35, 37}, {36, -30}, {-28, -29}, {38,
             42}, {39, 40}, {-31, -32}, {
            41, -35}, {-33, -34}, {-36, -37}, {-38, -39}, {-40, 
            45}, {-41, -42}, {-43, -44}, {48, -50}, {49, -49}, {
            50, -48}, {-46, -47}, {52, 62}, {53, 58}, {-51, 54}, {55, 
            56}, {-52, -53}, {57, -56}, {-54, -55}, {59, 61}, {
            60, -59}, {-57, -58}, {-60, -61}, {-62, 63}, {64, 66}, {
            65, -65}, {-63, -64}, {67, 69}, {
            68, -68}, {-66, -67}, {-69, -70}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 
            2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 
            2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 
            2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2153, 802, 2324, 2262, 1252, 2183, 1531, 2219,
             2282, 2000, 1621, 2324, 1942, 1286, 490, 996, 2339, 1718, 1603, 
            2178, 987, 1799, 648, 1710, 1048, 1080, 2217, 571, 2151, 648, 
            1152, 1364, 685, 2085, 1136, 589, 1203, 196, 198, 1231, 1488, 757,
             663, 1811, 1975, 1549, 1909, 2061, 2123, 1199, 451, 535, 258, 
            169, 2094, 880, 94, 1758, 941, 1674, 791, 331, 55, 844, 59, 556, 
            259, 1686}], "NumericalThresholds" -> 
          RawArray["Real32",{0.8627451062202454, 0.7764706015586853, 
            0.9803921580314636, 0.9921568632125854, 0.843137264251709, 
            0.7098039388656616, 0., 0., 0.47058823704719543`, 
            0.6039215922355652, 0.8745098114013672, 0.1725490242242813, 0., 
            0.4000000059604645, 0., 0., 0.0117647061124444, 0., 
            0.09019608050584793, 0.9921568632125854, 0.9098039269447327, 
            0.6745098233222961, 0.8235294222831726, 0.01568627543747425, 
            0.30588236451148987`, 0.5647059082984924, 0.12941177189350128`, 
            0.062745101749897, 0.16862745583057404`, 0.886274516582489, 
            0.47843137383461, 0.019607843831181526`, 0.007843137718737125, 
            0.34117648005485535`, 0.40392157435417175`, 0.1568627506494522, 
            0.23529411852359772`, 0.003921568859368563, 0.5137255191802979, 
            0., 0.5411764979362488, 0.01568627543747425, 0.9764705896377563, 
            0., 0.054901961237192154`, 0., 0., 0.12156862765550613`, 
            0.3333333432674408, 0.09803921729326248, 0.019607843831181526`, 
            0.4156862795352936, 0.49803921580314636`, 0., 0.6117647290229797, 
            0.16862745583057404`, 0.04313725605607033, 0.3686274588108063, 0.,
             0.019607843831181526`, 0.7176470756530762, 0.9882352948188782, 
            0.886274516582489, 0.21176470816135406`, 0.003921568859368563, 
            0.40784314274787903`, 0.9725490212440491, 0.45098039507865906`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 49}, {3, 48}, {4, 19}, {5, 17}, {6, 16}, {
            7, -11}, {8, 9}, {-1, -2}, {10, 15}, {11, -8}, {12, -7}, {-3, 
            13}, {-4, 14}, {-5, -6}, {-9, -10}, {-12, -13}, {
            18, -16}, {-14, -15}, {20, 31}, {21, 29}, {22, 28}, {23, 27}, {24,
             25}, {-17, -18}, {26, -21}, {-19, -20}, {-22, -23}, {-24, -25}, {
            30, -28}, {-26, -27}, {32, 37}, {33, 35}, {-29, 34}, {-30, -31}, {
            36, -34}, {-32, -33}, {-35, 38}, {39, 45}, {40, 43}, {-36, 
            41}, {-37, 42}, {-38, -39}, {-40, 44}, {-41, -42}, {-43, 
            46}, {-44, 47}, {-45, -46}, {-47, -48}, {50, 57}, {51, 55}, {52, 
            53}, {-49, -50}, {-51, 54}, {-52, -53}, {56, -56}, {-54, -55}, {
            58, 62}, {59, 60}, {-57, -58}, {61, -61}, {-59, -60}, {63, 
            64}, {-62, -63}, {65, 68}, {66, -67}, {
            67, -66}, {-64, -65}, {-68, -69}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
            1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 
            1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 
            2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2139, 2323, 804, 482, 2063, 2294, 2332, 963, 
            1005, 52, 17, 739, 914, 1361, 80, 1616, 1812, 2207, 2052, 723, 
            1291, 1905, 1463, 383, 1203, 1744, 670, 468, 1638, 296, 62, 1600, 
            1234, 54, 510, 1716, 729, 408, 143, 1618, 2196, 1861, 1309, 738, 
            769, 30, 2012, 1012, 512, 1525, 956, 1026, 585, 464, 1215, 1309, 
            990, 1537, 2213, 2122, 1319, 2063, 1371, 133, 1801, 1635, 1199, 
            730, 1770, 505, 2078, 100, 738, 2009, 206, 2075}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DpA8S/flba//1T
Y79wwQKbq1eu2N28EWF//VqYfWNDgzVQzHbzJiP7gwccbE6eOGF38MABG6C4
TX9fn93jR4/s/v/7Z9fd1WV39swZu58/fth9/lRkDzSSASQOokFqQXJbt2yx
e/smx37mjBm2IPGLFy7YAs20Xb5MzX7nDgv7L5+LgfQOu5cvXoDMsZ08Sch+
86ZNdu/fvbNbvEjJvrWlxQ6kHuQOkH6gHrurV0JAYnbHjx2ze/jggU1bKyvQ
zQxgd378UAC2H6T+5o0btj++l0PdVWc/dYoI2D/Lly2z27tnj93GDRts582V
tX//Ls/+44cPYH0gt0Ldb93cxARmX74UBKYBGK+eqg==
           "], 
          "Children" -> CompressedData["
1:eJwdiVlTDgAAAHdKlKNDOdKdSKQkRYUOlaKn/ILMhCdmPs00/S4qJeQsiXIr
JUR0UHKEsH162J3Z2bST5+pPhQDnw4Oqb2guDwQaWk5EBKP2bFPj6cZAXuGZ
/78uSMgyJYSyGV1BGOtZyRdXMW84kUSwhtX88Z9/Xcs6Fv3tL3+6YBTRfPWH
MXz3m7FsIo4NzDnrZzfyyRmnnTKeVCbdQgLJJJLERz844XtTeOs7x02jmHQO
sJX9ZJDNNjJ543ZeO+YOdvLKLEYd8aW7GHbI3eTywhye+8w9FPLUPPZSwBPz
2cdDH/vIQQd84H37vWcRvfZ51x7veJBD3PaWhzlOKdWUUUE5173pDY9QRSVX
7faaV+zyKG3WUMtlOz1Gux1estU6LnrBJfrQov8=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 
            2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 
            1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 
            2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2120, 319, 801, 52, 2286, 1261, 2160, 2098, 
            2212, 663, 118, 1773, 653, 2001, 914, 1338, 602, 1246, 57, 332, 
            1497, 60, 2027, 603, 2380, 550, 1601, 998, 1330, 1600, 2123, 449, 
            456, 801, 504, 2186, 905, 2175, 946, 259, 2022, 1688, 598, 2199, 
            2022, 613, 1616, 1884, 1597, 44, 847, 878, 1245, 204, 177, 42, 
            1052, 67, 1348, 875, 2187, 861, 2352, 834, 1569, 1307, 567, 2084, 
            769, 453, 517, 1375, 1053, 270}], "NumericalThresholds" -> 
          RawArray["Real32",{0.772549033164978, 0.9960784316062927, 
            0.08235294371843338, 0.1882352977991104, 0.19607843458652496`, 
            0.3333333432674408, 0.6352941393852234, 0.9019607901573181, 
            0.18431372940540314`, 0.03921568766236305, 0.027450980618596077`, 
            0.10196078568696976`, 0.4313725531101227, 0.6274510025978088, 
            0.0235294122248888, 0.0313725508749485, 0., 0.04313725605607033, 
            0.7921568751335144, 0.6627451181411743, 0., 0.8627451062202454, 
            0.12941177189350128`, 0.3490196168422699, 0.501960813999176, 
            0.6784313917160034, 0.20392157137393951`, 0.09019608050584793, 0.,
             0.729411780834198, 0.501960813999176, 0.1921568661928177, 
            0.8549019694328308, 0.4313725531101227, 0.5686274766921997, 
            0.5764706134796143, 0.24313725531101227`, 0.5254902243614197, 
            0.48235294222831726`, 0.3843137323856354, 0.5568627715110779, 
            0.1882352977991104, 0., 0., 0.5960784554481506, 0., 
            0.3450980484485626, 0.2078431397676468, 0.8196078538894653, 
            0.40392157435417175`, 0.48235294222831726`, 0.41960784792900085`, 
            0.05098039284348488, 0.21176470816135406`, 0.364705890417099, 
            0.5686274766921997, 0.0235294122248888, 0., 0.0313725508749485, 
            0., 0.10588235408067703`, 0.3294117748737335, 0.1411764770746231, 
            0.9019607901573181, 0.4901960790157318, 0.3176470696926117, 
            0.45098039507865906`, 0., 0.8117647171020508, 
            0.18431372940540314`, 0.4274509847164154, 0.0117647061124444, 0., 
            0.48627451062202454`}], "Children" -> 
          RawArray["Integer16",{{2, 63}, {3, 30}, {4, 26}, {5, 20}, {6, 8}, {
            7, -3}, {-1, -2}, {9, 19}, {10, 14}, {11, 12}, {-4, -5}, {-6, 
            13}, {-7, -8}, {-9, 15}, {16, 18}, {-10, 
            17}, {-11, -12}, {-13, -14}, {-15, -16}, {21, 24}, {22, 
            23}, {-17, -18}, {-19, -20}, {25, -23}, {-21, -22}, {27, 
            29}, {-24, 28}, {-25, -26}, {-27, -28}, {31, -62}, {32, 59}, {33, 
            49}, {34, 47}, {35, -42}, {36, 41}, {37, 39}, {-29, 
            38}, {-30, -31}, {40, -34}, {-32, -33}, {42, 45}, {43, 
            44}, {-35, -36}, {-37, -38}, {-39, 46}, {-40, -41}, {
            48, -45}, {-43, -44}, {50, 58}, {51, 55}, {52, -50}, {53, 
            54}, {-46, -47}, {-48, -49}, {56, 
            57}, {-51, -52}, {-53, -54}, {-55, -56}, {60, 61}, {-57, -58}, {
            62, -61}, {-59, -60}, {64, 65}, {-63, -64}, {66, 68}, {
            67, -67}, {-65, -66}, {69, 72}, {70, 
            71}, {-68, -69}, {-70, -71}, {73, -75}, {74, -74}, {-72, -73}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 
            2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 
            2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2167, 366, 2323, 1334, 450, 1350, 715, 438, 
            1519, 1919, 417, 895, 878, 782, 1275, 1015, 282, 2076, 655, 156, 
            1292, 1849, 1305, 211, 423, 1725, 903, 58, 749, 148, 1697, 1740, 
            1179, 181, 2151, 1351, 2170, 89, 727, 2246, 654, 978, 917, 1540, 
            889, 472, 942, 636, 906, 883, 2112, 1797, 549, 207, 984, 980, 
            1315, 1723, 122, 2146, 6, 324, 1529, 1309, 2078, 639, 1603, 1253, 
            145, 1419, 1889, 25}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9803921580314636, 0.20000000298023224`, 
            0.9960784316062927, 0.125490203499794, 0.3490196168422699, 
            0.20000000298023224`, 0.04313725605607033, 0.027450980618596077`, 
            0., 0.7960784435272217, 0.8392156958580017, 0.01568627543747425, 
            0.40392157435417175`, 0.26274511218070984`, 0.5098039507865906, 
            0.0313725508749485, 0.7490196228027344, 0.8823529481887817, 0., 
            0.3803921639919281, 0.019607843831181526`, 0.9921568632125854, 
            0.3019607961177826, 0.5882353186607361, 0.4941176474094391, 
            0.4901960790157318, 0.5254902243614197, 0.23529411852359772`, 
            0.003921568859368563, 0.5176470875740051, 0.16862745583057404`, 
            0.7686274647712708, 0.6823529601097107, 0.6784313917160034, 
            0.501960813999176, 0., 0.0117647061124444, 0.01568627543747425, 
            0., 0.03921568766236305, 0.9882352948188782, 0.1764705926179886, 
            0.12156862765550613`, 0., 0., 0.007843137718737125, 0., 
            0.6784313917160034, 0.3450980484485626, 0.0117647061124444, 
            0.7764706015586853, 0.49803921580314636`, 0.5058823823928833, 
            0.9176470637321472, 0.6313725709915161, 0.20000000298023224`, 
            0.5843137502670288, 0., 0., 0.7490196228027344, 
            0.8039215803146362, 0.9921568632125854, 0.4000000059604645, 
            0.0313725508749485, 0.9843137264251709, 0.3450980484485626, 
            0.08627451211214066, 0.0470588244497776, 0.007843137718737125, 
            0.01568627543747425, 0.45098039507865906`, 0.}], "Children" -> 
          RawArray["Integer16",{{2, 51}, {3, 11}, {4, 5}, {-1, -2}, {6, 9}, {
            7, 8}, {-3, -4}, {-5, -6}, {-7, 10}, {-8, -9}, {12, 46}, {13, 
            29}, {14, 25}, {15, 18}, {16, 17}, {-10, -11}, {-12, -13}, {
            19, -21}, {20, 22}, {21, -16}, {-14, -15}, {-17, 23}, {
            24, -20}, {-18, -19}, {26, 27}, {-22, -23}, {
            28, -26}, {-24, -25}, {30, 32}, {31, -29}, {-27, -28}, {33, 45}, {
            34, 37}, {35, 36}, {-30, -31}, {-32, -33}, {38, 44}, {39, 
            40}, {-34, -35}, {-36, 41}, {-37, 42}, {-38, 
            43}, {-39, -40}, {-41, -42}, {-43, -44}, {47, 49}, {
            48, -47}, {-45, -46}, {-48, 50}, {-49, -50}, {52, 63}, {53, 
            55}, {-51, 54}, {-52, -53}, {56, 60}, {57, 59}, {
            58, -56}, {-54, -55}, {-57, -58}, {61, 
            62}, {-59, -60}, {-61, -62}, {64, 65}, {-63, -64}, {66, 71}, {67, 
            70}, {-65, 68}, {69, -68}, {-66, -67}, {-69, -70}, {-71, 
            72}, {-72, -73}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 
            2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 
            1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 
            2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2144, 2259, 2028, 779, 517, 1787, 282, 1697, 
            1560, 1641, 1203, 1395, 2189, 1704, 2241, 400, 1724, 455, 723, 
            565, 489, 96, 1454, 1009, 868, 2219, 1850, 1831, 2325, 1657, 2190,
             5, 1597, 1667, 2008, 1245, 951, 546, 674, 767, 2015, 428, 2212, 
            1310, 2230, 512, 2230, 876, 858, 2116, 471, 296, 539, 167, 1054, 
            1742, 582, 1257, 648, 1674, 2014, 1600, 2122, 2091, 1323, 931, 
            755, 855, 598, 678, 444, 283, 1708, 474, 1147, 223, 1714}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DpC8SvXmba//ld
bf/3T419Y0OD9coVK2yBwgwHDzjYLlmsbA9inz93zq6zo8Ouu4vLvrWlxe74
sWN2S5cssduwXt9++rRpdvPnyYHVPXzwAKy3pZnZfuGCBTYgtXv32NidPnXK
DipvM3eOjP33b9/snj1NtV+8SMn+8aMk+2NHXe1BciA1ILUbN2yw7e7qsgO5
Z+IEAZBZYP0gM0F2AMXtent47J8/e2YHdKf9i+fp9jdvRIDd0NjAYHPzxg07
ED1tqqj9/3919kePHLH7/OmTXX8fn/2WzcZgdSCwc8cOu107LYF6b4DdDbIX
5B8Qe/++fXYwdUCzwOyzZ84A7TtgAwDOw42m
           "], 
          "Children" -> CompressedData["
1:eJwdkNkyFgAARs9QocXSgkokKpUlkkhCqKhu9ASaUV0x82fGeC1tsrVrI8pS
FNo3ivZQHT8X55s5892d5FP11adDgHPhwamuaSwNBGqaTkYEpbKuofZMbSA7
7+zCfyJIyCL5hLKZJSSxlHCWEYb+959/jWATy1nBnLOuJIZVRDLjH6OI5re/
/OkPV7OeNcSzlnV895uxfPGrcUw75Wcn3cB7N/LBCRP45EcTeeM73/raVyZz
zy1kkcKAqexgK9t46Qu3k8a4Y4763J0MuosM0hn2mSM+NZMnDrmbHLJ5ZL+P
3cN9c9nHXvLos9eH9tjtAwsoZT8lFFLMAYq46x0Pcssub3vTG173moc4RhlH
KOcwV62g0w7bbfMoVbRayRVbvOwljweLXfSC5212HqQIpP4=
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 
            1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 
            1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 
            2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2168, 2297, 1987, 2370, 288, 600, 1999, 1703, 
            2368, 156, 2033, 1737, 2034, 535, 2166, 2096, 1827, 854, 2120, 
            849, 1466, 400, 511, 2004, 1654, 1203, 1685, 189, 2063, 1827, 
            1688, 16, 2023, 958, 292, 277, 862, 9, 1878, 1177, 591, 658, 1168,
             43, 2270, 1834, 864, 2066, 170, 755, 1082, 596, 646, 139, 14, 
            1856, 1510, 1083, 2015, 2141, 324, 1200, 1605, 837, 2078, 2088, 
            1903, 760, 403, 1730, 1070, 189, 1497}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9176470637321472, 0.8823529481887817, 
            0.12941177189350128`, 0., 0.30980393290519714`, 
            0.25882354378700256`, 0.8627451062202454, 0.019607843831181526`, 
            0.0117647061124444, 0.4901960790157318, 0.20392157137393951`, 
            0.062745101749897, 0.48627451062202454`, 0.9019607901573181, 
            0.9843137264251709, 0.5254902243614197, 0.364705890417099, 
            0.5882353186607361, 0.1882352977991104, 0.545098066329956, 
            0.886274516582489, 0.4588235318660736, 0.30980393290519714`, 
            0.239215686917305, 0.007843137718737125, 0.18039216101169586`, 
            0.1882352977991104, 0.7686274647712708, 0.6431372761726379, 
            0.3019607961177826, 0.5490196347236633, 0.364705890417099, 0., 
            0.01568627543747425, 0., 0.0235294122248888, 0., 
            0.48627451062202454`, 0., 0.0117647061124444, 0.0117647061124444, 
            0.019607843831181526`, 0.8666666746139526, 0.4000000059604645, 
            0.45098039507865906`, 0.007843137718737125, 0.5686274766921997, 
            0.21568627655506134`, 0.9215686321258545, 0.47843137383461, 
            0.027450980618596077`, 0.7333333492279053, 0.2705882489681244, 
            0.0313725508749485, 0.35686275362968445`, 0.6901960968971252, 
            0.07058823853731155, 0.45490196347236633`, 0., 
            0.054901961237192154`, 0.250980406999588, 0.10196078568696976`, 
            0., 0.062745101749897, 0.6117647290229797, 0.5529412031173706, 
            0.29019609093666077`, 0., 0.4470588266849518, 
            0.10980392247438431`, 0., 0.5490196347236633, 0.}], "Children" -> 
          RawArray["Integer16",{{2, 48}, {3, 26}, {4, 7}, {5, 
            6}, {-1, -2}, {-3, -4}, {8, -24}, {9, 18}, {10, 14}, {-5, 11}, {
            12, 13}, {-6, -7}, {-8, -9}, {15, 17}, {
            16, -12}, {-10, -11}, {-13, -14}, {19, -23}, {20, 22}, {-15, 
            21}, {-16, -17}, {23, 25}, {
            24, -20}, {-18, -19}, {-21, -22}, {-25, 27}, {28, 42}, {29, 38}, {
            30, -35}, {31, 34}, {32, -29}, {-26, 33}, {-27, -28}, {35, -34}, {
            36, 37}, {-30, -31}, {-32, -33}, {39, 41}, {-36, 
            40}, {-37, -38}, {-39, -40}, {43, 45}, {-41, 
            44}, {-42, -43}, {-44, 46}, {-45, 47}, {-46, -47}, {49, 67}, {50, 
            65}, {51, 57}, {-48, 52}, {53, -54}, {54, 56}, {
            55, -51}, {-49, -50}, {-52, -53}, {58, 60}, {-55, 
            59}, {-56, -57}, {61, 62}, {-58, -59}, {63, 
            64}, {-60, -61}, {-62, -63}, {66, -66}, {-64, -65}, {-67, 68}, {
            69, 73}, {70, 72}, {-68, 
            71}, {-69, -70}, {-71, -72}, {-73, -74}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 
            1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 
            2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 
            1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2171, 1305, 2335, 877, 1325, 2222, 876, 416, 
            1560, 1244, 1830, 1951, 112, 507, 530, 1279, 2102, 405, 836, 2132,
             1310, 1723, 2054, 2138, 1551, 559, 411, 920, 1741, 2242, 2143, 
            1473, 1313, 486, 630, 895, 2192, 581, 1515, 1201, 1670, 2047, 876,
             2148, 1611, 2031, 416, 568, 2021, 588, 1673, 1739, 1279, 1404, 
            1609, 839, 61, 1557, 1623, 957, 1672, 2127, 1010, 1603, 1006, 
            1346, 1285, 771, 415}], "NumericalThresholds" -> 
          RawArray["Real32",{0.8784313797950745, 0.8784313797950745, 
            0.9882352948188782, 0.9176470637321472, 0.5921568870544434, 
            0.5960784554481506, 0.545098066329956, 0.49803921580314636`, 0., 
            0., 0.9529411792755127, 0.6313725709915161, 0.2862745225429535, 
            0.24313725531101227`, 0.24705882370471954`, 0.40784314274787903`, 
            0.8156862854957581, 0.2235294133424759, 0.7254902124404907, 
            0.5803921818733215, 0.8352941274642944, 0.007843137718737125, 
            0.007843137718737125, 0.16470588743686676`, 0.38823530077934265`, 
            0.10588235408067703`, 0.4627451002597809, 0.18431372940540314`, 
            0.0117647061124444, 0.9960784316062927, 0.4000000059604645, 
            0.5098039507865906, 0.33725491166114807`, 0.25882354378700256`, 
            0.9921568632125854, 0., 0., 0.30980393290519714`, 
            0.5098039507865906, 0.43529412150382996`, 0., 0., 0., 
            0.9686274528503418, 0.46666666865348816`, 0.5490196347236633, 
            0.12156862765550613`, 0.003921568859368563, 0.01568627543747425, 
            0.9333333373069763, 0., 0.9803921580314636, 0.2078431397676468, 
            0.07450980693101883, 0.054901961237192154`, 0.8745098114013672, 
            0.8352941274642944, 0.5490196347236633, 0.23137255012989044`, 
            0.8627451062202454, 0.8039215803146362, 0.4588235318660736, 
            0.37254902720451355`, 0.47843137383461, 0.5843137502670288, 
            0.40392157435417175`, 0.8392156958580017, 0.3019607961177826, 
            0.23137255012989044`}], "Children" -> 
          RawArray["Integer16",{{2, 44}, {3, 38}, {4, 17}, {5, 16}, {6, 15}, {
            7, 14}, {8, 11}, {9, 10}, {-1, -2}, {-3, -4}, {12, -8}, {
            13, -7}, {-5, -6}, {-9, -10}, {-11, -12}, {-13, -14}, {
            18, -36}, {-15, 19}, {20, 37}, {21, 36}, {22, 35}, {23, 29}, {24, 
            26}, {25, -18}, {-16, -17}, {27, 28}, {-19, -20}, {-21, -22}, {30,
             33}, {-23, 31}, {32, -26}, {-24, -25}, {-27, 
            34}, {-28, -29}, {-30, -31}, {-32, -33}, {-34, -35}, {
            39, -43}, {-37, 40}, {41, 43}, {-38, 
            42}, {-39, -40}, {-41, -42}, {45, 52}, {46, 49}, {47, -47}, {-44, 
            48}, {-45, -46}, {50, 51}, {-48, -49}, {-50, -51}, {53, 61}, {54, 
            58}, {55, 56}, {-52, -53}, {57, -56}, {-54, -55}, {-57, 59}, {
            60, -60}, {-58, -59}, {62, -70}, {-61, 63}, {64, 67}, {65, 
            66}, {-62, -63}, {-64, -65}, {68, -69}, {69, -68}, {-66, -67}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 
            1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 
            2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 
            2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2168, 1647, 2267, 649, 134, 901, 1982, 1651, 
            1490, 1665, 124, 694, 1259, 2233, 730, 880, 1560, 120, 2337, 1825,
             1247, 909, 1581, 1603, 2298, 588, 2201, 2161, 856, 176, 936, 383,
             925, 690, 862, 427, 1626, 1638, 849, 492, 787, 543, 1947, 155, 
            438, 1732, 405, 1200, 2149, 1257, 437, 557, 1537, 128, 1437, 1003,
             2114, 2069, 564, 226, 421, 1209, 2027, 912, 52, 696}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.9254902005195618, 0.9882352948188782, 
            0.8941176533699036, 0.03921568766236305, 0.003921568859368563, 
            0.9058823585510254, 0.8078431487083435, 0.003921568859368563, 
            0.4627451002597809, 0.5098039507865906, 0.07058823853731155, 0., 
            0.16470588743686676`, 0.9490196108818054, 0., 
            0.027450980618596077`, 0.6509804129600525, 0.6235294342041016, 
            0.5215686559677124, 0.9607843160629272, 0.6235294342041016, 
            0.21176470816135406`, 0.5803921818733215, 0.125490203499794, 
            0.4901960790157318, 0.6431372761726379, 0.3137255012989044, 
            0.003921568859368563, 0.003921568859368563, 0.4941176474094391, 
            0.15294118225574493`, 0., 0., 0.12941177189350128`, 0., 
            0.0941176488995552, 0.7215686440467834, 0.7019608020782471, 0., 
            0.45490196347236633`, 0.019607843831181526`, 0.4627451002597809, 
            0.29411765933036804`, 0., 0., 0.32156863808631897`, 0., 0., 0., 
            0.0313725508749485, 0., 0.01568627543747425, 0.003921568859368563,
             0.9960784316062927, 0.9333333373069763, 0.4470588266849518, 
            0.5568627715110779, 0.5803921818733215, 0., 0.615686297416687, 
            0.21960784494876862`, 0., 0., 0.21176470816135406`, 
            0.007843137718737125, 0.}], "Children" -> 
          RawArray["Integer16",{{2, 48}, {3, 45}, {4, 28}, {5, 13}, {6, 8}, {
            7, -3}, {-1, -2}, {9, 11}, {-4, 10}, {-5, -6}, {-7, 
            12}, {-8, -9}, {14, 23}, {15, -19}, {16, 17}, {-10, -11}, {18, 
            20}, {19, -14}, {-12, -13}, {21, 
            22}, {-15, -16}, {-17, -18}, {-20, 24}, {25, 27}, {-21, 
            26}, {-22, -23}, {-24, -25}, {29, 37}, {30, 32}, {31, -28}, {-26,
             -27}, {33, 34}, {-29, -30}, {35, 36}, {-31, -32}, {-33, -34}, {
            38, 44}, {39, -41}, {40, 41}, {-35, -36}, {42, 
            43}, {-37, -38}, {-39, -40}, {-42, -43}, {46, 
            47}, {-44, -45}, {-46, -47}, {49, 57}, {50, 53}, {51, 
            52}, {-48, -49}, {-50, -51}, {-52, 54}, {55, -56}, {
            56, -55}, {-53, -54}, {58, 63}, {59, -62}, {60, 61}, {-57, -58}, {
            62, -61}, {-59, -60}, {64, 66}, {-63, 
            65}, {-64, -65}, {-66, -67}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 
            2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 
            1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 
            1, 1, 1, 1, 2, 2, 1, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2207, 788, 1363, 1261, 627, 925, 669, 748, 
            2146, 1769, 1600, 2320, 818, 2017, 1725, 2051, 1720, 1965, 961, 
            1753, 2022, 1568, 889, 228, 2246, 2219, 1241, 884, 1963, 2098, 
            933, 1522, 1126, 1168, 1338, 1847, 742, 2132, 403, 1780, 406, 115,
             1387, 1316, 843, 1680, 1347, 72, 2064, 1307, 2175, 1376, 592, 
            1200, 1312, 180, 1435, 496, 2123, 188, 1236, 2106, 1748, 264, 289,
             635, 83, 1047, 1048, 1200, 190}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9843137264251709, 0.0117647061124444, 
            0.9490196108818054, 0.01568627543747425, 0.7764706015586853, 
            0.09019608050584793, 0.1921568661928177, 0., 0., 0., 
            0.9411764740943909, 0.5764706134796143, 0.8117647171020508, 
            0.007843137718737125, 0.8549019694328308, 0.3176470696926117, 
            0.5176470875740051, 0., 0.125490203499794, 0.019607843831181526`, 
            0.545098066329956, 0., 0.32549020648002625`, 0.5137255191802979, 
            0., 0.9960784316062927, 0.7333333492279053, 0.08235294371843338, 
            0.05882352963089943, 0.1882352977991104, 0.8980392217636108, 
            0.0235294122248888, 0.3921568691730499, 0.3686274588108063, 
            0.9058823585510254, 0.3176470696926117, 0.6470588445663452, 
            0.019607843831181526`, 0.5411764979362488, 0.01568627543747425, 
            0.019607843831181526`, 0.04313725605607033, 0.24705882370471954`, 
            0.6509804129600525, 0.7019608020782471, 0.019607843831181526`, 
            0.3921568691730499, 0.501960813999176, 0.5921568870544434, 
            0.9960784316062927, 0.054901961237192154`, 0.7921568751335144, 
            0.9725490212440491, 0., 0.0313725508749485, 0., 
            0.01568627543747425, 0.38823530077934265`, 0.21176470816135406`, 
            0., 0.364705890417099, 0.4627451002597809, 0.0117647061124444, 
            0.9372549057006836, 0.8470588326454163, 0., 0.8666666746139526, 
            0., 0., 0.3490196168422699, 0.3686274588108063}], "Children" -> 
          RawArray["Integer16",{{2, 38}, {3, 11}, {4, 10}, {5, 7}, {
            6, -3}, {-1, -2}, {8, 9}, {-4, -5}, {-6, -7}, {-8, -9}, {
            12, -37}, {13, 25}, {14, -22}, {15, 20}, {16, -15}, {17, 19}, {
            18, -12}, {-10, -11}, {-13, -14}, {21, -21}, {22, 
            23}, {-16, -17}, {-18, 24}, {-19, -20}, {26, 28}, {
            27, -25}, {-23, -24}, {29, 33}, {30, 31}, {-26, -27}, {
            32, -30}, {-28, -29}, {34, 35}, {-31, -32}, {36, -36}, {-33, 
            37}, {-34, -35}, {39, 52}, {40, 51}, {41, 44}, {42, 
            43}, {-38, -39}, {-40, -41}, {45, 50}, {46, 49}, {47, 
            48}, {-42, -43}, {-44, -45}, {-46, -47}, {-48, -49}, {-50, -51}, {
            53, 62}, {54, 61}, {55, 57}, {-52, 56}, {-53, -54}, {-55, 58}, {
            59, -59}, {-56, 60}, {-57, -58}, {-60, -61}, {63, 67}, {-62, 
            64}, {65, -66}, {-63, 66}, {-64, -65}, {68, 71}, {69, 
            70}, {-67, -68}, {-69, -70}, {-71, -72}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
            2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 
            2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 
            1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2148, 1602, 1605, 2201, 2150, 2270, 416, 1244,
             2140, 86, 933, 1990, 1596, 1718, 1767, 2251, 2094, 887, 1837, 
            1073, 2055, 497, 88, 2160, 901, 2002, 446, 47, 1330, 1224, 1607, 
            1767, 2142, 41, 2232, 1298, 1250, 1722, 985, 1975, 25, 1287, 1741,
             221, 1251, 688, 672, 1683, 1754, 2168, 316, 1408, 484, 67, 592, 
            930, 371, 2090, 619, 287, 322, 1413, 1200, 2103, 631, 800, 1329, 
            1702, 770, 2049, 68}], "NumericalThresholds" -> 
          RawArray["Real32",{0.8549019694328308, 0.18039216101169586`, 
            0.45490196347236633`, 0.9686274528503418, 0.8901960849761963, 
            0.9960784316062927, 0.5254902243614197, 0.9254902005195618, 
            0.0470588244497776, 0.4470588266849518, 0.9725490212440491, 0., 
            0., 0., 0.45098039507865906`, 0., 0.16470588743686676`, 
            0.4156862795352936, 0.9137254953384399, 0., 0.4470588266849518, 
            0.43921568989753723`, 0., 0.43529412150382996`, 
            0.4627451002597809, 0., 0.10980392247438431`, 0.501960813999176, 
            0.20392157137393951`, 0.843137264251709, 0.25882354378700256`, 0.,
             0.4901960790157318, 0.003921568859368563, 0.9843137264251709, 
            0.6509804129600525, 0.729411780834198, 0.125490203499794, 
            0.01568627543747425, 0., 0.0313725508749485, 0.5254902243614197, 
            0.2235294133424759, 0.5686274766921997, 0.3843137323856354, 0., 
            0.4941176474094391, 0.10196078568696976`, 0.572549045085907, 0., 
            0., 0.5137255191802979, 0.0313725508749485, 0.027450980618596077`,
             0.7960784435272217, 0.2862745225429535, 0., 0.2980392277240753, 
            0., 0., 0.9764705896377563, 0., 0.10196078568696976`, 
            0.8666666746139526, 0.8509804010391235, 0.0235294122248888, 
            0.5372549295425415, 0.21960784494876862`, 0.019607843831181526`, 
            0., 0.}], "Children" -> 
          RawArray["Integer16",{{2, 49}, {3, 5}, {-1, 4}, {-2, -3}, {
            6, -48}, {7, 30}, {8, 25}, {9, -21}, {10, 19}, {11, 15}, {12, 
            14}, {-4, 13}, {-5, -6}, {-7, -8}, {16, 18}, {-9, 
            17}, {-10, -11}, {-12, -13}, {20, 24}, {21, 22}, {-14, -15}, {-16,
             23}, {-17, -18}, {-19, -20}, {26, 29}, {27, 
            28}, {-22, -23}, {-24, -25}, {-26, -27}, {31, 47}, {32, 42}, {33, 
            36}, {34, 35}, {-28, -29}, {-30, -31}, {37, -38}, {38, -37}, {39, 
            40}, {-32, -33}, {41, -36}, {-34, -35}, {43, 46}, {44, 
            45}, {-39, -40}, {-41, -42}, {-43, -44}, {48, -47}, {-45, -46}, {
            50, 61}, {51, 53}, {-49, 52}, {-50, -51}, {54, 57}, {55, 
            56}, {-52, -53}, {-54, -55}, {-56, 58}, {59, 
            60}, {-57, -58}, {-59, -60}, {62, 66}, {-61, 63}, {-62, 64}, {-63,
             65}, {-64, -65}, {67, 70}, {68, 69}, {-66, -67}, {-68, -69}, {
            71, -72}, {-70, -71}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 
            1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 
            1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 
            1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1759, 2288, 2072, 403, 2200, 1687, 1667, 1116,
             403, 37, 1416, 2173, 117, 2297, 1713, 1821, 2066, 1274, 2268, 
            2306, 1693, 525, 35, 909, 1746, 904, 1362, 2123, 2187, 1022, 932, 
            2003, 572, 1201, 1733, 809, 2133, 741, 2002, 952, 133, 2001, 1666,
             1300, 1234, 608, 1438, 1164, 879, 2042, 2014, 801, 1243, 973, 
            453, 561, 1364, 2081, 1202, 63, 94, 570, 213, 1837, 12, 477, 1414,
             282, 262, 2066, 263, 243, 744, 678, 330, 677, 689}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DpC8SPHyXZr1qp
ab9ls7H9xw8F9r9/VdkDhRk+fvhgd/LECbuHDxLsfv74AWLbfv/2zQ4k9/rV
K7umRkb7gwcO2M6eNctu9iwp+3dvc+3//a217+/js29sYLDp7+uz+/Wz0n7h
ggU23V1ddm/f5Nj9/vXL7s7taLD5J0942J8942M/fZqY/YL58vbbt5nZz583
z+70qVNgO0D6li5RAbO/fimxA9plAxK7f+8eWAwEPn/6BHSXB1DOwba1hcXu
4oULYDeC7AKZ9ffPH7upU0Tsuzo57V++eGF3/Jib/cMHD2waGxqsQW4Emgt2
C1DM7uyZM3BzL14IsD1/zs/+yuVgsDxQvc3qVavsZs6QAPMBgwaa+A==
           "], 
          "Children" -> CompressedData["
1:eJwdiWlTDQAAAHcKXZJQuZJyJbocObokpYf3Jb+gZopPmXmaafwtJRHlFqJy
hEQiR65cUUnbqw+7MzubXnuquj4COB0dVnVNU1koVHPmeEw4Ag2NdSfqQvkF
J+d+MEzEPPuIZC0LWMNCPrqIUaNYRjRLiSEWnTGOJSwmnv9O+88pE/jrpBP+
MZFxf7uc1azgi0l8NZlVpLCSX/70h98d85uf/eQH35vKLtaRRRoZrOeN6bz1
nSNu4LkbGXATW9nMFoZ97ZCZvPKlg77wmdvYTj7Z5JLDE5/a72PzeORDd7CT
Pnvt8YG7KeC+3e5hL/e86x273E8lhRyiiHKKOUgJZdy2lFse4KY3vO41r3rF
TjusoN3LXvIwZ63iGAGOctEjXLDN87YapNlztjgLUKik/g==
           "], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 
            1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 
            1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 
            1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2247, 1179, 2101, 2125, 1626, 2025, 1651, 125,
             1259, 858, 811, 802, 2053, 2117, 1738, 1313, 1598, 1534, 1409, 
            1242, 2306, 1306, 2213, 1721, 1607, 473, 1104, 452, 2247, 2070, 
            2156, 403, 37, 15, 202, 597, 1463, 1729, 421, 982, 431, 1455, 
            1265, 488, 2169, 2215, 1268, 421, 124, 2106, 1762, 1756, 1998, 
            2108, 1213, 1273, 190, 501, 2067, 1792, 2001, 2113, 866, 944, 
            1228, 164, 1608, 2078, 1276, 122}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9333333373069763, 0.364705890417099, 
            0.10588235408067703`, 0., 0.5372549295425415, 0.5607843399047852, 
            0.9411764740943909, 0.19607843458652496`, 0.529411792755127, 
            0.06666667014360428, 0.8745098114013672, 0.4745098054409027, 
            0.5882353186607361, 0.5254902243614197, 0.4627451002597809, 
            0.29019609093666077`, 0.6313725709915161, 0.10980392247438431`, 
            0.33725491166114807`, 0.30588236451148987`, 0.1725490242242813, 
            0.019607843831181526`, 0.47058823704719543`, 0.05882352963089943, 
            0.0470588244497776, 0.0313725508749485, 0.9372549057006836, 
            0.125490203499794, 0.06666667014360428, 0.2549019753932953, 
            0.8627451062202454, 0.5764706134796143, 0.6941176652908325, 
            0.6274510025978088, 0.01568627543747425, 0.003921568859368563, 0.,
             0.0117647061124444, 0., 0.6745098233222961, 0.5411764979362488, 
            0.062745101749897, 0., 0.1764705926179886, 0.658823549747467, 
            0.8784313797950745, 0.23137255012989044`, 0., 
            0.007843137718737125, 0.34117648005485535`, 0., 
            0.25882354378700256`, 0.10196078568696976`, 0., 
            0.5843137502670288, 0.2862745225429535, 0.7960784435272217, 
            0.7921568751335144, 0.2705882489681244, 0.5490196347236633, 
            0.9803921580314636, 0.6784313917160034, 0.0784313753247261, 
            0.1882352977991104, 0., 0., 0.49803921580314636`, 
            0.12941177189350128`, 0.545098066329956, 0.}], "Children" -> 
          RawArray["Integer16",{{2, 31}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, 23}, {8, -21}, {9, 14}, {10, -10}, {11, -9}, {12, -8}, {
            13, -7}, {-5, -6}, {15, -20}, {16, 21}, {17, 19}, {
            18, -13}, {-11, -12}, {-14, 20}, {-15, -16}, {
            22, -19}, {-17, -18}, {24, 30}, {25, 29}, {26, 28}, {-22, 
            27}, {-23, -24}, {-25, -26}, {-27, -28}, {-29, -30}, {32, 53}, {
            33, 52}, {34, -50}, {35, 48}, {36, 41}, {37, 38}, {-31, -32}, {39,
             40}, {-33, -34}, {-35, -36}, {42, 47}, {43, 44}, {-37, -38}, {45,
             46}, {-39, -40}, {-41, -42}, {-43, -44}, {49, 51}, {
            50, -47}, {-45, -46}, {-48, -49}, {-51, -52}, {54, 62}, {55, 
            60}, {56, 58}, {57, -55}, {-53, -54}, {-56, 59}, {-57, -58}, {
            61, -61}, {-59, -60}, {63, 66}, {64, -65}, {
            65, -64}, {-62, -63}, {67, 69}, {-66, 68}, {-67, -68}, {-69, 
            70}, {-70, -71}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 
            2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
            1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2}], "NominalSplits" -> {},
           "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2176, 762, 1022, 1308, 1727, 1537, 910, 754, 
            2141, 1730, 410, 1641, 718, 1390, 2255, 1602, 1628, 2210, 712, 
            2326, 440, 1700, 588, 90, 97, 1848, 1282, 1682, 1661, 1225, 2080, 
            1950, 2162, 381, 165, 261, 1713, 417, 75, 1403, 540, 1122, 1287, 
            1399, 841, 839, 2148, 949, 1307, 1741, 2201, 99, 2023, 831, 1485, 
            1647, 159, 888, 2140, 1440, 1239, 1661, 236, 792, 540, 1224, 296, 
            568, 105, 1002, 1179, 1039, 1378, 733}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9921568632125854, 0.9019607901573181, 
            0.007843137718737125, 0.8549019694328308, 0.8039215803146362, 
            0.239215686917305, 0.007843137718737125, 0., 0.22745098173618317`,
             0.2980392277240753, 0.019607843831181526`, 0.5137255191802979, 
            0.11372549086809158`, 0.6745098233222961, 0.4117647111415863, 
            0.019607843831181526`, 0., 0.7529411911964417, 0., 
            0.4000000059604645, 0.7490196228027344, 0.5882353186607361, 
            0.09803921729326248, 0.019607843831181526`, 0.3019607961177826, 
            0.7647058963775635, 0.5333333611488342, 0.239215686917305, 
            0.5568627715110779, 0.48627451062202454`, 0.0235294122248888, 
            0.5882353186607361, 0.12941177189350128`, 0.062745101749897, 0., 
            0.3333333432674408, 0.7019608020782471, 0.7960784435272217, 
            0.8392156958580017, 0.3921568691730499, 0.7176470756530762, 
            0.15294118225574493`, 0.0235294122248888, 0.21176470816135406`, 
            0.04313725605607033, 0.11764705926179886`, 0.21568627655506134`, 
            0.48627451062202454`, 0.18039216101169586`, 0.5803921818733215, 
            0.33725491166114807`, 0.27843138575553894`, 0.08627451211214066, 
            0.9725490212440491, 0.2078431397676468, 0.3450980484485626, 
            0.364705890417099, 0.1882352977991104, 0.5607843399047852, 
            0.6196078658103943, 0.32156863808631897`, 0.027450980618596077`, 
            0.9960784316062927, 0.7450980544090271, 0.5607843399047852, 
            0.11372549086809158`, 0.9882352948188782, 0., 0.7411764860153198, 
            0.7254902124404907, 0.0117647061124444, 0.0313725508749485, 
            0.8823529481887817, 0.}], "Children" -> 
          RawArray["Integer16",{{2, 50}, {3, 15}, {4, 8}, {5, -5}, {6, -4}, {
            7, -3}, {-1, -2}, {9, 11}, {-6, 10}, {-7, -8}, {12, -13}, {13, 
            14}, {-9, -10}, {-11, -12}, {16, 34}, {-14, 17}, {18, 22}, {19, 
            21}, {20, -17}, {-15, -16}, {-18, -19}, {23, -32}, {24, 28}, {25, 
            26}, {-20, -21}, {27, -24}, {-22, -23}, {29, 32}, {30, -28}, {-25,
             31}, {-26, -27}, {-29, 33}, {-30, -31}, {35, 38}, {36, 
            37}, {-33, -34}, {-35, -36}, {39, 49}, {40, -47}, {41, 45}, {42, 
            44}, {43, -39}, {-37, -38}, {-40, -41}, {46, -46}, {
            47, -45}, {-42, 48}, {-43, -44}, {-48, -49}, {51, 62}, {-50, 
            52}, {53, 57}, {54, 55}, {-51, -52}, {-53, 56}, {-54, -55}, {58, 
            60}, {-56, 59}, {-57, -58}, {-59, 61}, {-60, -61}, {63, 71}, {64, 
            70}, {65, 67}, {66, -64}, {-62, -63}, {68, -68}, {
            69, -67}, {-65, -66}, {-69, -70}, {72, 73}, {-71, -72}, {
            74, -75}, {-73, -74}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 
            2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 
            2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 
            2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2167, 2001, 1481, 776, 1716, 2199, 1754, 1382,
             1205, 481, 486, 401, 1766, 2117, 277, 1696, 147, 1730, 438, 1728,
             2004, 2256, 904, 1969, 1081, 763, 2283, 3, 636, 2071, 1126, 1113,
             1604, 513, 1494, 1734, 1317, 1539, 2219, 449, 170, 1774, 1374, 
            2223, 140, 2133, 1687, 803, 116, 1027, 401, 807, 1293, 1278, 2012,
             1421, 1295, 124, 596, 519, 363, 863, 418, 2031, 957, 1338, 127, 
            291, 1683, 1003, 100}], "NumericalThresholds" -> 
          RawArray["Real32",{0.9803921580314636, 0.18039216101169586`, 0., 
            0.9333333373069763, 0.8196078538894653, 0.8352941274642944, 
            0.8980392217636108, 0.9960784316062927, 0.4156862795352936, 0., 
            0.41960784792900085`, 0.7058823704719543, 0.1411764770746231, 
            0.3960784375667572, 0.5333333611488342, 0.08235294371843338, 
            0.04313725605607033, 0.21176470816135406`, 0.34117648005485535`, 
            0.8274509906768799, 0.47058823704719543`, 0.9764705896377563, 
            0.08235294371843338, 0.10196078568696976`, 0.6705882549285889, 
            0.3450980484485626, 0.25882354378700256`, 0.33725491166114807`, 
            0.42352941632270813`, 0., 0.0117647061124444, 0., 
            0.3137255012989044, 0.7568627595901489, 0.003921568859368563, 0., 
            0.27843138575553894`, 0.7137255072593689, 0.615686297416687, 0., 
            0., 0.1568627506494522, 0.7215686440467834, 0.007843137718737125, 
            0.35686275362968445`, 0.003921568859368563, 0.125490203499794, 
            0.5882353186607361, 0.8352941274642944, 0., 0.003921568859368563, 
            0.3686274588108063, 0.5607843399047852, 0.8392156958580017, 
            0.15294118225574493`, 0.32156863808631897`, 0.007843137718737125, 
            0.5803921818733215, 0., 0.37254902720451355`, 
            0.027450980618596077`, 0.3803921639919281, 0.06666667014360428, 
            0.07058823853731155, 0.32549020648002625`, 0., 
            0.027450980618596077`, 0.9960784316062927, 0., 
            0.007843137718737125, 0.572549045085907}], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 5}, {4, -3}, {-1, -2}, {6, 39}, {
            7, 31}, {8, 30}, {9, 26}, {10, 21}, {11, 17}, {12, 
            13}, {-4, -5}, {14, 15}, {-6, -7}, {-8, 16}, {-9, -10}, {18, 
            20}, {-11, 19}, {-12, -13}, {-14, -15}, {22, 24}, {-16, 
            23}, {-17, -18}, {-19, 25}, {-20, -21}, {-22, 27}, {28, 
            29}, {-23, -24}, {-25, -26}, {-27, -28}, {32, 33}, {-29, -30}, {
            34, 38}, {35, 37}, {-31, 
            36}, {-32, -33}, {-34, -35}, {-36, -37}, {40, 42}, {
            41, -40}, {-38, -39}, {-41, -42}, {44, 57}, {-43, 45}, {46, 54}, {
            47, 48}, {-44, -45}, {49, 53}, {50, 52}, {
            51, -48}, {-46, -47}, {-49, -50}, {-51, -52}, {55, -56}, {
            56, -55}, {-53, -54}, {58, 66}, {59, 63}, {60, 62}, {-57, 
            61}, {-58, -59}, {-60, -61}, {64, 65}, {-62, -63}, {-64, -65}, {
            67, 68}, {-66, -67}, {-68, 69}, {70, 
            71}, {-69, -70}, {-71, -72}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 
            1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 
            1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 
            2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2219, 787, 630, 1243, 270, 1241, 658, 585, 98,
             1251, 1826, 2222, 1664, 1694, 2193, 2224, 531, 2307, 1836, 1217, 
            1150, 2332, 2075, 1340, 1389, 1244, 1730, 555, 2016, 1285, 905, 
            1654, 613, 2019, 948, 1743, 1809, 1597, 2307, 1279, 1742, 171, 
            979, 2159, 1599, 1205, 129, 1647, 76, 1654, 2027, 85, 1453, 1055, 
            37, 14, 639, 7, 1656, 2126, 294, 876, 451, 638, 714, 765, 1686, 
            489, 698, 176, 1789, 1302, 161, 1234}], "NumericalThresholds" -> 
          RawArray["Real32",{0.929411768913269, 0.9764705896377563, 
            0.6078431606292725, 0.007843137718737125, 0.2862745225429535, 
            0.14901961386203766`, 0.43529412150382996`, 0.5803921818733215, 
            0.05882352963089943, 0.7019608020782471, 0.3333333432674408, 
            0.7450980544090271, 0.32156863808631897`, 0.24313725531101227`, 
            0.9647058844566345, 0.6823529601097107, 0.9215686321258545, 
            0.4745098054409027, 0.6666666865348816, 0.49803921580314636`, 
            0.019607843831181526`, 0., 0.545098066329956, 0.4313725531101227, 
            0.8588235378265381, 0.5098039507865906, 0.3333333432674408, 
            0.2980392277240753, 0.40392157435417175`, 0., 
            0.003921568859368563, 0., 0.5568627715110779, 
            0.003921568859368563, 0.8509804010391235, 0., 0.8470588326454163, 
            0.886274516582489, 0.250980406999588, 0.1725490242242813, 
            0.5411764979362488, 0.9921568632125854, 0.6509804129600525, 
            0.9843137264251709, 0., 0.7568627595901489, 0.8352941274642944, 
            0., 0.6000000238418579, 0.5058823823928833, 0., 
            0.2549019753932953, 0.4313725531101227, 0.3294117748737335, 0., 
            0.4470588266849518, 0.08627451211214066, 0.5333333611488342, 0., 
            0.5529412031173706, 0.09803921729326248, 0.0470588244497776, 
            0.3607843220233917, 0., 0.5647059082984924, 0.686274528503418, 
            0.16862745583057404`, 0., 0.5607843399047852, 0.03921568766236305,
             0.772549033164978, 0., 0.9058823585510254, 
            0.48627451062202454`}], "Children" -> 
          RawArray["Integer16",{{2, 41}, {3, 10}, {4, 9}, {5, 8}, {6, 
            7}, {-1, -2}, {-3, -4}, {-5, -6}, {-7, -8}, {11, 33}, {12, 23}, {
            13, 22}, {14, 19}, {15, 16}, {-9, -10}, {17, -14}, {-11, 
            18}, {-12, -13}, {20, -18}, {21, -17}, {-15, -16}, {-19, -20}, {
            24, 32}, {25, 31}, {26, 29}, {27, -24}, {-21, 28}, {-22, -23}, {
            30, -27}, {-25, -26}, {-28, -29}, {-30, -31}, {34, -40}, {35, 
            36}, {-32, -33}, {37, 38}, {-34, -35}, {39, 
            40}, {-36, -37}, {-38, -39}, {42, 60}, {43, 58}, {44, 56}, {45, 
            51}, {46, 49}, {47, -44}, {48, -43}, {-41, -42}, {
            50, -47}, {-45, -46}, {52, -53}, {53, -52}, {54, 
            55}, {-48, -49}, {-50, -51}, {-54, 57}, {-55, -56}, {
            59, -59}, {-57, -58}, {61, 66}, {62, 63}, {-60, -61}, {64, -65}, {
            65, -64}, {-62, -63}, {67, 71}, {68, 69}, {-66, -67}, {-68, 
            70}, {-69, -70}, {-71, 72}, {73, -75}, {74, -74}, {-72, -73}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 
            2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 
            2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 
            1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]]},
       "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], 
      "OOBConfusionMatrix" -> {{0.8614540436957926, 0.13854595630420743`}, {
       0.13854595630420743`, 0.8614540436957926}}, "Method" -> "RandomForest",
       "Options" -> 
      Association[
       "FeatureFraction" -> 
        Association[
         "Value" -> Rational[1, 3] 266^Rational[-1, 2], "Options" -> 
          Association[]], "LeafSize" -> 
        Association["Value" -> 5, "Options" -> Association[]], "TreeNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "Implementation" -> 
        Association["Value" -> "DAAL", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.40900050404115074`, 0.02696687407789964], "Accuracy" -> 
         PlusMinus[0.8552928351474105, 0.029585891903802664`], 
         "EvaluationTime" -> 0.0002171237113402062, "TestSize" -> 291, 
         "TrainingSize" -> 1165, "TrainingTime" -> 0.317636, "TrainingMemory" -> 
         33863288, "ModelMemory" -> 118160, "ExperimentCount" -> 1, 
         "ModelUtility" -> 1.0423172590616439`, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.40900050404115074`, 0.01906845952788656]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.8552928351474105, 0.020920384792631037`]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 1456], 
        
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 98191685268160]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6923873723018497, 0.007923414091095243], "Accuracy" -> 
              PlusMinus[0.6485148514851493, 0.0677596981602763], 
              "EvaluationTime" -> 0.00111006, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.079018, 
              "TrainingMemory" -> 2520336, "ModelMemory" -> 19320, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6141380495194823, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6923873723018497, 0.005602699833962491]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6485148514851493, 0.047913342060285]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6881982936791943, 0.0035989078888595282`], 
              "Accuracy" -> 
              PlusMinus[0.6345671128592486, 0.030445185955323847`], 
              "EvaluationTime" -> 0.00007495599999999999, "TestSize" -> 500, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.14319, 
              "TrainingMemory" -> 4025024, "ModelMemory" -> 19320, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6269829592398968, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6881982936791943, 0.002544812173078334]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6345671128592486, 0.02152799744349493]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6631130852652268, 0.0031599529813880903`], 
              "Accuracy" -> 
              PlusMinus[0.8028324226780609, 0.020074445109090188`], 
              "EvaluationTime" -> 0.000046826250000000006`, "TestSize" -> 800,
               "TrainingSize" -> 250, "TrainingTime" -> 0.221891, 
              "TrainingMemory" -> 14402616, "ModelMemory" -> 19320, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6507617477812455, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6631130852652268, 0.0022344241813701668`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8028324226780609, 0.014194776265194794`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000046826250000000006`, "MeanCrossEntropy" -> 
             PlusMinus[0.6631130852652268, 0.0031599529813880903`], 
             "ModelMemory" -> 19320, "TrainingMemory" -> 14402616, 
             "TrainingTime" -> 1.371311184], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[221.93493060013307`, 48.76703443975253], "Accuracy" -> 
              PlusMinus[0.6485148514851493, 0.0677596981602763], 
              "EvaluationTime" -> 0.00606801, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.139865, 
              "TrainingMemory" -> 2534928, "ModelMemory" -> 1456392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 
              0.0014272190648809643`, "MeanCrossEntropyHistory" -> {
                PlusMinus[221.93493060013307`, 34.48350075070692]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6485148514851493, 0.047913342060285]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00606801, "MeanCrossEntropy" -> 
             PlusMinus[221.93493060013307`, 48.76703443975253], "ModelMemory" -> 
             1456392, "TrainingMemory" -> 2534928, "TrainingTime" -> 
             2.1762994], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.530188333737312, 0.02900819952964131], "Accuracy" -> 
              PlusMinus[0.7698600690161556, 0.042382314228316315`], 
              "EvaluationTime" -> 0.00027615500000000004`, "TestSize" -> 200, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.045086, 
              "TrainingMemory" -> 1607088, "ModelMemory" -> 85920, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.8058604265019425, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.530188333737312, 0.020511894597421785`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7698600690161556, 0.02996882179322156]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4588043520291197, 0.03174775899166963], "Accuracy" -> 
              PlusMinus[0.812861867742706, 0.039317511686232334`], 
              "EvaluationTime" -> 0.00018923500000000003`, "TestSize" -> 200, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.065315, 
              "TrainingMemory" -> 7360960, "ModelMemory" -> 92256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.9285797787714337, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4588043520291197, 0.02244905567048578]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.812861867742706, 0.02780167913271621]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.40900050404115074`, 0.02696687407789964], 
              "Accuracy" -> 
              PlusMinus[0.8552928351474105, 0.029585891903802664`], 
              "EvaluationTime" -> 0.0002171237113402062, "TestSize" -> 291, 
              "TrainingSize" -> 1165, "TrainingTime" -> 0.317636, 
              "TrainingMemory" -> 33863288, "ModelMemory" -> 118160, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.0423172590616439`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.40900050404115074`, 0.01906845952788656]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8552928351474105, 0.020920384792631037`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002171237113402062, "MeanCrossEntropy" -> 
             PlusMinus[0.40900050404115074`, 0.02696687407789964], 
             "ModelMemory" -> 118160, "TrainingMemory" -> 33863288, 
             "TrainingTime" -> 0.44206283776824035`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8548111995729726, 0.051811394695999935`], 
              "Accuracy" -> 
              PlusMinus[0.7096759135081583, 0.01782572220502612], 
              "EvaluationTime" -> 0.000020504615384615386`, "TestSize" -> 
              1300, "TrainingSize" -> 50, "TrainingTime" -> 0.078702, 
              "TrainingMemory" -> 2568264, "ModelMemory" -> 5480, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4992539873461074, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8548111995729726, 0.03663618853227427]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7096759135081583, 0.012604689050721585`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020504615384615386`, "MeanCrossEntropy" -> 
             PlusMinus[0.8548111995729726, 0.051811394695999935`], 
             "ModelMemory" -> 5480, "TrainingMemory" -> 2568264, 
             "TrainingTime" -> 1.22460312], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5599596550697712, 0.03307240777310581], "Accuracy" -> 
              PlusMinus[0.7617187550844815, 0.016096858768306063`], 
              "EvaluationTime" -> 0.000047577524893314376`, "TestSize" -> 
              1406, "TrainingSize" -> 50, "TrainingTime" -> 0.014079, 
              "TrainingMemory" -> 2906440, "ModelMemory" -> 963912, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7622037282096943, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5599596550697712, 0.0233857238065298]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7617187550844815, 0.011382197990871354`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5273179316570503, 0.0794041407017436], "Accuracy" -> 
              PlusMinus[0.7634359924922148, 0.042407602795160995`], 
              "EvaluationTime" -> 0.000512295, "TestSize" -> 200, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.048855, 
              "TrainingMemory" -> 15404920, "ModelMemory" -> 4796144, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6561227092295211, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5273179316570503, 0.05614720634449365]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7634359924922148, 0.029986703510323925`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4462072903658372, 0.05367560881063468], "Accuracy" -> 
              PlusMinus[0.7825788160646365, 0.03438425868039557], 
              "EvaluationTime" -> 0.00023048453608247424`, "TestSize" -> 291, 
              "TrainingSize" -> 1165, "TrainingTime" -> 0.321151, 
              "TrainingMemory" -> 82528680, "ModelMemory" -> 22329352, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6446600463111362, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4462072903658372, 0.037954386974316176`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7825788160646365, 0.024313342478980114`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00023048453608247424`, "MeanCrossEntropy" -> 
             PlusMinus[0.4462072903658372, 0.05367560881063468], 
             "ModelMemory" -> 22329352, "TrainingMemory" -> 82528680, 
             "TrainingTime" -> 0.4154488334763949], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 98187390300864]], "MaxTrainingSize" -> 1456, 
      "LastReportingTime" -> 3.740470207015704`16.3255011890814*^9, 
      "PreprocessorEvaluationTime" -> 6.41650390625`2.*^-6, 
      "PreprocessorMemory" -> 22904, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.7882011917028208, 
          "ElapsedTimes" -> 1.93193, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.9852514896285259, 
          "ElapsedTimes" -> 1.383822, "ExperimentCounts" -> 4], 
         Association[
         "TrainingSizes" -> 250, "TimeBudgets" -> 1.2315643620356576`, 
          "ElapsedTimes" -> 1.296157, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 1165, "TimeBudgets" -> 1.539455452544572, 
          "ElapsedTimes" -> 1.608621, "ExperimentCounts" -> 2]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[98195980235456]], "ID" -> 98200275202752]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association["Type" -> "Image", "Weight" -> 1, "Values" -> {
             Image[CompressedData["
1:eJztlkuOFDEQRIuPEKdA4g6ILeIKwwkaaVghIQ0LxK05AjMLNi0Sd5BOR6Qr
agFT/ezIdP5cbz9/u/vy/DiO768f/7m7/Pj48HD5+enV08v95ev7d/cvHv98
en3z7DheHn+eXx+Ovz6j36//X7U/yyO7o/do/2z/V+tH68+Sf7X4ovrZ+Ff7
h+qrny/Lu9e/en2z9au585fT323+z9ZH7XefX2r5V/dvtn31+dVdX33+RuvP
0n9q8VPjo3iZm5ubm5ubm5ubm5ubm5ubm5ufgV8/o98jvdH+av1bz8nyr1p/
tX/RelV91P7s+KH2o/Uq+VerL/X+YdtXn4/q80X9fFnevf7V65utn+XOT05/
t/k+Wx+1v3t/qPdXd331+RCt7/r9U63Pnk/VvFv+UP9QfbX62E3/bP3drb/U
4teNj+Jpbm5ubm5ubm5ubm6uxq+f0e8jnVv3o/bV9KP1Vf5Vn49tPxtfVH91
/Vfrq58vy7vXv3p9s/Wz3PnJ6e8232fro/bdH2v9q9Z3f8y1rxY/9fpD9aP1
XfuDbV99/qnPD/XzZXn3+levb7Z+ljs/Of3d5vtsfdS+Wn+MOLt/1Otj9/pi
57/av2rOjp/7B7Pv/sH2q/HReczNzc3Nzf+HX6+L3rN6t/LV+tH6Kv+qz8e2
n40vqp+Nf7V/qL76+bK8e/2r1zdbP8udn5z+bvN9tj5q/2zzST2/u9cHO//V
/lVzdvzcP5h99w+2X52fPf6zz1/tX7ReVR+1rxY/9fpD9aP1XfuDbV99/qnP
D/XzZXn3+levb7Z+ljs/Of3d5vtsfdS++2Pu/u7+ofbV50O0XvX8Wc6On/sH
s+/+wfZ346u/b87+faR+fvX+RO2r9S87P9X66vEfcXZ+1OcDWx+17/tNSz/L
2fOFfT92m//R+q75H3F2/FwfOf/UObs+fL/Nte/vEy39LO82f10/mL76+dXv
Z9S+2v3Nzk+1vnr8R5ydH/X5wNZH7ft+09LPcvX5wr4/u90P0XrXx237o/Wu
jxr/uvHRec3Nzc2vH5X7I1rP0lc/f9a/6vij9mfHN8vZ+anW7xb/1fXdLX/R
+rP0p+vj3/uj9bvWR5az60P9+4Otj9pfHX/nr5bvPn93P1+1f9WcHT/XR86/
7tz301p99f7aff6s9o/9/aM+32bnJ7vf9Yfpo/bV6m/E2f6z5zuqH63voq9W
n93yr+bfbD7y19zc3NzcXIv/BhWusLA=
              "], "Real", ColorSpace -> 
              "RGB", Interleaving -> True]}, "ID" -> 2825882393954120476]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 9.836392, "MaxTrainingMemory" -> 112370192, 
      "DataMemory" -> 47049816, "FunctionMemory" -> 327464, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 13, 11, 30, 7.74329`7.641500511920553}, "Instant", 
        "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.74044275945702*^9, 3.740484607790729*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"414f3851-c718-4e6d-a6b7-7cb741ff04cd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", "Subsubsection",
 CellChangeTimes->{{3.74049251612216*^9, 
  3.740492516797566*^9}},ExpressionUUID->"82f0b565-2963-4102-8d8b-\
ae5ffc15bdf2"],

Cell["\<\
We must now generate test data, using the same parameters for generating \
random training data:\
\>", "Text",
 CellChangeTimes->{{3.740492518600354*^9, 3.740492531671315*^9}, 
   3.740492593467681*^9},ExpressionUUID->"c228db2f-4b1a-402d-b5d4-\
1ced545065e5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testrasterizedlengths", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"GenerateTable", "[", 
       RowBox[{"n", ",", "40", ",", "2000"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "5", ",", "50", ",", "5"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testrasterizedlengths", " ", "=", " ", 
   RowBox[{"testrasterizedlengths", "/.", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"a_", "\[Rule]", "b_"}], ")"}], "/;", 
      RowBox[{"!", 
       RowBox[{"(", 
        RowBox[{"b", "===", "False"}], ")"}]}]}], "\[RuleDelayed]", " ", 
     RowBox[{"(", 
      RowBox[{"a", "\[Rule]", "True"}], ")"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestRasterizedData", " ", "=", " ", 
   RowBox[{
   "CreateRasterizedTrainingData", "[", "testrasterizedlengths", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.740492652444018*^9, 
  3.740492717349554*^9}},ExpressionUUID->"3889074d-793b-467e-8ab4-\
611bc25d2295"],

Cell["\<\
The classifier can now be assessed for accuracy using this data:\
\>", "Text",
 CellChangeTimes->{{3.740492725870475*^9, 
  3.74049273875213*^9}},ExpressionUUID->"4b042287-67d7-4972-89fa-\
bac8b660fd33"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestRasterizeClassifier", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"RasterizeClassifier", ",", "TestRasterizedData"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740442924083684*^9, 3.7404429486635113`*^9}, 
   3.740492766457909*^9},ExpressionUUID->"7ea259cd-d3d4-4ecb-82ca-\
64ecc6cffbbe"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1454", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1454", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.8768913342503438235`5.622350657661005", "\[PlusMinus]",
                     "0.0086195460495198835`2."}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierMeasurementsObject, 47339072, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierMeasurementsObject, 
            6774636162098805970163010459816961427515784246234172060512, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  BoxID -> 6774636162098805970163010459816961427515784246234172060512,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.7404429514190073`*^9, 3.740484670521225*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"3fdd4e1d-76c8-480f-9471-22defb24cf21"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluation", "Subsubsection",
 CellChangeTimes->{{3.739926154534072*^9, 3.7399261574440002`*^9}, {
  3.740425882645151*^9, 
  3.740425883886059*^9}},ExpressionUUID->"247a8b39-30f4-4da0-8d07-\
eb7c9dd6d389"],

Cell["\<\
A machine learning solution to this problem is only useful if the accuracy is \
greater than 0.5 (i.e. more accurate than a random coin flip). We test the \
accuracy of the classifier:\
\>", "Text",
 CellChangeTimes->{{3.7404804162773867`*^9, 
  3.740480424066238*^9}},ExpressionUUID->"3dc812d7-143b-4b8e-acc0-\
641b0e24bf55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestRasterizeClassifier", "[", "\"\<Accuracy\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7404254412083387`*^9, 3.7404255039876013`*^9}, 
   3.7404928343358927`*^9},
 CellLabel->
  "In[137]:=",ExpressionUUID->"f10fe95c-8119-4210-852a-813f2b1eb5ec"],

Cell[BoxData["0.8768913342503438`"], "Output",
 CellChangeTimes->{{3.7404254478182898`*^9, 3.740425504304514*^9}, 
   3.740484368606769*^9, 3.740492835256495*^9},
 CellLabel->
  "Out[137]=",ExpressionUUID->"b0a9ae0d-dbdc-4f4b-a12f-ed78134fff56"]
}, Open  ]],

Cell["\<\
This is significantly better than the Markov approach (75.5%). We find the \
training accuracy:\
\>", "Text",
 CellChangeTimes->{{3.740480426158381*^9, 3.7404804523676147`*^9}, {
  3.7404928399365463`*^9, 
  3.740492870405649*^9}},ExpressionUUID->"6027ba37-4256-4c83-aa2c-\
f2788b9f6121"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "RasterizeClassifier", "]"}]], "Input",\

 CellChangeTimes->{{3.74048046502005*^9, 3.740480476598872*^9}, {
  3.740492888827693*^9, 3.7404928923651943`*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"6ca7a8ef-caad-44cb-9381-5acb5f918cdc"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Image\"\>"},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","False","True"},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"RandomForest\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 4, "InitialType" -> 
                    TypeSystem`Struct[{
                    "FeatureFraction", "LeafSize", "TreeNumber", 
                    "DistributionSmoothing"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"FeatureFraction"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {"LeafSize"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {"TreeNumber"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "DistributionSmoothing"} -> 
                    TypeSystem`PackageScope`AtomShape[60]], 1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1688945246], "Type" -> 
                    TypeSystem`Struct[{
                    "FeatureFraction", "LeafSize", "TreeNumber", 
                    "DistributionSmoothing"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1688945246]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"FeatureFraction\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"FeatureFraction\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 619162325][{
                    
                    Key["FeatureFraction"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.020438"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"LeafSize\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"LeafSize\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 619162325][{
                    
                    Key["LeafSize"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    GeneralUtilities`Slice[
                    Key["LeafSize"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["5"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    GeneralUtilities`Slice[
                    Key["LeafSize"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"TreeNumber\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"TreeNumber\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 619162325][{
                    
                    Key["TreeNumber"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    GeneralUtilities`Slice[
                    Key["TreeNumber"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["50"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    GeneralUtilities`Slice[
                    Key["TreeNumber"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"DistributionSmoothing\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"DistributionSmoothing\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 619162325][{
                    
                    Key["DistributionSmoothing"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.5"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 619162325][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    619162325]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    619162325][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "FeatureFraction" -> Rational[1, 3] 266^Rational[-1, 2], 
                  "LeafSize" -> 5, "TreeNumber" -> 50, 
                  "DistributionSmoothing" -> 0.5], 
                 
                 TypeSystem`Struct[{
                  "FeatureFraction", "LeafSize", "TreeNumber", 
                   "DistributionSmoothing"}, {
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real]}], 
                 Association["ID" -> 200248698163997]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "85.5292835147410528407`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "2.9585891903802665759`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.7961210513398051525`3.",
                   "\", \"", "0.914464618955015851`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.7961210513398051525`3., 
                  ", ", 0.914464618955015851`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.4090005040411507364`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0269668740778996399`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.3550667558853514705`3.",
                   "\", \"", "0.4629342521969500024`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.3550667558853514705`3., 
                  ", ", 0.4629342521969500024`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "6.17`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "735.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}],"examples per second",
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"332.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1456","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"9.83`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.367609693423152}, {
                    3.912023005428146, -0.6345229888824727}, {
                    5.521460917862246, -0.7791314080937941}, {
                    7.060476365999801, -0.894038890565643}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.5499312502171064}, {
                    2.302585092994046, -0.7117173337716884}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.367609693423152}}, {{
                    3.912023005428146, -0.6345229888824727}}, {{
                    5.521460917862246, -0.7791314080937941}}, {{
                    7.060476365999801, -0.894038890565643}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.5499312502171064}}, {{
                    2.302585092994046, -0.7117173337716884}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{2.302585092994046, -0.3791192898243484}, {
                    2.302585092994046, -0.3562310619075894}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -0.6907896932029304}, {
                    3.912023005428146, -0.5812542875328381}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -0.8508387381482128}, {
                    5.521460917862246, -0.7122237650066235}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.060476365999801, -0.9622466376975385}, {
                    7.060476365999801, -0.8301878592601866}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1231412524095123`, -0.9322474613259851}, 
                    PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.9232849570735592, -0.367609693423152}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, -0.9322474613259851}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.9232849570735592, -0.367609693423152}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6485148514851493}, {
                    3.912023005428146, 0.7698600690161556}, {
                    5.521460917862246, 0.812861867742706}, {7.060476365999801,
                     0.8552928351474105}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.7127440292895088}, {
                    2.302585092994046, 0.7782178217821791}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6485148514851493}}, {{
                    3.912023005428146, 0.7698600690161556}}, {{
                    5.521460917862246, 0.812861867742706}}, {{
                    7.060476365999801, 0.8552928351474105}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.7127440292895088}}, {{
                    2.302585092994046, 
                    0.7782178217821791}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1231412524095123`, 0.6318655549765511}, 
                    PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {0.6485148514851493, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, 0.6318655549765511}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {0.6485148514851493, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.367609693423152}, {
                    3.912023005428146, -0.3736782650185261}, {
                    5.521460917862246, -0.4108097373301025}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.402384233503689}, {
                    2.302585092994046, 5.402384233503689}}]}, "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.6345229888824727}, {
                    5.521460917862246, -0.7791314080937941}, {
                    7.060476365999801, -0.894038890565643}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.15687465364242653`}, {
                    3.912023005428146, -0.15687465364242653`}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.5798905423665388}, {
                    5.521460917862246, -0.6399516264677871}, {
                    7.060476365999801, -0.8069716583322483}}]}, 
                    "NearestNeighbors"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1231412524095123`, -1.3510373431190625`},
                     PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-1.2438401752361614`, 5.402384233503689}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, -1.3510373431190625`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-1.2438401752361614`, 5.402384233503689}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.367609693423152}, {
                    3.912023005428146, -0.6345229888824727}, {
                    5.521460917862246, -0.7791314080937941}, {
                    7.060476365999801, -0.894038890565643}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.5499312502171064}, {
                    2.302585092994046, -0.7117173337716884}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.367609693423152}}, {{
                    3.912023005428146, -0.6345229888824727}}, {{
                    5.521460917862246, -0.7791314080937941}}, {{
                    7.060476365999801, -0.894038890565643}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.5499312502171064}}, {{
                    2.302585092994046, -0.7117173337716884}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{2.302585092994046, -0.3791192898243484}, {
                    2.302585092994046, -0.3562310619075894}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -0.6907896932029304}, {
                    3.912023005428146, -0.5812542875328381}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -0.8508387381482128}, {
                    5.521460917862246, -0.7122237650066235}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.060476365999801, -0.9622466376975385}, {
                    7.060476365999801, -0.8301878592601866}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1231412524095123`, -0.9322474613259851}, 
                    PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.9232849570735592, -0.367609693423152}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, -0.9322474613259851}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-0.9232849570735592, -0.367609693423152}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6485148514851493}, {
                    3.912023005428146, 0.7698600690161556}, {
                    5.521460917862246, 0.812861867742706}, {7.060476365999801,
                     0.8552928351474105}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.7127440292895088}, {
                    2.302585092994046, 0.7782178217821791}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6485148514851493}}, {{
                    3.912023005428146, 0.7698600690161556}}, {{
                    5.521460917862246, 0.812861867742706}}, {{
                    7.060476365999801, 0.8552928351474105}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.7127440292895088}}, {{
                    2.302585092994046, 
                    0.7782178217821791}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1231412524095123`, 0.6318655549765511}, 
                    PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {0.6485148514851493, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, 0.6318655549765511}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {0.6485148514851493, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.367609693423152}, {
                    3.912023005428146, -0.3736782650185261}, {
                    5.521460917862246, -0.4108097373301025}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.402384233503689}, {
                    2.302585092994046, 5.402384233503689}}]}, "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.6345229888824727}, {
                    5.521460917862246, -0.7791314080937941}, {
                    7.060476365999801, -0.894038890565643}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.15687465364242653`}, {
                    3.912023005428146, -0.15687465364242653`}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.5798905423665388}, {
                    5.521460917862246, -0.6399516264677871}, {
                    7.060476365999801, -0.8069716583322483}}]}, 
                    "NearestNeighbors"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1231412524095123`, -1.3510373431190625`},
                     PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-1.2438401752361614`, 5.402384233503689}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1231412524095123`, -1.3510373431190625`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.2009348249172582`, 
                    Log[1456]}, {-1.2438401752361614`, 5.402384233503689}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{413., {145., 152.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> ".SF NS Text", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.740480479288734*^9, 3.740484053814513*^9, 
  3.740484374850007*^9, 3.740492894281199*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"2f56bc5a-8f64-4604-a3c0-91ba527036b4"]
}, Open  ]],

Cell["\<\
Again, the training accuracy (85.5%) is slightly lower than the testing \
accuracy (87.7%).\
\>", "Text",
 CellChangeTimes->{{3.740480487527821*^9, 3.74048054139643*^9}, {
  3.740480712883862*^9, 3.7404807566618834`*^9}, {3.74048438222314*^9, 
  3.740484475605577*^9}, {3.740492899699745*^9, 
  3.740492929291198*^9}},ExpressionUUID->"f06a33d2-4abd-4280-b897-\
7b15a9b78f36"],

Cell["\<\

We calculate some statistics from a confusion matrix plot:\
\>", "Text",
 CellChangeTimes->{{3.740481118419588*^9, 3.740481125740654*^9}, {
  3.740481941746729*^9, 
  3.740481949060005*^9}},ExpressionUUID->"e7e1cabb-b7b0-4bbc-baa1-\
11ec71f5e416"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestRasterizeClassifier", "[", "\"\<ConfusionMatrixPlot\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.74048030887759*^9, 3.7404803158249598`*^9}, {
  3.740480368583826*^9, 3.740480373958458*^9}, {3.740492942332121*^9, 
  3.740492943667424*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"177bda84-cdbd-4479-af51-861eb92cce74"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9122204896165094, 0.7861350758258243, 0.4539659817078387}, {
   0.9284479065772407, 0.4910780045505777, 0.0035623785339255662`}}, {{1., 
   0.42, 0.}, {0.9349711002221015, 0.8727168935895026, 
   0.6763104692608711}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["668", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "668", "\" examples of \"", "False", "\" correctly classified\""},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.8477157360406091`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9188445667125172`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.8818481848184819`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{668, " examples of ", False, " correctly classified"}], 
         Row[{"Precision = ", 0.8477157360406091}], 
         Row[{"Recall = ", 0.9188445667125172}], 
         Row[{"FScore = ", 0.8818481848184819}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["120", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "120", "\" examples of \"", "True", "\" misclassified as \"", 
             "False"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.15228426395939088`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.16506189821182943`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{120, " examples of ", True, " misclassified as ", False}], 
         Row[{"Column fraction = ", 0.15228426395939088`}], 
         Row[{"Row fraction = ", 0.16506189821182943`}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["59", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "59", "\" examples of \"", "False", "\" misclassified as \"", 
             "True"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.08858858858858859`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.0811554332874828`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{59, " examples of ", False, " misclassified as ", True}], 
         Row[{"Column fraction = ", 0.08858858858858859}], 
         Row[{"Row fraction = ", 0.0811554332874828}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["607", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "607", "\" examples of \"", "True", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9114114114114115`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.8349381017881705`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.8715003589375449`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{607, " examples of ", True, " correctly classified"}], 
         Row[{"Precision = ", 0.9114114114114115}], 
         Row[{"Recall = ", 0.8349381017881705}], 
         Row[{"FScore = ", 0.8715003589375449}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "727", "\" example\"", "\"s\"", "\" of class \"", "False"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9188445667125172`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{727, " example", "s", " of class ", False}], 
        Row[{"Recall = ", 0.9188445667125172}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "727", "\" example\"", "\"s\"", "\" of class \"", "True"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.8349381017881705`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{727, " example", "s", " of class ", True}], 
        Row[{"Recall = ", 0.8349381017881705}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "788", "\" example\"", "\"s\"", "\" classified as \"", "False"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.8477157360406091`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{788, " example", "s", " classified as ", False}], 
        Row[{"Precision = ", 0.8477157360406091}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "666", "\" example\"", "\"s\"", "\" classified as \"", "True"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9114114114114115`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{666, " example", "s", " classified as ", True}], 
        Row[{"Precision = ", 0.9114114114114115}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["False", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["True", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["727", TraditionalForm]}, {0.5, 
       FormBox["727", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["788", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["666", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["False", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["True", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.740484477669931*^9, 3.740492944128736*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"6ad47671-84e1-4f28-8a89-4d5c3747dcc4"]
}, Open  ]],

Cell["\<\
Accuracy: 0.88
Misclassification rate: 0.12

Precision (halt): 0.911 (when \[OpenCurlyQuote]halt\[CloseCurlyQuote] is \
predicted, how often is it correct?)
True Positive Rate: 0.83 (when the combinator halts, how often is it \
classified as halting?)
False Positive Rate: 0.08 (when the combinator doesn\[CloseCurlyQuote]t halt, \
how often is it classified as halting?)

Precision (non-halt): 0.848 (when \[OpenCurlyQuote]non halt\[CloseCurlyQuote] \
is predicted, how often is it correct?)
True Negative Rate: 0.92 (when the combinator doesn\[CloseCurlyQuote]t halt, \
how often is it classified as not halting?)
False Negative Rate: 0.17 (when the combinator halts, how often is it \
classified as not halting?)\
\>", "Text",
 CellChangeTimes->{{3.740481965344619*^9, 3.740482005064703*^9}, {
  3.74048203786355*^9, 3.740482194837697*^9}, {3.740482545989325*^9, 
  3.7404825480857058`*^9}, {3.74048871664889*^9, 3.740488727668037*^9}, {
  3.740488844654306*^9, 3.740488893183358*^9}, {3.740488949325603*^9, 
  3.7404889647214746`*^9}, {3.740490179309887*^9, 3.7404902036602287`*^9}, {
  3.740492954027843*^9, 3.740492960293948*^9}, {3.7404930221539497`*^9, 
  3.740493022921912*^9}, {3.7404932765426407`*^9, 
  3.740493302199884*^9}},ExpressionUUID->"b4445efa-a092-4a56-8fe8-\
56815d528d4b"],

Cell["\<\

A confusion matrix plot shows that the false negative rate is larger than the \
false positive rate - this would suggest that it is easier for the model to \
tell when an expression halts than when an expression does not halt. The \
precision for halting is much higher than the precision for non-halting, \
indicating that if the model suggests a program will halt, this is much more \
likely to be correct than if it suggested that the program would not halt. An \
(oversimplified) way to look at this intuitively is to examine some graphs of \
lengths of random combinators:\
\>", "Text",
 CellChangeTimes->{{3.740480303697596*^9, 3.7404803048488493`*^9}, {
   3.740480763568055*^9, 3.740480777928233*^9}, 3.7404808421223917`*^9, {
   3.74048118984022*^9, 3.74048123207508*^9}, {3.740481266257896*^9, 
   3.740481268218774*^9}, {3.7404816419984417`*^9, 3.7404817276733637`*^9}, {
   3.740482239367524*^9, 3.74048225580508*^9}, {3.740482286891347*^9, 
   3.740482299804778*^9}, {3.7404823299509563`*^9, 3.7404823398463297`*^9}, {
   3.740482497070096*^9, 3.7404825157105103`*^9}, {3.7404825514065247`*^9, 
   3.740482684152157*^9}, {3.740482831103426*^9, 3.740482938054487*^9}, {
   3.740488974022978*^9, 3.7404890002081623`*^9}, {3.740490223199986*^9, 
   3.740490224097994*^9}, {3.740490273595742*^9, 3.7404902769280663`*^9}, {
   3.740493326548024*^9, 3.740493383875936*^9}, {3.740493499818809*^9, 
   3.740493511258025*^9}, {3.74049359870429*^9, 3.740493608611581*^9}, {
   3.7404938286169024`*^9, 3.740493851851193*^9}, {3.740493917741997*^9, 
   3.740493928343852*^9}, {3.740494045609345*^9, 3.7404941693341703`*^9}, {
   3.740494239405951*^9, 3.740494524697042*^9}, {3.740494580575441*^9, 
   3.7404945821004763`*^9}, {3.740494636025722*^9, 3.7404946435585203`*^9}, {
   3.74049470727455*^9, 3.740494734437091*^9}, {3.740494788843498*^9, 
   3.7404948011901217`*^9}, {3.740494978163795*^9, 3.740494999579287*^9}, {
   3.7404951824789057`*^9, 
   3.740495201990266*^9}},ExpressionUUID->"0e5eb5ec-7c1a-4557-be12-\
5d5121a43512"],

Cell[TextData[{
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
/fcXVPgVY8K9QMaBS57Glwfr1NTU3GMz9jyi6y4cPduiPt1TqfMBvHoeO1ER
y2F51dwxdhkeDat/fV2m/v3tef13a5UfJGcp+pkttfaXFblU8m9Pjqfcp3Yi
YrZzDI+F9d/b7j+uLPj8sUDse4HkJDmR1LaQ9pU3Lv5eRPx3knONnaS+leyn
oWXh3BjAK4jpAF7ll9M39DWxU/OKnciO+qLxvtaimjuWbRMA/Cbd170f7rqg
Nh+oTes+AcCN/NIvIeN65T7GB9+VG/l+dX2m7reVfZ2tXU8cfR8DQGr8Ep/T
Idk5G2a/X/ro3s4t0XFXtiU1DaQGx1LE7z8fP3d7yW1wi/FwROeoSN2Jxcxb
I/dZvUr+1uTzltyFdNt34potY+SDoVF9X3zbkcXXNJP5WqyYy0iu396LXst9
srsy6W3YiTmvnEXG87yde3bedb/MqSIxXOomOZXkYCz1XCH1ft7ZUmpjq2Li
87RcaOq2fV+AScR0AK/y1aGLKvvb86ab4Sp2xNPB4dg1U8F5736/BgC7pft6
9397q1XOT1Vp3ScAuJGf+iPi981OV6c/L7usoVPvW2r7WeX+oyG9zbMXOy3b
JgDn8FN8Tofex8/U+zvO6XvPNYuYH1fuU0t8/XR3ZazWxsYitfVwvc7DSyUP
UPr6pA2vq18gdSvk/v9S6xyYdrDwhj5e1deYg3ho+Lk+Fr+dbUnrfmXOBdnv
nj8Xrj2QqiMlzXr7N++8em4HuU++7+S1xBxDz0aep7zvk5XtsbyUDufN3UDM
dpaKpth1/5XWufV9Kq/cd0WMknxDqXezWDKGSWpD2a0nei6V41dcd9f2fQEm
EdMBvMq/d55Xub9eNN0MV7Ejrsr3DbkuOVx80/JtA4BfpPu6V2r1rv++PK37
BAA38lO/hMydLvl9Mn7a7trCLzo6c69D6oBYJTQ4prf514U2y7YJwDn8FJ/T
ReLmxz9W6FoAJS/ce5LzQu31B/p+s8w5EZ8fRXI+/ihvVY8Hkq8bMJvUeF21
uVh9tq963twiQvYj+5P9yv7lHl7tIvJNnCBeb2LXEu45ep18jjl7KnXeT7LL
6/IkZguHJ3WtMakvMGRBvsRCJA/jna/O6vEScm21kODAiL7mkr+Hn/66qttl
BZkXRuZD2nJ48fU/0oWY7SzydyrzOO09cXXO+v9G/25XbytzfL1zOVfJeWIx
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
w2n5G/Q/A4DzmI7Lcm2QE71+KDh/m4WFhcXRi/ThpJPp+AwAWBj9GwDgHsRq
AMkaHQ+rwuoOtWZ7IFHz7UztndeOP0dqZl9rs7CwsLD8vdgVcwEAzmM6Pmd9
ddZ4zW0WFhaWxSzU5wcACOIzALgHMTt5HLvUcPxS46TjF4lMqQtN3eqjXRd0
38A7X53V87HI3CoyJt5pnHTsrLbQ7yafwcafa9RnP1fPX/bFlg0zy//2Lm2R
mgWzFxmD+OmeSvXp7kr1SXSReSWWunyyiPfGX/PprOXF90ldmFctL91etP05
8WXm94r/vvp4RY/bxv016vPoInMIyaKP78zxm30M9P9f2Nbs7b24bFhg+5sP
xJZNs5b4fjfNPCfzenwZXXJ/leWifhxvl2xX2rDUYxI/Lp++eFxedkx+nttm
aYPU8NlyuF5tPbLwsi26fH20QW3/7ZLa8fsltfPYZfV9fqOuifHjH1fUnj+v
qH0nrum5S6RWxqEzN9WRkmb129kWlVd2S9fQkPFkf5a3qhMV7XpcWcnFu+rc
pXt63pPa6w907Y1r7UF1694T1dk7qHqCz/S/iWcjz1VkkppBeD0vnzMAwM1M
x2e5lpA6YCwsLCxOXyRepZPp+AwAWBjxGQDcg5idPI5dajh+qXHi8ZuenlaX
b/Xpe8+zx3q8s6VU38uV+aFlnhWZc0ByPkxx4rGzipd/NwAwgbiaGo5f6jiG
qeMYps6Jx9CJbXITjl/qOIap4ximzonH0IltchOOX+o4hqnjGKbOicfQiW1y
E45f6jiGqeMYps4txzCVdqb6O/J+3s/7zbw/HfsOhkb1uPeC8616XP37O84l
8jnk/cuj/5ex/TK+XuZcuXmnX48LcUr73crLvxsAmEBcTQ3HL3Ucw9RxDFPn
xGPoxDa5CccvdRzD1HEMU+fEY+jENrkJxy91HMPUcQxT58Rj6MQ2uQnHL3Uc
w9RxDFPnlmPo9HvAvJ/3837r329q38NjYXWrs1+/X+ZEkHkYVm4qnlOrY832
gJ5PQeZIkDlYFlrk/S97bjHLYt/vRm459wCAW7j5fO+F9zuhDX5/vxPa4Pf3
O6ENTrzGNP07+f39TmiD39/vhDb4/f1OaAPxmfc7sQ1+f78T2uD39zuhDcRn
3u/ENvj9/U5og9/f74Q2OCk+S1tYWFhYWKxZAAD+kWrc5/18r3P7+53QBr+/
3wltcOI1sOnfye/vd0Ib/P5+J7TB7+93QhuIz7zfiW3w+/ud0Aa/v98JbSA+
834ntsHv73dCG/z+fie0wYnxeSFuaScAfxl7HlGj4xNGFzhXaGxKrctekfh5
NKLUypn8mrLCPIMts0dPaFhlzvx+u3fmRtdM6/V5hWUzeUUrlYqMmW2kDXbs
PTjz+y1XanJcr/P6Zx1X2nBT1QTyEz939IQSOWShng6DLbNH5dXbs/LklkfX
TOm/8vdzNuh1G3L+reJ/93YwnRfIwsLC4vWF+MzCwsLizIX4zMLCwuLMhfjM
wsLC4swlXdK5LwAAUtUbGtHnrg057yXWrchep0I9bfru7rLoc5Mj/eYaaIPl
0d/p+dAj/fij3G2q7WqF6hsKR4/DMiX3tNt6QnPyWbygsb03+vv9n358sysY
/f3e0o+9/lmL6Eer/8Ybq07rnyPRJSMrU+ewjE8qlZmVoSS/wUvkcx0LPdSP
I5GI/n9BoEYVFuzXj/MKz6naWfks6cS1MgA4E/EZAJyJ+AwAzkR8BgD3IGYD
ANxC7tl/lPOhulDVkMhXkLvYsfvZsbH5p6oaVV2gwFgb7dDafjvxeHdBkf79
8gO1c+5n6/v7HrqnH5FfZfK5fiz5KZKv44fPWki+zpnCUlU987sFRyaj12v/
SDz/VvY6FR7qM9U8W0hNlf6eB+pe193Eun/o/Jygftw/puYcg3TiWhkAnIn4
DADORHwGAGciPgOAexCzAQBuMxD++16u3NNfk52ZeK5vaEIFCg8Zapm9enTt
kejvOhVW+YFqNRy8k3huVfYa5aX8jbg9h4/pa5W2q9W++Ky37T2k+ruuq4GI
SsyfIvkbpwr2Jl5zqLBMTXgof2N0MnY9erGqXJVXXYxdm05NqbU5OSpWfST2
l73WUI0ZrpUBwJmIzwDgTMRnAHAm4jMAAAAAu4TG5uZvZOh5RGK6Q+Oeu6cv
iqsaor/zSp27IWRuidn5G8s8OKdGnNzBz8zK9PxnHfu7zlLtLc3qt4JTakPO
h2p0KKh6hsKqsGBf4nV7o895KX/jRXsLClVXS5Nalb1WxfM35L9rs1cZaQ/9
GwDgTMRnAHAm4jMAOBPxGQDgVaGxqUTNfjEaidX8lnNfWWGewZY5W3hKqXez
1+njlJW1XKnImF7f0ROaWZelQj0dZhvpYI+GxlXmzHGqCpxIrM8rLJs5fisT
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
g+XaFQDiWSj1n9eq5SzM7t+QOUWfHspSh6+VmtoOALAas/M5ljp6hxjLByBq
/uLL07MnDqnGxla1Zfs29aQgR18zJ+jrZL8O9+Si8RuprqJFYzI2+K67Z1c4
Zrl9qb8BYDXf/lys9pzOW/Z3FXX+ca1PX/XEtlEGuzNfa7N/cOkaMdFidt7+
9MdztfnbB4bWypA1xD87kq2+vlBo2DkBINZiMZZ5dnZOJXyXqcdIAgBCY1Qu
d/X51/3LKG5ee2cAcKhQ6z+vVctZmN2/Ic6kPlNb92dQDxQAFrBCPsfK5NQ0
a3sDiJqhsXHV19en3vT1q78lJqr2xhq9/a+Ssx7/uk27k4+o9tr344nruwbV
3qTP9Ht//Y5NKx6z0r4B8ZTnAELzzx9zVfIvJcv+rs89rq+LZA1pO5OxDJt8
/w55nhYrZuZte++QHmfxzaUiw899K7tO/020dQ8afm4AiIVY5fOBy8Uq8YdH
MfksAHACo8bXjU969PXqrw9rDWoZANjLeuo/r1XLWXxYz9mM/o7CF691tlfW
v4n5ZwOAVcXb876/H81Wx26Umd0MAA63Q49/9j9L7B+bDl7/nj2xf8m+x89f
Cf7eO+Ze9Zjl9g2ItzwHsLZt32WqM79XLvs7qVGZcCBDz3OwM3mGtutEbkw/
04y89XpndK0Rqbsh/91KXhpfM1rG9Hy0L139fP+l4ecGgFiIVT7Lc0PpY47l
2l0AYGdG5rPc45y6TQ0kAPFpPfWf16rlLKzQnzw0Oqn7In5JZ941AARYIZ9j
ad+lIrXnVJ7ZzQAAw8VbngNY3cSUd825af87X6j+c/ZxDFtlvH8cz1HJvzyJ
6WdGkrdzc3O6hsZ66oK2dg/p/07y3/O7KyWq991o2J+/lsPXS3Wf+PjkdNQ+
AwCiJVbXwzKGTjL5eQNzBAEgFEbms/TryjqRABCP1lP/ea1azsIq/cnSPxXr
uTkAYGVm1kUyw7k7lXotLek7BwAniZccBxCanv5R/WwpvWjltaFl7RGp5+Cd
mYlhy4wj7d74Tbq68OeLmH7uevNWrjsbOtzq18waPd5E/rtIDY0fUyr0M0AZ
a7Mcz7RX3XK90v9GGVPhKm+L+jVseW2Pbl+O77MAwG5idT0s4+gkK//Ia4jJ
5wGAGU4sqP/5rqtJb3NPzKptC/qSvWP9evvNtOz5bVt8F+kTS85lZD4fvPpE
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
eQsA9uT2fG5+0yNVDe1sbGxsIW9PGzsszS+35zMAOBX5DAD2RD4DAAAAy0f9
GQDsiXwGAHsinwHAnshnALAn8hkAEG12JCbJSG/b9NeX03Mm5yLcIOIfNFgy
e/L6+iR2cq7GY8mJgWcm9PPct8W97R2avm9FnmvTz3Pflie7vFpKPKnTX9vp
vlF/BgB7Ip8BwJ7IZwCwJ/IZAOyJfAYARIvxwPZ1YpJ+7fP3t+vn2npHAl+v
EdUnod7rk23x642W0Y7WBe7XcO9b/Vj1fal/VMB9WwZ130Ym79tHqr416OO+
LVPgNum/04qim/pru9036s8AYE/kMwDYE/kMAAAAAACAD2WXP5ayonz5OC5O
xvqD6/2mekqldMYY/5i4WAn29MCUuoZn04+PpWXIXU8a920Zevv7ph+vCfzO
jQ/6uG/LpPq+3ErPluLA75rCfQMAAACci/4bAAC3ULMSr4uLkal2KfX15wk7
9WvdzoQvZGreYswvv/zx5Py6ar7i6/o57uHKHDxxdvIerhMZG9LPDfhFNkze
15z0y2YL6BDqt2yDmud58m+Ze+h85HNoyOfQkc/hQT5Hr7Xx22b03yiWvvYX
09/bGL9F+Fx4fl5ff+DvIzZwe0a4b8uk5pGIncpr8XPfliHpRIp0NFdJVyCT
p9ZP4b45H/Xn0FB/Dh315/Cg/uw+5HNoyOfQkc/hQT67D/kcGvI5dORzeJDP
7jI8FhxzFDfj3zTNUyLpaaf148vpubPGH2G2gTHVp1O9to1K4E9B30sZ6eUe
rkBFQ2vgHv4//bi6uV22xa/Vj9fHbxOft15nzpoZY1exsO+Sj03+Pgb/lrmH
zkY+h4Z8Dh35HD7kc/RaP6P/hsqfmZ8Lr5nxO4G/ZRaVB1/7xkf019y3lUnz
lEpeegr3bQm+weDYvIbaGrmYdkN2JnwlA73t3DeHo/4cGurPoaP+HD7Un92F
fA4N+Rw68jl8yGd3IZ9DQz6HjnwOH/LZXXYnJ0v1o+pZ/6b/0P+OwXW6O3S7
1j8MltDeRgPbG2/T9Nd6vuL+bu7hCvjVr93YsH6s1pjembBZ/ybG6t/JYL/E
G0UVev5sLKystkmSEr+VHQlfi/pb5h46H/kcGvI5dORzeJDP0W1m/406b3fg
72iTfqz6wAfnScBMh89dDdyjz2Xm2BTu2+LUnYrRcwQH8/r8ZNsQ921xY4Ht
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
G9a1ivWJFl97YqwGALCN19rPipo7P3NLsYRHmaMegLN4MbMXQq2Xotr5dU9e
6q8HBkdk075Kve+vCw/1vvvPXumv1VreNlLjC/+5tURyGV8IJF1PaERGQtF1
VNVYjaysTL0id6Zemzu6ptXp8hq56sufch6ZOze1dorKVbWWCgDYgNxOriet
XdPGRAPAUngtnw8W1er8DA2FTZcCAHOyIZ9j67Pmn2d9VgCIsWF8Xbqduxad
o/7R8y7TpQDAongpqxfjUHGdznU190bM4HBYth6s0vsPn6uXynut+nHt45cG
K53bjqM35N2cYr0eDIDUWLN+g5QVHNbjN1ZnZ8b3twdHxFdwYMqxZO7crk7k
6h3WqAVgCXI7udT4YjXP0ub9V02XAsDhvJbPsfVRn7Z1my4FAOZkQz6Hw9E1
r/eduWu6FACwhg35nG5N7T3cQwLAkbw45m4h1LqyM63NPTwSlu1HruvM/2h7
mf7/1pe9BipcmOKrT3SNjxlfCCTd4KjI8kh2VvhO6q/V+I2MrGXx7zcHBmcc
v/HmhtdUnrLuEwCbkNPJt/vkbVkeyXo1vx0ALJXX8vneI79uJ6vxzgBgM1vy
+b2tJfL98RrTZQCANWzJ53QaGxuT974+J9sOXzddCgAsihczez7qvsCsSKar
tbFmotbK+jH/pu47ecfyvudnbd26xrOVjC8EkmkgHM3PoL95yv63VKYOB/Xj
dTm50lQ/df0iMnduqk2dsblIdp64aboUANDI7eSrrm/X7dOqujbTpQBwMK/l
88uuAZ2df19sMF0KAMzJlnxe98MF5nwDgElsyed0++7IdT2GQ/U7A4BTeDWz
59Lxqk/3i5y8NHu/iMr6PafuSOaW4jRWtniqTjUWRb1HAUie3N0H3phHY6Wo
GTg6+0fi+3blbZp2Hpk7vy9/rZBPd140XQYAaMyXlHxq7LOaf2PPyTumSwHg
YF7LZfXZftWmItn15y3TpQDAnGzJ5417r8i/f7pkugwAsIYt+Zxu6t5mdb3v
GesQAnAQr2b2XGL3BN562DHncWqejpKqp2mqaum2Ha7WcwYyvhAwj8yd376C
e/LOxkIZHLJ3biMA3kFup4Zaq/DDb0t1exoAlsKL+ayuQ27YU2G6DACYky35
rO5l+1ekvQkAiLIln9PtSWuXvt5XfPWJ6VIAYMG8mtlzOe57oPM8EAyZLiUp
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
ciRdVwmOPDXS0+Tfvi1mlzKqfkN882uW+ulyfsDPBwCsD+fPAEJp7+lszvUA
AACACCNzenv3fauyc4v9833ruX9wuX3ns/r4xi93S1X00bQNHaNv0LsGy9/P
GgyKCoDdDY1Pqalx7xq3kmGjo73zgntj41RlcZ7q6Oz03/8dqfkZgL3IeZKc
L3X2vjc7lDVzK8m13pwbpevovNqcE7p+I9GRv6B+Y5POy4vrNz78WKvTf5ap
qCOpamZmZvWdAQAbxvkzgFCR87uth1LUhb9emB0KAAAAABMMuGQc4l/68Xru
H1xu3/msPr7x9S9P1eErBRs6hvS3lvmI22k1BkUFIJJ8uW+/yky6rR//nyen
Jty4rKpr6vU6KoOd9RvKz4HOGQKA0U7dKdE1s7Ozs2aHsqJHueUqOfGSfuyt
34jSjz+SHOoa1o/3xMap1poiVdc5qPbv26m3yZpWvl5K820k9z7Oa/LWvPRY
p+YFAKyM82UAodIzMKrP8x7mcC8YAAAAEImc4wvrN9Z6/+By+85n5fnBkXFv
3cWNlI2tKy7zELKe++9/vzQoMgCRYGJaqc2enJk3t17Kh9o8yTsuds+G8jMA
hIsvTmSoYzeKzA5jVZJfv9m3X/dFkjz6trVWb+8bnfKf656LP+Tf/9TFq/7t
7lHnouNtJBdXNvZYas0ZALA6zp8BhEpVU58+zyt81Wl2KAAAAABM0DM67a/f
EOu5f3Cpfeez8vjG62bvtdKzio2PiX9+PF3F3ys1ICoAkcCbZ6PVcE+bf5vc
kR6lc6p33ZSbSZkqK+l6ROZnAPbSO+Bday7xaa3ZoYTcRnLxyJhL7Tiapj47
lq6auwYNjAoAsBTOnwGEiqOkRZ8fN3cNmR0KAAAAABP0jc+o3TFb/vl8HfcP
Lrevj5XHN1IL3+hrpZbujV8rffNrloq9VmhAVAAiQdzF6x/0Ltqq5K7vyoZ2
/bmsnRIX+z/lreqIvPwMwF6eV3Xpc66KurdmhxJyG83FbzoH1I5j6bqOo6lj
wKCoAABL4fwZQKjcSqvR58djE1NmhwIAAADAZqw8vnH6zzK17XCKcrunN3ys
Hy7mqX3nnxkQFQAYw8r5GYC9+Manh0YmzA4l5IzIxdJ7Q3pwRB9NU43t1HAA
QLBw/gwgVH6+U6J2xmWYHQYAAAAAG7Ly+MZXpzLV4SsFhhxL1nP/+penhhwL
AIxg5fwMwF4O/lGgvo6PzPMko3Kx9IuT9fo+jU1TDW1OQ44JAFhofn88AAim
vWey1YHL+WaHAQAAAMCGrDquMTA8ru8DvZdhzDrspxPL9T2RABAurJqfAdiL
e3pa9zs74zlXikRG5uLWt0P6Ps1PY1NVXWu/YccFAHhx/gwgFGZmZtTWQynq
wl8vzA4FAAAAgA1ZdXyjuNq7DnvZa2PWYf/j8Sv1yYFkNTs7a8jxAGCjuH8Q
QDiQtT/knCu18I3ZoZjC6Bzc/m5Y13BsP5KqaltWruGYmZnV+0vdMgBgdZw3
AwiF3oExfX78MKfe7FAAAAAA2JBVxzduz63DPvjemHXYpY+HHG90fMqQ4wHA
Rlk1PwOwF0dJiz5HitQ1P4KRizt6htW/T2SoqCOpqqa5T2+TPifSnyOnok1d
f1Kl+3FHHU7R3/vYa4WGxwAAZoi/eNVfn9zf2ai3jbmV2jq3LSPprn/fu0kZ
c/tu9STJ8RX39eH8GUAoVDX16XO0wledZocCAAAAwIasen/3T5fzDV2H/XFe
k7726nGOGXZMANgIq+VlAPYkfaG3HHyiJqfcZodiimCdK3f2vldfnHToGo0f
L+WpbYe8tRry8fGBZPXNr1nq9J/lKv5eqd6WU95m6OsDQKiVNXSr3TFb9OPB
8RlPXt2sH2+J2a2cnfVKOmFu8uTa6dE+1T3s8nx9k2fLrKrvdPqft9S+83H+
DCAUMufqm990DpgdCgAAAAAbsuL4hts9rce4z96vMOyYmaWt+tqruWvIsGMC
wEZYMT8DsJ+9p7PVDxfzzA7DNMHMxd1979VXpzL191jOa1MKmnQ/jrGJf/rB
uabcas9v2eqzY+lqaMSYvnMAYIah8Sk1Ne693pb6i+jo7WrG8+/26Ki5LUo9
yi1ThY5EleAoUAWOBP9zo1bYdz7OnwGEwq25nsAj4y6zQwEAAABgQ1Yc32hs
H9DXSelFzYYd83lVlz5mVVOvYccEgI2wYn4GYC9SRyC9IK4lV5kdimmCnYtn
Z2dX3ed1c5/+OZxNLA9qLAAQKl/u268yk27rmoxdMdv927uHp5Qj6bpKcOSp
kZ4m//ZtMbuW3Xc+zp8BhMKpOyXq8+PpZocBAAAAwKasOL6RWvjG8F4Zrxp7
9DGLqrsMOyYAbIQV8zMAe/GdH+W97DA7FNOESy7+/e+X+mfxsqHH7FAAIGAT
00pt9uTVPMdD/bnUZETpdVK82pwTuiYj0ZG/oH5jU3TUsvvON3/NKyuuEwvA
GvaeyVYHLuebHQYAAAAAm7LieIasBb7tcIpeR8UoTR3enh5ZZa2GHRMANoJx
ZwBme5jToM+PZJ2PSBUuOXh0fEr9+0SG+vqXp2rC5TY7HABYtzG3N6cO97Qt
2P6R5FnXsH68JzZOtdYUqbrOQbV/3855z9u87L7zhUvOBmBfMzMzauuhFHX+
gXFrOgMAAADAfFYc35B1wg9fKTD0mG/7R/T8RHJ+0+o7A0AIWDE/A7CXk7eL
1Y5j6Wta48OuwikXF77q1Oert9NqzA4FANYt7uL1D3pjbFXSgaNvdMq/7Vz8
If/+py5e9W93jzr1tuX29QmnnA3AnnoHxvT52MOcerNDAQAAAGBTVhvfGBge
19dJ9zJqDT3u+9FJfdwEh7HHBYBAWS0/A7CfnXEZKu5m0eo72li45eITt4o9
56zJqqVr0OxQACDshFvOBmA/VU29evyw4FWn2aEAAAAAsCmrjW8UV3fp66TS
192GHtc9Pa2PeyXplaHHBYBAWS0/A7CXHqf33sIHWXVmh2KqcMvFcs9n1JFU
9cPFPDUzE7l9UQBgKeGWswHYT2ZJiz5HftM5YHYoAAAAAGxqfv9SK5B+0XKd
NPh+wvBjfxqbqs4klht+XAAIhFXyMgB7Kphbq+NF/TuzQzFVOObilIIm/bOR
f4NtbMLl+ZgK+usAgBHCMWcDsBffuOTIuMvsUAAAAADYlNXGN366nK++jn8a
lGN/dSpTHY/wHuEAwofV8jMAe7mZUq3HpmWNuUgWjrlY+m5I/w3pwyH9OILp
wO/5+vdA1jAEgHAXjjkbgL2culOiPj+ebnYYAAAAAGzMSuMbbve02nYoRZ29
XxGU439/7pn68VJeUI4NAOtltf5IAOxF5u2/+TXL7DBMF645uKVrUH3yU7I6
cas4aK/xtn9E127IR1F1V9BeBwCMwvkzgGD7z5kcfZ4MAAAAAMFipXGNxvYB
PX6cXtQclOMfvlqo9vzGPAWA8GCl/AzAXqRmduuhFHUuSDWzVhLOc4G+/t2F
rzqDcvwHWXX++o2bqdVBeQ0AMFI45moA9jEzM6PPkc8/4BwZAAAAQPBYaXwj
9fkbPX7c3DUUlOP/crdU7YzLCMqxAWC9rJSfAdhLU0dwa2atJJxz8YTLrdcV
lB7eziHj1zeR/it7z2SrPb9lq/30qANgAeGcswFYX9/gmD5H/iu73uxQAAAA
ANiYlcY3Tv9ZrrYdTlHu6emgHP/iwxdqy8EnQTk2AKyXlfIzAHuRug0Zm27s
GDA7FNOFey6ub3PqdVSOXC3U94QapUEf94l6lNugLj18qTZ7Hku9CACEs3DP
2QCsraqpV58fFQSp9xkAAAAACCuNb3x1KlMdvlIQtOPfSq3W12Hjk4xNAzCf
lfIzAHuRntDSG9rtNq4ewKqskIsf5tTrc9i/nzUYdsyrSa/UxweSVe/AmMou
b9PHr2nuM+z4ABAMVsjZAKwrs7RVnxM1UeMMAAAAIIjCeU3v+ZzD4/oa6W7G
66C9hm/su39oLGivAQBrFe55GYB97fktS/34O+tlCCvkYum7ITXO0iOjod25
4eO53dN6TZbDVwv155297w2vDwGAYLBCzgZgXbfTavQ50ci4y+xQAAAAANiY
VcY3iqu79DVS6evuoL2Gr1d429uhoL0GAKyVVerrANjLyJhLnw/dSKkyO5Sw
YJUcLOux7ziWrr6Of6rGJjY2p1D2+q3+Hcgqa9Wfz87O6nqOE7eKjQgVAILG
KjkbgDWduluiz4kAAAAAIJisMr7hq3EffD8RtNfIe9mhX+N1S3/QXgMA1soq
+RmAvbxs6PGu613ZYXYoYcFKubikplv/7M4mlm/oOL8llOn1c+bfW3rydona
cTRN13IAQLii/hlAMP3nTI468Hu+2WEAAAAAsDmrjGv8dDlf308YTBV17/SY
d1nt26C+DgCshVXyMwB7eZDtXU/ubf+I2aGEBavl4j8ev9I/v2cV7QE9f2xi
StduSA3HfI9zG/Vx298NGxEmAASF1XI2AOuQGtZtnnOk8w8qzA4FAAAAgM1Z
YXxD1uCWa6Sz94N7jVTf5tTj0rkvAhvvBhBZ4i9e9d/f19/ZqLeNuZXaOrct
I+muf9+7SRlz+271JLXxFff1sUJ+BmA/skYGfaH/YbVc7HJNq71nstX2I6mq
u2/9NTiyZspS9cy1Lf16e2Zpq1GhAoDhrJazAViHrFUn50J/ZdebHQoAAACA
MHQ18dHcPGCUmhp16m3rmTOczwrjG40dA/oaKb2oOaiv09EzrF8ntfBNUF8H
gPWVNXSr3TFb9OPB8RlPLt2sH2+J2a2cnfVKustv8uTX6dE+1T3s8nx9k2fL
rKrvdPqft9S+81khPwOwn8+OpesaDnhZMRe3vh3SPTR+uJin66DX4/CVAl2/
8+HzJqfcasvBJ9xzCiCsWTFnA7CG6je9rDEIAAAAYEnOcRmT+Eg/rut0eh7/
Sz9ez5zhfFYY30h9/kZfIzV3DQX1dQaGx/XrPMiqC+rrALC+ofEpNTXuzUmS
d6Ojt6sZz7/bo6Pmtij1KLdMFToSVYKjQBU4EvzPjVph3/mskJ8B2Iv0a5Bz
oYc53Ffo4+uzZLWcLHXP8rO8k16z5uf0Doypjw8kq6vJr5b8uqz3vjs+y6gQ
AcBwVsvVAKxDepDJuVVTx4DZoQAAAAAIM976jU368bthl67JWM+codJ7/8MK
4xun/yxX2w6nKPf0+u4fXC+5r1CuxW6kVAX1dQDYy5f79qvMpNs6u+6K2e7f
3j08pRxJ1z25OE+N9DT5t2+L2bXsvvPNnzO04twhAOt5VtGuz4UqG3vMDiVs
WDn3nrxdousx1vrz/PtZg/75N7Q7l/z67bQa/fXB9xNGhgkAhrFyzgYQ3qQm
Vs6DRsenzA4FAAAAQJiROb/N0dFqd8yXemyiutixrjnDpeo3wn1+8KtTmerQ
lYKQvBZ9oQGs1cS0Nx/nOR7qzyW7Rs3V14k254TOxYmO/AW5eFN01LL7zheO
+RiAfc3MzKr/nMnRa2eMT7rNDidsWDkXD49Mqi9OOtSOY+nqTefq94ruPZOt
vvl1+f4aJTXdet5C/gWAcGTlnA0gvJ26W6LPkwEAAADgQ96eGt4e+zL/t3Wu
D/9a5wyt1n/DObemyd2M1yF5vS9OZKif75SE5LUAWNeY25s/h3vaFmz/SHKq
a1g/3hMbp1prilRd56Dav2/nvOdtXnbf+cI9PwOwF0dJiz7nknU38A+r5+Lm
rkH12bF0teNommpcod+3rFOo1xHMXn7tnKGRCb3PrbS1r8mCjZudndUfAFYX
zvelALC2787mqB9/zzM7DAAAAABhSNZGyUq6qR/LKN7WaG/fjfXMGc4X7uMa
xdVdepy49HVo7vOT+w4P/hGaXh8ArCvu4vUPehdtVVIf1zc65d92Lv6Qf/9T
F6/6t7tHvX3pl9vXJ9zzMwD7GJtwqZ1xGerb09lBX6/OauyQi1u6h/T9op/G
pi27NsrNlGp9zv22f2TFY0l/DuYuQuvCXy/0z6ZnYNTsUICwZ4ecDSD8SB3l
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
q9qWfrPDMZzMZUmPjOGRySW/Pjs7q6KOpKrTf5at+9h7fstWP13O32iIgG2Q
s4HQkTrCqMMp+v1r8P2EPhdNcNSaHVZAZD23z4+nmx0GAAAAAGiMbyxN1pCX
a88bKVVmhwIgQpGfAayFrLew66RDz+PSe8N45OLQcA6P63mTr05lqtHxKbPD
MczE5JTaGZehrytknZjTieXqVWOPrtnw6XGO6a8/zGlY9/FP3SlRnx1jvgnw
oX8dEDq+dYcdxS368+ijaSr+Xqm5QQVA3pN3eGKX91QAAAAACAeMayxv66EU
deGvF2aHASBCkZ8BrEV6kbf3Rt5Lem8EA7k4dMpr3+rf5V8T1t+HIlwl5TXq
/6fEp3X6/mSp4ZDPv45/qnu1S91K2Wvv/3fp6+51H/9eRq1+7tDIRBCiB6yH
nA2Ejm/NkfZ3w/rzH3/PU/85k2NyVOsn8cv/h6znBgAAAADhgPtTlvfFiQz1
M/X3AExCXgawGum98eXPmWrPb1lqZmZ29Sdg3cjFoXX9SZWeQ8kqazU7lA0b
n3TrniLfn3vm77cxPDqpnhQ0qb2ns/X/52ap5fjlqX78tn9k3a/xrKJdP/f1
CuvOjE1M6dekPw8iATkbCJ1jN4p0jynfe5zc/yR1ilY7J/XVQks/EQAAAAAI
B4xvLE/GVQ/+UWB2GAAiFPkZwGocJS16vDn3RbvZodgWuTi0Jqfc6r/nnqmo
wymqs/e92eFsyKNc733JJTVL99WobelX5x9UqG2e/9eoI6kL1lRZq8b2Af0a
maVL17vkV3aoL0469D455W3rPj4QDM7xGbU7Zov/8zG3Ulvn7inJSLrr3343
KWPuXpOtSrnHV9zXh5wNhIZ7elq/d83vmeV73+vuW389opl+upyv/n0iw3J1
JwAAAADsi/GN5R3wXMN9d9Z6vR8B2AP9kYDItNZ78N3uGfXVqUz1za9Zegwd
wUEODr2OnmFd0/D9+We6x4wVSc+Lz46lq30XcletyxgZdy1b47GW15G5spup
1Qu2t3YP6Tr0T+b6e0iukDqOicmpgF4HMEqXc1Tn1f37vvBv2xKzWzk765X8
pWzyfG16tE91D7s8+23ybJlV9Z1Of73HUvvOR84GQqOh3anfY6R3hY+8l8m2
irq3Jka2Pr0DY+rjA8nqRkqV2aEAAAAAgB/jG8s7catYffmzw+wwAEQo8jMQ
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
ujp+Y/X3Sbd7Wr+nrnUtslDJqWjT71mlr7vNDgUAAACAjX2x7zullPeezfXM
Gc7H+MbGdfZ47y1IfFprdigAbIT8DNjXydvF+n7396OTZoeCVZCLw1dyfpM+
B5f5GCH31WaVtar9l/L0dqkniL1WqJ5VtKubKdV6fQ/ZvuNomq4z8NUqSA+c
Hy7mqSjP32TPwKiZ/0umkfVfPvkpWZ27X7Hm54xPutWnsWn6eyx+vERPQpiP
nA0ER/u7Yf0e+vezhjXt/+3pbPXT5fwgR7U+st6XnAO4ptxmhwIAAAAAK2J8
wxh7fstW353NMTsMADZCfgbs6W3/iJ5Xvvyo0uxQsAbk4vDlds+o3fFZatdJ
h/572n4kVc8t/ftEhrqXUav/1uaT+ZqCyg515GqhvyeH1Bycf1ChHz8piOx+
OKf/LNf3S/cNjq1pf0dxi/6+ldR472P29SRs6qAnIczju3eF3A0Yy5fz61r7
17T/qTslum4yXAy+n9B1ipf+Dq+eIAAAAACwFMY1jHE347W+lv1wnBgAAkV+
BuxJ+gDIOUPbOtcpgDnIxeGtqLrLW4txIFmvfSK1BNK3fTXdfSP6/H1nXIZ+
/v/0OiyzIYg4fDV3Denvxc3U6jXt/58zOeqrU5n+71tXr7cnYYKDnoQwTzBz
tuQWqQ0DItHpP8t07zipnVwL3xjZcJj0mkt73qzjqWrqNTsUAAAAAFgVY9LG
aGhz6mvBlAi/bw+Acbh/ELCf/qExvd6A3P8PayAHh7+M4mbVO7C2nhEfkvlY
qQFppZ5Ki732XPcxGR2fWnG/6je9S/bR33smW+09nR3ECIGVBTNnX3z4Qv/e
v6h/F7TXAMKV9LY6ev35mvfPKW9bV7+OYPvx9zz1xUmHmplZW/0JAAAAAJiJ
MWljyDWgXM8eulJgdigAbIL8DNhHS/eQuvDXC7XloHfNhtLX3WaHZHvO8Rm1
O2aL//Mxt1Jb52riMpLu+rffTcqYq5XbqpR7fNFxyMWIJJUNPUvWZXwo/l6p
2nooRQ2PLLyv+s/MWv186cUBmCFYOVv+JnzrLu2/lBeU1wDCVXPXoP7df5hT
v+bn1M/d45Rd3hbEyNZG+uTq/lIpa+svBQAAAABm4/5u48i629K7+cNxTAAI
BHkZsLbZ2VlVUfdOxV4rnJvzSVa/JpTp8WwEV5dzVOfQ/fu+8G/bErNbOTvr
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
jOJm/TvjKGkJyvEr6t7p459JLA/K8QEAAADAbswez8DKhkYm1M93vPd8//fc
M3qvAmHOTut3RzrJtz/+nqfz7/fnn6nGjgHDX6OqqU8fP+9lh+HHhnF+uVuq
f04Vdcb0XYG1kIsBc0i/fO/7cLJ6Uf9OtXR7azeij6aphvbFtRs+9zJqdc42
qlcWQkvWSplxz6govU6KV5tzQtdvJDryF9RvbNI9OsKz/8Z80tvgcV6Trq2Q
j3P3Kxb1jgmUnK9KzwRfvxr5u5H+M7IWhqxBtG1ePcfe09nqz8xaQ14X9jE8
Oql2HEtX353NCdraJFKTJ/0M33teCwAAAADsKn7e/GB/Z6PexvygvT0tbdPr
O8t4z5OCJnqhAmHIjut3RxLJqzIGLvedyb1hm396orYdTtHj7cEay5S+DjKe
fjOlOijHx8ZJ/xX5Gd1K5WcUqcjFgHkG30/o/kfSb0PmF3ccTVu1nnJswqV7
GH57Ojto798wjqyNkpx4ST+Wmd3t0d6+Gx9J7nUN68d7YuNUa02RquscVPv3
7dTbZPxD1l35UDjnbFn7J/5eqT7HlHMLmS+XvgfyOxuInIo2fa4qawkVvOpc
ch+p53jV2KPXaN17Jpu6YSxy+VGl/r1YzxpXAAAAAICFyhq6/fN8g+Mz/jEL
5gftT3qv/njJey947LVCeqACYcau63fblYxn17b0e34mDerErWI9J+S7P1Fq
5aT30dv+kaDHsTs+Sx38oyDor4P1k3u95Xfhh4t5yu2eWf0JsCVyMWAuWTNF
5qelfuNN59p6YWWWtOj3c6nBQ3iTVemiY3Yvuj+lb3TKv+1c/CH//vN73blH
F/dhsULOdg6Pq7+y63Vtkvyeyn0aMofe3DW4pue7XNPq0sOX/hqQzt61rcki
z/vm1yzdx2aYPgjwkJwqa0TK+jsAAAAAgMANjU+pqXHvGhoyGxgdvZ35wQgi
95A9yKrTfYRlrrG4usvskADMCcb63QgO6R295eATf73GZ8fS1cnbJbrXhvSz
dk25QxaLjJdGHU7RvbURPiYmp/S923LPdyjqeBC+yMWA+WT9lLXObQt5T5V5
bZmnHhkPrLcBrMlKOVt+T8tq36q4m0V6Dt23ZurZxHKV+LRWPato17XGzqFx
f//N7r73eh/Z98JfL9SEa33nrFVNvfq55x9UBON/CRYiv1Nyf5DUD8naJgAA
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
ahqc/tE+wqkehPpt/gzl0tB9AvWfXuc+3nvZzlV//M1lu0bxH87vhNb02NfA
ybWLWscBJIJYDADBQcz2XnfPc/N/zhhO461dx6vNwBD1VJaCcg5ereuyY1/1
/QdfFZtrDQ+9bhYAAAAAIAXMb6Qn5cZUfVPtedE9LF2/696W1mhoPmWq/ucj
5uvsGvs5a7YXmKr67kVtm+YVfr14Z9p9tNg9t7eyzpm1Owrt3mm91T089oog
U5H/OTlaf6Z1X7rv39AavJxCQyMRu77uhzO3vG7KkpqYmLBzy5t/iL5WKe5r
jeE3J6/beurLprxO6FBeFeXnfmdnYfw5rUP8yjmn5MZ98/TZ8Jz/l15/1M/z
fQ7wMmIxAAQHsdofIpEJW69V4zSN2e60P/G6SWlN/btxf6nt77e3F9j14BMT
waghCQAAAACYifmN9BTqHTArJuucvpWVb45faDC9/UPznnP9zqP4/TCt/3jV
56dC982ia0vO2v3SqhPQ83TQ7qnWPbyp9Lz20L+7++KMPddAJiA+J05zxFmH
ym1suXLrgdfNSZn2yf1rX6nXzZhXZHzc5sJQrRK9be16arp7npmw85oxODw6
I5bPRbm5tcYwtkdw9dZ881N+vY39U42ORez/cammw9ZG0ToPvTZs+u6KOVnc
ZO7e7034/wRSQSwGgOAgZvtLTePDyXyfuebUpWbGbAtMuQeVwzQ673PO5jZV
TUEAAAAAQLAxv5G+zpXfs/VHkln7oM89lFtn94DrXprqqyyUUHjA7qXW3MLR
c7cT2g9SWd9tP1/7sIFMQ3xOnGKEYoXmLINM34fyh2g9ip9oXcbVuk5b20Rr
J958KSfGy4fWD6rmttbfqZbJpweumC+OVNj1e9/+dsPsO3Uj/nXW7yqyr1es
04NfEYsBIDiI2f4T7hsyWw5G11mvc8Z9n+wvNVsPR8eFGhMeyaszvxQ2mpzS
u6awqs2U3Xpgrt95aNcJa79HKDxo+gdGfDc+9pLWQavPVqh+4KZcs//3m+SX
AwAAAIA0wvwGZtPUETYf7Cm2cyyqdeJWfWuP3XejGi6Xrnckde7+UzdtO8pr
O123AwgS4nNiFKMUI777/abXTXEt/2qr/V5au/q8bordz3e+otXOr2tNidql
t18crbB5M6obuu0aP82z515pMSedn4PyZ6j+y95fr5udx6ucc6+aT74rtTWx
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
Bw==
     "], {{0, 928}, {2160, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{632.3343749999997, Automatic},
   ImageSizeRaw->{2160, 928},
   PlotRange->{{0, 2160}, {0, 928}}]],
  CellChangeTimes->{{3.7404949512096767`*^9, 3.740494969708836*^9}},
  ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy8vXewrMl12De8L+17uwvsEhkEQAQClJhtqxiKEikmUSozk5IFgSIJQiTB
LFOkJJokSFnyny5XucqSqlyy5TKJsIsNb3dfujnnnHOee+fmnEP7/E736emZ
O/v2LYny3dp37/R8ofv0yef0OT/52T/8/K/97mf/8Dc/99mP/vgffPZffv43
P/evPvoPfv8PZOja12Uy196byXzdL3w0w98uk7F/in4+wD9XhtPRb9O/r7uT
kxN3enbmtra23NnZ2ft1+Ia7vLx0u7u7bluGDw8P3fb2duYD4buLiwu3vbPj
jo+P3e7enjs+Osp8MDzu7PzMnZ6eyvVbct25vup/86/9ZLhkZ3fHHcgjp6en
5dEH9kbeMjQ05FbXVt38woLb3dnO2Hfn5xduYXFRv1vMLrmNjfU4m/Pzc53N
2vq6XDPPzDPfbKuQ/2Tm+v3s7CwzyrxPv7upK1xZW3NjY6NuY3Pdzc3NudOT
E3vl0fGJ3rK5ueVm5avDg4NMChymu7u/J1OdF9htZj4VvgMAMzMzbnx60vX2
9bmZ2alw302F86Assbml0Q2NDLu+gT6Z3qZ9DVAGhgZdR2eb3Norr5+WV13Y
hAH74tKS6+zudEPDg3J3v8xuzdbK1weHB25LIJ9dyrq9vd04YXZpYmLCLcv4
Ui4nu7qZn5Ts1vLKilteXnI5+b0uMJEFvj8Fr4BwbWNDHwsIdVef9rv6TREm
F25wZND1D/S63sF+l12Yja8/FERpbmlxo6NDrn+wz01NTxa8fmJqytU11un3
Pf197vzi3BZ9JLe2dXS6trY21zc0oI/f3d22RYO9XT2drq+/1w2PDAHNgg3O
ra655uZmNzY+qvBaW1+xSQGr3r5+19Ta5Ebk1pHxsTipVYFBXWO96+7tdf0C
6qHhAXd5cfHJBJzVtdWuq7fH9fT1yJ72xlvPZRvm5uddZU2Vq2mo05nlcov2
NWjTLWjx8NE9WVe7m5gc5cnpHs/Oz7mXX7vr2jsEDQQay8sL32x3Hx+58ckJ
1y8PBVOyS4tO1ml3b23vCjR63MDggMxpQPB2Vr6OD4deAXVTa7NsQ78bGR0R
+B7Z13v7+7KaXvm6RWA14EbGhgS/Nkpt9unZqbv/6IHAr8s1NjcJpk7FzT44
OHTtXR2uur5aNr1JEH2oYLP7BOaPKstdd0+3a21rYck2A+E/rq27y9XW17oO
+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
Qq1XjsDbVC3qh9JlY0C1f5yMo4Uw/bzSi6KasgnqiYzPb2Rs/mnM1+aPZ6U1
5C6Xmr+dlHbK0J0qlkR07XwSP9Dfi2JpCk4XzD2cU49jlkb4RsPElbn7iv8u
0vM9UdY5jvmvdSyfAspv65aQ/k5LydjaCIETM+qzYzNFa0vzX/zabqqVPjqz
HtemNmb1qJmzLAuCQhO0MeQ1IGE7n08wKgnUh0cdaZTt5PT8j/QyL3BpBUea
AblgaDsjaoP0KabRX2l9bUUjsQhcMCEvAYu8vCV2DvmTrg42xqFE+0GFFzsz
XZ0x52jAQ+51ntyfDwhQTC8+urpHZCZsmNet1zc3fO6g/O89gO0qJrEsRsZG
ha5ndGmwNN5pSzsNlmR9z3zB0oKeSBM8HNcd7W3asQ1FDihS3/3k5MgOVjM1
Wzjm/6t1E3HhWdHH7tZPeEPuGZUGKD4+jdunc1OOwP+eCjkth8beDTbeMzSn
nqEUNiH3R9+UhJYLYLNKFXLOFst2k7qAHtQpagDxXLzJbDvKLtIIPctggwpB
qTsq2hXBBnlbW1/tlnJknLSKhjigJ+DuP7rvRgV7NjdWlR+FxBWDDdF/ytJZ
7iS5Wvebpz4bJsvmzosqVV1TJRvZ5AbRzHu7khyWCc1hAXGYcMpslVt58+4K
gILnUH0mlKCEA/2bQO3kU9BFEYS0RC3SpbW2bBi3c7ye2q+HA7i7rrJzLhrj
74uw4chllRi44AuqbY9QGs3bWkTb4vf+3o4Vhedugw3m1gvC2nb2PKshpbWm
c85gA/3ScMx3Y2t1nT2drktUTMtlIRd5f9+bFSEXqoAbgpavCzcsho2xDfIx
cTQLnWb+PNwHLEyIml6JM7kq1QFs4U+H9oZbyjxDMVe3vhF+y2e2wFJUPFO+
oZUFYC3YDaHeYXAOPa15wZqagqUjv1EctXPH7k5MVUGvxwFnrjI45Ff9sYco
RGyp4DpzgDuSr0R5Eltqcqo1LpXTBxWiuoh6VLDUx5WaTMtGPh/WODi1pi5T
1CBvme1mUj5oySi2BqiDHPGdveMra0DRJMcMK48zzDhA0+0yoWtrwEuOS5hy
ruka0tyRkD4U54sZTsrtWiiwiEaZztdySH4neUeg6KB43IzzDYVJMHXwnv1F
Am4zRlOLheMTvK7UVOEnViX5L0pM5wvJq7kupE8qYQl3SF8NUuMI19f8u8LX
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
D8FzPpWFFs2wO1gouCR0ZpdCXoWXXotV09LpIH7D7QWvhi14tPZjLIVXePXc
j6FeshSP6vnrIGNPYvnriu9lfgSB0yVzHWP+k/8X0iy1DuYMm7n+ttZ7XdeL
6g15C7jsUjiUlTKwylaW3m994kXo8ZpiCD9+gwpnm0IdCMss4syAeoBcOrPH
bZBcfmWDUrwygKYbZGNx2mU8ysAIlwI0nhv6sfCmK4sqRBEP2hIL4IV5BS+/
q1zq5eCbY44pginmsBWMsah0Ogge7+gpdBHCaEX3uBYqjqGfhvb2GRuDhnGd
ef7J2HPKsxiDB69v7Wt+/YuVw+6rFf3uhYfd7uXqYc3+u1s3pr+/cr/Dfen1
FveKHy/jC5nFS5UD7itcXjWYDr9Y3q/Dr9QkV19zLz7q0Ye/Wjsqn2ysW8f5
ZLe/UjPivvRGq/vyvfb0qQzz1K+W96XDr9aNJk8puPqFh11ydW9++I7MdNg/
pKKvYIEvykO/+Hqz/o6X3/bweNBVEh48gqXYG/1j/BLl7enwVx50uhcecfmY
H76lWYp/+UqdDPe4V2pHtXIF5y2OT05FP8X1HPUb6zMOCooovR4sEksw9Z+e
bKwsjNnp0fQ6+P+KT3yIY6Wus1rW6RioWDxmbvF0jLO8Z6cnTzTncOL1ba+N
d5I38VbrKDXnt1pvCj/SCLc2NzK2H2nXOSNTuKwVgxAyt0txltpr0keyBUQW
0ldDzsXTKR6DxEP96gLQhPxAP6bNyd/uDAASevVbzUCd8dvbj59BxitLFg1K
34tS5bu5P/55xWMW60rHSq2NDUQEEvfyMLiVJt/pDxtFnAHjwM7UWIXHvMuk
MM8pXy+41B1pur85ch73ZEuDKv1kQ6Y3e/KNZH6GiGUlnnz9La77m7zD7n3S
d6QtG6094+3whLMQo0N5FfzQTcx4b1M47JspHvOf8mOgaToGofAaPpUl1+EP
97bK1evSe4vfwfRCq574PN/OZy947fwYKIn+Tk2F9HncW7yOQCIF1wWUvjKW
zgV5jgn9ZustNefHXZeutywZI1TnScSPpSmDVkLBiqECf2xI8mvf6l2lxmyN
KWzD/ON1wBrm5/tyPH5fArsogLc/nHr42H0x2KZj3FcMR/aO8be6Lh1LYQuL
8hb0m+MS1/Ee72LOPy+cby3A62JcAs9D9e44ZhUlUrJl/2DJ+CGue0YkQ/m/
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
6yIdK8GUpxP2gOyNF9I2SOeYp21ojmN+XyRRWETv0DXnedHHPuaY5wNcyzEv
wjmGqPL0zpoRVbLuF67ZRJXf3+Xel33Lmv2eZ808Q/4WvS/n+feF6FOZbz7G
elm3hwH3gv94UY9IBw55g32E/35EVdWcXIVfFuylXBj1PydeHOvVn0b0foBj
lelY9Ik+LjoPjyV8nE/2jHTOM9ciNvO12jLAruCbVDmf7wx7KH1auZUiuEuv
/aBvhNsFCvDncS/u6Y9ZU8XS80rX59/SvzkclGppe9+UC+Ek4sWiNBKhhEsf
EhHPLFEB7L/FWiFt+qI7llJe8l24Q2oqlo/xpBcBuBwwy5HCt0Ju/hj+TEax
2DOOkjf7hUTxXHKrdFeQpEU2jZ3ne9THtLNP6YpQANjo169fVwbX3z8Qbj0Q
UVHVEL72zu3w5W/cCNduN4VrdxrD9TtN4b3bjeEb1+6Et6/fC3fq2sIDYdW1
TR3Cm9vC2+/eDPUtYkO0IiZa2rorPh3qG9vCtRvvhxqRC7cftMj1TeFr79WE
33ijKvz733o7vPFenTyrPrwn974mz/zKN94TYdeo9+nq6dMIH1K4+v79MDI8
JL/DmuMGL2hpaVbhXqks9LOhp3cg3K5uDv/+y++E//c/vBv+9Zeq5Pf98G9+
O/79V7/6Rvg3X7oe/u2Xb4Vf/cqd8GtfvR1+7XduhF/90pvhK9dqw9ev14V3
bjXoO755/U547+bd0NHdJ8xuSLjSSBgZGtSeT0PK/CLbBnbJZkzriMwUpiZ2
SD5P30Hskshg4zHgnWzVomthsNEuicdMgYr2VeF+MM/IxLMIyZG/QufbU6WR
lN/pdzfEFl01xdyi9Fi57WlcxRMzrgfSwi+WOa/ctS/iSH4j2DNYx4IOJt1+
hkux5ovPsIoP+pb4hGEpH2SlH/aYZykYePQneT7vvJSrSHCkIb3ZxB/u+Vfy
Mdr+0dX9fueMJtMRLHt8cEh2Ly9PnhVpNmvr6xV27OhIwHN4RKTYHXui4WA5
XnRMSxiPnuRjNIVnrt7hk8Ix4nbjE5NkzeRjjx8fak5SupP+y72IBnyz8/yx
ynztUVheWg4rq6vF69PSyqOi9fFufs2872M977DkWs6za68I6rZk/yxpMbQc
ERArh7dpsBfdduNwyh5NJCk06MkvTUCtKD2WSTL2IHrJdeSJv4gLVNgjXdjz
adzEoT9mgfjSXVYiaEW8FxZ98QXXau1qicgtt2vZW6yZqlT3cpefebnUXO3D
inT2LXslH/uIRpnK1oEX2mud5xzO3LwvVW75YyzLjum1lb4LEXdAn/UTZ60O
7IV3+QAriKne/71eC99D747jK5/oWBlawde2j4f7LYPadoWSH5rb0cP1duNg
uFU/qNWZt1umtL6mqmE8vHO3XVsZ32yc1OLGGw0T4VrNcPhGVZtWNzEoq7Z7
LrT0L4amrrFwt75L+2JTHUUHJe59q65X7jmpRf70ebpWOxbeqxsLv3OtUYcF
UsDCM7j31251hzdudek0vRv1k+Hd2jF9Tn3HSBieWtbqLkZdLqzuhpnFzdDQ
1hNGppe1qHVsdiuMMI5+ZCE0dY/qbOPW/mXaSIcaWcedhuFwo6ZP21tcqx/T
NsttA4uhvWcYwvK6EyKjVFTtxrm3RYRLfrRnthCbtVrx10Js68oxC4SK6eDF
Es/FpQDRK0FfdjRjpRaffQEtpETiZ2gm0Ug+z2cjW/aF74RlZR8UNNBDmr46
L2VKfu4Knvk2Fc7mHs++aLqwM77rm6ze7lJut0QOWrZv1K+409G/CAf+Sz12
NQ5El00IRvmhJIpqcKo4EH9PntLrnC5bV+jfqXUtR8K7Ka1ndh1VV4xqPHhy
fFH7cXy3VhIdiFjga72NXHZstxXWzyNoq8HneMunWgmot5FfalRo/U1xKgWp
a5uPw8bugbaLoHCVkpetvUOtCuTcI30OPTTPtJJIay+On2qdPt2KKvXf19II
czGFT8/Tes7i83m2rOGxPJvZPtMru9pXin3P/Pi1LZzCBcwYj7FjELUds7Ie
by6Uu9bOc40n43labW1zEZ6m0vKIqhDKVJAYbrGarDeer2Ydm9+ma2XupVRS
NvnLxVTjq2V+xS1bCzlPThLVXMjDENiG35vvHOvrSJg8o/ZdC+3O4ysFy9Oj
queJAJ+K1tG5h1rUS6Mgeur/kKNTNjmW3T97wftpR5npTaoOc5N1v7FKXo7D
1tXKv5wV1tnLgU/kBVpCnH50SathH+4fhrruxXBD+PP6w8cV/7m7h3VbsuX6
OaGFCrunWjJK05ZSdKTqwZIV+55SfsWAHu++XzEbHsXgLyZA07FkdGYrvF07
rvWv9OyldBtA/4CjJeR/qkL/fluU/KEIlGp9wZNV//q6Uj+hDhlHXxT/TqAP
WAsFf85oRrYePT6ZBv3X9N8L2kxm55EOSKv4SPG7+zZRnoHh+SdAbe9uxbnU
Gv2l9O5gi0ENzX1LKsVp+aRVso+fpFTHQktPZvFa+iPchzp1hmLQCZD+bRvb
B38BwFVQ+X6kJcXCMHJmjm9bYkDZP3iqIB+e2SoCCgDBXyBL/lw6TLUyXVbp
9CXb4K/Sv6Higl5NFeBz4GJJon82rZsqXTQSysppKUsbYNmGf9qRjDUa8DsY
IieQbYN7YIYwYbp3DAih3mymi8LJ95fQOd4rKxNYfXigffCBNl3/6X1UiQbz
5+krIBfdlM2CYsSY+9xFxHUWMZjxzLbB2FnEw4yNATHlOdTxMEXxdM16DHkK
n/sIoFJIlYCLbcE24tOfMNSfls4bvKptLr96d0QbLk/Ma+cuBSmj0aj2bx9a
rvjB0Cb/xtEZzEMqXF/gkugvpYwEXmSDHOBZ9Oi4K8qecMnvczvRjRr4vnSH
OF1knV7MWWTQLA4Rykb+C/pvfCM4q1+Rn/piUKZLdkv/kjbu9hwTomKV322b
SnvXayvPih8vBqgXEX88UQFt7n/7/QFl5rQtmFnaSc7nl3VpbyTAmohgqbwC
yxkVTVVe8QfppwDLk7dFyPs3Yavi54Hw/LbHp0PnEOvm+1iHMMzJRlqu+D53
7Wzq4GmETF02QxsYAvmjjibRgzzDRsGo71nUbsyx88sVrSRJsklL9Mieg4FT
CSWEaQDcSBMwaAVQAkDEUOrFUfHD6a7MZfudW0Oi1hypCoIK/9aDUR1BmYvK
L2gPhDQioqitCvBEx/lB/be4a7nXnHnBUklncsMabiEjkBk7e0ep+qp451vJ
CnjdjZMt4gAbYeWpgWUGajmhvZVHMx8moF4NG1tboaMr1kBS30nlEAW3dXX1
+lxUD6vnZoQVLTeEPZZC1peJR8i+qvQAJdsP4EL55DiNmNBBxue3tWsB+//4
+Kziv3KvDZ/iUynfRPwayCDlnol1GiwkkBVafcJ7BORfSFA7115Pe+FLN/r1
8fRwwJ4UdpLI+KomjpN5Sb3I5OREbJa9uaGiw/LgrV0u82wedM3S1SuTKC4p
KknJzqccgn7Bs7PTNl30D6YVRja6oQ2yRBVPsIx6JlmfqkOvr61pwRaeE36s
P9YP2/Nlq/7unSFlQxcTvSF9x+e2tfUB1MrQMJGif8btSAQ2RFEqxHF/mroR
28iOK6F8bwlU0/xVgyoIYGQNFjxWQt/khrYahBYNqiBuYmpaa0coEKGKcGF+
RoetgVDyEwyq7F6K9+laYFA9TtUB5NdjLAEhNyrIyPMoTf1g7vdPJJCqYRk6
ezq07zY1SPyfyjvycHkXbF3hvz+UIAg7oGnh9l6crEgfbOGTcStfio1zTgu/
VMh76KIioY/4bQ4dIgkMutas8EHnfIJucTX/96Sl8D5DUceO+yeymr+WoKpV
3eMTopE2hN7+HitBMsGj3Magin6AKKUx+c+l2xf6aZ6pJop+KZgyaHo2WoAm
GdPXb1wLXb2dWi3HCEPKk2jwav5/2SgGTbb/79weUi3wq3eGw9s1Y4DwL5Zh
jFH/fk2XsylPYcAjXIWJEZTMsq0mpiZFm2rX8tkOuW5zc137V6aOTxnC+wdP
6G6owz8+mjCH7F7Z3FcmRlMkFNLoqno5Qp9iYCHMtlhYo/enxIUmeqkl4Rfy
7Y/VcBqb26r4sbwPYpkSUxdxv5AaDgMDoR/P256e7o+0787Tk1Ova4F7VGJZ
SSm33RRuW0BAbHgwq8mi1sKBskZrfrUbq2R+KL01rX6YtgLNIXuZrPMXMkM8
10pQ7c09C7S7tSxGIJoqvl/T4l/aCra2NWmV3uzcdJjVrpaj4VrVdW3429Ta
JNtxQitlU/KA6rvF9L6OPE9OmMiMoTAkLw4wnHLvN8c2MB9NWEGE1Qt9dXS2
hnFR0JpaGvU5FNYBL/aaiEXDijbH6l/Eb5HGVUYTIc1Xylgo6qx+dm66GHwA
CYaJZSigZT1DAWjBYyiITNpvnvNQmFxhPdU/m+CPHwAh0zSwqK2X5OGpweEl
dZJ8/f5Ini8DL/lv0ubmfqOyosbmpnDn3i2B+2zY2lrTxCP4CbZD7EnwMWWv
7T2dAvcBgVGLwmhlQ+BdH4sxMVn7hvrlXrRrmFcyEQbx14385A8+neuyYUSj
eDlhCDCtMJJFxCSKxh79D4WaGDxnGKJYoaGxTrt1aHlZesrq6rIQaR6TZxjK
+sf+YcaQbw9n3AqdanZFMZS7d2h5a6F9u3XiwYFkPP8nI4a8SkK+CJ8+k16K
vtVfrhpUVddMDBrMYVZaixLOYfI7n/47h45eIY7WliYtUmWUDV1qyEWxIfWR
gb2aPYjwYB2iqIX7aGsnOrlWW/CnCAFmC+LCtLbYCWia6eUVGRG5H7C2Ho5d
v8SQoKNhXPOVOFwmTXksjM8+seZz35NujyOCCYd0tzEEeO3bEGAuV9rAW78Z
S3GD8gz6iBUmBE0v75RCn12XHJsJ+lfCvM4ynNY3gilAD3W9CzoiXCSFNbEf
FPUBBYZPUVJc1ib23A5VgAr2pB/+X+kS7xQzWB6fnGoHU5ojGyxPdfrCQ53C
wg+UNrO8w+S81BKsYA+S8yN4/LxjGwtr+ypG5b+ew5gTwsBnOlFD70IR/abO
S4WSnzgOlZ2Fl9dMDVosY+cioUqgCnsxr5R5p7HHiS3wqTK/w7l2ZAOybmQw
ax+bjY6dv2y4FjIhTxDV0mst8EK0FgMnSFtaf0QYJLvrteehPD66HoLTHSfV
If26e4Z5FY0ZgB56bdH6/accM7A2Vn6CFZYCnlQPTFQWtnfufhDbRVYLedPL
3ZaDlwxZPTi1mUi+yMUH1/fAbO5b1O6C8Tlp18htv3J7UKWAvTmMA59UOUh6
7RrChEkggH7M3lJsZTrJgt+r7i1xqghjKmpTCsZml/cyJL3D8wvuPPRJunsb
JNnVPBfb2yCJPqnOm9HVvKtRoyEofCefStuUsfRfEaWtqmVKVR1+UEagybXt
gxIoptHjRVBEgZ+Y3y6CImKGnp9ovfbWNBlmXg66219xb1hqLFurLIxgg2Kc
pjev89TzgByBIu3zaDpsUIRGMZDpafq62+LmfJXnfN72srxs+/Cy3tKTZKl8
wtmBjdA3uV4Y9fX0JKxtrGmfgoE05if6C3U0heVDqKT4jgToMSFretoxnA9f
zNPEsWj1JTu4DKCtfMIAzTA9c4eZV4I5FF+7p/s+u/3mVnaV8/LJA7rUxGbj
w2PY+Abok8Qzq9vnMqABPjwH12Ihcy5orOh6bOlt6pY5ewGig7U6eOQOjHPw
RGsDeg3W4AQHwcjMVoY1ui89NmjXRaeMgeFYNj8r6juPIT4DpLDWP5lgDcvA
P6v2qWwCHJ6wn7ahZbwCP1UMa++6NFiz5eEmIZhn56K24oM1oNVs7x2Zw6dJ
6Bzb3oO7nCfNeyl/PB3DMQcIjzXuV9i51UIo9MEtTKE+Ucc6Nk5WnJyzyLjD
pjZOnNMhBwZoP67XrsULzA6fXNhOgH5Jrb3h0WHtZU9Xd+0a3dUZFpfmBe1w
8+J+EibB4Wbb+4fa+PNSQgCaGs5yZrk80pm3yzpZFhtTOFgJAryr89OZEKM7
k475LyU08GyCh+iANPmFX8qON6bDYAsaNZbSPawRGi/n0jREwFbvts6GxbW9
jIjY6DKOmrZ2k8QzaczN0jBl8MmL/vaq4zXQf2oXbPS/uplGkwmao4h9Wf5/
rE2lrJX4Yurpz75wA0GsQTpdlJsGl9RC/7vpmAU1Yw8vNkBsKui0t4+lheHs
rBKzq7FvCeF+MeEc+d0+sqqeOaALY2IyABGVny5Gknenftot6s2kPV9NfAkt
C8dfsxhBxHcK0LugGkrq1vdNOZP5Sw1Dx2l4D5MfDUNE+jAmEa5WJMgxhncw
Qam+d1FVDo8eREGaC2QRMxupzMClH01sR1twbG1pwzrYzZCY3x3dbdpZjHEL
2L5IFOS/4QijtEl0isW1/eepgoYPHsfIKBxv8n/Dx8pm7IG9GGemqowDyOhX
JfjwTljDx/LmI+2kH18h3lKnKAs8fleEPFwcmYPIfqdmLDv0y8X7vAPWcKCj
tkRhYNyfn9igPYafnOREeI0/nNGY9THeoFfdY8zvZVsDtCJwhDAT7C+q3o/X
50HtPab/VjLzQO5NU0s6LZl0Pc/mdSGEgC1VqjimUODHEoFA4/AhIk8IBGHz
mUAZAEE7XpzePxvhLYRNDy9Sw3gocYij1GqGH3PUmuCYWtwx4y1xyNgoBo7b
M7auHgYwLOqrh/6LHLU/7qC6pYN1psCEEcLewbGyPoFkJg5EF9NsHx0cZz5t
KT2k2xj0kStowITKfyxtY84jc/HxwWPNiiStC2vM5Ag5RSZHzMjf3j8qAjs8
MIWlX01AOE3d1VFe4Ub0jR6a3jLIgxW2N1PDDPIvh/6hkVDz4L66PJFJeB+9
PxcFQLBi9N/jBtAoui+UCdSUMp6CP/Jj6orf2noYK+rE8lQTWyiZqU2cT1sa
zcsSJn0s3yVv7084fnSzMfIj0xp4Ml4Gjp8VsIZwISBNhNDGMZYYo8aesO0g
VIY8/GQmqcIEUhADN1hdXS041g+1vzGO9XJ4EZJ7NZEojXbhCYxR4qZMnaIp
Lg47fmCE/RMbqgMLMAu4Wd7Y0sz2u/dvqzewsbmhyDuMYiYMxXBDdGI0maM2
796jIDq4Ph6b3okycOv2bW0CGF20E8J0V+WWLdoAkGPd2rqqQ15pOvR0x7aP
cq0X6PcFvovrezk0p+NyhcPeapnO7EtjSvJqbcOFwXrOmVJRToX96XSsnLmA
3xX2ipPJ7C6Xj5BE0SuiTB6I5BVzYTXmg0E6HWKOiOmqnzW+MRZzG/5WhvnG
5kO9E30jR0US4RAeetYhbDCHU5C56GFuqilM2NzwJBwPjw6Fe/fvaMu7qekJ
bbbWP9ATrt+6GYZF+DW0NMjfAW2+2NrSmh2/WT4zOX4kDpDOsVCVF+rNci1W
orC9LccuJWCoXJ5lJne9OqnB7dz8rHrfaKQ0l8ZTocXZrthMHa93Hx1nhNgY
BdqV51HNAmgIgbGwfiu4uR6GE8Qk7gN6wOvmkl80WDYfpgkDvZEczEMynFz1
CYPP9RCbdCC1FGZQugkso8H4EOwfyYJCiE7OxHg6lNIRkQax2vhTjE2mxxO3
6JdzHR9CeR6Pnq8iXCCcUHLMstsVzoK+gF56MQEh9jfcD+0drcKIGtUZT0+8
yekxHfDNxqACmM1huFgVvQO7FseWxwXske63rzleuJLOPT09s/3hMyNMVyCs
CFtCrahMTI+91Tqwouodqg77RTSlhIpyruDvdESHMsoCv6jHruQ01SdPYs9g
ig4OhO8nphRbEr+q7N+jmB9ruuv/qmM+eXgND2oly6JFB8p4wMLGF0CAxPBg
M2qYu2B44Hmr6xuqlxF0aRD2iknW0NQoysiizWDSPfjdDsfUUeBL/5slTIpQ
h+EhjiCJURFZv1mAWt8vkICDk2tBlIy/sgUFBzCMYgvQz9WEh/ZPrcc8xIgu
qJDDzDUYX4ihf9lCJejyvmNDF+YjFhafvpgetf/4QLtGwxMI7WKm0t2O+Bsw
AuXyf+ty7J3EP2mgEFFHiPcgW6oX0jDddc1l8Z4lxnQMTW2k86JWRDM7KObR
4+iTBrQmK7DCP+euR59hKqGhwfvoTGkFQHEA60IecIzmNTY5ro1q6Z9Id0Ya
Z88uzKn/knukOck5yRmfMnxLrLhsBqHJYqhi8OkIP3nnEsj7rMdPpsvM8OCH
qPg7teMJA5Eih8QyvV99W9sO0mGUvqS0EX0kZIO+ijULIzOHBCIXUNwRbv8j
ajdcUD19P/XHt1fwTmhDl+6Kljik3dClA7SGVhQ1hi6oHg+8cJV0v2fyvGyD
6KAzIUNmCvsNYumWfrb3RBpVaphZWV3VtrMoIOiizMig8yLRVJQQ9NHUdiG/
1vJG5lIZM0gSfC/MyMVJRZSwDGbMWf2JtJtmhOn9yy+1kC+k2CGjUaBj24Nt
qbNPZCXTOjxyJEypJ2KIbommZn0hwQd1A9hS/zC5sP0jGtW5oILZDHR7B+/V
NtSABnw6w1ObGTU6LbBnXt2ElkRtJgtJnoImc6j7vvW2aXCFYTyLQpRRY2N9
cF0ZamKIYAu3Wx4TBmVqI+X9R7Et3nbs3UVzD2eKmH4Xp/us6DyHi26l7JNf
v96Hjfa3ixHi/d5xSN9LSp5v3BvWiegINH7wuBNH+9l03fn5WcrVJrs/+2nU
582nzyXk6qwoERR4tWzGkVz3V1mWSUTvFzc8wEFGRKmGgxgeLJIguMwRDOw8
0jIYFW3HvP8wK1Vp8Mr2/mEREsxRa0h4kmaMtg0upyzSYpPEaby2Iy0NCiDL
69lqUc8QDPOr+xVlgG4+cAM6WY9sYGJehC3iYKjl0D2ylgb1FWu4lv/L+XW9
83LeasGKKbAdWJbBVGPhYiVUNU8VwZRHr2zuZ/ghpEgnFm0kS8ISB5OxHc3e
bY+h2KgvX9Ve2DQKxW5ZWl7WvzB2wG3ppK+5x2MY+GCOcyxlwyUGyGM66WV3
HhySZIsSAHvHdwyIXgnToiK+WT0aTmKWq25JUEYhl6iPBmNLdSZj0IgHoiUz
dXPnIDG0SLTwYJwGOQgtDPC9eq912sTLKTwDGcDsdHJiiLwYgEtGVFuOXUwi
2E0KTfixxMDiKOJdkVbtqirTY7lVdNnB4UGlLEzUVJSTJ6Dhz+oaj5n2P5+O
+XC4sUXccriKMAb+fjFcvT/bYnlQ1Rt3h7WgwYIoqN8EGvC4rm0/9rBlw/Ep
+wAEZqDlNAuLAmzRsA22JjM3dh5n2OIMQu3BQf9MMHdwqSxDMMo1bot77scT
VNk0jG65X303dAlU+ggY9HWLRtalETA0MYrPUFE+5tbfgQ9j/mGeemQ1GSnL
wwDL3qMgAJlZAljvgzbAYhQwzehcP8VjJML/C5GVuPY8V8BugRLt7eBYs6Iv
32mZSXujEBXDqDeoavixVzdAhipK13sxi6YAQexdud+9trkilpDqHwoUG5GC
L7BfiPsnEksgncx6AzKOhTJsShD2H+09o6HoVMWBRVH3dzOZ8ggsQ84zaJLw
oCMBdw5Loek9yAZNtjoBreCgufbwUfjSjQFVVDyNol4TvP9u9/bsVwZlGTS9
F9mgqer1YNThDJqY1gTCeEahTXfQJJb3m6aeYbBYWg6aeVbi6l7i41ecPDpL
f8+9Fv5afvKT0CAa6dLafhFlop/EgR8nBkvMNipG8KomWArWaDCOVxjfIe5p
FJE0INCMmzyBDkf5QlSxM3hZ5uFx1Lk8eM0xZuBF1lOiuiLqsIHX3MRE5wy8
moE3FWdT+mds7jzGCZmFBRkN6AQQsKnS3kNvz0UnoKSWLP4vpmOmM8MQvQue
slzUdQ9Il7ybtXh5XfzA4/MP8xJJv9OxVydnGbgvi9mzGBqZpNBYp6mJ5gDe
LHYAF5JxTjUcztxey/Xz+pYZmFAGHvm4ypB1pLdqRjUzPbK6j6liSfP4p4xF
Edop+IN39b675g/eLfIH/4386BhNr+tayO+JIFgSs4CJ7x91j7Y41lW3bHNC
2rLZYTAOyMKWTR7MvZTmZejx4zANPVuKxnmNxxnDcJnA2dDV1D8hC1RaK+Dh
L/5fcASfLeBnZWMr1NTVhns4gYeSE1iMJO8EFlFo+GGQHEMA+WT48epazEp5
WZ0kMPGv3BpUmicz+umJ7eMQljf3ybSMaPq4onNfB5d0un75E2FpNfqMSaxk
MkRXb1mfcdb8kmsSd2UuJk1us5qu+QK6nsTEPUBZWi4KUxSq+Y68AWIdwtdE
9MvpF/yT5LDYDhU/k45ZtRZwMKRZPJ9BiH83wQYCmpyaDi2tber3g8cMDMa/
TJGJVTJLUf+7os5MXF9oZug2/OAIIQg1Ovfwf82oZH4Sjl6Akn3Lw0OlvmVD
JSYsRpRHpWmFSP4IgVcUlQ+EPqGngyen0R8sqIX1pCT30CtSh5SvKAhf0yYe
JJzfrLpZ5I/uK/FHD40MyG+xP7qgxofs7DewQ8fEIERUFOnMqPEzS3tFbNBC
ZZ9KmESDQQkms71tcMVuiTBDLlA5Zpj0cQHD5EZKykclMY/C9s6uDgtpaW0M
Xf3dYXBkUJhcl/p6rJ+nleVcTOhEIBI0fq9hUmMI/IBiVNHppR1Dp3NLh+cn
LpvUJxK9KjcuxaVpodE79FE1ChpED2JcrvEGKBz9iCTOlsElPY4vc25l9ycS
Fz1M3mwG9ow4b/aAUBVDpKAuZRjF3uy/YXsoBI0Y4kQQavK5Xsg55gD7XJRO
zaxbS1p2nBW3KTTd39+nvvOBgTiykac82mdu+wJalp+9IcaovMO0xboxh3OK
IelgY+tilKwV7VwUEu/bQy3lUpFIOZUJUC2J2YFfr5n8AXx73Z3qxiRX2wqU
IWPLpGG73GufQUXV+AQ/OOnYeqIJJHyX60bgjUcsDwSrn6SJMozp8AnHqnAK
vyVmhqza3FWPDk/Cm/dH5eHbqu8eHJqp/Gr2f38Y3/hPOUBa3oABl2QAOmiI
FppRGlP6tuj2kc5LMQpBHezyzp0qtUaa25p0jONYilGweWCln0x4RdyjMDO2
G3lLNbVoqzmTNU0pZ0Sy38ewFZRXS6ewStFrtRNa4PK1uyO6HTCv/2e3dVLP
nQqd+acjcLX/TlHlgeGY7EmU7rqehTAyG+N/k4vbqreLllaCY+8wNxxryl+j
zt4tmhmKv4ioyieMKZ6RGLcZGvoWipI1FtZ2w//3dg9v9HeMsTkHuuHM4tv7
B08yzmIa5lIYmdsqpBqkOER1x3zGWYxnrId7NQ+Ed9dr6QBeZLLrKfthGyYf
flruR2M2vGwAXC/waYsfsTdtVLeqp8JYRb/xeIOnkJdxNcHYMpDfrRsLNcLG
iR9hdGA5CE5/PgMjlufA/QWAhiGytBGY6o6YWE9+ty2NUB0enZRgyDvWDUMN
/YVc459LtKSNM9wW8tmwn3CgxAcz6Fw6iNSmvqXQ2L9QYejyDnRDV8EZcJDR
paxa3n9uZS+jCwqAXwmDTaLyai7Dg45Tr3z97OMdnzT+J1uraWBJveo24BpP
O456RAKkAA8jgxE11fNN1AWslytpmyqKRT3GMb24sa8wkvX9osMPBkXSWi+m
1fIG5P1iVAwnvOBmoroefGFWlkGSdamwsjF0XPx0COrfuN6vtblxcO3LQvtH
YXB4QHSPUbFAWjUEQEYSRVS8ROoh8u0ZR2fCs2d1yraftPv0aWxCYtFf7103
vEHqeLLIBff54XfaYjDEPMJk7xG+xYIrWHqls48LLojkNPt2t/GXBcSkK4kB
amE7lVJyGEUHowTdW2D5kwkOEADzPHQWxuODsLO9o4lRINMpPlfSQ0hQnhJe
Bm+T1/+lEjwmT6dpN2poCL54JhsfDshO1WMzm/+gGIXeK/9KQiFihRJ5dDL8
/Ati1v8vxoLQnEX1r6u7LzK4U9WggaG+0N3Xo3Um9OwBlTg1DI+IH8QUA92N
s3pPvOHM2ODwbCEbHTvhtmbtHmac+RQhg1GJ19geDcr7Jja0GYIPU5BdmRoR
/I30ZuQrQZCNjfXyt0srwTCVGVJoQ2TwJPm5zwhBbt89tlo0MjwFlrN0wlgn
EwWcbO0cxfjZdMxkEwiXwYk57Q0nyLc7ogtpJOQ8uqJtW+kTl1eEXzOKclzj
VYNCpz3yFvCc1LjsEw4m74jYJZBv6PBOfEOHlljE7PoCOszKfvQko8PHGC1D
xZdd2HNtIj314387vRwifU7UNuaK1jbUisXSr+PwBocGRK1d1qUDeMjJwEOU
i7IT0nht5Lj3LttGgH12albWlpIMfrkGYfldGirZKwG6d+Sbswo+ZuU/f9+h
1xKGNRxVqabaBfM16Wnf7paKhhOcTuFdzgZqdshgciUbqKMTYUrRZKCGq5Er
OL20W0T5sAHAJM+3qixWQgCb8jXRAQzgeNjwi5IuzVhqTHym48Lb0Ih8MXSe
MqhpQvNayeinm7vyQoM5ZhRCnidjPfJSiCyqBza2D0pg7p385rFEX0HVxtNu
w+h5RVx01L0baM2F8X7jdPbF+EhJBG3K3ZXV8AL8mEcUN5551jXvanhZ23q8
EKzxVHKZCG1EvaFM9lL66ysFX3JogRtDWqen50a/Pn3HYLmi6TmrOZ8Adoyq
3Ni7gAlcAksYMcaPhyXv+U5NVKIMlj5P2WAJQxmZIZ9mPsPS+/ANlhrWW3+s
nf34wTc3ufhQHTsGy+gf2NLcnFJuAEu0Z+4fHoe7otDsHxxX/L10DNmHRxJ3
r72XKp3zD7U28BfSOmKcej82B2X4xNGTWMGprf+eLbOoTBDFMUVzgLVop6tt
+ttVg5pEKluwDEcw375BFOWVtBYPUa9y2ttBdeyDzuHVIuqESWAKGUTPU1n3
zWh4qPUGz+0eXc0QjYG5HZcBeDEnIkOhQaein+YaDnPyxXcu3GMqVVgaJzNo
s6ty0vMRIZV12Qlrad0fVUhOiGhtamrUCa/tXZ06bJP5xYvCQtAAeX8aI8q6
LqRXw9KmNd12SrZAO37rwbjWlcVb5wYeOoH+WANfh2U8/8aOCVGZi8UD3zL/
Cnrjuejnc2FyYScD33v5Y3rdZdIe1SECwCzzYmpx1+oLcuwkltlHEL2aNQ00
TvzYOKffrB7T2AkEhcCgNSZblc5JiMpcl3RMXsG8WsiGBtPgSVM3NGBVEVCh
CiKjQf4Q7MbnUst8ZnlrlGkSPWfmZrUHAxBL5dWGBkpBKfYxvyWqCC17CA0a
Gl4Obd3d6oMmTUqLlrrb5QGtOUaAfBXZas49xCkdaIRZV/ySYyxWr5U1P2EG
NxumNJT6P6X3OEk54LH0+kwsI4sDRAuJWIGLAxiy0DxAFjaraiEx0m22oQbE
UxpmhOJrPgdZXx3PHUqIELcW95H6il8avwX+KILDw9MbupG9ZU/jGFy/x9aC
orhhlSFtfTtm06KWRsjG6DlzxfG2jo3HcUDMTqcEhlHlLnaboxHITDIQeJVC
78WYRR6yIgHWpmZmw5vvvqPqKiOZG1satCfR2npR5MCwBhvFbcwnw1o55oVy
jDuT3hdRb0gp5WLDMuu6vSvm1KE7LPrwAHOwU3hgOoUHiL/KtT/lsEiZLBlY
YDIpOIbFgnOkAFYvPMyyRklA0PB7Zk4zObaiAm8szItl7rMTAWdLroeOwR3r
6mZFBtrmItWry61+IUPeF4jxb1R+nMZp/dc5jDcVa1k4w/+e8aS3XlpUAJJU
hu03/GxYwPCkaufcw2fwZCVeWYQKAOGJ1GdkPMkfhgxfv3lTyKFRrZeC679b
Xf9Dw+b679eaLOf6j3i6lJJ1ZpXdkl5EIo9FLQA+iVZPc7HMM7mCvjIAx2NT
/2LGh9bV1GMNHhXhA95FsM08NFbHTpLaP3YQtqRd12uMU3vG17WM+ZcS1J9t
O+L/otkwG/iqW+hX7w6Jufk0G3KmdfrgM3fbEHi8Vz+R1L8Y4GRuOsnkI4Ld
TdnX+8k1zyxxdc2vrykf3Sm45n86gTqWBotOv7gbZpd3tN77dfe49FPwXKXA
CvLCImcx3+qRiao8ECAF3vD1ya0M2j62YneNWZ0r6n/6J+mYN6oM1JraM7KG
imegLuc4NwKA5SAM+fQP3QtY26cMV6wVskhaZ6Og0N6yyeX5jFv8rLxb3CAa
1flVbWDaJ7weA9bKmpHYKoFESj59eqJ/T09PzFh92YEDIn18eJxfXcuN2ubC
1MJ2Nua8im+gjHV0CySuFhGu651qt9QEKGpH5ZYl0PQuaoMm2R1zsdiliEqN
gRs02aG4ezAnjY95X7QByhoNodE2DiyqWRmZyysKqEUxDJtamjVPHI0PVQOt
b14sdgDG/TBjc5W7QIj4OJX0RVXuOwcacHt6epojsHJ77dmvowuOwxPRz6yS
wPmeDabwIdji46OTTJ7wG06LHfLjMSoFcHgJlEoBCiVD0SEUujXSFPCNpMf8
IwdQK3c2gLKRaI0+IAzGAOq9xQbQaPxsa64HkSucnwZQ3nhe+NZb776tQKTe
i4IEArDjYo0vzC8o0jEPPFtSRLp+ITE+t0LjhRwFhd20d3QK+23KSXo8g05V
qOVMUkn5FlnN4D7439HH/4kjU5fsa1ClFS6Wz+rW43JQNRewHWsV+9hKCA2q
Xjs0qAItCsbnBVmeTIE+6coG1VON9O+GayLr4HBUaUan0lV1Gc8IN1xdW1fj
BIbbK2+9L5oy4RC0huxakLdbXlcu6bqvHKuuQ3aAQZO1kk7a1NyoLfi4L+0T
iOgT/WwVIWcpjwZNYiDUtuGU8tB0Cp5Bc2opFsjiDi2BpvfG+oo7kg/ItP7H
L9j00ArBRd7EQ9O8rD/tNiRmzX+43o9g0JhtZfL3+ICjebzZM+c5pexy2BPD
HW8ukkBTIEXjqe2aNwcxj5wU8wgJOzE5FVsGTk9qjsHOznYeXMMtL7gl4S6/
00Z92uk/TasvJ3/GRKAQt90VJbsM8Cgx9sCjco8wI59+IZGM6ipiN8OLKQJc
Fs1sfWMzrGoHjBOdqWYqFtYSva3QxUs3PianJXhTkPavfrddK8M+m97KDMWE
KIOfVa0uyqZC34Wpi330c2l1Zy7ue+YEnaWQQ9BGdBpIFfYge7PiFxP8OX9F
DOjBwQHljvS6w5vKXzpkptQWB/8LWqCHK5o4chmhDirjp7gfSX3ButdWujcH
aBNQ8b/Z3iHloadX9nCTcKA2bTfSi03Q1anV0PT7QXtB9yi0WT0K1wQK5xlJ
xV5SAzLS8l+/0amhbT9WwKyDVxKEj1MtFZuMFgbwmPOCRu8rIgySRECr22fV
Nx0h+dGcEUW1VE1dtebnQsU98rdMeolxFARqb7QAysl0294WKoIFEyYi34PC
yOQ5NXhiIeN8qa6t1od1iChu62gJLa3NWmkHPFkAUsgUdMtCEBs34aXYNZqr
dkTJ+d3bg1rl4IdRgB/UBIs9xE5W+8pdUOaWN/fzfS2LMU7TCFntFD5orucI
z9d1WfR7bRFNAq0CAdWpqRttshfndD/yKkb9/KBRkCUFQKHYIoC+7J2emrdI
eAH77+H+Ue4znSOfMVCysrqmQmJjazOsica+ufVQHU9mYImYzr2j5GpoiH7a
9r7lNj/woVocT73f/C6XzSo4CDf+uzd7dNOfG5av+pxaBRPvAuvB896cosLx
1fFqnOoqbFIiHn3+8kSXvaygwxFL2z6SGxHe/9CD77L3cIY+2TD0pBWWrlLm
cuIQ3BY/AlpWMWBWwpIjBNMvETVfNEIM+SeX7/q8MAuexy4x07TQS7vvaqGk
TBREGE5z/6JyYnql3G6e0bL8X07nWq5xVFtOtJKNviWUM+DM4E3Sq8dnBptv
YX/PUiaW07rVeXVyev5/uoUz1Y3CaK8XJkot4lxYJESj/w+3qywc5jMG4P/E
1eNLX9GXJoGDv9z2OHkmoQWh59hk9KVSayLJDP2bVAS8DuPTM6rCkNjYLPsN
2xR7lkAn75l8en5YQ7mm22kcUXqX4vRxN9TDSJicOJss4QX4L+d19Q6NqPvo
bvWdMCMqGi1xR8aGwtLKkq4rea1KZ3r4iQCaU7yzo8cMxn5Igp/EYQkxv5LW
X6KVFdY1IwiiWpumuU36d0JbgjK2GupSpJyf/4pbAwQKvJQCLrkF48JGvthC
2JBgC0DaMe6J28VD50psmJwSnawzJp0w+ZFH/Qv3dNtahaerHvfPy5xii3ZZ
ZfbMUPzz6Rcd/Zr+uaRbhGxDSGtiMuqHMckz1rAtLC2HmpoH6vQiaXh7++F3
pq8RaGOiAw7ppcKuBvrRc74z3ZmAMClOxCj7aAe3spT6lMfh2zx1ZX1N05Q3
NtYr7LZwwL7+gdDZ0R5Tk3uVau22jJzrVZ/PZOiXJy8uzqeOP5e0t+g8Zdqy
WIj90aO9/Eg2M0uhowKNA46ODvMjST1tbmF+77C61HB5ypt8Kr/oqQobbY0u
+wVY7e/v2tXgWRv0y51ZFX5BueR7HRSpiiBGSy3zpEBZvv6Ug+KiAJkmstMz
U+pP3t3LN6e3Cu5m6BPX84K8nqi29rUGWQTINAjiyq2tDajLxo2cnRZGOn0q
AcIatMbGqUqeEYAXUvjbU5v1znjqZj5F5aDiDXt9OX1yeiq0CnUMyqt393ZQ
u2P4onEMWW0P6mvFvJsW4PVluCNu19Y3QnXNfW2mOz03Gx7v79rUHi3qW1kN
7964rtsYD+fc/BS7J3UPv6TbEY20o6dLt3n/QI+7fXR8kJLQ1N4i34+Jdrlg
Xx8JECZEzlTdvqnlyzOzU+G8gHXgMygch6fTbm9CkLOyvGhoBeubmxuauto9
0KebZ3FxLiNG1jUgino9VudgnxDFMM3b/dbaTk746pp7YUrsqtXVJbuayElt
Y324c++O+uFRqh492rVn66xCOQTI+7j5+CgEWXzzXf26sZUCP8yp/N44aeCM
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
YXNrh0CIqHjIoqzi8arYndgb165dU/ukq7s/NLf1hLeu3QjVtU1yW/kkr1Fd
2xjeevemforHLoevfv2d0NjSJZ+69beusT189Rvv8jUqL7d54xvvomxW2LHb
9+rCu9dv6Se7zbvXq8Ld6vrQ0t6jv7WinH7j7esX0tdvvPluqG9qj1939ITG
1s7wla+9VckHuSOH33z3Bu+cn8L7Fy/2D4TrVXfDrXs1egt+G1o6wtfeuhZa
O3tDWyf1yH3hzXeuhzpRi1vae3X1VXdrw1uyuur6jnDrQUt491Z9+PUvvxv+
3W+9F/6f33w//N//4Xr4d799PfzmV96W+6mBFcZGh8Pdu3fUV1WpIv4VNSPe
f/99NYT5xYCixUkyGvU61H2iFpXJjOQYPjQx+NOxl9QswI/o78Nn1He7jmMY
xnGfRoXDN3b8rNMHzeD+rFNMSo/58z5T5thVdwyCwlC0gjJKqEdmtsKv3+gP
VS1iD7zfLPr1+03TF4v/J5dXNU1rNW389Pzz0jn6qfLZb5un8rfPvUvJ/y6V
ubbMnd1zy91Zjwm1cl6VnSt/WweXCiPCnmkwUw7IVqdO5vG2aCOMIvmo/ntB
x7ihdfHps3Zs5yBqXfLpM/xbmRQeJpRSyUSOqwXJfYM8fbjKi+/6FvBvy0Vw
WnKqOuCSNLFnXCzzv9za8zSO8CDBsuSKikLtbMjBlzLH/J3F6il5Rrm1POfO
2gnikIjGeXRERVn4ulY6rWw91gmN9HLmL8Vk1IvT6ZB+HOTCM5L25CRmjcce
O+caYKc67GIyWzA6UvlKAQ4W3EYoX1abGweYFdE8eULa3Kn1idH87SeaplBh
x1h6Oj0du+yP6S9uXXly4TYnmvrtL+GzJR1YOP/Jk6MLL3jK0OBg0VO+2WK1
F9+F5ywRiXx4dBQv/niq59P76S9Z7eRKHBwdh93HT5X2x2Y2Q2PPbLhWPxXe
rZ/QUsSl9e34qKjkcBvrTGowtrntPvokxy6kry0f3n99xMIKd0S6x8rBeCzF
wtJuL1C3pUT79GGIAK4s5Oornan7ptHU30/dxGCidkurMi9pvv/96fCZdvvb
Db+jDcOm/9tQlXnX/bZZGkdmRuArLizVl/c1NedPldnqV9K/uvj9I2XtdMSj
DonyCqo1Do6e2ntTWE63kP7JDeTSFENv6XTP8EWG4VDaSCM1erm2DizpXDrq
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
x8Ir/PCRU6p+apSzf6EjS6Nx4i9GaXii\
\>"],ExpressionUUID->"7bba9d87-79fd-4e88-a5c5-3e66647160c2"],
 "\nLooking at combinators that halt (combinators for which the graph \
flattens out), some combinators \[OpenCurlyQuote]definitely halt\
\[CloseCurlyQuote] - their length decreases until the graph flattens out:\n",
 Cell[BoxData[
  GraphicsBox[{{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
      LineBox[CompressedData["
1:eJxdyckJwlAUheGDPQhZuFCJIiLiPA9xqMAKRHCjxFhCSnFpBa7tw2ZMuBfE
/3EfPx+nckoO54KkWvbzfl5xdsVI+XverQqsj8RdsqY3d9l6jN1V36/u0Pq+
uOtwA27CLbgNd+Au3IP78AAewiN4DE/gKTyD5/ACXsIreA1H/05hbbDD2mKH
tcMOa4/95y/AmUxp
       "]]}}, {}, {}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 211.37500000000003`},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0., 41.}, {214., 266.5}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}]],
  CellChangeTimes->{{3.740494879196854*^9, 3.740494966240198*^9}},
  ExpressionUUID->"ae6cbc9d-d798-4c35-9e38-c40289c6bf94"],
 " \[Rule] \[OpenCurlyQuote]definitely halts\[CloseCurlyQuote] (1)\nSome \
combinators have length that increases exponentially:\n",
 Cell[BoxData[
  GraphicsBox[{{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
      LineBox[CompressedData["
1:eJxdz88rg3EAx/EnTTkuOUiPjNZIJj/ntz0Ps7P8BSIiPyY/soQmRwdK2nU7
umjlrOaykwMnBxdJ2fHJQXLC83l/L8/q6d1rnz17vk/rQmZuqcayrPjf9V99
vKSfQtbhC3V2H9ep3g4Oq2XjBnXeuFGNrGBbzRlHVGcdt+FVHMUZHFMLy7iD
3biT/9/EXTx/F3fzPke4h/Nu4F71wpy/L3B/P88/xgNq+RAP4hOcCJxvKOBh
zruGR9THbTyqlg7wmFo9xeMBT6ivZ3hSzV7ipPqdx44aLXIOHLpmd9XELTt+
vmOf8pv7rLDjhyf2adV+Yccf7+wpv1vnHrscrv6wz/gtfdW62uVQe71spfW7
pmbXXrx/u9qTW25i7i9bYlhh
       "]]}}, {}, {}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0., 51.}, {0, 743183.5}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}]],
  CellChangeTimes->{{3.740494879196854*^9, 3.740494966240198*^9}},
  ExpressionUUID->"bef25c04-2612-481f-9ebf-eec2813c9f4a"],
 " \[Rule] \[OpenCurlyQuote]possibly non-halting\[CloseCurlyQuote] (2)\nAnd \
some combinators appear to have increasing length but suddenly decrease:\n",
 Cell[BoxData[
  GraphicsBox[{{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
      LineBox[CompressedData["
1:eJxdzTsKwkAUheGLlWUKCwuLKCIqIr7fJvGxAlcgYhQbXyCWZikuwSW4pCxB
5RwRz8Dw880dZrKrwyJMmFnpvT/Fin3kGPAAdc50En2caIe+0ik0vtFp1P3e
z9B72kXvOzqHLtd0Ho1CuoA+t3QRDS50Wf6v8P0NXWX7bE1cFzfETXFL3BZ3
xF1xT6wdiIfikXgs9sS+OPh3JLaJzMU2lbnYZjIX21zmP78Ajhg1KA==
       
       "]]}}, {}, {}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0., 41.}, {0, 511.}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}]],
  CellChangeTimes->{{3.740494879196854*^9, 3.740494966240198*^9}},
  ExpressionUUID->"1294facd-2d8e-403b-b182-2f5a1947fdd2"],
 " \[Rule] \[OpenCurlyQuote]possibly non-halting\[CloseCurlyQuote] (3)\n\nWe \
do not know which features of the rasterised graphic the machine learning \
model extracts to make its prediction, but if, say, it was classifying based \
purely on length of the graphic, it would identify combinators like (1) as \
\[OpenCurlyQuote]definitely halting\[CloseCurlyQuote], but would not \
necessarily be able to distinguish between combinators like (2) and \
combinators like (3), which both appear to be non-halting initially.\n\nOn a \
similar note, some functional programming languages (e.g. Agda - citation \
needed) have the ability to classify a function as 'definitely halting' or \
'possibly non-halting', just like our classifier, whose dataset is trained on \
functions that either 'definitely halt' (halt in <=40 steps) or are 'possibly \
non-halting' (do not halt in <=40 steps - might halt later)."
}], "Text",
 CellChangeTimes->{{3.740480303697596*^9, 3.7404803048488493`*^9}, {
   3.740480763568055*^9, 3.740480777928233*^9}, 3.7404808421223917`*^9, {
   3.74048118984022*^9, 3.74048123207508*^9}, {3.740481266257896*^9, 
   3.740481268218774*^9}, {3.7404816419984417`*^9, 3.7404817276733637`*^9}, {
   3.740482239367524*^9, 3.74048225580508*^9}, {3.740482286891347*^9, 
   3.740482299804778*^9}, {3.7404823299509563`*^9, 3.7404823398463297`*^9}, {
   3.740482497070096*^9, 3.7404825157105103`*^9}, {3.7404825514065247`*^9, 
   3.740482684152157*^9}, {3.740482831103426*^9, 3.740482938054487*^9}, {
   3.740488974022978*^9, 3.7404890002081623`*^9}, {3.740490223199986*^9, 
   3.740490224097994*^9}, {3.740490273595742*^9, 3.7404902769280663`*^9}, {
   3.740493326548024*^9, 3.740493383875936*^9}, {3.740493499818809*^9, 
   3.740493511258025*^9}, {3.74049359870429*^9, 3.740493608611581*^9}, {
   3.7404938286169024`*^9, 3.740493851851193*^9}, {3.740493917741997*^9, 
   3.740493928343852*^9}, {3.740494045609345*^9, 3.7404941693341703`*^9}, {
   3.740494239405951*^9, 3.740494524697042*^9}, {3.740494580575441*^9, 
   3.7404945821004763`*^9}, {3.740494636025722*^9, 3.7404946435585203`*^9}, {
   3.74049470727455*^9, 3.740494734437091*^9}, {3.740494788843498*^9, 
   3.7404948011901217`*^9}, {3.740494978163795*^9, 3.7404950569011393`*^9}, {
   3.7404950963369417`*^9, 3.740495170269017*^9}, {3.740495211320134*^9, 
   3.740495454028661*^9}, {3.7404954869312487`*^9, 3.740495532993498*^9}, {
   3.740495574227792*^9, 
   3.740495582154211*^9}},ExpressionUUID->"aecf06bd-c112-4019-8840-\
d5395c328344"]
}, Open  ]]
}, Open  ]],

Cell["Other methods - if time", "Subsection",
 CellChangeTimes->{{3.740495851621469*^9, 
  3.740495854001938*^9}},ExpressionUUID->"e65d2ee4-b760-4459-99c3-\
d6be88956f43"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusions and Further Work", "Section",
 CellChangeTimes->{{3.7404956367141447`*^9, 3.740495638790696*^9}, {
  3.740495681368485*^9, 
  3.7404956836226997`*^9}},ExpressionUUID->"9a3af1d8-fcc7-45a6-bd82-\
eb1e45ef490d"],

Cell[CellGroupData[{

Cell["Conclusions", "Subsection",
 CellChangeTimes->{{3.740496064104074*^9, 
  3.7404960654471493`*^9}},ExpressionUUID->"af3aa9db-44c7-4c61-a14e-\
f896bcb772ee"],

Cell["\<\
The results of this exploration were somewhat surprising, in that a machine \
learning approach to determining whether or not a program will terminate \
appears to some extent viable - out of all the methods attempted, the random \
forest classifier applied to a rasterised image of the first five steps of \
the evaluation of a combinator achieved the highest accuracy of 0.88 on a \
test dataset of 1454 random SK combinator expressions. Note, though, that \
what is actually being determined here is whether or not a combinator will \
halt before some n steps (here, n=40) - we are classifying between \
combinators that \[OpenCurlyQuote]definitely halt\[CloseCurlyQuote] and \
combinators which are \[OpenCurlyQuote]possibly non-halting\[CloseCurlyQuote].\
\>", "Text",
 CellChangeTimes->{{3.740491547397306*^9, 3.740491605398342*^9}, {
   3.740491640917163*^9, 3.740491982656328*^9}, 3.740495491925501*^9, {
   3.740495687818215*^9, 3.7404958413639927`*^9}, {3.740496015479615*^9, 
   3.7404960807734747`*^9}, {3.740496166229501*^9, 3.7404961703979053`*^9}, {
   3.740496319449972*^9, 
   3.740496413960709*^9}},ExpressionUUID->"98abdaf6-c217-4233-afc1-\
df232afda30f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Microsite", "Subsection",
 CellChangeTimes->{{3.740496427143409*^9, 
  3.740496433186858*^9}},ExpressionUUID->"8f6c21eb-b74e-4aae-b025-\
d6a6a5d28da2"],

Cell["\<\
As an extension to this project, a Wolfram microsite was created \
\>", "Text",
 CellChangeTimes->{{3.7404964473896112`*^9, 
  3.74049645863843*^9}},ExpressionUUID->"3f378beb-8416-482f-bc33-\
35c8ffbeb5dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implications, Limitations and Further Work", "Subsection",
 CellChangeTimes->{{3.740496435235703*^9, 
  3.74049644217385*^9}},ExpressionUUID->"b2c73dd7-752e-4b33-88e9-\
f2321e23baa6"],

Cell["", "Text",
 CellChangeTimes->{{3.740491501836697*^9, 
  3.7404915024776897`*^9}},ExpressionUUID->"12c4d0c5-b36f-4e8e-83bf-\
0d5e4c600c7f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739887102765649*^9, 
  3.7398871042005873`*^9}},ExpressionUUID->"9f711335-a35f-44e0-a7fa-\
3928ee902904"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Recurrent Neural Network Classification", "Subsection",
 CellChangeTimes->{{3.7404258921938457`*^9, 
  3.7404259002778463`*^9}},ExpressionUUID->"52415639-cbad-40de-b09e-\
08d2184f481c"],

Cell["\<\
Another method to try, along the same lines, is to train an RNN (recurrent \
neural network) on the initial SK expressions represented as strings. We use \
the same dataset as before:\
\>", "Text",
 CellChangeTimes->{{3.7404261984708347`*^9, 3.7404262006494017`*^9}, {
  3.7404262856817093`*^9, 3.7404263474257708`*^9}, {3.7404264616500053`*^9, 
  3.740426466029273*^9}},ExpressionUUID->"514467d5-2e3d-4e1d-b535-\
90bab2a59b53"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Training Attempt #2: 200 random SK expressions at each of depths 1-10, halted \
if SKHalt[40]==True. NoHalt dataset not same length as Halt dataset. Using \
raw string. Bad performance. <citation needed>

One limitation of this method as-is, though, is that the visualisations have \
different dimensions (longer combinators will generate longer images), and \
when the images are preprocessed and resized before being fed into the random \
forest model, downsampling/upsampling can lead to loss of data - one way to \
improv

Talk about
- Training accuracy
- Testing accuracy
- ConfusionMatrixPlot
Diagram (if needed - or netgraph)

More graphs/charts!
However, analysing strings alone, without any information about how they are \
actually structured or how they might evaluate, is a fundamentally flawed \
method - one would assume that, in order to predict halting, one would need \
more information about how the program runs.\
\>", "Subsection",
 CellChangeTimes->{{3.739885663000449*^9, 3.739885665262878*^9}, {
  3.739926235265271*^9, 3.7399262369820843`*^9}, {3.739926540714086*^9, 
  3.739926573032988*^9}, {3.7399266106970663`*^9, 3.739926613523512*^9}, {
  3.7404829429897213`*^9, 3.7404829533637743`*^9}, {3.740495584825675*^9, 
  3.7404955858657*^9}},ExpressionUUID->"b49b8db9-06ee-4c8a-bbe9-71db00e37430"],

Cell[BoxData[
 RowBox[{"LargeTrainingData", " ", "=", 
  RowBox[{"GenerateTableDepthRange", "[", 
   RowBox[{"1", ",", "10", ",", "40", ",", "200"}], "]"}]}]], "Input",Expressi\
onUUID->"fccccda1-8d14-4734-a57f-4c8182b921a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "LargeTrainingData", "]"}]], "Input",
 CellChangeTimes->{{3.739885931580703*^9, 3.739885938409638*^9}},
 CellLabel->
  "In[184]:=",ExpressionUUID->"3f5f5e11-f495-45d8-99c1-95dc49369299"],

Cell[BoxData["1563"], "Output",
 CellChangeTimes->{3.739885938983904*^9},
 CellLabel->
  "Out[184]=",ExpressionUUID->"1d16ba11-a973-4bac-b86c-5ede5d1f5c88"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"LargeTrainingData2", "=", 
  RowBox[{
  "ConvertSKTableToString", "[", "LargeTrainingData", "]"}]}]], "Input",
 CellChangeTimes->{{3.7398823563986597`*^9, 3.739882365040913*^9}, {
  3.73992651439326*^9, 
  3.739926523609365*^9}},ExpressionUUID->"32bf3f75-c35f-4890-b640-\
b7d26e263c71"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LargeClassify", " ", "=", " ", 
  RowBox[{"Classify", "[", "LargeTrainingData2", "]"}]}]], "Input",
 CellChangeTimes->{{3.739882227925384*^9, 3.7398822389662867`*^9}, 
   3.739882385587817*^9},
 CellLabel->
  "In[187]:=",ExpressionUUID->"9276463c-b75e-49bd-aa40-86c0f1a6ae77"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1563", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1563, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Text"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Fill" -> 
             "", "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Type" -> 
             "Text", "Version" -> {11.3, 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3139720177438361802, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5643421565728107793, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "\\", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {11.3, 0}, "ID" -> 3051290048872824615, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {-9013817937938426079, -4973948215836336071, 
                 2077270817744784973, 3408017859420023313}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2055599668730355056, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6577660353193586174]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5749777139264552649, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2672999966851599696]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.06389776357827476, True -> 0.9361022364217253]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassPriors" -> 
      Association[1 -> 0.06389776357827476, 2 -> 0.9361022364217253], 
      "Method" -> "Markov2", "TokenNumber" -> 4, "Order" -> 4, 
      "MinimumTokenCount" -> 0, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {1, 2, 3, 4}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 8320522033291663338, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NominalSequence", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Imputed"]], "NGramPosition" -> MachineLearning`SortedHashAssociation[
        Association["KeyHashes" -> CompressedData["
1:eJw9lkmubEUMRN+AFQAbYAFI6S6dXsKX/oglMEBixOAzZe8cZ1Olp1cl+16n
m4hw/vbnP3/89d/X19ePn/j3/e8f/377lR+/1/DQjCrhe7nPVcexalmYLpE1
TIbXx7HMNGasiXfOIT6vI3nFgkC2Im2KvzemjqHCV1qVp6VeR4hWEkCmLFnp
/hzekcOnrcySmpUfhy5zHWuo+9Cafh0dWZbNCDUhPRvPkWNpVnDqSBJMuQ41
H7EylmRMC9zPgdlravAiqXHMdUjnqHOQzlw+Vr3Dx+oINLIIV1Zx36AjyzNp
rZXFKM1bB+8H6RhP8zA/X6gMbbvn7MN0qr5QZgyEbmWKpBLuOTTcTJjX5JjA
Ic9hgxGlKF2hnYzwOkYUT65ZPV4G+3o1lwrlqVKklau87k5ipdMjGRQpfJ4j
ooZGxRqjguE8MMzw4FD3NTqU17DrkAINM6hBhwiF13OQ1iRgOq8xYVsfh+9W
GX2mwSEv3VEcbsq4e7Y8drNipLMrE+d81eklH8cYzMlBpNOSXDfdSKoGnQQC
KTOB73VMB6NinMNkqixvHVTnPQoBzlGgd9x0GYIz0SpC8iMjr8Pph6mPSsAF
b0jwOhxCkeWcTIIvfRB1WzXmygF9nNRVn0ObduBweYO3fMVxwLyK8gE/wpm4
hD+HTIPrYAisMo18DldYAQWZnzZ39YUCAwGeBhU0KMjyOkYP0EE0vSTdeGco
lGri8ApvMMh1K6c2xsl4BrSkDNK4DiADLawGo0ACXOZzSGI2sxYfxvQGpZJi
DdMBOwGkPXIq8GEeITQDWAR6cBxCcFEA7DLMqftRrTsHN8sapd48v1kJobOD
gETQSD9v5ULR4a1K0ij0+LzRDYKfNIBMeXHIcwSzWwuCeC5vXj8HdTULUSc4
Lf7UBysS5bJRFSOLOn7ZSg3BBb0iV9gGUda1Q39km/H2hBefY0+6hMoYZdL/
BVyOHdYzGf62YIFGvXbGx5DBgijQjBd/Kl0agUTT9NalenaUfGCFki0bGcfe
AmEggNZCZHh57Sg9Khg9OZUCdvrs2lKA0AKkgWLVt5+PGMFsS4LDSU71bUau
rKQBRoZMhmrbjPKi79FCk04Mi20OwIVWox7IxHDibDM8LBFkoHrvQfgThEWH
ThF4kivgI8NthjRM11vbe8Qjt7lkjwMd62kgornrkSGLkqpXZC9C1OTaJ5Bm
Ep5Uwxrx0xeg2SImrcZk2J9jbxUZUKx7Mhdf93mbtI92wH5onvPiA2wSf8FL
BW0ITI5rJ3uQBKh6WMZQjh1OoXh0YbaEQrN7bnWWvdCCxNA+P3bQgaBhXmgj
youMbzutQUwF6ZqQ2Juc187Cw4agzAR/CPix28ZLqzDaQZvk5Glbd6v5632M
umw70g+z0P1efpNB+sGl9+YC8cHIQDpzPnV5i8mWWpDQwMlr53qzuDy0yMMW
pM6PfW25Qpiwc20A/8fe68yDEGycJrTWtfexcLPgNppo68SH5/R8Sxg6BK4u
T9ju8Ic0AD+UgHBx7Xun5uz7h/Y94fQteu2yZ6qFlDX5zkVAep3RNeSMqvPy
mZlS6mDdaV/UoNGJA0r2rQBqZi8Fijj2BghO+AmVmPvl52xRYPV431lQDXn2
JB9IiX7wXvROeXZw0ChiSTBHu3hAB0APDeWOgKpJ3zq2nYsYYRANBbik//Kn
K32hAg8kS0v19DNlzzWRpL4dwqqTD3Tru1ffX+C7tOofO0xgp8KNVgaSvfUm
19LWcca1d9K8erf2UmUC0AsR5iJ26mINcUXlQgy3W2hg+LErrULZQBAK1NfW
vPZpSd8YPhcEftxz6S2oZdtRMPxjmvd5uoUmUhIor5atg7deDn1F7OsPCokq
XDtB4EJfEbnicNTVAS4G3jtz7Utq53/ilwCU0XsxrO8BOuf/2msg9g==
          "], 
         "Values" -> None, "DefaultValue" -> Missing[], "HashFunction" -> 
         Function[{
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$}, 
           Switch[
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, {
             BlankSequence[String]}, 
            Data`StringHash[
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$,
              "Murmur3-64"], 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
            
            Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
               
                Quotient[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                Mod[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                MachineLearning`PackageScope`ToPackedArray[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
, {1, 3, 2}]; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                Flatten[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q,
                  1]]; Data`StringHash[
               FromCharacterCode[
                Abs[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
], "Murmur3-64"]], 
            Blank[List], 
            Map[Switch[#, 
              Blank[String], 
              Data`StringHash[#, "Murmur3-64"], 
              PatternTest[
               Blank[], Developer`MachineIntegerQ], #, {
               PatternTest[
                BlankSequence[], Developer`MachineIntegerQ]}, 
              
              Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
                  Quotient[#, 2^48], 
                  Quotient[
                   Mod[#, 2^48], 2^32], 
                  Quotient[
                   Mod[#, 2^32], 2^16], 
                  Mod[#, 2^16]}; 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
                Flatten[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[], 
              Data`StringHash[
               StringJoin[
                ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$\
]]], "Version" -> {11.3, 0}]], 
      "ConditionalProbabilityMatrix" -> CompressedData["
1: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
       "], "DiscountMatrix" -> 
      SparseArray[
       Automatic, {125, 2}, 0., {
        1, {{0, 2, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18, 18, 18, 18, 20, 22, 24, 
          24, 24, 26, 26, 28, 28, 28, 30, 30, 32, 32, 34, 34, 36, 38, 40, 42, 
          44, 46, 46, 48, 50, 52, 54, 54, 56, 58, 60, 60, 62, 64, 64, 66, 66, 
          66, 66, 68, 68, 68, 68, 70, 72, 72, 72, 72, 72, 72, 72, 74, 74, 74, 
          74, 76, 76, 76, 78, 78, 78, 80, 80, 80, 82, 82, 84, 84, 84, 84, 86, 
          86, 86, 86, 88, 88, 90, 90, 90, 92, 94, 94, 94, 96, 96, 96, 96, 96, 
          98, 98, 98, 98, 100, 102, 102, 102, 102, 102, 104, 106, 106, 108, 
          110, 110, 112, 114, 116, 118, 118, 120, 120}, {{1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}}}, CompressedData["
1:eJwtU31ME3YQrYD9tRgYlo+CVrBjrRQc4FqME+TOActSUURkAgMcxAmMgKFV
oVQbGDpldsoYQSKjmxK7DStOvhQUMIDgRD4MHRtxcQgVOsvkN+oIEyhjKS+5
3B93997l8o6femTfJ6sYDEbecsT6txivVLpgRr674NC3zujilZoiURLs4sm+
+rudhQVL/2MatjCXmxkU5jh7600RFB4mHbhlbKOQWXJ68yH+PEQ4OKp7al/D
QtfTU1O7WTgWLxhvjGXj7/oTee/X5cJEwLO11UHRoIr7JqRBI8AqIklzkArx
Be/KwcU4dzT9xn1UO+KGSQ/GE2MlZnA6vjfuttoMn8t/vXn/KRPFwZE7ZpoJ
6lZZ92DbWXMjQ83vqHHF3qKUO6H7uZgVdeKgfoZgVcPRDr09wdZiv3XK7RSe
X+zMwUYK67L7K8QTvhic/ZdtU7cAhT+d3zod44tdurJ9UpEAv/hOck+OFA7f
9Qqv+JGCF3cLQwFmUDgk3D9TbIag2bibPv4UqhSuwcPXKPiZhhWrJUychjG5
tpzgolacvr2IiaKCqw5PdARbjr4caU4jyC8unWwKZKOd+w8xvE42agodzSP+
BKn/SFu3rxm890demLpgBlJWkmsnpLCrKDK49xgFzxhDfTZlosmV42xuJ9gu
s0/eU8jBeVW65VGCC2qCPor3nVsArz5RmUq+APlENUpUbPSJH0rq9yAYMLwr
oPWVEy5tlc6Iy52QmeZS2LtmLX65Xqw6mcvBiLAQZ/3sTjiXrItwbOTB0JOC
y5fOC9A1n9eTw9uEZ895y200S5BQOdjQ/9oCsyLjlE2mDFgVtmE926LhgfLa
9R2xBG0SU67KhghuE4aIPrCwsG+nR+vbmQTvXc+o0QjDwedPWdvSAR4kTkbL
At+h0KT6+cMcLQVWs9vhwN0UuKu7OYM6Cm6WjaWdngSjhtPElytZOEpGS7Qd
bGQbByZnzhIEaVprbRMbsyLHHpqW7z2wp7K8IckbpMfe/LqZbwl9LFRLNyaL
Yc3zRE/dJkeonowfU00QNDFvF7xlYKFlxc/pNlb/KLMyluGHn0YZajyyhfiy
z3PDeOkcGLgXVZPKOeCdrEzVUza+p2gTbNhMMG9l7sgKD/fj9QPeg2yURhPn
0OW/OXXjlrq5m4OuWc7iF+4c9Gww2z6+y0SbRYPwlYGJgd/z628w3kDy7530
XwqcsGneytNib+Wt7rtUp9UJMOxZXfhnpwVIV3SOM6x1+bt/6PQiCiNa4z/G
LAr/Af06rPU=
         "]}], "Discount" -> {0.5, 0.5}, 
      "DefaultUnigramProbabilities" -> {0.000013048868010700073`, 
       2.5076326067467856`*^-6}, "Options" -> 
      Association[
       "Order" -> Association["Value" -> 4, "Options" -> Association[]], 
        "AdditiveSmoothing" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "MinimumTokenCount" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "ExcludedTokens" -> 
        Association["Value" -> {}, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.5211762289138455, 0.0787507061806321], "Accuracy" -> 
         PlusMinus[0.7517399599435947, 0.04472467037721505], "EvaluationTime" -> 
         0.0018931499999999997`, "TestSize" -> 500, "TrainingSize" -> 250, 
         "TrainingTime" -> 0.75523925, "TrainingMemory" -> 9.320008*^6, 
         "ModelMemory" -> 35768., "ExperimentCount" -> 3, "ModelUtility" -> 
         0.7440940718237441, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.7085439979437115, 0.12059817534608586`], 
           PlusMinus[0.4598522016793951, 0.04312964052266645], 
           PlusMinus[0.5782862892892762, 0.05332494411630666]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6810747458204363, 0.046913446882814284`], 
           PlusMinus[0.8115586258169738, 0.027565468993877306`], 
           PlusMinus[0.7024919420183263, 0.03250327418834228]}, 
         "Configuration" -> {
          "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
           "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}, 
         "FinalTrainingSize" -> 1563], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 54305708838997]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "Markov", "Options" -> 
           Association[
            "Order" -> Association["Value" -> Automatic], "AdditiveSmoothing" -> 
             Association["Value" -> 0.1], "MinimumTokenCount" -> 
             Association["Value" -> Automatic], "ExcludedTokens" -> 
             Association["Value" -> {}]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2616565371605757`, 1.3398684654188613`], "Accuracy" -> 
              PlusMinus[0.8753080252289629, 0.10224148792146505`], 
              "EvaluationTime" -> 0.0012427214285714286`, "TestSize" -> 600, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.06299257142857141, 
              "TrainingMemory" -> 417473.14285714284`, "ModelMemory" -> 
              33854.85714285714, "ExperimentCount" -> 6, "ModelUtility" -> 
              0.274834874702117, "MeanCrossEntropyHistory" -> {
                PlusMinus[6.912877948702017, 3.0446784434608216`], 
                PlusMinus[5.775550828143188, 2.345560329228775], 
                PlusMinus[1.430500361201224, 0.6727175013711413], 
                PlusMinus[8.361873419791628, 1.258709468756651], 
                PlusMinus[0.6371980660070191, 0.2844602274967159], 
                PlusMinus[2.0562531539099713`, 0.7447599595237612]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9285994982956844, 0.027036699498910185`], 
                PlusMinus[0.8691935577016249, 0.034560144784561694`], 
                PlusMinus[0.9385004883946942, 0.025435255862738246`], 
                PlusMinus[0.3048371220580591, 0.045951159069264925`], 
                PlusMinus[0.9484014784937043, 0.02368502019242743], 
                PlusMinus[0.8394905874045953, 0.03741534334205111]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5459733050577363, 1.3415585315122538`], "Accuracy" -> 
              PlusMinus[0.8713051996575738, 0.02244243932482242], 
              "EvaluationTime" -> 0.001329527142857143, "TestSize" -> 600, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.1924492857142857, 
              "TrainingMemory" -> 1.8550354285714284`*^6, "ModelMemory" -> 
              35768., "ExperimentCount" -> 6, "ModelUtility" -> 
              0.5120793368992006, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9436866478425574, 0.35589924230971826`], 
                PlusMinus[6.239676335215458, 2.5295941309088548`], 
                PlusMinus[7.65692810234759, 3.810823367738279], 
                PlusMinus[0.4777650381836385, 0.08370280934086848], 
                PlusMinus[0.558773130640113, 0.15845241809089913`], 
                PlusMinus[0.6567178907900904, 0.15339854074321216`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9087975180976645, 0.02988680874381914], 
                PlusMinus[0.9186985081966746, 0.02851443175814529], 
                PlusMinus[0.8592925676026151, 0.035564676639192], 
                PlusMinus[0.8196886072065751, 0.03907946889574405], 
                PlusMinus[0.8295895973055852, 0.03826913891684036], 
                PlusMinus[0.8295895973055852, 0.03826913891684036]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5211762289138455, 0.0787507061806321], "Accuracy" -> 
              PlusMinus[0.7517399599435947, 0.04472467037721505], 
              "EvaluationTime" -> 0.0018931499999999997`, "TestSize" -> 500, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.75523925, 
              "TrainingMemory" -> 9.320008*^6, "ModelMemory" -> 35768., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.7440940718237441, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7085439979437115, 0.12059817534608586`], 
                PlusMinus[0.4598522016793951, 0.04312964052266645], 
                PlusMinus[0.5782862892892762, 0.05332494411630666]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6810747458204363, 0.046913446882814284`], 
                PlusMinus[0.8115586258169738, 0.027565468993877306`], 
                PlusMinus[0.7024919420183263, 0.03250327418834228]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5644723735269598, 0.031340611122167815`], 
              "Accuracy" -> 
              PlusMinus[0.6070715100561127, 0.039147724586925385`], 
              "EvaluationTime" -> 0.0014704664536741214`, "TestSize" -> 313, 
              "TrainingSize" -> 1250, "TrainingTime" -> 3.470053, 
              "TrainingMemory" -> 47485328, "ModelMemory" -> 35768, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7217446257229017, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5644723735269598, 0.02216115865101539]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6070715100561127, 0.027681621523438275`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0014704664536741214`, "MeanCrossEntropy" -> 
             PlusMinus[0.5644723735269598, 0.031340611122167815`], 
             "ModelMemory" -> 35768, "TrainingMemory" -> 47485328, 
             "TrainingTime" -> 4.401946842628571], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            4], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 54301413871701]], "MaxTrainingSize" -> 1563, 
      "LastReportingTime" -> 3.739871568456286`16.325431677438388*^9, 
      "PreprocessorEvaluationTime" -> 6.935546875`2.*^-6, 
      "PreprocessorMemory" -> 29048, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 2.25379678342583, 
          "ElapsedTimes" -> 2.276782, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 2.817245979282286, 
          "ElapsedTimes" -> 3.0536879999999997`, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 250, "TimeBudgets" -> 3.5215574741028584`, 
          "ElapsedTimes" -> 4.198665999999999, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 1250, "TimeBudgets" -> 4.401946842628571, 
          "ElapsedTimes" -> 4.157209, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[54310003806293]], "ID" -> 54314298773589]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "s[k[k[s[k[s[k[s[s[s[s[s][s[k[s[s[k[s]]]]][k[k]][s]]]][k[k[s[k[s[\
k]][s]]]][s]]][s[k][k]]]]][s[k[k[k[s[s[s[s[k[k[k[s[s[k[s][s[k[s[k[s[s[s]]]][k]\
][s[k[k]][k]]][s]]]][k[k]]]]][s[k[k][s[k][s]][k[k]]]]][k[s][k]][k[k]]]]]][s[s[\
s][s[k[s[s]]]][s[k]]]]]][s[s]]]]][k[k[s[s][k[k[k[s[k][k]]][s]][k[k[k]][k]][s[\
k]][s]]][k[k[s[s]]]][k[s]]]][s[k[s][s[s[s][s[s]]]][k[k][s]][s[s]]]]]]][s[k]][\
k]"}, "ID" -> 3791095496786132862]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 20.521056, "MaxTrainingMemory" -> 62541216, 
      "DataMemory" -> 340792, "FunctionMemory" -> 135872, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 6, 13, 12, 53.133333`8.477942034319918}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.739882247160121*^9, 3.7398824194468946`*^9, 
  3.739885973211705*^9},
 CellLabel->
  "Out[187]=",ExpressionUUID->"4171684c-04ef-4c9e-8508-f2aa463c3176"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "LargeClassify", "[", "\"\<s[s][s][s[s[s]]][s][s][s][s][s]\>\"", "]"}], " ", 
  RowBox[{"(*", " ", "halts", " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.73988242284734*^9, 3.7398824723498*^9}, 
   3.7398855614063272`*^9, {3.739885679709488*^9, 3.739885682275693*^9}, {
   3.739885979908174*^9, 3.73988599170044*^9}},
 CellLabel->
  "In[194]:=",ExpressionUUID->"015e27db-6bee-4167-b9b8-d208294962e1"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.739882433085573*^9, 3.739882472680479*^9}, 
   3.739885561916359*^9, {3.7398859764406643`*^9, 3.7398859921279497`*^9}},
 CellLabel->
  "Out[194]=",ExpressionUUID->"d5be3a0a-7f2e-4f75-b932-13bcfdfa0289"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Training Attempt #3: 200 random SK expressions at each of depths 1 - 10, \
halted if SKHalt[40] == True. NoHalt dataset same length as Halt dataset. \
Using raw string. Bad performance. <citation needed>\
\>", "Subsection",
 CellChangeTimes->{{3.739926615123761*^9, 3.739926622799021*^9}, {
  3.739926746934023*^9, 
  3.739926771419258*^9}},ExpressionUUID->"42a59022-aefc-4229-8f21-\
ab2e54b784a9"],

Cell[BoxData[
 RowBox[{"NoHaltLarge2", "=", " ", 
  RowBox[{"GetSKHalt", "[", 
   RowBox[{"LargeTrainingData2", ",", "False"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.739872725292468*^9, {3.739885714033578*^9, 3.739885728841223*^9}, {
   3.7399267130524263`*^9, 
   3.739926722493677*^9}},ExpressionUUID->"fad2d926-33c0-44dc-aa1c-\
ee736fd0c0af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "NoHaltLarge2", "]"}]], "Input",
 CellChangeTimes->{{3.739872732934414*^9, 3.73987273631643*^9}, {
  3.739885741570846*^9, 3.739885745917328*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"9bf45c92-078b-4056-af8a-c012607741fb"],

Cell[BoxData["99"], "Output",
 CellChangeTimes->{
  3.739872736682164*^9, 3.7398857463289537`*^9, {3.7398860002897253`*^9, 
   3.73988600583879*^9}},
 CellLabel->
  "Out[198]=",ExpressionUUID->"3dd24324-ce9f-4d0f-8f51-27f4aadcb019"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"HaltLarge2", "=", " ", 
  RowBox[{"GetSKHalt", "[", 
   RowBox[{"LargeTrainingData2", ",", "True"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739885779060381*^9, 3.739885781696994*^9}, {
  3.739926726480783*^9, 
  3.739926727807658*^9}},ExpressionUUID->"45694c2e-b3fe-4de0-b8ff-\
610f60d43e78"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "HaltLarge2", "]"}]], "Input",
 CellChangeTimes->{{3.739885809142725*^9, 3.739885813009063*^9}},
 CellLabel->
  "In[200]:=",ExpressionUUID->"c714868e-a7d7-48f8-afb5-b43a3b9e5b3f"],

Cell[BoxData["1464"], "Output",
 CellChangeTimes->{3.739885813392064*^9, 3.739886009576686*^9},
 CellLabel->
  "Out[200]=",ExpressionUUID->"b662e897-c095-4d4f-b77f-fc7e81ddd4ab"]
}, Open  ]],

Cell["\<\
Many of these (200 from each depth) halt. (# not halting increases with depth)\
\>", "Text",
 CellChangeTimes->{{3.73992663899555*^9, 
  3.7399266574862833`*^9}},ExpressionUUID->"6b408b4e-7096-4de8-b015-\
02c7615ecc81"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HaltTrainLarge2", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"HaltLarge2", ",", 
     RowBox[{"Length", "[", "NoHaltLarge2", "]"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.7398858342497883`*^9, 3.739885844903159*^9}, {
  3.739886032991885*^9, 
  3.739886034122102*^9}},ExpressionUUID->"293a594b-410f-4f46-accf-\
6bd7d77d4ee1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TrainLarge2Sample", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"HaltTrainLarge2", ",", "NoHaltLarge2"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.739886034899781*^9, 3.739886067463236*^9}, {
  3.73988611573461*^9, 3.739886116299337*^9}},
 CellLabel->
  "In[206]:=",ExpressionUUID->"1bb39b7b-e19c-48d2-851c-5fe987404cfa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Large2Classify", " ", "=", " ", 
  RowBox[{"Classify", "[", "TrainLarge2Sample", "]"}]}]], "Input",
 CellChangeTimes->{{3.739886081933329*^9, 3.739886091600424*^9}},
 CellLabel->
  "In[208]:=",ExpressionUUID->"3178f4d3-40a0-44bf-8c86-1c142b5d6b2e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["198", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 198, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Text"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Fill" -> 
             "", "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Type" -> 
             "Text", "Version" -> {11.3, 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3139720177438361802, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5643421565728107793, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "\\", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {11.3, 0}, "ID" -> 3051290048872824615, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {-9013817937938426079, -4973948215836336071, 
                 2077270817744784973, 3408017859420023313}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2055599668730355056, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2242178343964704499]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2182274502795179204, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3987113361074832291]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.5, True -> 0.5]], "Prior" -> Automatic, 
    "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassPriors" -> 
      Association[1 -> 0.5238095238095237, 2 -> 0.47619047619047616`], 
      "Method" -> "Markov2", "TokenNumber" -> 4, "Order" -> 4, 
      "MinimumTokenCount" -> 0, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {1, 2, 3, 4}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 4303325802699135503, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NominalSequence", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Imputed"]], "NGramPosition" -> MachineLearning`SortedHashAssociation[
        Association["KeyHashes" -> CompressedData["
1:eJw9lkmubEUMRN+AFQAbYAFI6S6dXsKX/oglMEBixOAzZe8cZ1Olp1cl+16n
m4hw/vbnP3/89d/X19ePn/j3/e8f/377lR+/1/DQjCrhe7nPVcexalmYLpE1
TIbXx7HMNGasiXfOIT6vI3nFgkC2Im2KvzemjqHCV1qVp6VeR4hWEkCmLFnp
/hzekcOnrcySmpUfhy5zHWuo+9Cafh0dWZbNCDUhPRvPkWNpVnDqSBJMuQ41
H7EylmRMC9zPgdlravAiqXHMdUjnqHOQzlw+Vr3Dx+oINLIIV1Zx36AjyzNp
rZXFKM1bB+8H6RhP8zA/X6gMbbvn7MN0qr5QZgyEbmWKpBLuOTTcTJjX5JjA
Ic9hgxGlKF2hnYzwOkYUT65ZPV4G+3o1lwrlqVKklau87k5ipdMjGRQpfJ4j
ooZGxRqjguE8MMzw4FD3NTqU17DrkAINM6hBhwiF13OQ1iRgOq8xYVsfh+9W
GX2mwSEv3VEcbsq4e7Y8drNipLMrE+d81eklH8cYzMlBpNOSXDfdSKoGnQQC
KTOB73VMB6NinMNkqixvHVTnPQoBzlGgd9x0GYIz0SpC8iMjr8Pph6mPSsAF
b0jwOhxCkeWcTIIvfRB1WzXmygF9nNRVn0ObduBweYO3fMVxwLyK8gE/wpm4
hD+HTIPrYAisMo18DldYAQWZnzZ39YUCAwGeBhU0KMjyOkYP0EE0vSTdeGco
lGri8ApvMMh1K6c2xsl4BrSkDNK4DiADLawGo0ACXOZzSGI2sxYfxvQGpZJi
DdMBOwGkPXIq8GEeITQDWAR6cBxCcFEA7DLMqftRrTsHN8sapd48v1kJobOD
gETQSD9v5ULR4a1K0ij0+LzRDYKfNIBMeXHIcwSzWwuCeC5vXj8HdTULUSc4
Lf7UBysS5bJRFSOLOn7ZSg3BBb0iV9gGUda1Q39km/H2hBefY0+6hMoYZdL/
BVyOHdYzGf62YIFGvXbGx5DBgijQjBd/Kl0agUTT9NalenaUfGCFki0bGcfe
AmEggNZCZHh57Sg9Khg9OZUCdvrs2lKA0AKkgWLVt5+PGMFsS4LDSU71bUau
rKQBRoZMhmrbjPKi79FCk04Mi20OwIVWox7IxHDibDM8LBFkoHrvQfgThEWH
ThF4kivgI8NthjRM11vbe8Qjt7lkjwMd62kgornrkSGLkqpXZC9C1OTaJ5Bm
Ep5Uwxrx0xeg2SImrcZk2J9jbxUZUKx7Mhdf93mbtI92wH5onvPiA2wSf8FL
BW0ITI5rJ3uQBKh6WMZQjh1OoXh0YbaEQrN7bnWWvdCCxNA+P3bQgaBhXmgj
youMbzutQUwF6ZqQ2Juc187Cw4agzAR/CPix28ZLqzDaQZvk5Glbd6v5632M
umw70g+z0P1efpNB+sGl9+YC8cHIQDpzPnV5i8mWWpDQwMlr53qzuDy0yMMW
pM6PfW25Qpiwc20A/8fe68yDEGycJrTWtfexcLPgNppo68SH5/R8Sxg6BK4u
T9ju8Ic0AD+UgHBx7Xun5uz7h/Y94fQteu2yZ6qFlDX5zkVAep3RNeSMqvPy
mZlS6mDdaV/UoNGJA0r2rQBqZi8Fijj2BghO+AmVmPvl52xRYPV431lQDXn2
JB9IiX7wXvROeXZw0ChiSTBHu3hAB0APDeWOgKpJ3zq2nYsYYRANBbik//Kn
K32hAg8kS0v19DNlzzWRpL4dwqqTD3Tru1ffX+C7tOofO0xgp8KNVgaSvfUm
19LWcca1d9K8erf2UmUC0AsR5iJ26mINcUXlQgy3W2hg+LErrULZQBAK1NfW
vPZpSd8YPhcEftxz6S2oZdtRMPxjmvd5uoUmUhIor5atg7deDn1F7OsPCokq
XDtB4EJfEbnicNTVAS4G3jtz7Utq53/ilwCU0XsxrO8BOuf/2msg9g==
          "], 
         "Values" -> None, "DefaultValue" -> Missing[], "HashFunction" -> 
         Function[{
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$}, 
           Switch[
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, {
             BlankSequence[String]}, 
            Data`StringHash[
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$,
              "Murmur3-64"], 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
            
            Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
               
                Quotient[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                Mod[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                MachineLearning`PackageScope`ToPackedArray[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
, {1, 3, 2}]; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                Flatten[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q,
                  1]]; Data`StringHash[
               FromCharacterCode[
                Abs[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
], "Murmur3-64"]], 
            Blank[List], 
            Map[Switch[#, 
              Blank[String], 
              Data`StringHash[#, "Murmur3-64"], 
              PatternTest[
               Blank[], Developer`MachineIntegerQ], #, {
               PatternTest[
                BlankSequence[], Developer`MachineIntegerQ]}, 
              
              Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
                  Quotient[#, 2^48], 
                  Quotient[
                   Mod[#, 2^48], 2^32], 
                  Quotient[
                   Mod[#, 2^32], 2^16], 
                  Mod[#, 2^16]}; 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
                Flatten[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[], 
              Data`StringHash[
               StringJoin[
                ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$\
]]], "Version" -> {11.3, 0}]], 
      "ConditionalProbabilityMatrix" -> CompressedData["
1:eJxlVQtUTHkcrnb1MHRWIo/KEspjNd5a6pPd7YFSOpYWocEoq/KqsJ6n6Yge
yOuIbFTeZSPLpohKCo2auaNpZrp35t6ZHhSlsuXs2Tvj4pzmO797/ueee8//
/7vf7/u+OzI0cvE6MxMTk93spV9be4rYqod1drlQuVoOn3Nt3ufadKh0T7qp
qGnAgMrBviV5Uqzc9vIXu5USFFudfWh1lkRcp418wYZ6KMcPnfv3fAL3Janv
6rII3Bt98kqKBQU7q/DxPw9XIW1TQHtgkgb96w+apfozYNK9lrWE0bh4QQ81
jgujZu8wl6H7Xz1qsXCDa0ZhXBnsZq7Zs/RwAXKd1yWbWhOIIh/u/8aCwFBB
4uSyIRpcNUCNirJYBztLAj7ofpmyRwK3BZ2yf+bVYM2QeLZeIpD40PFOVIcl
6QkpPRG16MocUvDHZQbdB4r+dG3Q4NaxE9fXjmlGcPm8wXlHGiFcr4ccSwwo
RUHoxYye1UpQFntItvDUYf3brGwpdCea7sUMlOD1+ZmWwis0DG0JaNgPDPUk
kiVQDIgpcdgsw2b7J2ypkPm8x/ZUPwqS+PadI1iekrNf5LrT1ag93HN9x1AG
wSfXscXAxIC3Dz6vU1fe2Vvx/WOIJq4dyQsuh+nje8PlJfXIztJDiRcR1FLB
KCU0s5LZqoFlnqO1byPN7UNDGHjrcrCEhoXNjZtuR2jYVKY7nZirwumNFlr5
fgpF10r9Ttcr0XVCWkAXk6B1h4KTP9KIndE0e3gHg5zlIaRpnRIdvuff+54n
oVY1tAdcpTmePvdL4XDuh0O5H9SwpAdd9/yWwRjfY6N9j9H4TpwSYC0lYaBX
pIAoz3+LoJzEpI/hCzMtVFjicyjfxJmB2bGyiY4yBqVVLu+mzlfATf85GtJo
f3vnc9s3z1KjYdGUwVK+Buuz+G+PiqXoEqBTAALtYUKJ6K6E6+8VbuzLNyP6
kpy+1bh0khfT4dcE/9P1UvXY13B6s2w/v1oFz1Viu/d9lLghpg8GR5bBv9+D
SFlOCTz9RBse61rhZad3QCvXz1fE8+tEfJYfS4M8ZAgOIo5PX6fEFsPcXwKN
qR6NqaovfikQrUpKeE/C8HgzjRDTpILtIRRGG/hS4Gat+fQR0lfYe2fZ0KIB
UpjI9qfcSyC475HAPrw2yPkxhVPikHm7rJS4b5M/IbBA+6mvfU2IKh3Glhiv
A+86ipqLUTku1q2PK4VlglHuAW51nL8I6NWaOJlArjY8RxtOYKNLbsb9eDlO
L1hs12xFceep8KDcdlFcKsPda4z47J0fCe5euDaSQMpdp5aDs6tR1KXa1Voo
43gTY7Y6mX1CcnrVIGPK89+nbylBbRf9TNdZZsTfEkeH2KqZWqTrdrClRadb
5tghkfXg22SVOa6nEJIdmOZkTmBFyqMOlxUyePJuz+XdptGfmX5cFqCGjx9f
VeFBYtCpfsU/yhWcHxkuP7T4Icp6z1E1CaJozZvhhMrIT2lxLv+NEpKgdtrm
eFNqNN83GxbTrODmRaIud1JmaRvrL2v7WVEkjUHluJY4lYJBDqy+P825ERZB
9K0IPoPVq/SoQktYHBuF5eA5VUb7/EYCkaktU7IV2GBTKLQp1MGjr+xilHsT
5GRSxAxvKXgOW88k2kq5HHjF5VM+xyuJ/Nt6kEbvPzHTkXbjVBA8nGa+UEDi
WXffmGg2H37N0wcfg78emvEm3mRz3oBGo/wdG770QvSYau6cRyiMbxtWsZEE
v4HHRijJ8VjNrRXoYwCFfoViXqFYY6T31NjlOyPO0Gj+KP9p0gQtjsxpK3dK
eYYYA55wOv46r7Dkad5nnBgo5dbdacUMZo4zbTmpoJHhqm9ACy+PZvMguhUu
0aHO0aGtYEOGZUjD9duArfF9TlV0qtDpolfIK6z0L2YtoUQ078GwgY0Utjn5
1WUVS+Fe1T6nql0CXYfH/E2z6nHoknuO2QHKyO+9/xcDXK0sndVSJHW/8Not
rIF+an1lShjkMbrW6L53/vT2Q++8/3Sq+sucx3UUPHEPU4EldS7zmuR08JTj
oQb/A6l1v1Q=
       "], "DiscountMatrix" -> 
      SparseArray[
       Automatic, {125, 2}, 0., {
        1, {{0, 2, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18, 18, 18, 18, 20, 22, 24, 
          24, 24, 26, 26, 28, 28, 28, 30, 30, 32, 32, 34, 34, 36, 38, 40, 42, 
          44, 46, 46, 48, 50, 52, 54, 54, 56, 58, 60, 60, 62, 64, 64, 66, 66, 
          66, 66, 68, 68, 68, 68, 70, 72, 72, 72, 72, 72, 72, 72, 74, 74, 74, 
          74, 76, 76, 76, 78, 78, 78, 80, 80, 80, 82, 82, 84, 84, 84, 84, 86, 
          86, 86, 86, 88, 88, 90, 90, 90, 92, 94, 94, 94, 96, 96, 96, 96, 96, 
          98, 98, 98, 98, 100, 102, 102, 102, 102, 102, 104, 106, 106, 108, 
          110, 110, 112, 114, 116, 118, 118, 120, 120}, {{1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}}}, CompressedData["
1:eJxdkntMk2cUxqtIv35lSi/SaFWkzI5bp+JlgGs5BynWkDEt49rNSlFCvADj
koAURkBqEVtEYYoQYzYzsi0GWNlIlW0yEUXYFIlGI2rwgunGpV9TJqhY7Ydf
+MNf8ubkzXvynifPeSTpOfEZ81gsVpH7rO9f3Tlm8UHbBI0YEwPHf2JfJlCf
ev3MyAyJLLqRRcGdNzR2uOqRY871oyBkPY0DlnnpOrx0L6HbfL/XfH8ayIOB
Lv9MDsKj4sUtqoU4tp//tPr6CbAaJY8O6K2gEhReXpErxQ2JNOuwgT2+oSB7
CYr+/Dcup1iEYSUmDbXaCbW1BtluiRPu1SVEml55YsGAdrOeJDHQ9U4HyXqn
SxX468kBrQi1Dypf7PhYjFUydafgNwKF9HOXB+bVpTRH+lIQ0xJT0ch1wDnF
9ohOQwgz3x8rojiSSp4Mc2fvMuwW5WSciXb3H47f5d1OQY3D1+7wdUK6NvrA
whEH9DoSpn5fRoE9r6F7+TMKzu8zRqkDCEyxGbQ2Axu533j1tWkIDP4omVcX
wsEdpcLwciFnTj8XfQxtpRwsN9J4Ytbh/i3bFU64UB8fG/TDJPg09j52Ct1z
+y2yfgsFdcXZY30ONv5SMhhQOkig/NCRlZf8hNjnlN9wyoVY6+1TGp00A2tO
EedHM1/B0pHwmidWDsoiR9lfPPXAxA/HU8rX8jC2r9HSfI7EMsOo2vqQj9v0
PcklPULUN0u/N02kQbKIu2D45iE4Ttt7Ucr4IceJleLR6F1v4Nql1ivKYhYO
xsXojnoeA1RkX3Gt7QXV3Yibw9+ycZJP75XAz/bucUNi2uz+SRQfUTRI69OB
V/RPcpu5EpKef701NoCCh3/TUHD61m0bZycFLcavkj6op+DxxZcZgiYC42bz
RaLUHrq4Yh+JA2tWfanMZ+MW18ZP9/K5c/Niq69VmV9HwTaOXOsfmgnTFmPB
j6/VkDF4+pPjYYUQJykLH3YQ2HOBhosUk+MZpmJEzZPwRSHY8zONGEWmLpxM
nAaW39SDeNsUrFDTPnBxfoqqaSqIjUeZ3HkzdSBLAdY/3HnXnN2oOeuJ/38e
uemFTYAx/7ntbxfg7ial/ZSSwCr+Cb1YR+JfyurvXHk8TBjqyBrqEGIa8w+P
qSaRxZ18KaMnGEfe09va2jXfS0ZB6qJVGl0+BW8BzHypWQ==
         "]}], 
      "Discount" -> {0.5, 0.5}, 
      "DefaultUnigramProbabilities" -> {0.00004855547462976451, 
       0.0002458512599877074}, "Options" -> 
      Association[
       "Order" -> Association["Value" -> 4, "Options" -> Association[]], 
        "AdditiveSmoothing" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "MinimumTokenCount" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "ExcludedTokens" -> 
        Association["Value" -> {}, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.4820039694255791, 0.22890655487141595`], "Accuracy" -> 
         PlusMinus[0.8196783924903399, 0.052298050718226664`], 
         "EvaluationTime" -> 0.0029962766666666663`, "TestSize" -> 200, 
         "TrainingSize" -> 40, "TrainingTime" -> 0.467185, "TrainingMemory" -> 
         2.521048*^6, "ModelMemory" -> 35768., "ExperimentCount" -> 2, 
         "ModelUtility" -> 0.7160503469867021, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.39927398731802455`, 0.09879437843351715], 
           PlusMinus[0.8214146487312551, 0.20010757060915632`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.8564356435643576, 0.03572910147291488], 
           PlusMinus[0.7673267326732683, 0.04263986391401215]}, 
         "Configuration" -> {
          "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
           "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association["ID" -> 167259053756659]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "Markov", "Options" -> 
           Association[
            "Order" -> Association["Value" -> Automatic], "AdditiveSmoothing" -> 
             Association["Value" -> 0.1], "MinimumTokenCount" -> 
             Association["Value" -> Automatic], "ExcludedTokens" -> 
             Association["Value" -> {}]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.663698381097869, 0.7341006823347802], "Accuracy" -> 
              PlusMinus[0.663400489019475, 0.03391127296943533], 
              "EvaluationTime" -> 0.0029522966666666664`, "TestSize" -> 200, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.20583466666666667`, 
              "TrainingMemory" -> 495880., "ModelMemory" -> 35768., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.13470796962339712`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.26870175644015, 0.5003475725020793], 
                PlusMinus[3.485017709088125, 0.7214913462394175]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.668316831683169, 0.047281198781485664`], 
                PlusMinus[0.6584158415841591, 0.047608514395515916`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4820039694255791, 0.22890655487141595`], "Accuracy" -> 
              PlusMinus[0.8196783924903399, 0.052298050718226664`], 
              "EvaluationTime" -> 0.0029962766666666663`, "TestSize" -> 200, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.467185, 
              "TrainingMemory" -> 2.521048*^6, "ModelMemory" -> 35768., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.7160503469867021, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.39927398731802455`, 0.09879437843351715], 
                PlusMinus[0.8214146487312551, 0.20010757060915632`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8564356435643576, 0.03572910147291488], 
                PlusMinus[0.7673267326732683, 0.04263986391401215]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5610922389590617, 0.139279310880871], "Accuracy" -> 
              PlusMinus[0.7195121951219507, 0.10196058352403907`], 
              "EvaluationTime" -> 0.00136885, "TestSize" -> 40, 
              "TrainingSize" -> 158, "TrainingTime" -> 1.803427, 
              "TrainingMemory" -> 9846320, "ModelMemory" -> 35768, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7055833297746658, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5610922389590617, 0.09848534520285318]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7195121951219507, 0.0720970200235854]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00136885, "MeanCrossEntropy" -> 
             PlusMinus[0.5610922389590617, 0.139279310880871], "ModelMemory" -> 
             35768, "TrainingMemory" -> 9846320, "TrainingTime" -> 
             2.465825464135021], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 167254758789363]], "MaxTrainingSize" -> 198, 
      "LastReportingTime" -> 3.739871731161681`16.325431696332632*^9, 
      "PreprocessorEvaluationTime" -> 5.837890625`2.*^-6, 
      "PreprocessorMemory" -> 29048, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 9, "TimeBudgets" -> 1.5781282970464134`, 
          "ElapsedTimes" -> 1.291914, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 1.9726603713080162`, 
          "ElapsedTimes" -> 2.024269, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 158, "TimeBudgets" -> 2.465825464135021, 
          "ElapsedTimes" -> 1.968667, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[167263348723955]], "ID" -> 
         167267643691251]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "s[s[s[s[s[s[s[k[s]][k[k[s[s[k[k[s[k[k[k]][k]]][k]]][k[k]]]]][k[s]\
[k]][s[k]][s]]][k[s[k[s[k][k]]]]]]][s]][s[s[s[s[k[k[k][s[k[s[k]]][s]][k[s][k[\
k]][k]][s[s][k]]]]][s[s[k[k[s[k[s[s][k[s]][s]]][k[s]][k]]]]][s]][k[k[s]][s[s]]\
[s]]]][s[s]][s]][k[k[s[s[k[k[k[k[k[s[s[s][s[k]]]]]][k]][k[s[k[k[k[s]]]][k[s]]]\
]][s[s]]]]][s[k[s[s[s[s]]]]]][s[s[s]]][s[k]]]]][s[s[k[k]][k[s]]]][k[s[s[s][s]]\
[s[s]]]]][s[k]][k]"}, "ID" -> 6072081202834183359]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 7.58713, "MaxTrainingMemory" -> 19793360, 
      "DataMemory" -> 60104, "FunctionMemory" -> 127680, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 6, 13, 15, 31.183074`8.246493906035708}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.739886109683169*^9, 3.739886131262319*^9}},
 CellLabel->
  "Out[208]=",ExpressionUUID->"d4ce0638-3bd1-4cf2-a2e2-5df309ecbf7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Large2Classify", "[", 
  "\"\<s[s[s[k[s[s[k[s[k][s]]][k]]][k[k]][k]]]][s[s]][s]\>\"", "]"}]], "Input",\

 CellChangeTimes->{{3.739886136213604*^9, 3.7398861673672333`*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"02e7d264-947a-4632-9a78-62ce6a9b9fa8"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.7398861436596127`*^9, 3.7398861677838383`*^9}},
 CellLabel->
  "Out[212]=",ExpressionUUID->"3d727098-c791-4924-942d-8b800313c23a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Training Attempt #4: 200 random SK expressions at each of depths 1 - 10, \
halted if SKHalt[40] == True. NoHalt dataset same length as Halt dataset. \
Using raw string. Bad performance. <citation needed>\
\>", "Subsection",
 CellChangeTimes->{{3.739886185467464*^9, 3.739886189237029*^9}, {
  3.739887233138053*^9, 3.739887234073649*^9}, {3.7399267643400707`*^9, 
  3.739926774563212*^9}},ExpressionUUID->"4ef0e824-3016-446d-9e5a-\
da5a433ad970"],

Cell[CellGroupData[{

Cell["\<\

Training\
\>", "Subsubsection",
 CellChangeTimes->{{3.7398872588333893`*^9, 3.7398872606941757`*^9}, {
  3.739887339853415*^9, 3.73988734891711*^9}, {3.739956904717063*^9, 
  3.7399569049502363`*^9}},ExpressionUUID->"89befe17-c711-459e-9709-\
70bd8042bf56"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"exprs", " ", "=", " ", 
   RowBox[{"Monitor", "[", 
    RowBox[{
     RowBox[{"ParallelTable", "[", 
      RowBox[{
       RowBox[{"RandomSKExpr", "[", "10", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "5000"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739839560693535*^9, 3.739839561713284*^9}, {
   3.739839720672243*^9, 3.739839720937663*^9}, {3.739871318565632*^9, 
   3.739871319838084*^9}, {3.739887376438777*^9, 3.7398873765426207`*^9}, {
   3.739889645275683*^9, 3.739889656107108*^9}, 3.7398903992619963`*^9},
 CellLabel->
  "In[245]:=",ExpressionUUID->"fd7c33c1-9e99-47ef-8443-670c53c7060d"],

Cell[BoxData[
 TemplateBox[{
  "SubKernels`LocalKernels`LaunchLocal","nolic2",
   "\"Could not provide a subkernel license.\"",2,245,55,19905126280692532293,
   "Local","SubKernels`LocalKernels`LaunchLocal"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{{3.7398903914740057`*^9, 3.7398904098956633`*^9}, 
   3.7399267940972643`*^9},
 CellLabel->
  "During evaluation of \
In[245]:=",ExpressionUUID->"9342f474-0ad3-4061-845b-f6d7614eb7a2"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.739926797629715*^9},
 CellLabel->
  "Out[245]=",ExpressionUUID->"9af51e19-b99d-4c16-8a9d-820624ac8122"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"lengths", " ", "=", " ", 
   RowBox[{"Monitor", "[", 
    RowBox[{
     RowBox[{"ParallelTable", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"exprs", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "\[Rule]", " ", 
        RowBox[{"SKHalt", "[", 
         RowBox[{
          RowBox[{"exprs", "[", 
           RowBox[{"[", "n", "]"}], "]"}], ",", "40"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "5000"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7398395835500097`*^9, 3.7398395994731483`*^9}, {
  3.739839630748268*^9, 3.73983965862304*^9}, {3.7398396915370693`*^9, 
  3.7398397224856873`*^9}, {3.739871274002234*^9, 3.739871343945211*^9}, {
  3.73987144830448*^9, 3.739871506551502*^9}, {3.739871636487409*^9, 
  3.739871673911688*^9}, {3.739887360800568*^9, 3.739887380224165*^9}, {
  3.739887427759623*^9, 3.7398874296656837`*^9}, {3.739887596150679*^9, 
  3.739887599153121*^9}, {3.739887639721286*^9, 3.739887640320897*^9}, {
  3.739889409761922*^9, 3.7398894354309883`*^9}, {3.739890889471252*^9, 
  3.739890889599503*^9}},ExpressionUUID->"a1cd05f3-129e-419e-b1d0-\
86e7bfb3de59"],

Cell[BoxData[
 TemplateBox[{
  "ParallelTable","nopar",
   "\"No parallel kernels available; proceeding with sequential \
evaluation.\"",2,40,29,19905004455643035345,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.739890200734889*^9, 3.739890875779479*^9},
 CellLabel->
  "During evaluation of \
In[40]:=",ExpressionUUID->"ebe01dde-44ce-433e-85a0-f4ac5289b8e9"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.739889419962881*^9, 3.739889451043741*^9, 
  3.7398902086585073`*^9, 3.739890888238061*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"80e16d1e-87b0-4dab-a73b-6347f8ccd10c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LaunchKernels", "[", "]"}]], "Input",
 CellChangeTimes->{{3.739890238181552*^9, 3.739890238183168*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"a75fcc81-5b73-4501-9cde-d65447f9caef"],

Cell[BoxData[
 TemplateBox[{
  "SubKernels`LocalKernels`LaunchLocal","nolic2",
   "\"Could not provide a subkernel license.\"",2,30,21,19905004455643035345,
   "Local","SubKernels`LocalKernels`LaunchLocal"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.739890243773829*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"5b72aadb-c4d8-42dd-9321-add4fbb2600b"],

Cell[BoxData[
 TemplateBox[{
  "SubKernels`LocalKernels`LaunchLocal","nolic2",
   "\"Could not provide a subkernel license.\"",2,30,22,19905004455643035345,
   "Local","SubKernels`LocalKernels`LaunchLocal"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.739890248790697*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"221c54fd-924f-485e-a0c3-8b917098e573"],

Cell[BoxData[
 TemplateBox[{
  "SubKernels`LocalKernels`LaunchLocal","somefail",
   "\"\\!\\(\\*RowBox[{\\\"2\\\"}]\\) of \\!\\(\\*RowBox[{\\\"2\\\"}]\\) \
kernels failed to launch.\"",2,30,23,19905004455643035345,"Local",
   "SubKernels`LocalKernels`LaunchLocal"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.739890248847212*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"a0e872de-44d4-4186-8d5e-36a3cba8f3ad"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.739890248953924*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"d297b4a3-b046-492a-9c64-aa05c1cbbd95"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"gridexprs", " ", "=", " ", 
   RowBox[{"Monitor", "[", 
    RowBox[{
     RowBox[{"ParallelTable", "[", 
      RowBox[{
       RowBox[{"SKGrid", "[", 
        RowBox[{"exprs", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "1", ",", 
         RowBox[{"Length", "[", "exprs", "]"}]}], "}"}]}], "]"}], ",", "n"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739890285010448*^9, 3.7398903575612*^9}, {
  3.739890470573333*^9, 3.739890471514654*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"9be06e94-f4f9-4b80-8226-75e4be50f943"],

Cell[BoxData[
 TemplateBox[{
  "ParallelTable","nopar",
   "\"No parallel kernels available; proceeding with sequential \
evaluation.\"",2,39,28,19905004455643035345,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.739890472667004*^9, 3.739890515951591*^9},
 CellLabel->
  "During evaluation of \
In[39]:=",ExpressionUUID->"84841c32-68fe-4957-8340-e2a028d6e7ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exprs", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.73989037602929*^9, 3.739890377594261*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"60e849df-70f1-4ce9-99d8-5670fcb0eaf4"],

Cell[BoxData[
 RowBox[{"k", "[", 
  RowBox[{"s", "[", 
   RowBox[{"k", "[", 
    RowBox[{"k", "[", 
     RowBox[{"k", "[", 
      RowBox[{"k", "[", 
       RowBox[{
        RowBox[{"s", "[", 
         RowBox[{
          RowBox[{"s", "[", "k", "]"}], "[", 
          RowBox[{"k", "[", 
           RowBox[{"s", "[", 
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"s", "[", 
                RowBox[{"s", "[", 
                 RowBox[{"k", "[", 
                  RowBox[{"k", "[", 
                   RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "[", "k", "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", 
                    RowBox[{
                    RowBox[{"k", "[", "k", "]"}], "[", "k", "]"}], "]"}], "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "]"}], "]"}], "]"}], 
                "]"}], "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"s", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"s", "[", "k", "]"}], "[", "s", "]"}], "]"}], "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "[", "k", "]"}], 
                   "]"}], "]"}], "[", 
                 RowBox[{"s", "[", "k", "]"}], "]"}], "[", "k", "]"}], "]"}], 
              "[", 
              RowBox[{"k", "[", 
               RowBox[{
                RowBox[{"k", "[", 
                 RowBox[{
                  RowBox[{"s", "[", 
                   RowBox[{"k", "[", "k", "]"}], "]"}], "[", "k", "]"}], 
                 "]"}], "[", 
                RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "]"}], "]"}], 
            "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"s", "[", 
         RowBox[{"k", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"k", "[", "s", "]"}], "[", 
             RowBox[{"k", "[", 
              RowBox[{"k", "[", 
               RowBox[{"s", "[", 
                RowBox[{"k", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"k", "[", "s", "]"}], "[", "s", "]"}], "]"}], "[", 
                   RowBox[{"k", "[", "s", "]"}], "]"}], "[", "k", "]"}], 
                 "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
            RowBox[{"s", "[", 
             RowBox[{"k", "[", 
              RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"k", "[", 
            RowBox[{"k", "[", 
             RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
        "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.7398903779389067`*^9, 3.7398904603186283`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"a3339bb0-59c3-4ba8-9953-74f74d523c37"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.739887426009094*^9, 
  3.7398892221596193`*^9},ExpressionUUID->"602bfeea-f6fe-4969-949e-\
4850bd814f01"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739872560888192*^9, 
  3.73987261779112*^9}},ExpressionUUID->"6b42a872-1841-4a8f-8d31-\
a60d9d2ed8ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Count", "[", 
  RowBox[{
   RowBox[{"Values", "[", "lengths", "]"}], ",", "False"}], "]"}]], "Input",
 CellChangeTimes->{{3.739871292137867*^9, 3.7398712952778263`*^9}, {
  3.739871584814596*^9, 3.7398715859658127`*^9}, {3.739871730955071*^9, 
  3.739871787936625*^9}},
 CellLabel->
  "In[295]:=",ExpressionUUID->"ab0d1309-3ce2-4092-b86e-47d1e4cdae19"],

Cell[BoxData["903"], "Output",
 CellChangeTimes->{3.739887633115952*^9, 3.73988772008862*^9},
 CellLabel->
  "Out[295]=",ExpressionUUID->"e45e2f3b-cb8b-4d36-844e-73412171ad83"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"NoHalt", " ", "=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"lengths", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "False"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Halt", " ", "=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"lengths", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "True"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HaltTrain", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Halt", ",", 
     RowBox[{"Length", "[", "NoHalt", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TrainingData", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"HaltTrain", ",", "NoHalt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TrainingData", "/.", "\[VeryThinSpace]", 
   RowBox[{"Rule", "\[Rule]", "List"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TrainingData2", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ToString", "[", 
       RowBox[{
        RowBox[{"TrainingData", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Rule]", " ", 
      RowBox[{
       RowBox[{"TrainingData", "[", 
        RowBox[{"[", "n", "]"}], "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", 
       RowBox[{"Length", "[", "TrainingData", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7398718328071957`*^9, 3.7398719480890427`*^9}, {
  3.739882283988702*^9, 3.739882306676138*^9}, {3.73988778201646*^9, 
  3.7398877860400143`*^9}},
 CellLabel->
  "In[302]:=",ExpressionUUID->"8cc99caf-0b6c-430d-9372-e3b4518c938b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HaltClassifier2", " ", "=", " ", 
  RowBox[{"Classify", "[", "TrainingData2", "]"}]}]], "Input",
 CellChangeTimes->{{3.739887923333466*^9, 3.7398879233627453`*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"21197dee-f9e7-484d-9f7c-b153eca69f48"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1806", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1806, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Text"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Fill" -> 
             "", "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Type" -> 
             "Text", "Version" -> {11.3, 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3139720177438361802, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5643421565728107793, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "\\", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {11.3, 0}, "ID" -> 3051290048872824615, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {-9013817937938426079, -4973948215836336071, 
                 2077270817744784973, 3408017859420023313}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2055599668730355056, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6577660353193586174]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5749777139264552649, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2672999966851599696]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.5, True -> 0.5]], "Prior" -> Automatic, 
    "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassPriors" -> 
      Association[1 -> 0.5033112582781457, 2 -> 0.4966887417218543], "Method" -> 
      "Markov2", "TokenNumber" -> 4, "Order" -> 4, "MinimumTokenCount" -> 0, 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {1, 2, 3, 4}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 4721652067950740814, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NominalSequence", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Imputed"]], "NGramPosition" -> MachineLearning`SortedHashAssociation[
        Association["KeyHashes" -> CompressedData["
1:eJw9lkmubEUMRN+AFQAbYAFI6S6dXsKX/oglMEBixOAzZe8cZ1Olp1cl+16n
m4hw/vbnP3/89d/X19ePn/j3/e8f/377lR+/1/DQjCrhe7nPVcexalmYLpE1
TIbXx7HMNGasiXfOIT6vI3nFgkC2Im2KvzemjqHCV1qVp6VeR4hWEkCmLFnp
/hzekcOnrcySmpUfhy5zHWuo+9Cafh0dWZbNCDUhPRvPkWNpVnDqSBJMuQ41
H7EylmRMC9zPgdlravAiqXHMdUjnqHOQzlw+Vr3Dx+oINLIIV1Zx36AjyzNp
rZXFKM1bB+8H6RhP8zA/X6gMbbvn7MN0qr5QZgyEbmWKpBLuOTTcTJjX5JjA
Ic9hgxGlKF2hnYzwOkYUT65ZPV4G+3o1lwrlqVKklau87k5ipdMjGRQpfJ4j
ooZGxRqjguE8MMzw4FD3NTqU17DrkAINM6hBhwiF13OQ1iRgOq8xYVsfh+9W
GX2mwSEv3VEcbsq4e7Y8drNipLMrE+d81eklH8cYzMlBpNOSXDfdSKoGnQQC
KTOB73VMB6NinMNkqixvHVTnPQoBzlGgd9x0GYIz0SpC8iMjr8Pph6mPSsAF
b0jwOhxCkeWcTIIvfRB1WzXmygF9nNRVn0ObduBweYO3fMVxwLyK8gE/wpm4
hD+HTIPrYAisMo18DldYAQWZnzZ39YUCAwGeBhU0KMjyOkYP0EE0vSTdeGco
lGri8ApvMMh1K6c2xsl4BrSkDNK4DiADLawGo0ACXOZzSGI2sxYfxvQGpZJi
DdMBOwGkPXIq8GEeITQDWAR6cBxCcFEA7DLMqftRrTsHN8sapd48v1kJobOD
gETQSD9v5ULR4a1K0ij0+LzRDYKfNIBMeXHIcwSzWwuCeC5vXj8HdTULUSc4
Lf7UBysS5bJRFSOLOn7ZSg3BBb0iV9gGUda1Q39km/H2hBefY0+6hMoYZdL/
BVyOHdYzGf62YIFGvXbGx5DBgijQjBd/Kl0agUTT9NalenaUfGCFki0bGcfe
AmEggNZCZHh57Sg9Khg9OZUCdvrs2lKA0AKkgWLVt5+PGMFsS4LDSU71bUau
rKQBRoZMhmrbjPKi79FCk04Mi20OwIVWox7IxHDibDM8LBFkoHrvQfgThEWH
ThF4kivgI8NthjRM11vbe8Qjt7lkjwMd62kgornrkSGLkqpXZC9C1OTaJ5Bm
Ep5Uwxrx0xeg2SImrcZk2J9jbxUZUKx7Mhdf93mbtI92wH5onvPiA2wSf8FL
BW0ITI5rJ3uQBKh6WMZQjh1OoXh0YbaEQrN7bnWWvdCCxNA+P3bQgaBhXmgj
youMbzutQUwF6ZqQ2Juc187Cw4agzAR/CPix28ZLqzDaQZvk5Glbd6v5632M
umw70g+z0P1efpNB+sGl9+YC8cHIQDpzPnV5i8mWWpDQwMlr53qzuDy0yMMW
pM6PfW25Qpiwc20A/8fe68yDEGycJrTWtfexcLPgNppo68SH5/R8Sxg6BK4u
T9ju8Ic0AD+UgHBx7Xun5uz7h/Y94fQteu2yZ6qFlDX5zkVAep3RNeSMqvPy
mZlS6mDdaV/UoNGJA0r2rQBqZi8Fijj2BghO+AmVmPvl52xRYPV431lQDXn2
JB9IiX7wXvROeXZw0ChiSTBHu3hAB0APDeWOgKpJ3zq2nYsYYRANBbik//Kn
K32hAg8kS0v19DNlzzWRpL4dwqqTD3Tru1ffX+C7tOofO0xgp8KNVgaSvfUm
19LWcca1d9K8erf2UmUC0AsR5iJ26mINcUXlQgy3W2hg+LErrULZQBAK1NfW
vPZpSd8YPhcEftxz6S2oZdtRMPxjmvd5uoUmUhIor5atg7deDn1F7OsPCokq
XDtB4EJfEbnicNTVAS4G3jtz7Utq53/ilwCU0XsxrO8BOuf/2msg9g==
          "], 
         "Values" -> None, "DefaultValue" -> Missing[], "HashFunction" -> 
         Function[{
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$}, 
           Switch[
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, {
             BlankSequence[String]}, 
            Data`StringHash[
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$,
              "Murmur3-64"], 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
            
            Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
               
                Quotient[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                Mod[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                MachineLearning`PackageScope`ToPackedArray[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
, {1, 3, 2}]; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                Flatten[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q,
                  1]]; Data`StringHash[
               FromCharacterCode[
                Abs[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
], "Murmur3-64"]], 
            Blank[List], 
            Map[Switch[#, 
              Blank[String], 
              Data`StringHash[#, "Murmur3-64"], 
              PatternTest[
               Blank[], Developer`MachineIntegerQ], #, {
               PatternTest[
                BlankSequence[], Developer`MachineIntegerQ]}, 
              
              Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
                  Quotient[#, 2^48], 
                  Quotient[
                   Mod[#, 2^48], 2^32], 
                  Quotient[
                   Mod[#, 2^32], 2^16], 
                  Mod[#, 2^16]}; 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
                Flatten[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[], 
              Data`StringHash[
               StringJoin[
                ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$\
]]], "Version" -> {11.3, 0}]], 
      "ConditionalProbabilityMatrix" -> CompressedData["
1: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
       "], "DiscountMatrix" -> 
      SparseArray[
       Automatic, {125, 2}, 0., {
        1, {{0, 2, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18, 18, 18, 18, 20, 22, 24, 
          24, 24, 26, 26, 28, 28, 28, 30, 30, 32, 32, 34, 34, 36, 38, 40, 42, 
          44, 46, 46, 48, 50, 52, 54, 54, 56, 58, 60, 60, 62, 64, 64, 66, 66, 
          66, 66, 68, 68, 68, 68, 70, 72, 72, 72, 72, 72, 72, 72, 74, 74, 74, 
          74, 76, 76, 76, 78, 78, 78, 80, 80, 80, 82, 82, 84, 84, 84, 84, 86, 
          86, 86, 86, 88, 88, 90, 90, 90, 92, 94, 94, 94, 96, 96, 96, 96, 96, 
          98, 98, 98, 98, 100, 102, 102, 102, 102, 102, 104, 106, 106, 108, 
          110, 110, 112, 114, 116, 118, 118, 120, 120}, {{1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}}}, CompressedData["
1:eJw1UmtMkwcUbXn0+74VTG1naycMEEtbgoAgQxjsXku1FDoYsggtLFMe4+k6
BSION2IBI04HYhuW1UXm1hoQ2FwiyiZgIhDGdKAC6rLxMEBRNHyuDitgWZe6
m9ycP/ecnJtz/LK0u3KZDAaj3LFKffKz2JTX0bI9z9AeykMPeYatvJ3AU8fG
EuuZJN5zcxwxaGAwnVi566tZk4SGzp721ivhNOQG69zKWpdgLlQ4E1+6BOaq
E2uoByx8bM5qFPFJzLre1NgXmQWfH5+o7y8pgOqM0ls7fMS4Wx9xePO4GN/9
2INP9QnQ8m1YkfkGH93DwmaEMis8PRvjq86zQkbntlZBHQvnxRNvbraS2LOy
6pgF0DCcfnz8ig4PW/j4XryifpC3HpP3fnBh/AYLZ1Nzj/01TKD2Ha6kdCMN
6t41IcYIGs5whruehEhwIVwul4+IcHpn1MBVfQAuV5k5+a8F4D8WpWFLEA3l
z6L95UiDmDmY3aa0guFQSkOUwgpP2Gk/VW+gYYf2s5mcSAeKLgbHzhIYdb6Q
d/dHElcvFItdFwnMaflU+tBAYvKZDhulJ1G7m7cas5PERs+X2VQ6hRnM7t9f
xBF49cqozBxthbLapr6441ZIzLZ+0cOnYU+o5ucEfxqGRmKOrKoIjOGWHaS/
IXGjYb9d08bDH8iumiNF69BtNPvcWuUKjA+dTAoiVqCycNm7K4zEuAIPBZtL
ok9Mz6MZl7WY7M8h3f7DnOfSYCEXJ7m5HmMCHk7fP1HjmR4CzaNfUp3KKDjZ
u1+sKJZgr67k0GKkFCvmCdbQJTvMvrEwTZTYYZPfrdrzR/dC6lNTq22sGKpq
zt6v6WDh7dNyqsDs+JfdXduylcK5OqOecZDAjnZpUGZzKCy9ndNU8jISok1t
gXNiGtJ6+ey/E2hosd5chlAavAaGAlIc+azky+5VyEiMdD93+1Qsib8k7Gv0
FVA478P7IzGfQOF3qaolMYWPDGreiITAi1MPIu5oOND84eWPVAIhpCvr5m0a
X9DeTPpzVCAFRXi57sB6Rx6nhZeNvxI4+ao3KXZnj5LQdSu6BuLjTOMltVGE
hnSttl5tA4LXybSobGCpFhWmuVAoq1NlPhxnoc7VyV9cdvKFfRVH490p9L6j
dp8yEejdpjNEX+Pib90btni9xUXDiz3XhHcJNPW/PxHHJnHKs1++Lo+D9uHJ
A9s6OCi0OXW+d3Hqmj4p/vr6cxFWqho2KRsCkPPK7/8oJ3XVA1407BsYNAcF
0vAvF8GXLA==
         "]}], "Discount" -> {0.5, 0.5}, 
      "DefaultUnigramProbabilities" -> {5.522573519259975*^-6, 
       8.454514710855598*^-6}, "Options" -> 
      Association[
       "Order" -> Association["Value" -> 4, "Options" -> Association[]], 
        "AdditiveSmoothing" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "MinimumTokenCount" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "ExcludedTokens" -> 
        Association["Value" -> {}, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.6516598420400009, 0.025153315910421206`], "Accuracy" -> 
         PlusMinus[0.635214497006084, 0.01711697783573629], "EvaluationTime" -> 
         0.004044216666666666, "TestSize" -> 800, "TrainingSize" -> 300, 
         "TrainingTime" -> 2.90293975, "TrainingMemory" -> 3.309356*^7, 
         "ModelMemory" -> 35768., "ExperimentCount" -> 3, "ModelUtility" -> 
         0.554948376879862, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6547441916146143, 0.028638865705825124`], 
           PlusMinus[0.6944475556771457, 0.03324809478542862], 
           PlusMinus[0.6276794860666205, 0.023762984647949445`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6387256083744028, 0.034070504175355815`], 
           PlusMinus[0.6357582154194823, 0.027648576854209468`], 
           PlusMinus[0.6323049144471528, 0.027906934218259332`]}, 
         "Configuration" -> {
          "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
           "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association["ID" -> 65884940671029]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "Markov", "Options" -> 
           Association[
            "Order" -> Association["Value" -> Automatic], "AdditiveSmoothing" -> 
             Association["Value" -> 0.1], "MinimumTokenCount" -> 
             Association["Value" -> Automatic], "ExcludedTokens" -> 
             Association["Value" -> {}]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.7374221708782005`, 0.8181564357703971], "Accuracy" -> 
              PlusMinus[0.510985183501314, 0.01917018897161842], 
              "EvaluationTime" -> 0.004135433636363638, "TestSize" -> 1000, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.16233763636363638`, 
              "TrainingMemory" -> 1.2922509090909092`*^6, "ModelMemory" -> 
              35768., "ExperimentCount" -> 10, "ModelUtility" -> 
              0.09316559557879585, "MeanCrossEntropyHistory" -> {
                PlusMinus[3.3192544799491914`, 0.4277076086317858], 
                PlusMinus[2.9637897958717385`, 0.48833522565594756`], 
                PlusMinus[4.2633156678742905`, 0.6216895373912922], 
                PlusMinus[11.27025613189767, 1.36380456404139], 
                PlusMinus[6.028889400778038, 0.8777774640633256], 
                PlusMinus[5.373659855959838, 0.7531438003810385], 
                PlusMinus[2.7067442833798796`, 0.44111517465284883`], 
                PlusMinus[3.131333955405889, 0.44047692852097414`], 
                PlusMinus[4.197621554318023, 0.5465898683936422], 
                PlusMinus[4.179873645526841, 0.6226988231450553]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.48019801980198035`, 0.04993684749324002], 
                PlusMinus[0.5495049504950499, 0.049800607179954416`], 
                PlusMinus[0.5495049504950499, 0.049800607179954416`], 
                PlusMinus[0.5000000000000003, 0.04999512254661126], 
                PlusMinus[0.49009900990099037`, 0.049975705079116424`], 
                PlusMinus[0.49009900990099037`, 0.049975705079116424`], 
                PlusMinus[0.5594059405940598, 0.04970306403042825], 
                PlusMinus[0.48019801980198035`, 0.04993684749324002], 
                PlusMinus[0.47029702970297055`, 0.04987850435483752], 
                PlusMinus[0.53960396039604, 0.04987850435483753]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8799295503574265, 0.05819529268860652], "Accuracy" -> 
              PlusMinus[0.5622053948066935, 0.03189920661839452], 
              "EvaluationTime" -> 0.004258719, "TestSize" -> 900, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.5748251, 
              "TrainingMemory" -> 4.8125408*^6, "ModelMemory" -> 35768., 
              "ExperimentCount" -> 9, "ModelUtility" -> 0.4061944381536935, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9455411255175554, 0.07538624037329032], 
                PlusMinus[0.7670205811908769, 0.08829778525209236], 
                PlusMinus[0.813991480769069, 0.0872668061895017], 
                PlusMinus[0.7997240729106472, 0.08292314920399599], 
                PlusMinus[1.0342891277448387`, 0.14265817348255944`], 
                PlusMinus[1.1568790755890215`, 0.12187573467677892`], 
                PlusMinus[0.7313609938740004, 0.09603711217100566], 
                PlusMinus[0.8267125260948242, 0.09072959231027275], 
                PlusMinus[1.041960236147629, 0.09091625850433464]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4306930693069308, 0.04944855134548158], 
                PlusMinus[0.6089108910891095, 0.04891571692389512], 
                PlusMinus[0.5693069306930698, 0.04958575896603499], 
                PlusMinus[0.6089108910891095, 0.04891571692389512], 
                PlusMinus[0.6089108910891095, 0.04891571692389512], 
                PlusMinus[0.5099009900990102, 0.04999512254661126], 
                PlusMinus[0.668316831683169, 0.047281198781485664`], 
                PlusMinus[0.5990099009900995, 0.04911373703086736], 
                PlusMinus[0.4405940594059407, 0.049585758966034954`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6516598420400009, 0.025153315910421206`], 
              "Accuracy" -> PlusMinus[0.635214497006084, 0.01711697783573629],
               "EvaluationTime" -> 0.004044216666666666, "TestSize" -> 800, 
              "TrainingSize" -> 300, "TrainingTime" -> 2.90293975, 
              "TrainingMemory" -> 3.309356*^7, "ModelMemory" -> 35768., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.554948376879862, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6547441916146143, 0.028638865705825124`], 
                PlusMinus[0.6944475556771457, 0.03324809478542862], 
                PlusMinus[0.6276794860666205, 0.023762984647949445`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6387256083744028, 0.034070504175355815`], 
                PlusMinus[0.6357582154194823, 0.027648576854209468`], 
                PlusMinus[0.6323049144471528, 0.027906934218259332`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6774669867474924, 0.03480191320960729], "Accuracy" -> 
              PlusMinus[0.612183785682027, 0.03628215231378964], 
              "EvaluationTime" -> 0.004091664819944598, "TestSize" -> 361, 
              "TrainingSize" -> 1445, "TrainingTime" -> 14.14649, 
              "TrainingMemory" -> 138875664, "ModelMemory" -> 35768, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.531705366303903, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6774669867474924, 0.024608668828778994`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.612183785682027, 0.025655355937123835`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.004091664819944598, "MeanCrossEntropy" -> 
             PlusMinus[0.6774669867474924, 0.03480191320960729], 
             "ModelMemory" -> 35768, "TrainingMemory" -> 138875664, 
             "TrainingTime" -> 17.843002646744257`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            4], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 65880645703733]], "MaxTrainingSize" -> 1806, 
      "LastReportingTime" -> 3.739873589165394`16.325431912094196*^9, 
      "PreprocessorEvaluationTime" -> 4.67431640625`2.*^-6, 
      "PreprocessorMemory" -> 29048, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 9.135617355133064, 
          "ElapsedTimes" -> 9.154103, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 11.41952169391633, 
          "ElapsedTimes" -> 11.632356999999999`, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 14.274402117395407`, 
          "ElapsedTimes" -> 13.349257999999999`, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 1445, "TimeBudgets" -> 17.843002646744257`, 
          "ElapsedTimes" -> 16.181756, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[65889235638325]], "ID" -> 65893530605621]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "s[s[k[s[s][k[s[k[k[s[k[k[k[s]]][s[s[k][s[k]]]][k[k[s[k]]]]][s]]][\
k[s[k[k]][k[s[s[s]]]]][s]][k[k[k][s[s[k[s]]]]][k]]][k[k[s]][s]]][k]]][k[s[k[s[\
k[s[k[k]][k[k[s]][s]][s[s]]]]]]][s[s]][k]]][k[k[s[k[s[s[k[k]]]][k]]]][s]]][s[\
s[k]]][s[k]][k]"}, "ID" -> 3791095496786132862]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 54.099669, "MaxTrainingMemory" -> 154001320, 
      "DataMemory" -> 922040, "FunctionMemory" -> 135616, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 6, 13, 46, 29.196871`8.217911292279094}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{
  3.7398720836326942`*^9, 3.7398722001885653`*^9, 3.739872319231086*^9, {
   3.739872435975215*^9, 3.739872464067819*^9}, 3.739885599881514*^9, 
   3.739886255486075*^9, 3.7398879326712627`*^9, 3.7398879892496758`*^9},
 CellLabel->
  "Out[309]=",ExpressionUUID->"a0258500-662e-4019-af06-e55574ac06c6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", "Subsubsection",
 CellChangeTimes->{{3.739888175914508*^9, 
  3.739888178394906*^9}},ExpressionUUID->"643b5b98-ed77-4e73-903f-\
88de8bc6bc37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.739872120965352*^9, 3.739872139320775*^9}, {
  3.7398880643700323`*^9, 3.73988807803023*^9}},
 CellLabel->
  "In[331]:=",ExpressionUUID->"8ea906d1-c055-4ab7-938d-9082dac8ec31"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxd0b9Kw1AYh+EgHTpmcOjQoUotpbRStWpMW3PsFYiTblHp0GpRUEQstBGK
OgZcOgah4Ojo2Atw8BK8AaGX4J/fe5YGwsObL+fASZZOLg7aC47jrPzef+qa
Bf+EI8MDeWs7LaMn2pWv9/SiTAZ0Rn726az8uqNz0o3oZWns+rwMr+iCnN3Q
RdrOS3Lao8toe5X9z+kq5zmj11jfpdfn5husD+maTE7pTTzGLZlr09us79Ce
jC/pHbl/Tfucb0jXZdp+/wY+Y1OG9v1d+f5ABzJj/5dhfzqip4/M9+RHzJw+
HDNvSe/FfB+l/LcKXZ6YHzmTQio=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 2710.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{{3.739888070915205*^9, 3.73988807499928*^9}},
 CellLabel->
  "Out[331]=",ExpressionUUID->"14c52d85-0d55-4f4c-b008-26b8fcbed432"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, 
   3.7398880805271807`*^9},
 CellLabel->
  "In[332]:=",ExpressionUUID->"e45c8419-a650-4c5e-beb0-af0a476bdd78"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzzmKAkEUgOHCyNBgggkMVAbRYZB237VdMhNxi9wXFERcElOP4FHmCH0U
jzBHcHl/I/Mamp+vX1dVd3C+76w8xpjo435Wrr/qK+2zzQPp4YS90ssR+6S/
rj+k1gF/Sp0d9ktvWxyQXt33Q8w3+Iv1axymSxqRTmf4mw7pD987wjE1t6i7
Pk4nNCG1FzjJfnOc4nz3/9LqezLq/Sz7jXGODmhenV+gXVpkfR+XpE4blzmv
hyu4havK9n9flE1NzZVNXc2VTUPNlU1Tzd++A6jtQL4=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 373.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888081074789*^9},
 CellLabel->
  "Out[332]=",ExpressionUUID->"274540bf-31ff-4c99-bb6e-743580b40268"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888082108923*^9}},
 CellLabel->
  "In[333]:=",ExpressionUUID->"9635c932-d922-4b93-9050-b23a04ea3a79"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdz79KQmEAhvGDU20ODWdoMAmRkNAys3/66RWIutikgqAOmphuwRFLoqYE
XRp0cNDNS/ASugRvQHBstHifsyjIw++8nnM+T8rNbMVjWVbg7/tffbZJNWe4
oK4K+EB1ytjLXsJH7I/YVovufqyuK9jHXsd+dVrDp7RLA2rQwUHV7uEz7u/j
kLp8w+eq7x2H984XYa/iC+ye93LvfFHVaeAr3tfCMTXj+lrdPuE49z/jG9qm
t6rp4Dt17f7+nue/4AfVfsUJNfyBk+rvJzb8nyHnwKEv9pQaHbHjn2/2tFqc
sOP8zBwuxp3pBg/mZgcJrkOj
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 3139.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888083084896*^9},
 CellLabel->
  "Out[333]=",ExpressionUUID->"e00a8d1b-b4a1-4555-bd36-8d2de39f358e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.7398880845740957`*^9}},
 CellLabel->
  "In[334]:=",ExpressionUUID->"f6e3167b-aa48-4bbe-984a-3d3f3f3c1eaa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzjsOAVEYxfEblVKhUCiGiCAi4/1mPAqNZCJRiRgShQa9SKai02gVSguw
AEuxhFmCx3duxJnk5p/fnEzuRBab0dKnlEq+z6fyeO1vBkcLL6SOtl9qagek
2wMclN70HpI+T3BYej/DhvSiHZXaezgmtXZwXOpt4QT+TzslNdZwWnpdwRmp
O4VN6WMOZ3HfBM6hNprHPoYL+H4GF7E7cAkdomVyhVwl18h1coPcJLfIbbL1
b5esOrSTVZd2surRTlZ92n9+Af/iOnA=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 1261.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888085258939*^9},
 CellLabel->
  "Out[334]=",ExpressionUUID->"3c150d77-b0cb-4899-b573-73d27e6293a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888086338006*^9}},
 CellLabel->
  "In[335]:=",ExpressionUUID->"85e1a9c2-551c-4d3f-944c-482b7923347f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdy00KgkAYh/GXVi1dtGjRIiOiIkRNK/tyzE7QEQRXFl7Bo3mUjtAR+pgX
wmdgePjNn3GL+lb2RGTxud/a80p/eVZGH2zNXd23bR9qx7Yp1ANtoh3Co+4/
GcMTeArP4Dm8hFewB/twAIfwGo7gGN7AW3gHJ/AePsBH+ASf4RQ2XTewZNhh
uWCHJccOyxX732/RQSgS
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 238.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888086923654*^9},
 CellLabel->
  "Out[335]=",ExpressionUUID->"40d739a3-48c5-4c44-bec7-020ea9ed647e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888088029511*^9}},
 CellLabel->
  "In[336]:=",ExpressionUUID->"45cd9b44-41a2-4997-93fc-9cba5e2e9324"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxd0csKQVEYhuE/c2VgYGCwSUjaOZ8Py+EGUAYM7JQycwv7UlyKS8NeH/Ku
Wr09fWu2Cufb9pIys8rrvpucKO2Sxldfy/jeIzmr/SDnfN1RzqsnNdD7jVxU
92rJ97GTy+parcI1taHW4RBmm3ALbsMduAv34D48gIfwCB7DE3gKz+A57P4d
w7bADtsSO2wr7PD33z77z09cFivM
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 196.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888088747897*^9},
 CellLabel->
  "Out[336]=",ExpressionUUID->"5067c0ae-5209-4cfa-a62f-46413efcd9e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.73988809017157*^9}},
 CellLabel->
  "In[337]:=",ExpressionUUID->"a22581d5-062d-4dd3-a98a-3eeec16c9af5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzTsKwkAUheGLlWUKCwuLKCIqEnzGtxmjQuoUgpUxEAiKuIUsxaW4lCzB
Jfi4B8QzMPx8c5mZanwLk4KItN77U11P75v8YnCAntGiNrrCltZO4ZI2T+Cy
9h7BFW0Ww7b2cYRreP8E1+l+Az2gTa0J4Tbe28Md/LeDHXIXDuAe6qJ98oA8
JI/I3DF5Qp6SZ+Q5eUFekldkj2z+nZFlTXOy+DQny4bmZNnS/OcXR7I0FA==

        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 235.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888090914624*^9},
 CellLabel->
  "Out[337]=",ExpressionUUID->"39a7b06a-a7c3-4917-a59e-76efd4a30bdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888092040552*^9}},
 CellLabel->
  "In[338]:=",ExpressionUUID->"42c27720-9d27-4454-83b1-ea6dae152769"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyUEKglAUheFD26iBxSMkQjK1rLTMnDhtCYFjt+AaXFFLS/FC+D/u4+fj
rD/tu1lIcsMfW/duuGWh8X2rqVpN7UqzZ82sG2tkdfAW9uEdvIcD+ACH8BFm
YziBT/AZTuELfIVvcAbn8B1+wMXcHawndlgldlgv7LAq7H//AM/4KGA=
        
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 41.5}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888092562531*^9},
 CellLabel->
  "Out[338]=",ExpressionUUID->"5cfa31e1-7b27-447f-a202-44d07837b36e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.7398880936507874`*^9}},
 CellLabel->
  "In[339]:=",ExpressionUUID->"47ae783a-5223-465f-86a5-f6c83405bad2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[{{1., 277.}, {2., 292.}, {3., 322.}, {4., 265.}, {5., 295.}, {
        6., 475.}, {7., 688.}, {8., 886.}, {9., 1489.}, {10., 1378.}, {11., 
        2497.}, {11.265625, 2854.}}], LineBox[CompressedData["
1:eJxd0L0LAWEAx/Enf4HRotiUS97fX87LaLhMNyuzCyGWR1FMLimLQSnZrEb+
A4O/wF9gMLBx/X7P4ur69un3dPWcv9lutFxCCO/vdWpfP57tKagL56kfUKGh
jz0dQrUNHUbnSzqCDm06ipqSjqHuMR1Hd8oJVPboJOpTTqG3Dp1GLxadQZ9d
Oota6nyOe5/O/50voMaALvL76nyJ+4jW0TPvJ2l7wr2MHqfcaWPGvYK+aUkH
FtyrqElL2lL/u4a+Vtzp+1r/AsRPO/U=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 2854.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888094103601*^9},
 CellLabel->
  "Out[339]=",ExpressionUUID->"f391ac03-52f8-4eee-a8dd-91a275403410"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888095144308*^9}},
 CellLabel->
  "In[340]:=",ExpressionUUID->"3ad10fd6-991f-49fa-8aaa-a5953433ab07"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyckJwlAUheGDPQhZuFCJIiLiPA9xqMAKRHCjxFhCSnFpBa7tw2ZMuBfE
/3EfPx+nckoO54KkWvbzfl5xdsVI+XverQqsj8RdsqY3d9l6jN1V36/u0Pq+
uOtwA27CLbgNd+Au3IP78AAewiN4DE/gKTyD5/ACXsIreA1H/05hbbDD2mKH
tcMOa4/95y/AmUxp
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 211.37500000000003`},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {214., 266.5}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888100222271*^9},
 CellLabel->
  "Out[340]=",ExpressionUUID->"0585cf65-b422-4909-9463-f39758a0e5ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888101615326*^9}},
 CellLabel->
  "In[341]:=",ExpressionUUID->"bcf76d68-c278-4a57-be2c-9808db5d3b69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzDsKwkAYReEfK0sLCwuLKCIqIvH9NvGxAhEbLYIYLFO4gSzBJbhEl+Bj
rohnYDh8c2FKp2QbZ8ys/rrvuvMIPrldQz24+l9nXaOLnHO9J3Le1Yvlgmt4
kItyJHv67yyX1b1aUY9q1TXdyTU1UBtwE27BPtyGO3AX7sF9eAAP4RE8hifw
FJ7Bc3gBs+G/U9iW2GFbYYdtjR22Dfafn0JWMFI=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 313.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888102248275*^9},
 CellLabel->
  "Out[341]=",ExpressionUUID->"1ab955e9-c6c0-49fe-942a-4b223f226ef8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888103321013*^9}},
 CellLabel->
  "In[342]:=",ExpressionUUID->"d9859027-487a-4a29-b8b1-80de7976aea9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzU8KgkAYh+GPVi1btHDRwiLEJKK/ppY6lSfwCEG0K7qBR+tIHkFzJmTe
geHlmd9ipvd3+RiIyKK9v+pT513cjzIPyvZQt3oZj3S/T+Ox6d8OPFHWP+LC
M3gOe7APB/ASXsFreANv4R28hw9wCB/hCI7hBD7BZziFMziHle0Klgt2WK7Y
Yblhh6XA3rsBNohGHA==
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 274.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888103800686*^9},
 CellLabel->
  "Out[342]=",ExpressionUUID->"2acc1ffb-4a3e-4ad2-818b-984adb60ca2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888104918975*^9}},
 CellLabel->
  "In[343]:=",ExpressionUUID->"14de7cdc-7690-4fcf-8fb2-48427c0674b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzTkKwlAUheGLlaWFhYVFFBEVCcZ5znNIYyXqCgQLqxAERbDIElySS8oS
HO55SE4g/Hw5yUvpGO5OGRGpf+5v9Ur8X55XgwfaxDpr0ntOu73BefSBFvD+
HS5qX/Z7B77AZW0cwRX83+5VnGdd05oz3ED3aBPnHWAXDuAWukE9cpvcIXfJ
PXKfPCAPySPymDwhT8kz8pzsk03aMVkWtJNlSTtZVrSTZU37329KSDcB
        
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 448.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.73988810566938*^9},
 CellLabel->
  "Out[343]=",ExpressionUUID->"2fedaa52-1de0-43a8-a32c-2a63204efc5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888106695592*^9}},
 CellLabel->
  "In[344]:=",ExpressionUUID->"dda49798-1dd1-4e1b-8e5b-7c16eded069e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxd0D1IAmEcx/GjqdGhoMHBJMIkQrMXe/UxHR1EGppKgqCttoKiDio6Ecqp
2cEpiBxrC1obHKVNgmbHpijv9/0vHhxfPvc8/O+5m9w/qhyMeJ43838Pqquf
C9O8cjxQE+ZR9cUcUQ9v8Jjav8UTajbAUfW4hmNqxxxXq9d4inmXeHro/Qm1
YfuTarmOZ9VuA8+pwT1OqT93OD3keXpOM8w/wQt8zylexBd4Sd3x8bIasfNn
1bb9vxXV2flW1e0HvKZ+tPC6WnrGG+pZG2+q1VecC+v/vmMn73ZkHyc/Wc+H
db1v1uXmXo/1Le1/ZJ6Pn2x+QY7bfPltHHtFtdBlHQdf7g9vMlPm
        
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 46858.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888107313561*^9},
 CellLabel->
  "Out[344]=",ExpressionUUID->"aad60288-bb51-4668-a05e-f7d9348bc8b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888108517148*^9}},
 CellLabel->
  "In[345]:=",ExpressionUUID->"4bcae2fd-cba6-4f8b-b2ce-e47b54b47f2e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyjsKwkAURuFLtmGKKCEGEfER36+JugI7SRMHLLSxs3YpLsWlGb1XxDPM
cPj4p+6v+1MgInH13m3efHVrTj7nYg217myOtOXR3LC9NMfax9eJNvLm1P4X
5pb2eTC34Q7chXtwHx7AGTyER/AYnsBTeAbP4QW8hFfwGnb/vsOSY4dlgx2W
LXZYdth/fgEvL0Qx
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 208.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888113441032*^9},
 CellLabel->
  "Out[345]=",ExpressionUUID->"037f3f39-47f0-4b40-97cb-dd06b2506485"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.7398881145489073`*^9}},
 CellLabel->
  "In[346]:=",ExpressionUUID->"37fcb13f-b4b5-4aba-89c8-25429af2435f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzDtqAlEUh/FLqpQWKSxSqARRETFqfCQ+xkcbGacQFMRBFDs1RYoUiktx
KS7FJbgEk5xPxP+F4eM3594Tn62DxYNzLv37/dXOufUfb+fxw+pv8aM1dnXE
ev7BT9bDN46Kn7m/wTH2rXDCevrCL9b9BCfplKbYH+KMNZzjLO8XOMd8ifPi
VzqiBd6PcREPcMnqBfiNDmlZXKGftMq+Pq5Zjz5+F3+I6+KGuCluib1778Wu
LXOx68hc7LoyF7uezG++AFCFRkQ=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 484.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888115029098*^9},
 CellLabel->
  "Out[346]=",ExpressionUUID->"1e16a841-358a-438a-b573-9ab468e11042"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888116096113*^9}},
 CellLabel->
  "In[347]:=",ExpressionUUID->"5fccfc62-98a7-4697-9659-fb216cfff978"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxd0T1LQlEcx/FDU2NDg0ODSYiJiKVlDz5cH9YcTNoCCYK2HN28oKBlkNCQ
L6IX0NgLcXRo9CWk/b5/5B7h8uF77+Wc/7kePjy3H3ecc8fra6N+q+o/8UnA
DflkvStTL/SenL3S+7I/o2Oy80EfsN4nHZdfczohY/b+key90Uk5eadT8tfm
ScvvIZ2Roc2fpad0jvnH9An72XqnMrD98vJnQBdwhGeya+c/lws7X1Eu7XwX
zNOhL9mvTV/hHV7z/j1dYp5buux1xeuqt34QfR7S7gZr3G9hLbqOqyPfJbTm
f3aNaIdeu6b3fNt/k4tCiQ==
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 1591.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888116679962*^9},
 CellLabel->
  "Out[347]=",ExpressionUUID->"737c2bc3-7702-442e-99bd-3bc3425eb2fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.73988811849862*^9}},
 CellLabel->
  "In[348]:=",ExpressionUUID->"bc554a43-d30a-4ff8-bd8f-8ff47eddb938"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdkUlqAkEYRhtXLl1k4cKFShCVIA7RaJzK4QSeQATBkDgFRxAsb+ARsnSZ
I+QoHsEjaPzfL3Q1NI9XXV/VV9WxwbQ3DHiel7q9/5Tn0rxj9m0YENo5HhSG
lnhIeNnhT8LTAQ8L+3s8Qn6DR+EWxllvhj+TV08IoxM8KTyrp6HOf2G+9s8I
/8Z41snnhD9feB7/wAtO/lVoR3jRyZec/m9Ov7LQ6H1XHH+nn/avCn8XeI3z
rfE6+63wBv30fE3Hjd8tbrR/y9/f4kft32Z/+lnc0/vpsN6U7/jj/3b9bnH7
aa4IBUYZ
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 565.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.73988812012465*^9},
 CellLabel->
  "Out[348]=",ExpressionUUID->"2fc2f10b-f0b1-4ea7-99c0-2fc67773d796"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888121649811*^9}},
 CellLabel->
  "In[349]:=",ExpressionUUID->"c1514496-0b97-4f0f-883c-17029bfcb2f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzTsKwkAUheGLlWUKCwuLKCIqIr7fJvGxAlcgYhQbXyCWZikuwSW4pCxB
5RwRz8Dw880dZrKrwyJMmFnpvT/Fin3kGPAAdc50En2caIe+0ik0vtFp1P3e
z9B72kXvOzqHLtd0Ho1CuoA+t3QRDS50Wf6v8P0NXWX7bE1cFzfETXFL3BZ3
xF1xT6wdiIfikXgs9sS+OPh3JLaJzMU2lbnYZjIX21zmP78Ajhg1KA==
        
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 511.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888122758727*^9},
 CellLabel->
  "Out[349]=",ExpressionUUID->"ab955a12-95c2-49a0-950e-8e58560a831a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.73988812414148*^9}},
 CellLabel->
  "In[350]:=",ExpressionUUID->"0c4e59f3-db4a-41f3-9c7c-861791bc7ab2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyU0KglAUhuFDo4YOGjRokBGREWHaf6ZWLiBcguDYSeTUJbU0l+DPPRC9
Fy4vz/nsrEjzgYg47e9qXh31eZWxHkzrj3po+n2rLe1KO4LH8ASewjN4Di/g
Jcyu4Q3swlvYg314B+/hA3yET/AZvsBXOIBvcAhHcPzvCpY7dlge2GF5Yocl
wf5zAxeYKvc=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 373.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888125162863*^9},
 CellLabel->
  "Out[350]=",ExpressionUUID->"31045444-37b2-4b03-9ad4-4da45c798e9b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888126313937*^9}},
 CellLabel->
  "In[351]:=",ExpressionUUID->"b7ad408c-23b7-4e1a-a5b1-e51866359994"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyTkKwlAURuGLlaWFRQoLFZEYRJyHxCTPAWwlOzBg7QYsgivLklyCw70Q
ch48Dt/9e/kjuzdEZPT9v+p7p/+UT2cH7fVlbmqL3NzSljdzW+sys2e9WDtw
F+7DA3gI+3AAj+EJPIVn8BxewEt4Ba/hDbyFd3AIR/AejuEETmFXdwHLATss
R+ywnLDDcsZe+QPcxjAJ
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 586.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.739888127935562*^9},
 CellLabel->
  "Out[351]=",ExpressionUUID->"354f298b-e193-411f-b7d5-e89936ba179d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestClassifier", "[", "HaltClassifier2", "]"}]], "Input",
 CellChangeTimes->{{3.7398725432992496`*^9, 3.7398725440774717`*^9}, {
  3.7398880805271807`*^9, 3.739888153094892*^9}},
 CellLabel->
  "In[373]:=",ExpressionUUID->"c4337c6f-b15f-46c1-bd4d-2bfcc75a95f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdz88rg3EAx/EnTTkuOUiPjNZIJj/ntz0Ps7P8BSIiPyY/soQmRwdK2nU7
umjlrOaykwMnBxdJ2fHJQXLC83l/L8/q6d1rnz17vk/rQmZuqcayrPjf9V99
vKSfQtbhC3V2H9ep3g4Oq2XjBnXeuFGNrGBbzRlHVGcdt+FVHMUZHFMLy7iD
3biT/9/EXTx/F3fzPke4h/Nu4F71wpy/L3B/P88/xgNq+RAP4hOcCJxvKOBh
zruGR9THbTyqlg7wmFo9xeMBT6ivZ3hSzV7ipPqdx44aLXIOHLpmd9XELTt+
vmOf8pv7rLDjhyf2adV+Yccf7+wpv1vnHrscrv6wz/gtfdW62uVQe71spfW7
pmbXXrx/u9qTW25i7i9bYlhh
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 51.}, {0, 743183.5}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{{3.739888153638381*^9, 3.739888169619108*^9}},
 CellLabel->
  "Out[373]=",ExpressionUUID->"93522c74-9cc5-4399-9b23-59d7cc527a20"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7398881830746727`*^9, 
  3.7398882310452642`*^9}},ExpressionUUID->"67fbd2d0-dac0-4a96-af9d-\
eacf489c9784"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Training Attempt #5: 5000 random SK expressions, depth 10, halted if \
SKHalt[40]==True. NoHalt dataset same length as Halt dataset. Using raw \
string. (Same as #1, but larger dataset) Worse than 1 (slightly).\
\>", "Subsection",
 CellChangeTimes->{{3.7398872588333893`*^9, 3.7398872606941757`*^9}, {
  3.739925769163535*^9, 3.739925817261409*^9}, {3.73992591716278*^9, 
  3.7399259189271*^9}, {3.7399265753572073`*^9, 3.739926580667159*^9}, {
  3.739956924042631*^9, 3.739956938275886*^9}, {3.7399698884558697`*^9, 
  3.739969900012792*^9}},ExpressionUUID->"db060e3c-74dc-4d24-8022-\
8cf76d79cd94"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lengths", " ", "=", " ", "x"}], ";"}]], "Input",
 CellChangeTimes->{{3.739926337214636*^9, 3.739926356784418*^9}, {
  3.7399569463835077`*^9, 3.7399569471165857`*^9}, {3.7399696114161797`*^9, 
  3.739969629443202*^9}},
 CellLabel->
  "In[249]:=",ExpressionUUID->"7f018db3-f966-4e89-b558-6b5b5e51c101"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"NoHalt", " ", "=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"lengths", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "False"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Halt", " ", "=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"lengths", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "True"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "NoHalt", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "Halt", "]"}]}], "Input",
 CellChangeTimes->{{3.73996965928885*^9, 3.739969680045323*^9}},
 NumberMarks->False,
 CellLabel->
  "In[251]:=",ExpressionUUID->"aaf2894b-9586-47d9-8b2f-1e9fdeaff8ad"],

Cell[BoxData["862"], "Output",
 CellChangeTimes->{{3.73996965794422*^9, 3.739969680373193*^9}},
 CellLabel->
  "Out[253]=",ExpressionUUID->"302aa6a2-afa1-4133-a652-9b99cf7cb828"],

Cell[BoxData["4138"], "Output",
 CellChangeTimes->{{3.73996965794422*^9, 3.73996968043894*^9}},
 CellLabel->
  "Out[254]=",ExpressionUUID->"85e4aedb-8e4c-4274-9bfd-0120201a6a41"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"HaltTrain", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Halt", ",", 
     RowBox[{"Length", "[", "NoHalt", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TrainingData", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"HaltTrain", ",", "NoHalt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TrainingData2", " ", "=", " ", 
   RowBox[{"ConvertSKTableToString", "[", "TrainingData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "TrainingData2", "]"}]}], "Input",
 CellChangeTimes->{{3.7398718328071957`*^9, 3.7398719480890427`*^9}, {
  3.739882283988702*^9, 3.739882306676138*^9}, {3.739925864341235*^9, 
  3.739925865648127*^9}, {3.739926497854299*^9, 3.739926502137892*^9}, {
  3.739969691963895*^9, 3.7399697117210627`*^9}},
 CellLabel->
  "In[255]:=",ExpressionUUID->"1bce20ce-1bf2-4c08-ab1d-48c9f6ed06cc"],

Cell[BoxData["1724"], "Output",
 CellChangeTimes->{3.73996971266486*^9},
 CellLabel->
  "Out[258]=",ExpressionUUID->"de29ad2a-984f-4d81-aab1-cbbf5275c7c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HaltClassifier1", " ", "=", " ", 
  RowBox[{"Classify", "[", "TrainingData2", "]"}]}]], "Input",
 CellChangeTimes->{{3.739872064023624*^9, 3.739872082336583*^9}, {
   3.739872152860105*^9, 3.73987215599541*^9}, {3.73987218719993*^9, 
   3.739872196891059*^9}, 3.739872318601696*^9, {3.739872431581009*^9, 
   3.739872434756749*^9}, {3.739885596452054*^9, 3.739885598560957*^9}, {
   3.7399258911052427`*^9, 3.73992589220361*^9}, {3.739969782184577*^9, 
   3.7399697860249023`*^9}, {3.739969879539859*^9, 3.739969917927997*^9}, {
   3.739970010381384*^9, 3.739970014590765*^9}},
 CellLabel->
  "In[266]:=",ExpressionUUID->"69470b01-f441-4941-84c9-31f995394ace"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1724", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1724, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Text"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Fill" -> 
             "", "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Type" -> 
             "Text", "Version" -> {11.3, 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3139720177438361802, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5643421565728107793, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "\\", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {11.3, 0}, "ID" -> 3051290048872824615, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {-9013817937938426079, -4973948215836336071, 
                 2077270817744784973, 3408017859420023313}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2055599668730355056, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6577660353193586174]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5749777139264552649, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2672999966851599696]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.5, True -> 0.5]], "Prior" -> Automatic, 
    "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassPriors" -> 
      Association[1 -> 0.500362056480811, 2 -> 0.49963794351918894`], 
      "Method" -> "Markov2", "TokenNumber" -> 4, "Order" -> 4, 
      "MinimumTokenCount" -> 0, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {1, 2, 3, 4}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 3521096920526491024, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NominalSequence", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Imputed"]], "NGramPosition" -> MachineLearning`SortedHashAssociation[
        Association["KeyHashes" -> CompressedData["
1:eJw9lkmubEUMRN+AFQAbYAFI6S6dXsKX/oglMEBixOAzZe8cZ1Olp1cl+16n
m4hw/vbnP3/89d/X19ePn/j3/e8f/377lR+/1/DQjCrhe7nPVcexalmYLpE1
TIbXx7HMNGasiXfOIT6vI3nFgkC2Im2KvzemjqHCV1qVp6VeR4hWEkCmLFnp
/hzekcOnrcySmpUfhy5zHWuo+9Cafh0dWZbNCDUhPRvPkWNpVnDqSBJMuQ41
H7EylmRMC9zPgdlravAiqXHMdUjnqHOQzlw+Vr3Dx+oINLIIV1Zx36AjyzNp
rZXFKM1bB+8H6RhP8zA/X6gMbbvn7MN0qr5QZgyEbmWKpBLuOTTcTJjX5JjA
Ic9hgxGlKF2hnYzwOkYUT65ZPV4G+3o1lwrlqVKklau87k5ipdMjGRQpfJ4j
ooZGxRqjguE8MMzw4FD3NTqU17DrkAINM6hBhwiF13OQ1iRgOq8xYVsfh+9W
GX2mwSEv3VEcbsq4e7Y8drNipLMrE+d81eklH8cYzMlBpNOSXDfdSKoGnQQC
KTOB73VMB6NinMNkqixvHVTnPQoBzlGgd9x0GYIz0SpC8iMjr8Pph6mPSsAF
b0jwOhxCkeWcTIIvfRB1WzXmygF9nNRVn0ObduBweYO3fMVxwLyK8gE/wpm4
hD+HTIPrYAisMo18DldYAQWZnzZ39YUCAwGeBhU0KMjyOkYP0EE0vSTdeGco
lGri8ApvMMh1K6c2xsl4BrSkDNK4DiADLawGo0ACXOZzSGI2sxYfxvQGpZJi
DdMBOwGkPXIq8GEeITQDWAR6cBxCcFEA7DLMqftRrTsHN8sapd48v1kJobOD
gETQSD9v5ULR4a1K0ij0+LzRDYKfNIBMeXHIcwSzWwuCeC5vXj8HdTULUSc4
Lf7UBysS5bJRFSOLOn7ZSg3BBb0iV9gGUda1Q39km/H2hBefY0+6hMoYZdL/
BVyOHdYzGf62YIFGvXbGx5DBgijQjBd/Kl0agUTT9NalenaUfGCFki0bGcfe
AmEggNZCZHh57Sg9Khg9OZUCdvrs2lKA0AKkgWLVt5+PGMFsS4LDSU71bUau
rKQBRoZMhmrbjPKi79FCk04Mi20OwIVWox7IxHDibDM8LBFkoHrvQfgThEWH
ThF4kivgI8NthjRM11vbe8Qjt7lkjwMd62kgornrkSGLkqpXZC9C1OTaJ5Bm
Ep5Uwxrx0xeg2SImrcZk2J9jbxUZUKx7Mhdf93mbtI92wH5onvPiA2wSf8FL
BW0ITI5rJ3uQBKh6WMZQjh1OoXh0YbaEQrN7bnWWvdCCxNA+P3bQgaBhXmgj
youMbzutQUwF6ZqQ2Juc187Cw4agzAR/CPix28ZLqzDaQZvk5Glbd6v5632M
umw70g+z0P1efpNB+sGl9+YC8cHIQDpzPnV5i8mWWpDQwMlr53qzuDy0yMMW
pM6PfW25Qpiwc20A/8fe68yDEGycJrTWtfexcLPgNppo68SH5/R8Sxg6BK4u
T9ju8Ic0AD+UgHBx7Xun5uz7h/Y94fQteu2yZ6qFlDX5zkVAep3RNeSMqvPy
mZlS6mDdaV/UoNGJA0r2rQBqZi8Fijj2BghO+AmVmPvl52xRYPV431lQDXn2
JB9IiX7wXvROeXZw0ChiSTBHu3hAB0APDeWOgKpJ3zq2nYsYYRANBbik//Kn
K32hAg8kS0v19DNlzzWRpL4dwqqTD3Tru1ffX+C7tOofO0xgp8KNVgaSvfUm
19LWcca1d9K8erf2UmUC0AsR5iJ26mINcUXlQgy3W2hg+LErrULZQBAK1NfW
vPZpSd8YPhcEftxz6S2oZdtRMPxjmvd5uoUmUhIor5atg7deDn1F7OsPCokq
XDtB4EJfEbnicNTVAS4G3jtz7Utq53/ilwCU0XsxrO8BOuf/2msg9g==
          "], 
         "Values" -> None, "DefaultValue" -> Missing[], "HashFunction" -> 
         Function[{
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$}, 
           Switch[
           MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, {
             BlankSequence[String]}, 
            Data`StringHash[
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$,
              "Murmur3-64"], 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
            MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$, 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
            
            Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
               
                Quotient[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                Quotient[
                 Mod[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                Mod[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                MachineLearning`PackageScope`ToPackedArray[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
, {1, 3, 2}]; 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                Flatten[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q,
                  1]]; Data`StringHash[
               FromCharacterCode[
                Abs[
                MachineLearning`file132SortedHashAssociation`PackagePrivate`q]\
], "Murmur3-64"]], 
            Blank[List], 
            Map[Switch[#, 
              Blank[String], 
              Data`StringHash[#, "Murmur3-64"], 
              PatternTest[
               Blank[], Developer`MachineIntegerQ], #, {
               PatternTest[
                BlankSequence[], Developer`MachineIntegerQ]}, 
              
              Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = {
                  Quotient[#, 2^48], 
                  Quotient[
                   Mod[#, 2^48], 2^32], 
                  Quotient[
                   Mod[#, 2^32], 2^16], 
                  Mod[#, 2^16]}; 
               MachineLearning`file132SortedHashAssociation`PackagePrivate`q = 
                Flatten[
                 MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[], 
              Data`StringHash[
               StringJoin[
                ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
             MachineLearning`file132SortedHashAssociation`PackagePrivate`keys$\
]]], "Version" -> {11.3, 0}]], 
      "ConditionalProbabilityMatrix" -> CompressedData["
1:eJxlVQs0lekaluRW0irX41YIJekiKpmno5IyNcZdci3lUJROMqRmx+ziNIg2
1VC6yLUUxuSaxE5suZ1/G8n+f9v+2SntGrfE1PlbZ846a/Gu71vv+tZ6v9v7
Ps/zLgsIcwqUlpKSimHmV29aodDRUEohIy5SnLC+D2923J14Pl+MqizP5awv
gxCJGzfUlxNYqLFwq5YFgR3RvkUKbArxX84VXv9I4neVU5qkDR+ff0iJP3mB
gCORLQz+jcKr6EXZ1eEk/nF26OPGf/Yj1ERgb0L1Q9r+gm3wkAh5J7tlzivR
mKhJdtu+kg/LhvBoTj+BajtB6cGqBthU2nyXsa0BtVEiayVNPt7r97uK3Qn4
/hw/upUWIUwot/RWMQ39riMjsQZ8vHhAOXULCMg7TD1LGe2A+HJRcceWTsgo
2sgMxPRAnpOXsJH9EpNpYZNpVjSC3JaqNoHG4enklUm8ITwVn5aUZA4hc9ev
t9fn8ZFRv/RBeBABRYuTkx1nBJj7jnt0w2oKUUUuwpVZBOpYcREGkQTSmxzW
72P+oTM2pBWpSEPqqyUTSO3YPqRwlkCfRe2aDx4CiG+lvc3ypuB4Q2YcXQTc
Ni0b+8D427xII1M9GsoZcvGKJn/tl3r/+H9+ws4p/2NzPc7YVd1gsRswdqln
m3Qbhc616fLfKVI43F+qql5JovRGys1uUwrSnknHclNFaHQ7N5VuS8M7TUfq
NSWCX7rLNxetaXxK8LljMY9E0uN6XQd9ClsmekIqkwXweTb/k70dhRMqolLt
eTRcv9oWGjUFQu9rCQIU6aQem9pFYTI4z8lyVITL1xuJ3Z9FOF+fk+CVT8Fi
bbitg1Ef+Ecn2oj7Iry2VGqPPUQjw7xEQz+Gea/+sGVaBYn6ZUF9ur9QMBhx
D825SQKmJRZccxrdJ9XiS7fRcG7aMqcxUIDlqss/0WHUrPM9N4vHJFuFUHa1
Ev1WJYTZs8Sz+27yse/iXrPctQRcThgNG3MJfD99tWA3j4ClRQY7gCNAM+eX
Y3vSe1GtxdWMSh6CNmc0JPj+EPLVxjJcK5j3ffrW/w8lCuVicbPXZi6MH0sW
3bduQBn3sP7+LxKE5rCjRj5L/qrP/625JcJLY0cvbMolfsW3e5Ab8zIn5iUJ
75Yyo7/JUFCtqnyV+YcAK388UHdLmsKVplUdxXoU3qrXljlnkWAf8L9Z8ojC
ptbEkbcbSdhrhLON1bvBuufZoI7fcarmuf4jNT4S7WpN5aX5ePrZ6loMj4Kk
fEhDT5fEuNmyqSTJIGKP/vmsLl2M73kxA/uC2zAWsZSIy20D70/ZnDXbKfRf
lpgPc0lwNFN37xARMLyipBn4moDORnLeYS0+clvozSqL+XD+yfd1NJOPOGVr
b68QEnkclSmWNo2PNWOrjDXpWfmcqR8XC4wWyGYSiGy9l7juZwLxnWeT/Rh+
1/LMheMJ/4bM3xcxg0JCk2FguoSEz48ajnmZ9bh3QbjkYUnDrPxFv0p+9yhu
AA/r5BwV/AZgVui30KJIgCe3FhqVM/gdlXIWF3fxMflwUWD0DwT4OdbKTz6I
4OvhqWU4LkLzXLdzK3IpjFvFvusrJ9F+XK+Us04EHh1evn81jdJiuTluRyhU
RNvohVeTs/gUWE0oxZqQ2ODfqufB8OPheKJWxEUBAoK02Vx/5v7QDWucRkSI
YuV7dDrTSJMV+gw+pvDuQl17CoPvA/8Krzm4T4yf+gJWtKuI0Vn4rPVacys6
L6yvVfrUisEP12WjGHyvfXW634C5V82l0PLM80GUeR6aX5c3iBObUtZN7yLg
Y6IdYLidwNWJPe4FN/jYn80zZrl2wSdxkI70EeDpgjjbkNfkrPipQyrR/UYk
3FcF6UiWUrib1CbTNCzCr5f839DKNKLK6Wlf7gAaBxJNFXgDs/TXbEl51jHd
Npyf11FWfqUF42vmN6rHC5DdvDj7OkWibu6KXFFSFwLXXf3WKJWARsCaaV3v
Puye3H25wEw4C+93+ot63yyh0S7cxvVk/GBVD2v18Q54XxsyIA92IJsu6eru
oDBnDvWgwpbEsNwunqIBjaZotZ1EIA3PnTvlFdfSiD7i2lS5kYaC+ONiF4af
78MWFI4z/Ny/WemUeYEICoUVY3J7GB1ixecphVBQUeVpfnOcqb+H2qqrESTO
yurYPtGioONgkOT3hMCZYvU9EUUMbpMvWV3OF8AjSnevJoOvmXyf2S9ytBVP
U6PEf+PYTD9I3ztty+xnO74f5j7snbWeqT8z+TBT7znuob5+d0XoNZRlcRh9
5L9Lt894LsCoY1SEsjkFRa5X92DyCxS92Luu5U4r/gPwvu+K
       "], "DiscountMatrix" -> 
      SparseArray[
       Automatic, {125, 2}, 0., {
        1, {{0, 2, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18, 18, 18, 18, 20, 22, 24, 
          24, 24, 26, 26, 28, 28, 28, 30, 30, 32, 32, 34, 34, 36, 38, 40, 42, 
          44, 46, 46, 48, 50, 52, 54, 54, 56, 58, 60, 60, 62, 64, 64, 66, 66, 
          66, 66, 68, 68, 68, 68, 70, 72, 72, 72, 72, 72, 72, 72, 74, 74, 74, 
          74, 76, 76, 76, 78, 78, 78, 80, 80, 80, 82, 82, 84, 84, 84, 84, 86, 
          86, 86, 86, 88, 88, 90, 90, 90, 92, 94, 94, 94, 96, 96, 96, 96, 96, 
          98, 98, 98, 98, 100, 102, 102, 102, 102, 102, 104, 106, 106, 108, 
          110, 110, 112, 114, 116, 118, 118, 120, 120}, {{1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {
          1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {2}, {1}, {
          2}}}, CompressedData["
1:eJwtk3tMk2cUxusQ3q/Q2lIKdIWaNdqvMAQ2NlbK5HsPhRVRVGQytJJIECbj
GrFMBWO4mCplKlAZN1NNGAwvHWPMyxYRQTBMmdGBMbA6GeIMbJMP2mLLzXVp
n+Tk/Pfkd06eR5xekJS5isFgHLaPuoahLWznQ82f3b+cbOGD0G+defwagrLP
XhytTSPgEuN/0Xj41Ru7ZnBzWnZBaACNy9JLdldF0jjMf51uU/ECXnZ5PJzD
WMCv+9eszGYguIAm981dImA6LrUr+gTgrfrn87aWTVhzRLE+to+EvJ6dvPBp
KcxqqZT61QKgVVQOr9EXUmQVV65HmHCTfw3p+4kJLxUIitjP3KDr6faEoiAC
om47OMI8HFzKjMp9IwM+cGCQsVe47AtqsXjxzIwbQJdsRx1JADnbcVQuoXHI
xl17UikaX520vC/3CQQd5RqTHSUFVoJN53M+ACr5qm1rg6RgloVzjfb7attw
3NhHNK4266vPbDXhh5FND3JjTNgzQ52/JKYxexs7iaWg8S6OZXPeBgQbpBGq
MDOC3kHr8YGdCLLqk5OTLQhShnqCd9i5s6NvK3xLCDhgCt29UsuE++49T7Z8
gaDbFnXIX2LCQ6v7bg4qTfiJ+yK3VkBj+q1bxshAGrPoxHyxBME9K2deJSJA
J/ty3u++F7AavhvSW/jwMmDu+CIs4c7xaG24YRHn+Ow5a2oloPTEmD7uWwTo
2OXROTMXBHx1/ZVxLoSmqrTFHjy4ePnvtkKBF5QnHWFfJz2w/MV+/x8qvHG3
T2WWCkhoCD9Vn88LAI5IJxFZVnDdj3+ltytX8NW7d8gKCYXJ6onlaCoei4UK
4Tc2NzAplBljSgLUrvdKJ9yZkOqqqWqNRcBXfxASpWTju5xDjTdY3vjxRcP2
XJLGLsxGX7n9v4aZP+qEQTQ+HTbz8TEZjff/1m34dAFB/JhtLXsLAYzPQ8RF
G5mQ7XL61yANgsm96jZvCRNScpk1ooMIXnWMejZr/qESS98MRHRYqCovQ/yE
ZonynMrafK3DFSdyp9h3ChAwRP3lPUUEcJ15/snmyFGf13DIwapAUPLK4J1E
KbDDBiJ+TrJio+JlpoufFd8iOlldHCbkk+du5qUh+MrZA9K5BYu/G4zJTNC/
/v7tqQYEz6oT/k1/yoPp/o5m/QgPSjpZMX6ZCILlN049bEWgFZzrjQrmQjH1
/L0P13jCu6MOnybk4LK2nB3hxUjB+PWjamOvFAJWOfvn5D78IPZRu9Cey/bC
8sz1NP4P7zmg1A==
         "]}], "Discount" -> {0.5, 0.5}, 
      "DefaultUnigramProbabilities" -> {1.204064923180658*^-6, 
       1.826667519111509*^-6}, "Options" -> 
      Association[
       "Order" -> Association["Value" -> 4, "Options" -> Association[]], 
        "AdditiveSmoothing" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "MinimumTokenCount" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "ExcludedTokens" -> 
        Association["Value" -> {}, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.6740276953340033, 0.0357952698294409], "Accuracy" -> 
         PlusMinus[0.5796308909139218, 0.03756995800179809], "EvaluationTime" -> 
         0.0038280144927536233`, "TestSize" -> 345, "TrainingSize" -> 1379, 
         "TrainingTime" -> 13.293309, "TrainingMemory" -> 129860384, 
         "ModelMemory" -> 35768, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.5385790010100497, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6740276953340033, 0.025311078030799895`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.5796308909139218, 0.026565972071965222`]}, 
         "Configuration" -> {
          "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
           "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association["ID" -> 100227499251920]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "Markov", "Options" -> 
           Association[
            "Order" -> Association["Value" -> Automatic], "AdditiveSmoothing" -> 
             Association["Value" -> 0.1], "MinimumTokenCount" -> 
             Association["Value" -> Automatic], "ExcludedTokens" -> 
             Association["Value" -> {}]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.483123489602254, 0.43136114602525666`], "Accuracy" -> 
              PlusMinus[0.5578944886309899, 0.027860997759973836`], 
              "EvaluationTime" -> 0.0038337581818181816`, "TestSize" -> 1000, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.13076127272727273`, 
              "TrainingMemory" -> 1.0922210909090908`*^6, "ModelMemory" -> 
              35768., "ExperimentCount" -> 10, "ModelUtility" -> 
              0.2337244248175132, "MeanCrossEntropyHistory" -> {
                PlusMinus[4.2938182997905985`, 0.6644011371381479], 
                PlusMinus[1.2680360080827913`, 0.2206414711730291], 
                PlusMinus[2.1263914482004598`, 0.291690682644147], 
                PlusMinus[1.2931394079174474`, 0.23485202390179846`], 
                PlusMinus[1.4714668791948362`, 0.23024336880817575`], 
                PlusMinus[1.5045175563652038`, 0.15516320492394042`], 
                PlusMinus[4.855266601313037, 0.7632924907447788], 
                PlusMinus[1.3496822447929322`, 0.1952230981432857], 
                PlusMinus[1.020487832056452, 0.17959217651072906`], 
                PlusMinus[1.918460296817047, 0.2859688007557095]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49009900990099037`, 0.049975705079116424`], 
                PlusMinus[0.5990099009900995, 0.04911373703086736], 
                PlusMinus[0.4504950495049506, 0.04970306403042821], 
                PlusMinus[0.6287128712871295, 0.04845719983009716], 
                PlusMinus[0.5891089108910896, 0.04929127496626447], 
                PlusMinus[0.4405940594059407, 0.049585758966034954`], 
                PlusMinus[0.5693069306930698, 0.04958575896603499], 
                PlusMinus[0.5693069306930698, 0.04958575896603499], 
                PlusMinus[0.6584158415841591, 0.047608514395515916`], 
                PlusMinus[0.5693069306930698, 0.04958575896603499]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.805700936281706, 0.03952910226133678], "Accuracy" -> 
              PlusMinus[0.5982406892231878, 0.022890981045464432`], 
              "EvaluationTime" -> 0.003885279, "TestSize" -> 900, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.5516582999999999, 
              "TrainingMemory" -> 4.7165464*^6, "ModelMemory" -> 35768., 
              "ExperimentCount" -> 9, "ModelUtility" -> 0.45010955482309634`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7492799944504317, 0.08816669334389635], 
                PlusMinus[0.6642328875340958, 0.0863431084823072], 
                PlusMinus[0.807293035213492, 0.07289786098852571], 
                PlusMinus[0.8833855557924786, 0.08557299536000956], 
                PlusMinus[0.890333825248007, 0.10666202823535728`], 
                PlusMinus[0.900976383103564, 0.07935801836554651], 
                PlusMinus[0.8938449688686402, 0.11965784457118742`], 
                PlusMinus[0.7436419149046573, 0.06688687593465546], 
                PlusMinus[0.8088349526594873, 0.08135664801512468]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6485148514851493, 0.047913342060285], 
                PlusMinus[0.6485148514851493, 0.047913342060285], 
                PlusMinus[0.5594059405940598, 0.04970306403042825], 
                PlusMinus[0.5792079207920797, 0.049448551345481616`], 
                PlusMinus[0.5891089108910896, 0.04929127496626447], 
                PlusMinus[0.5099009900990102, 0.04999512254661126], 
                PlusMinus[0.6485148514851493, 0.047913342060285], 
                PlusMinus[0.6188118811881194, 0.04869696478143408], 
                PlusMinus[0.5693069306930698, 0.04958575896603499]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6839023534880616, 0.0216277566174456], "Accuracy" -> 
              PlusMinus[0.6221900545547043, 0.021456151043992094`], 
              "EvaluationTime" -> 0.003934292916666667, "TestSize" -> 700, 
              "TrainingSize" -> 300, "TrainingTime" -> 2.8156325, 
              "TrainingMemory" -> 2.777027*^7, "ModelMemory" -> 35768., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.5312996884210391, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7018904439700447, 0.0372093727592199], 
                PlusMinus[0.6879424717409436, 0.0393303828923404], 
                PlusMinus[0.670994251057844, 0.02876168892869343]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.604140541416924, 0.0346421628348942], 
                PlusMinus[0.642696484093208, 0.033742538013187946`], 
                PlusMinus[0.6198561698612408, 0.02802964922107336]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6740276953340033, 0.0357952698294409], "Accuracy" -> 
              PlusMinus[0.5796308909139218, 0.03756995800179809], 
              "EvaluationTime" -> 0.0038280144927536233`, "TestSize" -> 345, 
              "TrainingSize" -> 1379, "TrainingTime" -> 13.293309, 
              "TrainingMemory" -> 129860384, "ModelMemory" -> 35768, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5385790010100497, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6740276953340033, 0.025311078030799895`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5796308909139218, 0.026565972071965222`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0038280144927536233`, "MeanCrossEntropy" -> 
             PlusMinus[0.6740276953340033, 0.0357952698294409], "ModelMemory" -> 
             35768, "TrainingMemory" -> 129860384, "TrainingTime" -> 
             16.749807477223285`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            4], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 100223204284624]], "MaxTrainingSize" -> 1724, 
      "LastReportingTime" -> 3.739955663804586`16.32544144294355*^9, 
      "PreprocessorEvaluationTime" -> 4.2412109375`2.*^-6, 
      "PreprocessorMemory" -> 29048, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 8.575901428338328, 
          "ElapsedTimes" -> 8.590157, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 10.719876785422903`, 
          "ElapsedTimes" -> 11.157809, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 13.399845981778634`, 
          "ElapsedTimes" -> 12.640471999999999`, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 1379, "TimeBudgets" -> 16.749807477223285`, 
          "ElapsedTimes" -> 15.131292, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[100231794219216]], "ID" -> 
         100236089186512]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "k[s[k[k[k[s[k[k]]][k[k[k[k[s[s][s[k][k]][k[s]][k]]]][s[s]]]]][s[\
k[s[s[s[s[k]]]]]]][k[s[k]][s]][k[s]][k]][k[s[s[k[k[k[k[s[s[s[s]][k[s[k[s]]][k]\
]][s[k[s]][s]][k[k]]]]]]]][s[s[k[k]]]]][k]][s[s[s[s[k[k][s[s[s[s[k[k[s[k[s[s[\
s]]]]]]]][k[s]][s]][s[k[k[s[s]]][k[k]]]]][k[s]][k]][s[k][k[s][s]][s[k]][s]]]]]\
]][s[s[k[k]][k[s[s[k]][s]][k[k]][s]][k[k[k[s]]]][k[s]]]][k[s[k[k[k[s[k[s[s[s[\
k]]][s[s]]]]][s[k]]]][s[s[k]][k]]]][s]][k[k[s[s[s[s][s[k]][s]]]]]]]][k[k]][k]\
"}, "ID" -> 3791095496786132862]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 48.864487, "MaxTrainingMemory" -> 136374416, 
      "DataMemory" -> 876968, "FunctionMemory" -> 135872, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 7, 12, 34, 23.8333`8.129759162562756}, "Instant", 
        "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.739969779619214*^9, 3.7399698776213093`*^9, {3.739969924139942*^9, 
   3.739969929767725*^9}, 3.739970063905294*^9},
 CellLabel->
  "Out[266]=",ExpressionUUID->"2853cf92-5984-4818-92ec-b865ae4bc90b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"TestClassifier", "[", 
    RowBox[{"HaltClassifier1", ",", "TrainingData2"}], "]"}], ",", "10"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7398724883407593`*^9, 3.739872538157875*^9}, {
  3.7398727453927603`*^9, 3.739872745995302*^9}, {3.7398856173218517`*^9, 
  3.7398856300888033`*^9}, {3.73988622562111*^9, 3.739886249634664*^9}, {
  3.7399699524242487`*^9, 3.7399699829471693`*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"23a592e1-e296-47e9-9efa-f5db91c46807"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0jsOgkAURuEbKksLCgoLIcagMUQeKvhiUFdga0diY8MWWBpLYgmoXDWe
SSYn3/ztuGV1vVsiMnveV/vT5u80D6MPfc1NPdBetEPtXGvDDjyCx7AHT+Ap
7MPsAg7gJRzCERzDCbyC1/AGTuEM3sI7eA8f4COcw+bfNSwFdlhO2GE5Y4e/
/+iz/9wBCJsprw==
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 214.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyzsKwkAURuGLlaWFhYVFlBA0hOArxmcmD1fgEgJCumxhluoSXIKPuUFy
BobDNz8zq9v7YyAiy8/91p2X+cU2uT64PjsPXb1aPXK1ncfqUj3Rhtpp/594
8Bz24QBewCEcwTG8gtfwBt7COziB93AKH+AjfILP8AW+whls4LxvC0uBHZYS
OywVdlhu2P9+A9OBKBo=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 199.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdyTsKwkAUheGLlaWFhYVFDCIqIjHR+DZjYmEpWYJgYSXuIEt2CT7miPgP
DD/fPZ3zrbzUzGzw+u/698g+Ce5OB9/T13Vfd5UbvtVRbqqp2oLbaqQGalcN
YbYH9+EhPILHcARP4BhO4Ck8g1N4Di/gJbyC1/AG3sI7OIPdvyvY9thhy7HD
VmCH7YD95yezjymR
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 277.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzjkKwkAAheHBytLCwsIiioiKSNx3E5cTpPAAoo3iVthZzFE8ikfxCB7B
ZV4Q/0D4+fIyJLnVMdokjDHl9/2pu57BN/411APXm5WTruFFTrl6Zznt+tjJ
Gdf7Sc6qW9VztfH7efkgF3R+Lxf1vXgvqWu1oi7Vqv43kmuwD9fhBtyEW3Ab
7sBduAf34QE8hEfwGJ7AARz+28Jmih02M+ywmWOHzQL7zy+iNDun
          
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 532.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7MFUQIcDVABCn4DxOSB0RCeULwChN8DkRSB0
Qj2ULwGhA2qhfBkIPaEMyleA0pVQWglCSzRC+SoQWiEPyleD0A2FUL4GhF6Q
A+VrQegLRVC+DpRfAeXrQWiHaijfAEILlEL5hlD/NEH5RhCaoxvKN4bQBT1Q
vgmE7uiH8k2h7psI5ZtB6AlzoHxzCL1nFpRvAaHXzHN4ajrleoAflL9psQMA
0gguYQ==
          "]], 
         LineBox[{{26.717567567567567`, 2521.}, {27., 1267.}, {28., 28.}, {
          29., 19.}, {30., 10.}, {31., 10.}, {32., 1.}, {33., 1.}, {34., 
          1.}, {35., 1.}, {36., 1.}, {37., 1.}, {38., 1.}, {39., 1.}, {40., 
          1.}, {41., 1.}}]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 2521.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0s9KAlEYh+FBWrSchYsWLcaIMAkxrdSsPJkXEBEYCqGhELRwLNAKFwO2
UogUgpZeQsuWXkbLLmEuofL3ns0MDC/PfIczzJ/ETfeiE3McZ/vv/K+OsLxM
88lwgVqvqu4jdlVvgOPqwq5fU5MjvK5+j7Gnxqd4Qx2+403Vn+EtdcU6qYYv
OKV+PuMdtenjNG7jjGqu8a4a1HAW13GO52vhPWq9H5kfsP8Vzkf2K+BLXIys
P8QNXFJ/OvhI9Xr4WPXt9zlh/1tcVt8esFHDPuvw/J75Kfe7Y45Nl3lFPed9
BzgcMj9T3YA5/rL/Q1UtTJjjj1fzCx+7RhE=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 1375.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzzsKwkAUheGLlaWFhYWFioiKSNT4fmR8FKII4gJMDKQO4gayFJfiklyC
j3tGyRkYfr7cYcKUw/gUZUSk8d6f6np63zg3gw/a4xXOohc0pw2s89p7ABe0
Dx8ukkuodUVrznCVzte0SQjX6f9N9IC2cH4Lt+E97NC8g+7QLrmHLlE3fY/0
UbxTBuQheUQekyfkKXlGnpMXZI9s0k7Iv3faOVlWNCfLmuZk2dD87xd5WjDm

          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 307.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdzzFLQlEchvGLkzRJhDREaIWKRNxMTdPyaN+gjxAItaRSQ5aENQUu0iZE
2Ja4SEG4BC5i4OzeR3Bplcr3OUsXLg+/+7/3nHuCx6WjosdxnPDv/Vdd09w8
g5rhgRq4wl7VrWKfaq7xklq+wcuq9w6vqO1LHFCn53iN/Sp4Q22WcYj9TnFE
/Sri6D9vqvUTvMX+9nuX98/wNvvZ/4mpPfs/O6pr53HWv8AJ1rNOcr5bvKum
7nFK/WzgNOd7wHvqYwtn1P4Tzqq+Nt5XZy/4QF3o4Jzqf8VGLfU4Bx7ZeV4N
vzHHXewUmL8zx98fzA/nrQ+GZvV5PEkuymZ9ZH4An/tLBg==
          
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 11846.5}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxdybkJAkEYhuHByNDAwMBARURFxPt2dz0q0A4EY1vY0izJErwGxGdgeHn+
r365na6FEELn9d/9vkf6yf2cxUPsMbaIS7iMK7iKa7iBm7iF27iLe7iPB3iI
R3iMJ3iKZ3iOF3iJV3iNN3iLE5zi7N85Djt2HPbsOBzYsc1/fgJ4NC0d
          
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 38.05},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {40., 79.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[CompressedData["
1:eJxd0bkKwkAURuGLlaWFhYWFioiKiPtuMm5Y2VgpWAnWvkIezUfyEVzmn4gn
MBy+uTMEkvL1frxlzKzxXp/65xl/8zg7bagXNevrTnJODefz6kEtYF5U92pJ
3aoV32QnV9WVWsP5Ot7XxL0W3IY7cBfuwX14AA/hETyGJ/AUnsFzeAEv4QiO
YffvBE6/e5jDtsYctg3mcPofw/znF96jKqw=
          "]]}}, {}, {}, {}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0., 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 41.}, {0, 112.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.739872122572629*^9, 3.739872143737302*^9}, {
   3.739872498147097*^9, 3.739872538613996*^9}, 3.739872746526968*^9, {
   3.739885617780693*^9, 3.739885634277184*^9}, {3.7398862160606127`*^9, 
   3.73988624997501*^9}, {3.739969932683633*^9, 3.739969952867454*^9}, 
   3.7399699842988663`*^9, 3.7399700672110157`*^9},
 CellLabel->
  "Out[267]=",ExpressionUUID->"3c820de3-b55f-4fcd-bc09-7144e12f1f99"]
}, Closed]],

Cell[CellGroupData[{

Cell["Classifier test:", "Subsubsection",
 CellChangeTimes->{{3.739926154534072*^9, 
  3.7399261574440002`*^9}},ExpressionUUID->"6341057b-7e85-4034-a56a-\
5e4c04d7e90d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"TestClassifier", "[", 
    RowBox[{"HaltClassifier1", ",", "TrainingData2"}], "]"}], ",", "10"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.739886451203587*^9, 3.7398864572192307`*^9}, {
  3.739886492702322*^9, 3.739886493206777*^9}, {3.739926108683092*^9, 
  3.739926146590344*^9}},ExpressionUUID->"93544c49-244c-402d-8381-\
f0d139bdfb42"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxd0L9vAWEcx/GLyShiuEgHGkS0Eb9p/bp2NogYjCKR2DAwMLgGaQ2VNl1u
rEFqEJPNYjGYO9QgYTT6C6T4fJ7lLrm887on99zzPXupmisbJElynu9LcR3T
12T7Ch+gk1faiGpD2oRu3mmLzjIrfIPKL7QNfevSt+ixRzvQD2EXehjQbrSm
0h502aHvUbVOe9HvKu1DizXaz+8JB9B9iw7q3g/p9g/zPA06QrfpKDoR88dQ
WfzfB7Qg5ntEtU86joY0OsHzj+gkWhnTKfQ0o9Poz5xW0OaCc8Dq14rrT/Df
muvw0vfL9Wc4v1WG1oz5zgvbpjvlHyCNSbg=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 32432.5}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{{3.739886457595297*^9, 3.739886493693921*^9}, {
  3.7398865957623463`*^9, 3.739886609602104*^9}},
 CellLabel->
  "Out[260]=",ExpressionUUID->"8db7e944-ad85-4123-8e06-2ab77fce0be1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdkDluwkAUQC2qlBQUFCmcCBBCCCWEsAcPOYALWjbjYBbFgERF6aNwFAro
OYIPkCJHIPDfRGJGGj29+cvMnyd/0wsSlmVl//aVsn6dGw5zxYEwGuIPQm+C
J4WHMZ4iP8DTxKf4o1D1cRsf4c/CvYdn6OfjOXX/vjz1IV7Av/CiUV8irvu/
QD3PK/fP8LLQW+Fv9FvjFfKX+LtxX1UYa6/BAawzj/YGrv+zKbR1fcvwtlH/
Ifyfr8P7tDtGf0U+/xXh8YJ4lzjzRbj9TfyT/lt1cn+Oboifd+oCgftAkw==

        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 397.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{
  3.739886615422818*^9, {3.739887166765317*^9, 3.739887191064084*^9}},
 CellLabel->
  "Out[281]=",ExpressionUUID->"14d3c4a8-8bf6-4557-ba9f-5b7779d226c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyUsKQWEYx+E3I0MDAwMDJCHJ/e6c47ICZQPK2BYs2RLcTsnz1dev5/3X
L7fTtRARndd/9/se6SfZOcsPeTd5i7iEy7iCq7iGG7iJW7iNu7iH+3iAh3iE
x3iCp3iG53iBl3iF19hucYJTnP37jmPHjmPPjuPAjuPI/vMTswsrXw==
        
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 85.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{
  3.739886616885604*^9, {3.739887196527751*^9, 3.739887203935425*^9}},
 CellLabel->
  "Out[287]=",ExpressionUUID->"8878aac3-90bc-4386-987d-e55c559ab4b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzjmKAlEURuGHkaGBgYGBioiKNM7zULZuQMVAMCgFh6ChRWg6k3InLsUl
uJReQiv3iPgXPA7fu9yqSq6/p5uQcy53P4/a8zewnj0urLcTDlsTvzhiPfzg
KD7imPXyheNWb4sTvG+PU1Z/h9Ps+zhDVzTL/hrnrdclLuAF/qAzWrQGE1yS
eZn9pyv8/xxXxTX5Xl3mDTqmTXFL3BZ3xF1xT9wXD8TeuwOxG8pc7D5lLnYj
mYu1wcv/0lQ3Hg==
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 544.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{{3.73988661828052*^9, 3.73988662298308*^9}},
 CellLabel->
  "Out[264]=",ExpressionUUID->"6cfac32a-149b-42a2-9c32-ce8a2729eef3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdyTsKwkAURuGLVcoUFhYpoogYkaAZ38bMmJg+zBIEa7eQJbsElbkgnoHh
8N1/fH/6x0BEss//NryXDe2cHkKdV0ehfauOtUY71E61IziBU3gCszN4Di/g
JZzDK3gNF7CBN/AW3sF7+AAf4RN8hkv4Alewhd2/e1iu2GGpscPSYIflhv3n
NxxPKHg=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 73.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.739886625796891*^9},
 CellLabel->
  "Out[265]=",ExpressionUUID->"5ece1500-0a99-4f25-bdbd-691b5093e741"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdzMsKAXEYhvEvK0sLCwuLIQlJzmdmHBaWSEkWJBM7tzCX5lJcgktw+L8l
z9T09Ju3+TKn2zqMmVnx/X7qnqf/zeMa6IN6UeOuXignXO8HOeka7OWUulPT
sOcabeUs/s/hft71eJYLuFfSvY1clldyRV2qVe0LuQbX4QbchFtwG+7AXbgH
9+EBPIRH8Bj24eDfEWwT7LBNscM2ww7bHPvPL0+OP/0=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 199.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.739886627831641*^9},
 CellLabel->
  "Out[266]=",ExpressionUUID->"6507e16e-9d10-44bd-8184-6fbe35d8f463"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[CompressedData["
1:eJxdy7sOQUEUheEdtUKhUCgQQUTE/e4Yl0KtEIWECI3GK5xH8SgezWUvEf8k
kz9f1kz+dNtcEmZWft13/STDJ4+r11LqWU1770c5ox7UrP7v5Zw37OSC/P1f
1PutXPLGa7kCV+EaXIcbcBNuwW24A3fhHtyHB/AQHsFjeAJP4QieweHfMWxz
7LAtsMO2xA7bCvvPT1ttPgw=
        "]]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 41.}, {0, 214.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.73988709746204*^9},
 CellLabel->
  "Out[267]=",ExpressionUUID->"0a3ade9a-a0df-43b4-940b-b6b2f03694ca"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739886617967916*^9, 3.7398866272985353`*^9}, {
  3.7398870969146233`*^9, 
  3.739887107194312*^9}},ExpressionUUID->"9102b127-74cb-4c68-9f94-\
1be59417a03e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739887102765649*^9, 
  3.7398871042005873`*^9}},ExpressionUUID->"2729455f-6b68-41de-bffa-\
0abf056d5818"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SKGrid", "[", 
  RowBox[{"k", "[", 
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{
      RowBox[{"k", "[", 
       RowBox[{"k", "[", 
        RowBox[{"k", "[", 
         RowBox[{"k", "[", 
          RowBox[{"s", "[", 
           RowBox[{"s", "[", 
            RowBox[{
             RowBox[{"k", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"k", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"k", "[", "k", "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"k", "[", "k", "]"}], "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "]"}], "]"}], "[", 
                   RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"k", "[", "k", "]"}], "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
                    "k", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", "k", "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", "k", "]"}], "[", "k", "]"}], "]"}], "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "[", "k", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "[", "k", "]"}], 
                  "]"}], "]"}], "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"k", "[", "s", "]"}], "]"}], "[", "k", "]"}], "]"}],
                "[", 
               RowBox[{"k", "[", 
                RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "]"}], "[", "k", 
             "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
      RowBox[{
       RowBox[{"k", "[", 
        RowBox[{"s", "[", 
         RowBox[{"s", "[", 
          RowBox[{"k", "[", 
           RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "]"}], "]"}], "[", "s",
        "]"}], "]"}], "]"}], "[", 
    RowBox[{"k", "[", "s", "]"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.739886342448246*^9, 3.739886350295829*^9}},
 CellLabel->
  "In[221]:=",ExpressionUUID->"1ab499e3-3359-4abf-9f59-e079a621283f"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzt1kGOFDEMheGWYMcpOAl34AgjsebqXACJWde0J6RfnGen/pFQq/nixHaS
qv7+9vvnry+Px+Pb+7+/7/++Pq5/f358/v36/9fP0XxRvLq+O16tv1v/Tnf3
+Vjto3xwHMdxHMdxHMdxHMdxHMdxHMdxHN/n13HRd3W+KF5d3x2v1t+tf6e7
+3ysdvfzBcdxHMdxHMdxHMdxHMdxHMdxHMfxj39RXDRudr4oXl3fHa/W361/
p7v7fKx29/MFx3Ecx3Ecx3Ecx3Ecx3Ecx3Ecx/GPf1FcNG52viheXd8dr9Z/
t/6pfvf+Z/vp9XV39/NrtbvffziO4ziO4ziO4ziO4ziO4ziO47v9Oi76rs4X
xavru+PV+rv1b3d+7v7s3t/u+WW7u/7s+5Pt7vyrP79m1+92/tz9G/np9XV3
9/t1tY/ywXEcx3Ecx3Ecx3Ecx3Ecz/LruOi7Ol8Ur67vjlfrv1v/dufn7u/u
89E9v2x31599f7LdnX/159fs+t3On7t/Iz+9vpG76+/ev+ru/n2y2kf54DiO
4ziO4ziO4ziO4/jJfh0XfVfni+LV9d3xav13799s/O783Puz+3x1zy/b3fVn
359sd+df/fk1u3638+fu38hPr0/17u+33b8/que3ev7Z9av1J9ur3Z/Z9VU/
ff3q++Pu/8jd79/q/enu7uffah/lg+M4juM4juM4/r9+HRd9V+eL4tX13fFq
/d36Nzv/3frjrn92/mh81fjq+bnPb3V374/q2ffT7e7z73Z3/dXvx2n9qf5+
rpZftrvrd79fVK+ef/f9rd7fkVP/889X46Pxp57/0/JbPf/s+tX6k+3V7s/s
+qq71x85/fWu747HP3f382u1j/LBcRzHPX4dF31X54vi1fXd8Wr9d+vf7Px3
7+/u+mfnj8ZXja+en/v8Vnf3/qiefT/d7j7/bnfXX/1+nNaf6u/navllu7t+
9/tF9er5d9/f6v0dOfU//3w1Php/6vk/Lb/V88+uX60/2V7t/syur7p7/ZHT
31x391ddX3X3/rh//7jrP927349RHlEdOI7X8+u46Ls6XxSvru+OV+u/e/9m
42fnv/v+7K5/dv5ofNX46vm5z291d++P6tn30+3u8+92d/3V78dp/an+fq6W
X7a763e/X1Svnn/3/a3e35FT//PPV+Oj8aee/9PyWz3/7PrV+pPt1e7P7Pqq
u9cfOf3NdXd/1fVVd++P+/ePu37Vu+ef7d3v5yiPqA4cP9Gv46Lv6nxRvLp+
93i1f/R/Ln52/rvvz+76Z+ePxleNr56f+/xWd/f+qJ59P93uPv9ud9df/X6c
1p/q7+dq+WW7u373+0X16vl339/q/R059T//fDU+Gn/q+T8tv9Xzz65frT/Z
Xu3+zK6vunv9kdPfXHf3V11fdff+uH//uOtXvXv+2e6+n92fL+7nU7ZXr8+9
/+v8H2bAAUU=
   "], {{0, 0}, Offset[{759, 33}, {0, 0}]}, {0, 1}],
  Frame->False,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{759, 33},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotRange->{{0, 759}, {0, 33}},
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.739886350777362*^9},
 CellLabel->
  "Out[221]=",ExpressionUUID->"da12dc60-1e11-4922-b6a6-65926709b77d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"GenerateTable", "[", 
   RowBox[{"depth_", ",", "iterations_", ",", "number_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "exprs", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"exprs", " ", "=", " ", 
      RowBox[{"Monitor", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomSKExpr", "[", "depth", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "number"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lengths", " ", "=", " ", 
      RowBox[{"Monitor", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"exprs", "[", 
            RowBox[{"[", "n", "]"}], "]"}], "\[Rule]", " ", 
           RowBox[{"SKHalt", "[", 
            RowBox[{
             RowBox[{"exprs", "[", 
              RowBox[{"[", "n", "]"}], "]"}], ",", "iterations"}], "]"}]}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "number"}], "}"}]}], "]"}], ",", "n"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "lengths", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7398820958498487`*^9, 3.739882108437313*^9}},
 CellLabel->
  "In[149]:=",ExpressionUUID->"5dcb31c0-ea89-4460-ad20-5d4838817789"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Monitor", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"GenerateTable", "[", 
       RowBox[{"n", ",", "40", ",", "200"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}], "]"}], ",", "n"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.739872624489894*^9, 3.739872631123022*^9}, {
  3.7398817973913193`*^9, 3.7398818734295692`*^9}, {3.739881905560164*^9, 
  3.73988190594028*^9}, {3.739881944773789*^9, 3.7398819496386843`*^9}, {
  3.739882211866831*^9, 
  3.739882213871719*^9}},ExpressionUUID->"37335144-36ca-4b28-8b3d-\
a70d16f4e158"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"k", "[", "s", "]"}], "\[Rule]", "True"}], ",", 
           RowBox[{
            RowBox[{"s", "[", "k", "]"}], "\[Rule]", "True"}], ",", 
           TemplateBox[{"1997"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            RowBox[{"s", "[", 
             RowBox[{
              RowBox[{"k", "[", 
               RowBox[{"k", "[", 
                RowBox[{
                 RowBox[{"s", "[", 
                  RowBox[{"k", "[", 
                   RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", "k", "]"}], "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{"k", "[", "s", "]"}], "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", "s", "]"}], "[", "s", "]"}], "]"}], "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"k", "[", "s", "]"}], "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "[", "k", "]"}], 
                    "]"}], "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "[", "k", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "]"}], "]"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", 
                    RowBox[{
                    RowBox[{"k", "[", "s", "]"}], "[", "s", "]"}], "]"}], 
                    "]"}], "[", "k", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"s", "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "[", "k", "]"}], "[", 
                    RowBox[{"k", "[", "s", "]"}], "]"}], "[", "s", "]"}], 
                    "]"}], "[", 
                    RowBox[{"s", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "]"}], "[", 
                    RowBox[{"s", "[", "k", "]"}], "]"}], "[", "k", "]"}], 
                    "]"}], "]"}], "]"}], "]"}], "]"}], "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"s", "[", "k", "]"}], "[", 
                    RowBox[{
                    RowBox[{"k", "[", 
                    RowBox[{"s", "[", "s", "]"}], "]"}], "[", "k", "]"}], 
                    "]"}], "[", 
                   RowBox[{"s", "[", "k", "]"}], "]"}], "[", "s", "]"}], 
                 "]"}], "]"}], "]"}], "[", 
              RowBox[{"k", "[", "k", "]"}], "]"}], "]"}], "\[Rule]", 
            "True"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{73., {3., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{61., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{61., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 150, 19904695938153399865, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{68., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{68., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 150, 19904695938153399865, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{51., {0., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 150, 19904695938153399865, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{92., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[19904695938153399865 === $SessionID, 
   Out[150], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.739882204794662*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"43cbbcf1-e96c-4ca7-9777-a9f357cd5f7e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ML Advice - from Matteo Salvarazza", "Subsection",
 CellChangeTimes->{{3.7399695840233603`*^9, 
  3.739969596159363*^9}},ExpressionUUID->"8c7df693-15d8-42a7-a447-\
159a5fed6064"],

Cell["\<\
ML Advice
How to represent data?
- Sequence of \[OpenCurlyQuote]sequences\[CloseCurlyQuote]
Can you find a mapping between one of the sequences and an integer? 
\t--> base4 encoding (this will be unique)
\t\tProblem: input size is unbounded.
\t\tSolution: Generate training set, use base4 encoding, look at maximum
\t--> or ?strings or something?
\t\tAdvantages - it captures subtleties of combinators
\t\t\tAlternatively, use base4 and padding - then they become \
\[OpenCurlyQuote]images\[CloseCurlyQuote] (matrices).
\t\t\t\tIn this case, still use RNN - a sequence of n-dimensional vectors \
where n is the longest element in training set.
\t--> or trees?
\t\tAdvantages - purest method of representing combinators.
- or just initial SKcombinator (\[OpenCurlyQuote]sequence\[CloseCurlyQuote])

How to creat

Type of dataset? (50:50 halt:no halt or actual distribution?)
\tTraining set *must* be balanced, even if real world not balanced.

Ratio of data within dataset? (distribution of examples belonging to specific \
class)
\tUsually unimportant - just experiment. Generate a *balanced training set* \
and an *unbalanced training set*

What model to use?
\tRecurrent neural net.
\t\tbase4 format - sequence classification problem.
\t\t\tUsual entry-level problem - sentiment analysis. Take this architecture \
and experiment.
\t\t\tLook at tutorials about sentiment analysis (simple - this problem is \
much harder)

Ensure {no --> very few} combinators halt within the given training set, \
otherwise problem is trivial.
\t(e.g. size 10 vector - [[9]]!=[[10]] - experiment)


First thing to try: do the initial base 4 encoding, generate (some large n) \
training sets, find vocabulary size and check for presence of duplicates. If \
super sparse (large vocabulary, most tokens only appear once), this is bad
\t--> try sequence encoding, with padding method. (Problem - a lot of \
padding. This is also bad. Experiment with different initial evolution lengths)
(alternatively, try RNN with just initial state - will solve all of the above \
problems, but probably won\[CloseCurlyQuote]t work. 0th thing to try - \
training example just a sequence of {chars/base4 numbers})\
\>", "Text",
 CellChangeTimes->{
  3.7399695977101994`*^9},ExpressionUUID->"7d699ce5-2b2f-49d9-bb5f-\
644db38711ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Neural Net Attempt #1: Recurrent Neural Network, Raw String. \
SKCombinators_RNN_Raw_String.nb\
\>", "Subsection",
 CellChangeTimes->{{3.739980336326894*^9, 
  3.739980385697474*^9}},ExpressionUUID->"3806c5f7-8754-45b9-bad8-\
ac21caa1b796"],

Cell["\<\
Unsuccessful - no better than coin flipping. (Markov method earlier is better)\
\>", "Text",
 CellChangeTimes->{{3.739980387056725*^9, 
  3.739980398596262*^9}},ExpressionUUID->"212909c7-0273-441c-9908-\
2ccdfffafec0"]
}, Open  ]],

Cell["Neural Net Attempt #2 - Preprocessing: Find vocabulary.", "Subsection",
 CellChangeTimes->{{3.739980590446126*^9, 
  3.7399806235060863`*^9}},ExpressionUUID->"22c88fd6-bd6b-4bf6-b1ac-\
d93a47db6c5f"],

Cell[CellGroupData[{

Cell["Generating Datasets", "Subsection",
 CellChangeTimes->{{3.739926898938037*^9, 
  3.739926903903215*^9}},ExpressionUUID->"7b42aa53-0654-4933-9695-\
767730b9c223"],

Cell[CellGroupData[{

Cell["\<\
~500*n random SK expressions at each of depths {n,1,10}, halted if \
SKHalt[40]==True.\
\>", "Subsubsection",
 CellChangeTimes->{{3.739926907598406*^9, 3.739926924743247*^9}, {
   3.7399273770162363`*^9, 3.739927377208897*^9}, {3.7399564745625*^9, 
   3.739956488516242*^9}, 3.7399565972405577`*^9, {3.740309104775498*^9, 
   3.74030911500931*^9}},ExpressionUUID->"7e99dba4-8ffb-4270-a42a-\
1eaf83291df7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Monitor", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"x", "=", 
        RowBox[{"GenerateTable", "[", 
         RowBox[{"n", ",", "40", ",", 
          RowBox[{"n", "*", "500"}]}], "]"}]}], ";", 
       RowBox[{"DumpSave", "[", 
        RowBox[{
         RowBox[{
         "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/\>\"", "<>", 
          RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<.mx\>\""}], ",", 
         "x"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "50"}], "}"}]}], "]"}], ",", "n"}], "]"}], 
  " ", 
  RowBox[{"(*", 
   RowBox[{"generate", " ", "all", " ", "possible", " ", "expressions"}], 
   "*)"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.739926964144546*^9, 3.739927071723415*^9}, {
   3.739927143663413*^9, 3.739927169528153*^9}, {3.739927317461865*^9, 
   3.739927334122841*^9}, {3.739927367253961*^9, 3.739927383932279*^9}, {
   3.739956193536852*^9, 3.739956195097608*^9}, {3.7399562538745937`*^9, 
   3.739956254010531*^9}, {3.739956455264728*^9, 3.7399564622532454`*^9}, {
   3.740309091833199*^9, 3.740309113367577*^9}, 
   3.740309147459743*^9},ExpressionUUID->"2fef8580-a720-43d6-a0f8-\
2d86a972c780"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
~1000*n random SK expressions at depth 5 to 50, halted if SKHalt[40]==True. \
New random algorithm\
\>", "Subsubsection",
 CellChangeTimes->{{3.739926907598406*^9, 3.739926924743247*^9}, {
   3.7399273770162363`*^9, 3.739927377208897*^9}, {3.7399564745625*^9, 
   3.739956488516242*^9}, 3.7399565972405577`*^9, {3.740269904594501*^9, 
   3.740269921517652*^9}, {3.740408398654353*^9, 
   3.740408424969111*^9}},ExpressionUUID->"8e3d52c2-eb36-4e32-b8ed-\
ce7d469a7d27"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"x", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"GenerateTable", "[", 
        RowBox[{"n", ",", "40", ",", "1000"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "5", ",", "50", ",", "5"}], "}"}]}], "]"}], "]"}]}],
    ";", 
   RowBox[{"DumpSave", "[", 
    RowBox[{
    "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/5to50_40_10000_randomnew.mx\>\"", ",", "x"}], 
    "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.739926964144546*^9, 3.739927071723415*^9}, {
   3.739927143663413*^9, 3.739927169528153*^9}, {3.739927317461865*^9, 
   3.739927334122841*^9}, {3.739927367253961*^9, 3.739927383932279*^9}, {
   3.739956193536852*^9, 3.739956195097608*^9}, {3.7399562538745937`*^9, 
   3.739956254010531*^9}, {3.739956455264728*^9, 3.7399564622532454`*^9}, {
   3.7402699335120068`*^9, 3.740269942592499*^9}, {3.740270582538435*^9, 
   3.740270585026822*^9}, {3.7402712663950043`*^9, 3.740271276164513*^9}, {
   3.740338257824698*^9, 3.740338260271072*^9}, {3.740408385897244*^9, 
   3.740408386831457*^9}, 3.7404084422243643`*^9, {3.7404084873289623`*^9, 
   3.7404085418237143`*^9}, {3.7404086168519297`*^9, 
   3.740408620478694*^9}},ExpressionUUID->"d4a526f7-5b72-48e9-83ca-\
dd1c08ee4478"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
~1000*n random SK expressions at depth 50, halted if SKHalt[40]==True. New \
random algorithm\
\>", "Subsubsection",
 CellChangeTimes->{{3.739926907598406*^9, 3.739926924743247*^9}, {
   3.7399273770162363`*^9, 3.739927377208897*^9}, {3.7399564745625*^9, 
   3.739956488516242*^9}, 3.7399565972405577`*^9, {3.740269904594501*^9, 
   3.740269921517652*^9}},ExpressionUUID->"f7ad333e-258a-476a-981a-\
7b2037c766cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"x", "=", 
    RowBox[{"GenerateTable", "[", 
     RowBox[{"50", ",", "100", ",", "20000"}], "]"}]}], ";", 
   RowBox[{"DumpSave", "[", 
    RowBox[{
    "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/10_40_10000_randomnew.mx\>\"", ",", "x"}], 
    "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.739926964144546*^9, 3.739927071723415*^9}, {
  3.739927143663413*^9, 3.739927169528153*^9}, {3.739927317461865*^9, 
  3.739927334122841*^9}, {3.739927367253961*^9, 3.739927383932279*^9}, {
  3.739956193536852*^9, 3.739956195097608*^9}, {3.7399562538745937`*^9, 
  3.739956254010531*^9}, {3.739956455264728*^9, 3.7399564622532454`*^9}, {
  3.7402699335120068`*^9, 3.740269942592499*^9}, {3.740270582538435*^9, 
  3.740270585026822*^9}, {3.7402712663950043`*^9, 3.740271276164513*^9}, {
  3.740338257824698*^9, 3.740338260271072*^9}, {3.740408385897244*^9, 
  3.740408386831457*^9}},ExpressionUUID->"cb4c070f-3d37-422c-a62d-\
c9c59b99c82c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
~1000 random SK expressions at depth 40, halted if SKHalt[40]==True. New \
random algorithm\
\>", "Subsubsection",
 CellChangeTimes->{{3.739926907598406*^9, 3.739926924743247*^9}, {
   3.7399273770162363`*^9, 3.739927377208897*^9}, {3.7399564745625*^9, 
   3.739956488516242*^9}, 3.7399565972405577`*^9, {3.740269904594501*^9, 
   3.740269921517652*^9}, {3.740309168102754*^9, 
   3.740309178017323*^9}},ExpressionUUID->"b99bff67-a696-40f0-bbf8-\
7b6c68d0b9ee"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.740309273184188*^9, 3.74030927466081*^9}},
 CellLabel->
  "In[216]:=",ExpressionUUID->"050c52e9-6647-470d-a9aa-2b1a2cc90eea"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"x", "=", 
    RowBox[{"GenerateTable", "[", 
     RowBox[{"40", ",", "40", ",", "1000"}], "]"}]}], ";", 
   RowBox[{"DumpSave", "[", 
    RowBox[{
    "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/10_d40_40_10000_randomnew.mx\>\"", ",", "x"}], 
    "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.739926964144546*^9, 3.739927071723415*^9}, {
  3.739927143663413*^9, 3.739927169528153*^9}, {3.739927317461865*^9, 
  3.739927334122841*^9}, {3.739927367253961*^9, 3.739927383932279*^9}, {
  3.739956193536852*^9, 3.739956195097608*^9}, {3.7399562538745937`*^9, 
  3.739956254010531*^9}, {3.739956455264728*^9, 3.7399564622532454`*^9}, {
  3.7402699335120068`*^9, 3.740269942592499*^9}, {3.740270582538435*^9, 
  3.740270585026822*^9}, {3.7402712663950043`*^9, 3.740271276164513*^9}, {
  3.740309179309823*^9, 3.740309215890499*^9}, {3.740309548225672*^9, 
  3.7403095483904552`*^9}},
 CellLabel->
  "In[217]:=",ExpressionUUID->"0fbe64c2-1459-422c-b8e6-527287814f64"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
~1000 random SK expressions at depth 30, halted if SKHalt[40]==True. New \
random algorithm\
\>", "Subsubsection",
 CellChangeTimes->{{3.739926907598406*^9, 3.739926924743247*^9}, {
   3.7399273770162363`*^9, 3.739927377208897*^9}, {3.7399564745625*^9, 
   3.739956488516242*^9}, 3.7399565972405577`*^9, {3.740269904594501*^9, 
   3.740269921517652*^9}, {3.740309168102754*^9, 3.740309178017323*^9}, {
   3.7403095564228687`*^9, 
   3.740309556554426*^9}},ExpressionUUID->"e3111d0a-873b-46be-b28d-\
a88f64543811"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.740309273184188*^9, 3.74030927466081*^9}},
 CellLabel->
  "In[263]:=",ExpressionUUID->"ecabc96f-0dfe-43a2-ad4a-a10fd834e275"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"x", "=", 
    RowBox[{"GenerateTable", "[", 
     RowBox[{"30", ",", "40", ",", "1000"}], "]"}]}], ";", 
   RowBox[{"DumpSave", "[", 
    RowBox[{
    "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/10_d30_40_10000_randomnew.mx\>\"", ",", "x"}], 
    "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.739926964144546*^9, 3.739927071723415*^9}, {
  3.739927143663413*^9, 3.739927169528153*^9}, {3.739927317461865*^9, 
  3.739927334122841*^9}, {3.739927367253961*^9, 3.739927383932279*^9}, {
  3.739956193536852*^9, 3.739956195097608*^9}, {3.7399562538745937`*^9, 
  3.739956254010531*^9}, {3.739956455264728*^9, 3.7399564622532454`*^9}, {
  3.7402699335120068`*^9, 3.740269942592499*^9}, {3.740270582538435*^9, 
  3.740270585026822*^9}, {3.7402712663950043`*^9, 3.740271276164513*^9}, {
  3.740309179309823*^9, 3.740309215890499*^9}, {3.740309548225672*^9, 
  3.740309563397821*^9}},
 CellLabel->
  "In[264]:=",ExpressionUUID->"0533a688-457e-4e40-8538-8fd22fd8ee10"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
~5000 random SK expressions at depth 10, halted if SKHalt[40] == True.\
\>", "Subsubsection",
 CellChangeTimes->{{3.739956467246653*^9, 3.739956512841754*^9}, 
   3.7399565994807863`*^9, {3.739956647650271*^9, 
   3.7399566514669437`*^9}},ExpressionUUID->"8a95361d-e0a3-4dca-bc4e-\
d8e251d7bde8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"GenerateTable", "[", 
    RowBox[{"10", ",", "40", ",", "1000"}], "]"}]}], ";", 
  RowBox[{"DumpSave", "[", 
   RowBox[{
   "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/10_40.mx\>\"", ",", "x"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7399564516095247`*^9, {3.7399565051514187`*^9, 3.739956517773904*^9}, {
   3.739956653466675*^9, 3.739956655746579*^9}, {3.739956832485209*^9, 
   3.7399568359223337`*^9}, {3.740271249836307*^9, 
   3.7402712512963676`*^9}},ExpressionUUID->"c3f8d6f9-131c-44cd-b37c-\
fd8602f62fc0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"GenerateTable", "[", 
    RowBox[{"10", ",", "40", ",", "5000"}], "]"}]}], ";", 
  RowBox[{"DumpSave", "[", 
   RowBox[{
   "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/10_40_test.mx\>\"", ",", "x"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739979482733123*^9, 3.73997948340361*^9}},
 CellLabel->
  "In[760]:=",ExpressionUUID->"31a8d74e-ec72-4dae-94e3-6efa636ea83e"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.739979545603189*^9},
 CellLabel->
  "Out[760]=",ExpressionUUID->"c3ea353b-f431-4e24-89e9-e4fa0358c1e9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
~5000 random SK expressions at depth 8, halted if SKHalt[40] == True.\
\>", "Subsubsection",
 CellChangeTimes->{{3.739956467246653*^9, 3.739956512841754*^9}, 
   3.7399565994807863`*^9, {3.739956647650271*^9, 3.7399566514669437`*^9}, {
   3.739990614251655*^9, 
   3.739990614659189*^9}},ExpressionUUID->"6aee55cd-f45a-45b8-9caf-\
368503deb3f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"GenerateTable", "[", 
    RowBox[{"8", ",", "40", ",", "5000"}], "]"}]}], ";", 
  RowBox[{"DumpSave", "[", 
   RowBox[{
   "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/8_40.mx\>\"", ",", "x"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7399564516095247`*^9, {3.7399565051514187`*^9, 3.739956517773904*^9}, {
   3.739956653466675*^9, 3.739956655746579*^9}, {3.739956832485209*^9, 
   3.7399568359223337`*^9}, {3.739990618450221*^9, 3.7399906220277967`*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"72fbf9e7-d262-47bc-9ff9-dbb2d71d72b4"],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`n, StandardForm],
  Evaluator->"Local",
  ImageSizeCache->{9., {0., 7.}}]], "PrintTemporary",
 CellChangeTimes->{3.739990719086732*^9},
 CellLabel->
  "During evaluation of \
In[79]:=",ExpressionUUID->"519ea52c-fcf4-4f4f-bdab-8e7230d1e881"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"GenerateTable", "[", 
    RowBox[{"8", ",", "40", ",", "5000"}], "]"}]}], ";", 
  RowBox[{"DumpSave", "[", 
   RowBox[{
   "\"\</Users/eohomegrownapps/CODE/Assorted \
codings/Wolfram/SK-Combinators/8_40_test.mx\>\"", ",", "x"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739979482733123*^9, 3.73997948340361*^9}, {
  3.739990619588085*^9, 3.73999062363866*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"dad995d8-26db-4fa5-a0da-ce7fb184c088"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{965, 855},
WindowMargins->{{Automatic, -37}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->"ComplexSystems.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[561, 20, 493, 9, 114, "Title",ExpressionUUID->"ec14c10b-e02a-4061-ad68-7ef17987e975"],
Cell[1057, 31, 209, 3, 27, "Authors",ExpressionUUID->"a94335d6-91f9-437f-9269-94002258176a"],
Cell[1269, 36, 197, 2, 29, "Text",ExpressionUUID->"79e5a80f-cf91-4db9-9401-10cc67135514"],
Cell[1469, 40, 1328, 22, 206, "Abstract",ExpressionUUID->"69f9e600-7ff1-45c6-a38f-d2e873195b61"],
Cell[CellGroupData[{
Cell[2822, 66, 210, 4, 81, "Section",ExpressionUUID->"ca42a369-ab26-4492-bbe5-539a6af55613"],
Cell[3035, 72, 1548, 23, 166, "Text",ExpressionUUID->"7eee9944-15a7-4ef4-b297-f91e20a48ecb"],
Cell[CellGroupData[{
Cell[4608, 99, 169, 3, 57, "Subsection",ExpressionUUID->"0073fdca-aba4-41c3-9a29-9fd3f83c8d80"],
Cell[4780, 104, 1332, 33, 120, "Text",ExpressionUUID->"a86e485b-1b31-4ab5-956b-23f0dd7cdbd4"],
Cell[6115, 139, 234, 4, 29, "Text",ExpressionUUID->"b55e4ff2-fd91-4732-9823-aa583e391b54"],
Cell[6352, 145, 562, 19, 39, "NumberedFigureCaption",ExpressionUUID->"bed0d78a-6101-41f7-8edb-8516f9c42f9c"],
Cell[6917, 166, 261, 5, 29, "Text",ExpressionUUID->"d876a614-d62a-400b-ab76-77f795ba7b6b"],
Cell[7181, 173, 622, 22, 58, "NumberedFigureCaption",ExpressionUUID->"58783a23-2e05-4fe5-ac38-56af59ba2dd4"],
Cell[7806, 197, 265, 5, 29, "Text",ExpressionUUID->"01348c00-c37d-4106-9c59-f82a47732409"],
Cell[8074, 204, 515, 14, 39, "NumberedFigureCaption",ExpressionUUID->"f2226f25-85ff-4924-8a41-70aca1d4fa3f"],
Cell[8592, 220, 374, 11, 52, "Text",ExpressionUUID->"e1e460a0-bcb6-4a18-8bb1-f318a0115346"],
Cell[8969, 233, 215, 4, 75, "Text",ExpressionUUID->"257936dd-1048-4817-985e-4d9e00bf14dd"],
Cell[9187, 239, 479, 10, 98, "Text",ExpressionUUID->"d6eceea1-b56a-456f-8ef4-10a47c10ea3e"],
Cell[CellGroupData[{
Cell[9691, 253, 584, 18, 40, "Input",ExpressionUUID->"35377374-7b86-42ce-aa86-ff7bee5afbc6"],
Cell[10278, 273, 602, 18, 32, "Output",ExpressionUUID->"f3a140e7-99dc-4614-8ead-a2de53049d66"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10929, 297, 736, 11, 57, "Subsection",ExpressionUUID->"9760dc58-cb54-4dd2-8e25-ccd85499c856"],
Cell[11668, 310, 268, 6, 29, "Text",ExpressionUUID->"51ec8012-ee53-424b-9eb2-c9b7421aa847"],
Cell[11939, 318, 291, 7, 40, "Input",ExpressionUUID->"27974881-a153-4b4e-8f44-7af2cb1a093e"],
Cell[12233, 327, 555, 14, 58, "NumberedFigureCaption",ExpressionUUID->"6374d849-19c2-4454-bfef-d5c49a12d618"],
Cell[12791, 343, 396, 12, 40, "Input",ExpressionUUID->"c279123a-d3ca-46d7-88d7-3a3c986ea9d1"],
Cell[13190, 357, 314, 10, 39, "NumberedFigureCaption",ExpressionUUID->"44535661-47aa-434c-94f4-4a27720262b0"],
Cell[13507, 369, 436, 11, 40, "Input",ExpressionUUID->"57744649-8b88-46f4-b647-36d9cfa90adc"],
Cell[13946, 382, 403, 10, 39, "NumberedFigureCaption",ExpressionUUID->"a8b239ac-2739-4fad-bdc9-959467bbe0cd"],
Cell[14352, 394, 617, 10, 98, "Text",ExpressionUUID->"46fea085-5766-4fc2-b27e-5c41587dbe21"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15006, 409, 156, 3, 57, "Subsection",ExpressionUUID->"e5bbda52-67f8-4c08-b99d-971bf23caac1"],
Cell[15165, 414, 297, 7, 29, "Text",ExpressionUUID->"51db2589-f382-440c-863f-62ef62f95080"],
Cell[CellGroupData[{
Cell[15487, 425, 577, 15, 39, "Input",ExpressionUUID->"4003d655-b845-4f6b-81cc-0947dfc2e219"],
Cell[16067, 442, 656, 18, 69, "Output",ExpressionUUID->"5383ac20-2084-4afe-9ff8-b88f7181bd37"]
}, Open  ]],
Cell[16738, 463, 286, 9, 39, "NumberedFigureCaption",ExpressionUUID->"62bd2151-9c5f-4d1f-9a53-b2d58c503e39"],
Cell[CellGroupData[{
Cell[17049, 476, 586, 16, 39, "Input",ExpressionUUID->"f81cc690-546f-4b99-90b3-fc5af930850d"],
Cell[17638, 494, 1166, 37, 107, "Output",ExpressionUUID->"80a1c84f-1b5b-4a63-9031-ce7dde94ac5a"]
}, Open  ]],
Cell[18819, 534, 435, 17, 39, "NumberedFigureCaption",ExpressionUUID->"1712df3a-a0a8-4442-ae57-5e907c40de9b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[19303, 557, 163, 3, 81, "Section",ExpressionUUID->"ea77a23f-3183-490d-a405-6f1cf89f3d42"],
Cell[CellGroupData[{
Cell[19491, 564, 270, 4, 57, "Subsection",ExpressionUUID->"257a0f97-6845-4851-a7e4-07bd117bea08"],
Cell[19764, 570, 2743, 46, 484, "Text",ExpressionUUID->"ade51938-3ffe-4fad-8c96-ce8651990b4f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22544, 621, 275, 4, 57, "Subsection",ExpressionUUID->"31d33ca0-b090-49aa-a381-32c9c64e43f8"],
Cell[22822, 627, 675, 14, 120, "Text",ExpressionUUID->"541b2c30-274f-4527-b5d0-20b59424ad31"],
Cell[23500, 643, 513, 14, 40, "Input",ExpressionUUID->"8a5c7b34-37f6-492f-993d-a432d81bdacc"],
Cell[24016, 659, 184, 6, 52, "Text",ExpressionUUID->"d982deb7-f064-4897-9979-4bb4204d58e7"],
Cell[CellGroupData[{
Cell[24225, 669, 163, 3, 39, "Subsubsection",ExpressionUUID->"f358130a-07c6-47a0-b199-b24899371767"],
Cell[24391, 674, 324, 9, 29, "Text",ExpressionUUID->"5c690fd0-3101-4467-a9d0-8fa0fa30956c"],
Cell[24718, 685, 697, 18, 60, "Input",ExpressionUUID->"73b625ca-df32-46e5-9b3a-837cad8d863a"],
Cell[25418, 705, 438, 8, 39, "NumberedFigureCaption",ExpressionUUID->"f13db317-8588-4ce3-9f60-d43e74fe9911"],
Cell[25859, 715, 1571, 39, 98, "Input",ExpressionUUID->"fcb62a70-3be1-4cf5-96a9-5e07dd565acf"],
Cell[27433, 756, 726, 13, 76, "NumberedFigureCaption",ExpressionUUID->"173d8197-f063-4f4a-9e4c-4ebdc6c1bdd4"],
Cell[28162, 771, 751, 19, 60, "Input",ExpressionUUID->"40417448-ddee-43f5-8915-cb59fdb83aab"],
Cell[28916, 792, 209, 4, 39, "NumberedFigureCaption",ExpressionUUID->"464dea29-b5f6-4cff-a7c7-2707d53c7208"],
Cell[29128, 798, 273, 6, 29, "Text",ExpressionUUID->"8aa2ee0f-c8e6-4239-bb59-c186a9249bf4"],
Cell[CellGroupData[{
Cell[29426, 808, 676, 15, 39, "Input",ExpressionUUID->"7e212416-e8e2-495d-8403-b97ea6a41acc"],
Cell[30105, 825, 1890, 36, 170, 1138, 23, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"1f401f5b-ab84-4668-90a4-44c4cd0b2424"]
}, Open  ]],
Cell[32010, 864, 445, 8, 58, "NumberedFigureCaption",ExpressionUUID->"4be04b0b-8059-4e65-b5ac-b8c7a6c39873"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32492, 877, 169, 3, 39, "Subsubsection",ExpressionUUID->"8a665399-8148-443a-9f01-2930013ce71b"],
Cell[32664, 882, 269, 6, 52, "Text",ExpressionUUID->"e89123ae-9be2-4e29-be95-ddf3fdcdc561"],
Cell[32936, 890, 417, 10, 40, "Input",ExpressionUUID->"8d9b8394-946a-4e7b-b57e-f334df0dfa0b"],
Cell[33356, 902, 280, 7, 39, "NumberedFigureCaption",ExpressionUUID->"9cea0069-f358-40ff-8f4b-efda4b291e62"],
Cell[33639, 911, 236, 4, 29, "Text",ExpressionUUID->"c4eca345-cbbb-424e-b18a-09295be3eac0"],
Cell[33878, 917, 734, 19, 60, "Input",ExpressionUUID->"6872964c-fca6-4424-a9b1-357d1f20cf4c"],
Cell[34615, 938, 196, 3, 29, "Text",ExpressionUUID->"82ccc68a-10a1-4106-9bb6-e8d25a157997"],
Cell[CellGroupData[{
Cell[34836, 945, 529, 13, 39, "Input",ExpressionUUID->"5fc13a4c-4128-4862-9915-554a71764f00"],
Cell[35368, 960, 1605, 41, 190, "Output",ExpressionUUID->"ba675548-49a6-4269-9e89-97dc20a64843"]
}, Open  ]],
Cell[36988, 1004, 218, 5, 29, "Text",ExpressionUUID->"4774bd54-dc80-4bf1-98c3-6b0a39ad499a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37243, 1014, 223, 4, 39, "Subsubsection",ExpressionUUID->"4d0b8b23-908c-45ca-a37f-5139bc0264f7"],
Cell[37469, 1020, 271, 6, 52, "Text",ExpressionUUID->"ac8de124-505c-46df-8c21-7e4566698f79"],
Cell[37743, 1028, 1608, 41, 214, "Input",ExpressionUUID->"4ec50b61-95f6-4e99-be67-59a47d1902d8"],
Cell[39354, 1071, 419, 8, 58, "NumberedFigureCaption",ExpressionUUID->"e9f76f50-b553-4772-86bc-446eb09088c9"],
Cell[39776, 1081, 1876, 52, 177, "Input",ExpressionUUID->"c4f7920c-dadb-422e-bf56-e291a89f76cd"],
Cell[41655, 1135, 481, 9, 58, "NumberedFigureCaption",ExpressionUUID->"f31413b8-fdd0-4829-b495-f928a3a16fe9"],
Cell[42139, 1146, 449, 8, 75, "Text",ExpressionUUID->"b08f3be7-83ee-40af-a6cf-1ec03f72862a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42637, 1160, 162, 3, 57, "Subsection",ExpressionUUID->"e1f31e58-9667-4ec1-9dcf-c28137665188"],
Cell[42802, 1165, 275, 6, 29, "Text",ExpressionUUID->"a7bd15c6-9fee-4535-89e8-4a9da75c29bb"],
Cell[CellGroupData[{
Cell[43102, 1175, 855, 22, 78, "Input",ExpressionUUID->"f25c2e86-d100-46c1-8d55-ce4113551fc0"],
Cell[43960, 1199, 37435, 618, 358, "Output",ExpressionUUID->"27e0f771-6f2a-4912-a3a5-d5493194a278"]
}, Open  ]],
Cell[81410, 1820, 351, 7, 39, "NumberedFigureCaption",ExpressionUUID->"819577ad-6cf0-4afa-8257-d1bde2577695"],
Cell[81764, 1829, 345, 7, 29, "Text",ExpressionUUID->"ed33e74b-43d4-48d5-80ca-4a4f2c42c642"],
Cell[CellGroupData[{
Cell[82134, 1840, 756, 20, 78, "Input",ExpressionUUID->"b10d12e3-c7f4-462c-a43f-e58817036f9e"],
Cell[82893, 1862, 48278, 795, 358, "Output",ExpressionUUID->"12f2a976-5cc8-46d6-b1df-43aaaa21e5a4"]
}, Open  ]],
Cell[131186, 2660, 308, 7, 39, "NumberedFigureCaption",ExpressionUUID->"a8f8d2a0-1644-4a05-ac87-5ac5cae2f5bd"],
Cell[CellGroupData[{
Cell[131519, 2671, 758, 20, 78, "Input",ExpressionUUID->"0195dc7d-a624-46ca-8c1a-abf414ea5ea9"],
Cell[132280, 2693, 52975, 872, 358, "Output",ExpressionUUID->"008e9aa1-33ec-4d91-829d-3d5b6e62f377"]
}, Open  ]],
Cell[185270, 3568, 353, 7, 39, "NumberedFigureCaption",ExpressionUUID->"2f8ab75f-39ca-416d-b6db-7464e4db4e66"],
Cell[CellGroupData[{
Cell[185648, 3579, 923, 23, 59, "Input",ExpressionUUID->"62759460-2535-4677-81fe-976c0f87e6cb"],
Cell[186574, 3604, 81670, 1343, 355, "Output",ExpressionUUID->"924636ea-716f-4b9e-866a-ad7ee608ece8"]
}, Open  ]],
Cell[268259, 4950, 356, 7, 39, "NumberedFigureCaption",ExpressionUUID->"bab8f28d-b8be-47fa-9e03-6e7a8496da78"],
Cell[268618, 4959, 435, 8, 75, "Text",ExpressionUUID->"27a4b7d6-738f-46f1-821f-0d51b06b0a7a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269090, 4972, 210, 4, 57, "Subsection",ExpressionUUID->"5c8d4e0b-ed1c-43a3-b97d-45ffe526cf09"],
Cell[269303, 4978, 397, 7, 52, "Text",ExpressionUUID->"908b0707-613b-4c9d-9c55-4764f39ace2d"],
Cell[269703, 4987, 707, 19, 98, "Input",ExpressionUUID->"f0156475-7826-4ef8-9db8-eb57a4983069"],
Cell[270413, 5008, 419, 14, 39, "NumberedFigureCaption",ExpressionUUID->"2ff0673b-fbc8-425d-b1ac-6e5d7cc41282"],
Cell[270835, 5024, 1311, 34, 117, "Input",ExpressionUUID->"9c4fa563-abbe-4c5f-8887-1626e2cfeee3"],
Cell[272149, 5060, 592, 18, 58, "NumberedFigureCaption",ExpressionUUID->"b4c8d3fa-27ea-408f-854b-946c8e7e2026"],
Cell[272744, 5080, 1283, 33, 117, "Input",ExpressionUUID->"32433d67-daf8-49b5-a2c8-c73cbeeaaaaf"],
Cell[274030, 5115, 584, 18, 58, "NumberedFigureCaption",ExpressionUUID->"3816353d-649d-4696-9da3-acc4009bcb7b"],
Cell[274617, 5135, 2379, 61, 193, "Input",ExpressionUUID->"891f2587-b255-47b4-982a-25acab48f6ba"],
Cell[276999, 5198, 238, 4, 39, "NumberedFigureCaption",ExpressionUUID->"5a6eea20-4213-4f0c-bb9d-4f09ed66c471"],
Cell[CellGroupData[{
Cell[277262, 5206, 214, 4, 39, "Subsubsection",ExpressionUUID->"7a3ceb1d-3315-4a22-a6c1-3ddbe2fda4b3"],
Cell[277479, 5212, 320, 6, 29, "Text",ExpressionUUID->"1181c8a0-f19b-4ddd-bb63-62eb16b74a8a"],
Cell[CellGroupData[{
Cell[277824, 5222, 296, 5, 39, "Input",ExpressionUUID->"3fd1aa79-2b94-40ca-b5ce-e0cb4ffd71e4"],
Cell[278123, 5229, 1894, 49, 263, "Output",ExpressionUUID->"5763865c-1799-484d-86b3-78cdcccff592"]
}, Open  ]],
Cell[280032, 5281, 343, 7, 39, "NumberedFigureCaption",ExpressionUUID->"bffd48e8-f53c-405f-af1f-322f1f3e0c44"],
Cell[CellGroupData[{
Cell[280400, 5292, 345, 6, 39, "Input",ExpressionUUID->"064ff7d5-2654-4cee-b4bd-2b52717ea21d"],
Cell[280748, 5300, 1936, 49, 269, "Output",ExpressionUUID->"d2039789-c14f-455a-a8ad-ce9854c78b7a"]
}, Open  ]],
Cell[282699, 5352, 325, 6, 39, "NumberedFigureCaption",ExpressionUUID->"f4d12d5b-856d-417c-b83d-52c84216f769"],
Cell[CellGroupData[{
Cell[283049, 5362, 345, 6, 39, "Input",ExpressionUUID->"b06067a3-046f-4bef-9c19-dce8e21bcbc4"],
Cell[283397, 5370, 1963, 50, 270, "Output",ExpressionUUID->"0f0ac359-69ef-450e-ad7d-a12625406453"]
}, Open  ]],
Cell[285375, 5423, 330, 6, 39, "NumberedFigureCaption",ExpressionUUID->"414f0a56-af43-436a-9247-cd0a665b0a2e"],
Cell[CellGroupData[{
Cell[285730, 5433, 345, 6, 39, "Input",ExpressionUUID->"e751c0d6-1821-4037-a6c9-1383ba53f0fb"],
Cell[286078, 5441, 1959, 50, 274, "Output",ExpressionUUID->"821041dd-5df0-4aaf-8079-db764e3d9ffe"]
}, Open  ]],
Cell[288052, 5494, 327, 6, 39, "NumberedFigureCaption",ExpressionUUID->"ab017607-bde1-4edc-8e9d-07056f44c92b"],
Cell[CellGroupData[{
Cell[288404, 5504, 440, 7, 39, "Input",ExpressionUUID->"378fc980-a85e-46fe-b27a-f288fd42bfb4"],
Cell[288847, 5513, 2021, 51, 274, "Output",ExpressionUUID->"96d6f5e9-fefc-46dc-8856-49f7b5face0d"]
}, Open  ]],
Cell[290883, 5567, 327, 6, 39, "NumberedFigureCaption",ExpressionUUID->"c21759fa-fa9a-4765-a3f5-e263bb6d99de"],
Cell[291213, 5575, 861, 14, 120, "Text",ExpressionUUID->"1fb4e40a-80eb-46b1-b666-1474ce224190"]
}, Open  ]],
Cell[CellGroupData[{
Cell[292111, 5594, 178, 3, 39, "Subsubsection",ExpressionUUID->"f3cc4a64-634a-4a96-9463-15df71266a1a"],
Cell[292292, 5599, 423, 8, 29, "Text",ExpressionUUID->"4d0dc59d-697d-42f7-be8a-27ad6135c062"],
Cell[292718, 5609, 596, 15, 39, "Input",ExpressionUUID->"9e3eba1b-6fb6-431d-9672-bd41c5bff657"],
Cell[293317, 5626, 1619, 44, 247, "Input",ExpressionUUID->"39d81b21-1ec7-4283-be3e-358c968cf08f"],
Cell[294939, 5672, 469, 8, 58, "NumberedFigureCaption",ExpressionUUID->"3076e791-143a-4d32-aa7a-5801bf28f6d8"],
Cell[295411, 5682, 516, 9, 52, "Text",ExpressionUUID->"7c795313-be82-41c9-a7d8-8dfaea512c2a"],
Cell[295930, 5693, 1481, 37, 60, "Input",ExpressionUUID->"e67293b1-2054-4995-b04d-3f368e317629"],
Cell[297414, 5732, 363, 11, 39, "NumberedFigureCaption",ExpressionUUID->"04d55737-7a55-42f0-9e25-dc4e29d0103c"],
Cell[CellGroupData[{
Cell[297802, 5747, 1951, 51, 249, "Input",ExpressionUUID->"83d3cadf-ced9-4039-88f5-2c143c8ef4bb"],
Cell[299756, 5800, 3967, 85, 242, "Output",ExpressionUUID->"320a6345-90ab-434e-b9fc-ebcb63a08ce6"]
}, Open  ]],
Cell[303738, 5888, 268, 6, 39, "NumberedFigureCaption",ExpressionUUID->"e3b7e284-62ff-4806-b484-4e1b6401ed99"]
}, Open  ]],
Cell[304021, 5897, 229, 5, 39, "Subsubsection",ExpressionUUID->"fa34fba2-d7b5-4182-bce7-5b0f29382849"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304287, 5907, 257, 5, 57, "Subsection",ExpressionUUID->"eb162743-0085-40b7-8f55-0e4febe9effc"],
Cell[304547, 5914, 885, 18, 117, "Text",ExpressionUUID->"fd6411f0-a79b-47c4-adf3-d45866ee1f12"],
Cell[305435, 5934, 899, 18, 60, "Input",ExpressionUUID->"ee594e90-ff3e-41f3-8bb8-9955e946e4b8"],
Cell[CellGroupData[{
Cell[306359, 5956, 852, 19, 60, "Input",ExpressionUUID->"4a0ec6b9-d556-42a5-a86c-8dd447821140"],
Cell[307214, 5977, 156, 2, 50, "Output",ExpressionUUID->"70ccdefd-e61f-43af-a980-3a5812c5b0a8"]
}, Open  ]],
Cell[307385, 5982, 585, 15, 62, "Input",ExpressionUUID->"2dcb6a13-2ddd-4d24-89a4-cf767e143427"],
Cell[307973, 5999, 550, 14, 62, "Input",ExpressionUUID->"acadaaf1-f648-4e0a-9c63-ea4093da7f63"],
Cell[308526, 6015, 164, 3, 45, "Text",ExpressionUUID->"093f63e5-380e-4b92-8f60-4d2d6b5853f5"],
Cell[CellGroupData[{
Cell[308715, 6022, 443, 10, 60, "Input",ExpressionUUID->"559c39aa-3d23-4add-bb38-7580ee8c13de"],
Cell[309161, 6034, 369, 9, 45, "Message",ExpressionUUID->"6fd9ef2b-1ea7-4821-83d9-167bdac8fb4b"],
Cell[309533, 6045, 369, 9, 45, "Message",ExpressionUUID->"639ed042-336f-4082-b042-bb2002deef96"],
Cell[309905, 6056, 1729, 45, 390, "Output",ExpressionUUID->"97d14f82-778f-42fe-9d61-0c5c0e4242a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[311671, 6106, 672, 11, 60, "Input",ExpressionUUID->"f8f5cef8-43ba-4c8d-b0ad-7e38f53dbc08"],
Cell[312346, 6119, 1813, 45, 784, "Output",ExpressionUUID->"33f26878-0261-47b6-b1d3-5ffb9c5a2074"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314196, 6169, 860, 14, 60, "Input",ExpressionUUID->"198e838d-0f0c-4f06-9abd-094488936644"],
Cell[315059, 6185, 1759, 44, 968, "Output",ExpressionUUID->"8a96c4a4-3bc6-4a40-8bc5-3f4943bb68be"]
}, Open  ]],
Cell[316833, 6232, 154, 3, 60, "Input",ExpressionUUID->"d6486640-6fa2-46ba-8c51-a6a930b82481"],
Cell[CellGroupData[{
Cell[317012, 6239, 197, 3, 60, "Subsubsection",ExpressionUUID->"067c7792-f419-4f80-8770-96bd61bdf10e"],
Cell[317212, 6244, 201, 6, 81, "Text",ExpressionUUID->"2433fe8f-69d1-4952-8a47-3c838ee302cf"],
Cell[317416, 6252, 449, 12, 62, "Input",ExpressionUUID->"d8407442-55a5-425d-a719-407c6fab4dcd"],
Cell[CellGroupData[{
Cell[317890, 6268, 215, 3, 60, "Input",ExpressionUUID->"82807327-690e-4a0a-a9ab-9e59cc67e0d5"],
Cell[318108, 6273, 197, 2, 50, "Output",ExpressionUUID->"103949a1-d626-48d2-968e-0cba4311d1d0"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[318378, 6283, 190, 3, 81, "Section",ExpressionUUID->"d7e4795e-2c05-484f-8339-50b127a69abc"],
Cell[318571, 6288, 953, 16, 166, "Text",ExpressionUUID->"84111793-9a73-4282-a45a-319dbaf72549"],
Cell[CellGroupData[{
Cell[319549, 6308, 166, 3, 57, "Subsection",ExpressionUUID->"f7fb4161-a942-41f7-8ce5-3e88e2c7249c"],
Cell[319718, 6313, 332, 9, 29, "Text",ExpressionUUID->"a820c5cd-8ceb-44b1-ade6-8d500a1599f9"],
Cell[320053, 6324, 729, 19, 98, "Input",ExpressionUUID->"deca66c8-e78f-41a4-b4e9-5235455701cd"],
Cell[320785, 6345, 528, 17, 39, "NumberedFigureCaption",ExpressionUUID->"45772894-3d54-49e8-a5f7-8338748bc006"],
Cell[321316, 6364, 1584, 41, 155, "Input",ExpressionUUID->"bd28636a-0ac5-4656-83c4-a5835a8a6696"],
Cell[322903, 6407, 792, 25, 58, "NumberedFigureCaption",ExpressionUUID->"15bd4c04-7174-47cc-8484-2e91abbdb45a"],
Cell[323698, 6434, 597, 14, 75, "Text",ExpressionUUID->"bea12d71-4af1-4268-9f55-39f7954ad3c8"],
Cell[324298, 6450, 1550, 41, 155, "Input",ExpressionUUID->"49b8b95c-7808-44da-b55d-e3d19c9cc49d"],
Cell[325851, 6493, 429, 10, 58, "NumberedFigureCaption",ExpressionUUID->"dd88cc5e-8d7a-4361-9d35-8c3c45aaa67c"],
Cell[326283, 6505, 787, 22, 60, "Input",ExpressionUUID->"66cd8063-616e-4398-ad7c-0e438dbf3963"],
Cell[327073, 6529, 291, 8, 39, "NumberedFigureCaption",ExpressionUUID->"c5c0b55c-941d-4c61-9644-2f0dae586cd6"],
Cell[327367, 6539, 407, 8, 75, "Text",ExpressionUUID->"86b90b28-c5cd-48cd-89d4-fea86391f83e"],
Cell[327777, 6549, 2976, 79, 288, "Input",ExpressionUUID->"e5808f85-79f4-4510-a5f9-bb0c4822277a"],
Cell[330756, 6630, 537, 11, 76, "NumberedFigureCaption",ExpressionUUID->"ee7f75c3-b276-4b8c-a869-d18922b1f069"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331330, 6646, 513, 8, 57, "Subsection",ExpressionUUID->"6fdf6735-b43f-410e-bd2e-32b6bdaa7213"],
Cell[CellGroupData[{
Cell[331868, 6658, 160, 3, 39, "Subsubsection",ExpressionUUID->"d473a162-9d33-4e5d-b5d3-03bd623a3442"],
Cell[332031, 6663, 491, 9, 52, "Text",ExpressionUUID->"480b51f3-c752-4d15-8bb2-13fe5ebed3f8"],
Cell[332525, 6674, 713, 16, 39, "Input",ExpressionUUID->"4f9974db-b37e-4580-b52e-b0bba6840fcc"],
Cell[333241, 6692, 225, 4, 29, "Text",ExpressionUUID->"d9ac3259-ee53-41b2-9eb3-279ebce23ee7"],
Cell[333469, 6698, 639, 16, 40, "Input",ExpressionUUID->"f252cf65-22fc-4099-9e4c-e632bf3fefb2"],
Cell[334111, 6716, 316, 6, 29, "Text",ExpressionUUID->"31a36f76-cc67-47d5-9298-cb020e57d686"],
Cell[334430, 6724, 641, 13, 59, "Input",ExpressionUUID->"60938424-7c4c-4e51-8422-2393c6fbae89"],
Cell[CellGroupData[{
Cell[335096, 6741, 633, 11, 39, "Input",ExpressionUUID->"204b98ad-2850-42fb-9662-874b99a5d840"],
Cell[335732, 6754, 46886, 924, 74, "Output",ExpressionUUID->"44fb5dd3-73ff-4e97-a1ab-fb07f3ca2fff"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[382667, 7684, 158, 3, 39, "Subsubsection",ExpressionUUID->"5f3c7d71-ff37-4989-bb79-503f3b98f4e9"],
Cell[382828, 7689, 297, 7, 29, "Text",ExpressionUUID->"7298302a-e67f-456a-997d-8f4df09bb28e"],
Cell[383128, 7698, 1270, 35, 98, "Input",ExpressionUUID->"8e528a05-30a2-42fc-a28c-dbcf64cd5125"],
Cell[384401, 7735, 267, 6, 29, "Text",ExpressionUUID->"74dca5f0-4817-409e-b55b-62ae24f41ead"],
Cell[CellGroupData[{
Cell[384693, 7745, 319, 6, 39, "Input",ExpressionUUID->"2f3d6168-d519-438b-9963-0a9a0045458e"],
Cell[385015, 7753, 265780, 4172, 74, "Output",ExpressionUUID->"46dac19d-ce53-40e9-a8d2-83ca237fa225"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[650844, 11931, 212, 4, 39, "Subsubsection",ExpressionUUID->"bd6f64b3-4e26-4690-a5ec-9bb33580c54a"],
Cell[651059, 11937, 336, 7, 52, "Text",ExpressionUUID->"3e7d18fd-af90-46ef-afbc-f93c8bfa189f"],
Cell[CellGroupData[{
Cell[651420, 11948, 236, 4, 39, "Input",ExpressionUUID->"5a26e3db-72ce-422e-a892-9199487d26d7"],
Cell[651659, 11954, 223, 4, 32, "Output",ExpressionUUID->"7900fd58-5734-4636-b812-6555b66fd7e9"]
}, Open  ]],
Cell[651897, 11961, 246, 6, 29, "Text",ExpressionUUID->"0cf07352-48b8-4485-bf68-1d6867b6aaa9"],
Cell[CellGroupData[{
Cell[652168, 11971, 236, 4, 39, "Input",ExpressionUUID->"b54ece50-5ebc-4226-bc5e-31f381078b5b"],
Cell[652407, 11977, 53557, 1048, 684, "Output",ExpressionUUID->"190ec5be-f4a7-4a10-adc2-c0f5b1eea0f5"]
}, Open  ]],
Cell[705979, 13028, 442, 8, 52, "Text",ExpressionUUID->"aa4b74ca-1394-4fc3-9614-55adbcb72281"],
Cell[706424, 13038, 258, 7, 52, "Text",ExpressionUUID->"b4fa6994-5606-4d8c-ad77-8c06852c7c4b"],
Cell[CellGroupData[{
Cell[706707, 13049, 296, 6, 39, "Input",ExpressionUUID->"b09603cc-bf55-4fc6-838a-98c9740557d8"],
Cell[707006, 13057, 9598, 253, 396, "Output",ExpressionUUID->"5b651904-4818-4192-8ef5-273895026f3d"]
}, Open  ]],
Cell[716619, 13313, 1157, 24, 234, "Text",ExpressionUUID->"2ddc1765-e6c6-4ae8-b0db-9380e9573a0f"],
Cell[717779, 13339, 1332, 20, 98, "Text",ExpressionUUID->"3d81c819-10a5-4ac1-8463-f69ae1a38a9d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[719160, 13365, 210, 4, 57, "Subsection",ExpressionUUID->"b2ea1a59-d518-4cca-acbd-ef0122773997"],
Cell[719373, 13371, 718, 12, 98, "Text",ExpressionUUID->"9e51bc69-a7a4-4c3a-ba38-58a7bd1fca2b"],
Cell[CellGroupData[{
Cell[720116, 13387, 278, 6, 39, "Input",ExpressionUUID->"7d739f5b-843c-4f2e-af31-675f684e1b74"],
Cell[720397, 13395, 1296, 27, 40, "Output",ExpressionUUID->"0c249bb6-4904-48fc-8a2c-6459a0b01037"]
}, Open  ]],
Cell[721708, 13425, 1104, 17, 189, "Text",ExpressionUUID->"9cfc38b1-6adc-47d2-b557-fbd403c539cf"],
Cell[CellGroupData[{
Cell[722837, 13446, 159, 3, 39, "Subsubsection",ExpressionUUID->"bd7578d4-c943-4c9f-b0ba-9d5030021db7"],
Cell[722999, 13451, 409, 8, 52, "Text",ExpressionUUID->"7d9a8085-7fd6-4824-a114-283117b8760e"],
Cell[723411, 13461, 529, 14, 39, "Input",ExpressionUUID->"fa7b5e99-9915-4fb4-8101-0c8ede10db25"],
Cell[723943, 13477, 398, 7, 52, "Text",ExpressionUUID->"694f2071-0ece-419b-92f0-434e28736c9b"],
Cell[724344, 13486, 327, 8, 39, "Input",ExpressionUUID->"fecd3f56-4dff-45c2-93c1-4b4d325412a1"],
Cell[724674, 13496, 182, 3, 29, "Text",ExpressionUUID->"021f7ebf-746b-492f-91c3-d05e78700170"],
Cell[CellGroupData[{
Cell[724881, 13503, 427, 9, 39, "Input",ExpressionUUID->"4ee4db51-55e4-4f82-8177-db78d235b127"],
Cell[725311, 13514, 205299, 3194, 74, "Output",ExpressionUUID->"414f3851-c718-4e6d-a6b7-7cb741ff04cd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[930659, 16714, 157, 3, 39, "Subsubsection",ExpressionUUID->"82f0b565-2963-4102-8d8b-ae5ffc15bdf2"],
Cell[930819, 16719, 269, 6, 29, "Text",ExpressionUUID->"c228db2f-4b1a-402d-b5d4-1ced545065e5"],
Cell[931091, 16727, 1089, 31, 79, "Input",ExpressionUUID->"3889074d-793b-467e-8ab4-611bc25d2295"],
Cell[932183, 16760, 213, 5, 29, "Text",ExpressionUUID->"4b042287-67d7-4972-89fa-bac8b660fd33"],
Cell[CellGroupData[{
Cell[932421, 16769, 334, 7, 39, "Input",ExpressionUUID->"7ea259cd-d3d4-4ecb-82ca-64ecc6cffbbe"],
Cell[932758, 16778, 8606, 173, 97, "Output",ExpressionUUID->"3fdd4e1d-76c8-480f-9471-22defb24cf21"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[941413, 16957, 212, 4, 39, "Subsubsection",ExpressionUUID->"247a8b39-30f4-4da0-8d07-eb7c9dd6d389"],
Cell[941628, 16963, 336, 7, 52, "Text",ExpressionUUID->"3dc812d7-143b-4b8e-acc0-641b0e24bf55"],
Cell[CellGroupData[{
Cell[941989, 16974, 272, 5, 39, "Input",ExpressionUUID->"f10fe95c-8119-4210-852a-813f2b1eb5ec"],
Cell[942264, 16981, 245, 4, 32, "Output",ExpressionUUID->"b0a9ae0d-dbdc-4f4b-a12f-ed78134fff56"]
}, Open  ]],
Cell[942524, 16988, 298, 7, 29, "Text",ExpressionUUID->"6027ba37-4256-4c83-aa2c-f2788b9f6121"],
Cell[CellGroupData[{
Cell[942847, 16999, 293, 6, 39, "Input",ExpressionUUID->"6ca7a8ef-caad-44cb-9381-5acb5f918cdc"],
Cell[943143, 17007, 62733, 1238, 684, "Output",ExpressionUUID->"2f56bc5a-8f64-4604-a3c0-91ba527036b4"]
}, Open  ]],
Cell[1005891, 18248, 385, 8, 29, "Text",ExpressionUUID->"f06a33d2-4abd-4280-b897-7b15a9b78f36"],
Cell[1006279, 18258, 258, 7, 52, "Text",ExpressionUUID->"e7e1cabb-b7b0-4bbc-baa1-11ec71f5e416"],
Cell[CellGroupData[{
Cell[1006562, 18269, 353, 7, 39, "Input",ExpressionUUID->"177bda84-cdbd-4479-af51-861eb92cce74"],
Cell[1006918, 18278, 9630, 253, 396, "Output",ExpressionUUID->"6ad47671-84e1-4f28-8a89-4d5c3747dcc4"]
}, Open  ]],
Cell[1016563, 18534, 1305, 26, 234, "Text",ExpressionUUID->"b4445efa-a092-4a56-8fe8-56815d528d4b"],
Cell[1017871, 18562, 2046, 31, 143, "Text",ExpressionUUID->"0e5eb5ec-7c1a-4557-be12-5d5121a43512"],
Cell[1019920, 18595, 273160, 4528, 1346, "Text",ExpressionUUID->"aecf06bd-c112-4019-8840-d5395c328344"]
}, Open  ]]
}, Open  ]],
Cell[1293107, 23127, 171, 3, 57, "Subsection",ExpressionUUID->"e65d2ee4-b760-4459-99c3-d6be88956f43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1293315, 23135, 226, 4, 81, "Section",ExpressionUUID->"9a3af1d8-fcc7-45a6-bd82-eb1e45ef490d"],
Cell[CellGroupData[{
Cell[1293566, 23143, 161, 3, 57, "Subsection",ExpressionUUID->"af3aa9db-44c7-4c61-a14e-f896bcb772ee"],
Cell[1293730, 23148, 1184, 18, 143, "Text",ExpressionUUID->"98abdaf6-c217-4233-afc1-df232afda30f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1294951, 23171, 157, 3, 57, "Subsection",ExpressionUUID->"8f6c21eb-b74e-4aae-b025-d6a6a5d28da2"],
Cell[1295111, 23176, 216, 5, 29, "Text",ExpressionUUID->"3f378beb-8416-482f-bc33-35c8ffbeb5dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1295364, 23186, 189, 3, 57, "Subsection",ExpressionUUID->"b2c73dd7-752e-4b33-88e9-f2321e23baa6"],
Cell[1295556, 23191, 144, 3, 29, "Text",ExpressionUUID->"12c4d0c5-b36f-4e8e-83bf-0d5e4c600c7f"],
Cell[1295703, 23196, 154, 3, 39, "Input",ExpressionUUID->"9f711335-a35f-44e0-a7fa-3928ee902904"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1295894, 23204, 191, 3, 57, "Subsection",ExpressionUUID->"52415639-cbad-40de-b09e-08d2184f481c"],
Cell[1296088, 23209, 438, 8, 52, "Text",ExpressionUUID->"514467d5-2e3d-4e1d-b535-90bab2a59b53"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1296563, 23222, 1330, 27, 461, "Subsection",ExpressionUUID->"b49b8db9-06ee-4c8a-bbe9-71db00e37430"],
Cell[1297896, 23251, 225, 4, 39, "Input",ExpressionUUID->"fccccda1-8d14-4734-a57f-4c8182b921a1"],
Cell[CellGroupData[{
Cell[1298146, 23259, 224, 4, 39, "Input",ExpressionUUID->"3f5f5e11-f495-45d8-99c1-95dc49369299"],
Cell[1298373, 23265, 156, 3, 32, "Output",ExpressionUUID->"1d16ba11-a973-4bac-b86c-5ede5d1f5c88"]
}, Open  ]],
Cell[1298544, 23271, 310, 7, 39, "Input",ExpressionUUID->"32bf3f75-c35f-4890-b640-b7d26e263c71"],
Cell[CellGroupData[{
Cell[1298879, 23282, 300, 6, 39, "Input",ExpressionUUID->"9276463c-b75e-49bd-aa40-86c0f1a6ae77"],
Cell[1299182, 23290, 48508, 950, 74, "Output",ExpressionUUID->"4171684c-04ef-4c9e-8508-f2aa463c3176"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1347727, 24245, 438, 9, 39, "Input",ExpressionUUID->"015e27db-6bee-4167-b9b8-d208294962e1"],
Cell[1348168, 24256, 257, 4, 32, "Output",ExpressionUUID->"d5be3a0a-7f2e-4f75-b932-13bcfdfa0289"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1348474, 24266, 408, 8, 100, "Subsection",ExpressionUUID->"42a59022-aefc-4229-8f21-ab2e54b784a9"],
Cell[1348885, 24276, 350, 8, 39, "Input",ExpressionUUID->"fad2d926-33c0-44dc-aa1c-ee736fd0c0af"],
Cell[CellGroupData[{
Cell[1349260, 24288, 267, 5, 39, "Input",ExpressionUUID->"9bf45c92-078b-4056-af8a-c012607741fb"],
Cell[1349530, 24295, 232, 5, 32, "Output",ExpressionUUID->"3dd24324-ce9f-4d0f-8f51-27f4aadcb019"]
}, Open  ]],
Cell[1349777, 24303, 318, 7, 39, "Input",ExpressionUUID->"45694c2e-b3fe-4de0-b8ff-610f60d43e78"],
Cell[CellGroupData[{
Cell[1350120, 24314, 217, 4, 39, "Input",ExpressionUUID->"c714868e-a7d7-48f8-afb5-b43a3b9e5b3f"],
Cell[1350340, 24320, 178, 3, 32, "Output",ExpressionUUID->"b662e897-c095-4d4f-b77f-fc7e81ddd4ab"]
}, Open  ]],
Cell[1350533, 24326, 229, 5, 29, "Text",ExpressionUUID->"6b408b4e-7096-4de8-b015-02c7615ecc81"],
Cell[1350765, 24333, 381, 10, 39, "Input",ExpressionUUID->"293a594b-410f-4f46-accf-6bd7d77d4ee1"],
Cell[1351149, 24345, 374, 9, 39, "Input",ExpressionUUID->"1bb39b7b-e19c-48d2-851c-5fe987404cfa"],
Cell[CellGroupData[{
Cell[1351548, 24358, 272, 5, 39, "Input",ExpressionUUID->"3178f4d3-40a0-44bf-8c86-1c142b5d6b2e"],
Cell[1351823, 24365, 45487, 904, 74, "Output",ExpressionUUID->"d4ce0638-3bd1-4cf2-a2e2-5df309ecbf7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1397347, 25274, 279, 6, 39, "Input",ExpressionUUID->"02e7d264-947a-4632-9a78-62ce6a9b9fa8"],
Cell[1397629, 25282, 184, 3, 32, "Output",ExpressionUUID->"3d727098-c791-4924-942d-8b800313c23a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1397862, 25291, 456, 8, 100, "Subsection",ExpressionUUID->"4ef0e824-3016-446d-9e5a-da5a433ad970"],
Cell[CellGroupData[{
Cell[1398343, 25303, 268, 7, 57, "Subsubsection",ExpressionUUID->"89befe17-c711-459e-9709-70bd8042bf56"],
Cell[CellGroupData[{
Cell[1398636, 25314, 690, 16, 39, "Input",ExpressionUUID->"fd7c33c1-9e99-47ef-8443-670c53c7060d"],
Cell[1399329, 25332, 454, 10, 28, "Message",ExpressionUUID->"9342f474-0ad3-4061-845b-f6d7614eb7a2"],
Cell[1399786, 25344, 160, 3, 32, "Output",ExpressionUUID->"9af51e19-b99d-4c16-8a9d-820624ac8122"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1399983, 25352, 1188, 26, 39, "Input",ExpressionUUID->"a1cd05f3-129e-419e-b1d0-86e7bfb3de59"],
Cell[1401174, 25380, 385, 9, 29, "Message",ExpressionUUID->"ebe01dde-44ce-433e-85a0-f4ac5289b8e9"],
Cell[1401562, 25391, 227, 3, 32, "Output",ExpressionUUID->"80e16d1e-87b0-4dab-a73b-6347f8ccd10c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1401826, 25399, 206, 3, 39, "Input",ExpressionUUID->"a75fcc81-5b73-4501-9cde-d65447f9caef"],
Cell[1402035, 25404, 396, 9, 28, "Message",ExpressionUUID->"5b72aadb-c4d8-42dd-9321-add4fbb2600b"],
Cell[1402434, 25415, 396, 9, 28, "Message",ExpressionUUID->"221c54fd-924f-485e-a0c3-8b917098e573"],
Cell[1402833, 25426, 454, 10, 27, "Message",ExpressionUUID->"a0e872de-44d4-4186-8d5e-36a3cba8f3ad"],
Cell[1403290, 25438, 166, 3, 32, "Output",ExpressionUUID->"d297b4a3-b046-492a-9c64-aa05c1cbbd95"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1403493, 25446, 629, 16, 39, "Input",ExpressionUUID->"9be06e94-f4f9-4b80-8226-75e4be50f943"],
Cell[1404125, 25464, 385, 9, 29, "Message",ExpressionUUID->"84841c32-68fe-4957-8340-e2a028d6e7ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1404547, 25478, 225, 4, 39, "Input",ExpressionUUID->"60e849df-70f1-4ce9-99d8-5670fcb0eaf4"],
Cell[1404775, 25484, 5444, 132, 147, "Output",ExpressionUUID->"a3339bb0-59c3-4ba8-9953-74f74d523c37"]
}, Open  ]],
Cell[1410234, 25619, 152, 3, 39, "Input",ExpressionUUID->"602bfeea-f6fe-4969-949e-4850bd814f01"],
Cell[1410389, 25624, 151, 3, 39, "Input",ExpressionUUID->"6b42a872-1841-4a8f-8d31-a60d9d2ed8ed"],
Cell[CellGroupData[{
Cell[1410565, 25631, 376, 8, 39, "Input",ExpressionUUID->"ab0d1309-3ce2-4092-b86e-47d1e4cdae19"],
Cell[1410944, 25641, 176, 3, 32, "Output",ExpressionUUID->"e45e2f3b-cb8b-4d36-844e-73412171ad83"]
}, Open  ]],
Cell[1411135, 25647, 1903, 55, 154, "Input",ExpressionUUID->"8cc99caf-0b6c-430d-9372-e3b4518c938b"],
Cell[CellGroupData[{
Cell[1413063, 25706, 271, 5, 39, "Input",ExpressionUUID->"21197dee-f9e7-484d-9f7c-b153eca69f48"],
Cell[1413337, 25713, 49311, 960, 74, "Output",ExpressionUUID->"a0258500-662e-4019-af06-e55574ac06c6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1462697, 26679, 158, 3, 39, "Subsubsection",ExpressionUUID->"643b5b98-ed77-4e73-903f-88de8bc6bc37"],
Cell[CellGroupData[{
Cell[1462880, 26686, 280, 5, 39, "Input",ExpressionUUID->"8ea906d1-c055-4ab7-938d-9082dac8ec31"],
Cell[1463163, 26693, 1787, 46, 239, "Output",ExpressionUUID->"14c52d85-0d55-4f4c-b008-26b8fcbed432"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1464987, 26744, 262, 5, 39, "Input",ExpressionUUID->"e45c8419-a650-4c5e-beb0-af0a476bdd78"],
Cell[1465252, 26751, 1717, 45, 243, "Output",ExpressionUUID->"274540bf-31ff-4c99-bb6e-743580b40268"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1467006, 26801, 285, 5, 39, "Input",ExpressionUUID->"9635c932-d922-4b93-9050-b23a04ea3a79"],
Cell[1467294, 26808, 1760, 46, 239, "Output",ExpressionUUID->"e00a8d1b-b4a1-4555-bd36-8d2de39f358e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1469091, 26859, 287, 5, 39, "Input",ExpressionUUID->"f6e3167b-aa48-4bbe-984a-3d3f3f3c1eaa"],
Cell[1469381, 26866, 1706, 45, 239, "Output",ExpressionUUID->"3c150d77-b0cb-4899-b573-73d27e6293a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1471124, 26916, 285, 5, 39, "Input",ExpressionUUID->"85e1a9c2-551c-4d3f-944c-482b7923347f"],
Cell[1471412, 26923, 1633, 44, 250, "Output",ExpressionUUID->"40d739a3-48c5-4c44-bec7-020ea9ed647e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1473082, 26972, 285, 5, 39, "Input",ExpressionUUID->"45cd9b44-41a2-4997-93fc-9cba5e2e9324"],
Cell[1473370, 26979, 1640, 44, 244, "Output",ExpressionUUID->"5067c0ae-5209-4cfa-a62f-46413efcd9e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1475047, 27028, 284, 5, 39, "Input",ExpressionUUID->"a22581d5-062d-4dd3-a98a-3eeec16c9af5"],
Cell[1475334, 27035, 1673, 45, 243, "Output",ExpressionUUID->"39a7b06a-a7c3-4917-a59e-76efd4a30bdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1477044, 27085, 285, 5, 39, "Input",ExpressionUUID->"42c27720-9d27-4454-83b1-ea6dae152769"],
Cell[1477332, 27092, 1616, 44, 248, "Output",ExpressionUUID->"5cfa31e1-7b27-447f-a202-44d07837b36e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1478985, 27141, 287, 5, 39, "Input",ExpressionUUID->"47ae783a-5223-465f-86a5-f6c83405bad2"],
Cell[1479275, 27148, 1892, 47, 245, "Output",ExpressionUUID->"f391ac03-52f8-4eee-a8dd-91a275403410"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1481204, 27200, 285, 5, 39, "Input",ExpressionUUID->"3ad10fd6-991f-49fa-8aaa-a5953433ab07"],
Cell[1481492, 27207, 1650, 44, 247, "Output",ExpressionUUID->"0585cf65-b422-4909-9463-f39758a0e5ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1483179, 27256, 285, 5, 39, "Input",ExpressionUUID->"bcf76d68-c278-4a57-be2c-9808db5d3b69"],
Cell[1483467, 27263, 1652, 44, 243, "Output",ExpressionUUID->"1ab955e9-c6c0-49fe-942a-4b223f226ef8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1485156, 27312, 285, 5, 39, "Input",ExpressionUUID->"d9859027-487a-4a29-b8b1-80de7976aea9"],
Cell[1485444, 27319, 1632, 44, 243, "Output",ExpressionUUID->"2acc1ffb-4a3e-4ad2-818b-984adb60ca2a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1487113, 27368, 285, 5, 39, "Input",ExpressionUUID->"14de7cdc-7690-4fcf-8fb2-48427c0674b8"],
Cell[1487401, 27375, 1676, 45, 243, "Output",ExpressionUUID->"2fedaa52-1de0-43a8-a32c-2a63204efc5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1489114, 27425, 285, 5, 39, "Input",ExpressionUUID->"dda49798-1dd1-4e1b-8e5b-7c16eded069e"],
Cell[1489402, 27432, 1798, 47, 234, "Output",ExpressionUUID->"aad60288-bb51-4668-a05e-f7d9348bc8b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1491237, 27484, 285, 5, 39, "Input",ExpressionUUID->"4bcae2fd-cba6-4f8b-b2ce-e47b54b47f2e"],
Cell[1491525, 27491, 1628, 44, 243, "Output",ExpressionUUID->"037f3f39-47f0-4b40-97cb-dd06b2506485"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1493190, 27540, 287, 5, 39, "Input",ExpressionUUID->"37fcb13f-b4b5-4aba-89c8-25429af2435f"],
Cell[1493480, 27547, 1702, 45, 246, "Output",ExpressionUUID->"1e16a841-358a-438a-b573-9ab468e11042"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1495219, 27597, 285, 5, 39, "Input",ExpressionUUID->"5fccfc62-98a7-4697-9659-fb216cfff978"],
Cell[1495507, 27604, 1760, 46, 239, "Output",ExpressionUUID->"737c2bc3-7702-442e-99bd-3bc3425eb2fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1497304, 27655, 284, 5, 39, "Input",ExpressionUUID->"bc554a43-d30a-4ff8-bd8f-8ff47eddb938"],
Cell[1497591, 27662, 1742, 46, 243, "Output",ExpressionUUID->"2fc2f10b-f0b1-4ea7-99c0-2fc67773d796"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1499370, 27713, 285, 5, 39, "Input",ExpressionUUID->"c1514496-0b97-4f0f-883c-17029bfcb2f8"],
Cell[1499658, 27720, 1677, 45, 243, "Output",ExpressionUUID->"ab955a12-95c2-49a0-950e-8e58560a831a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1501372, 27770, 284, 5, 39, "Input",ExpressionUUID->"0c4e59f3-db4a-41f3-9c7c-861791bc7ab2"],
Cell[1501659, 27777, 1624, 44, 243, "Output",ExpressionUUID->"31045444-37b2-4b03-9ad4-4da45c798e9b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1503320, 27826, 285, 5, 39, "Input",ExpressionUUID->"b7ad408c-23b7-4e1a-a5b1-e51866359994"],
Cell[1503608, 27833, 1632, 44, 244, "Output",ExpressionUUID->"354f298b-e193-411f-b7d5-e89936ba179d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1505277, 27882, 285, 5, 39, "Input",ExpressionUUID->"c4337c6f-b15f-46c1-bd4d-2bfcc75a95f3"],
Cell[1505565, 27889, 1846, 47, 230, "Output",ExpressionUUID->"93522c74-9cc5-4399-9b23-59d7cc527a20"]
}, Open  ]],
Cell[1507426, 27939, 156, 3, 39, "Input",ExpressionUUID->"67fbd2d0-dac0-4a96-af9d-eacf489c9784"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1507631, 27948, 610, 10, 100, "Subsection",ExpressionUUID->"db060e3c-74dc-4d24-8022-8cf76d79cd94"],
Cell[1508244, 27960, 336, 7, 39, "Input",ExpressionUUID->"7f018db3-f966-4e89-b558-6b5b5e51c101"],
Cell[CellGroupData[{
Cell[1508605, 27971, 843, 24, 97, "Input",ExpressionUUID->"aaf2894b-9586-47d9-8b2f-1e9fdeaff8ad"],
Cell[1509451, 27997, 178, 3, 32, "Output",ExpressionUUID->"302aa6a2-afa1-4133-a652-9b99cf7cb828"],
Cell[1509632, 28002, 178, 3, 32, "Output",ExpressionUUID->"85e4aedb-8e4c-4274-9bfd-0120201a6a41"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1509847, 28010, 935, 22, 97, "Input",ExpressionUUID->"1bce20ce-1bf2-4c08-ab1d-48c9f6ed06cc"],
Cell[1510785, 28034, 155, 3, 32, "Output",ExpressionUUID->"de29ad2a-984f-4d81-aab1-cbbf5275c7c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1510977, 28042, 684, 11, 39, "Input",ExpressionUUID->"69470b01-f441-4941-84c9-31f995394ace"],
Cell[1511664, 28055, 49168, 959, 74, "Output",ExpressionUUID->"2853cf92-5984-4818-92ec-b865ae4bc90b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1560869, 29019, 531, 11, 39, "Input",ExpressionUUID->"23a592e1-e296-47e9-9efa-f5db91c46807"],
Cell[1561403, 29032, 16800, 432, 40384, "Output",ExpressionUUID->"3c820de3-b55f-4fcd-bc09-7144e12f1f99"]
}, Closed]],
Cell[CellGroupData[{
Cell[1578240, 29469, 169, 3, 36, "Subsubsection",ExpressionUUID->"6341057b-7e85-4034-a56a-5e4c04d7e90d"],
Cell[CellGroupData[{
Cell[1578434, 29476, 401, 9, 39, "Input",ExpressionUUID->"93544c49-244c-402d-8381-f0d139bdfb42"],
Cell[1578838, 29487, 1835, 47, 234, "Output",ExpressionUUID->"8db7e944-ad85-4123-8e06-2ab77fce0be1"],
Cell[1580676, 29536, 1784, 47, 243, "Output",ExpressionUUID->"14d3c4a8-8bf6-4557-ba9f-5b7779d226c2"],
Cell[1582463, 29585, 1664, 45, 248, "Output",ExpressionUUID->"8878aac3-90bc-4386-987d-e55c559ab4b5"],
Cell[1584130, 29632, 1697, 45, 243, "Output",ExpressionUUID->"6cfac32a-149b-42a2-9c32-ce8a2729eef3"],
Cell[1585830, 29679, 1605, 44, 248, "Output",ExpressionUUID->"5ece1500-0a99-4f25-bdbd-691b5093e741"],
Cell[1587438, 29725, 1642, 44, 244, "Output",ExpressionUUID->"6507e16e-9d10-44bd-8184-6fbe35d8f463"],
Cell[1589083, 29771, 1621, 44, 243, "Output",ExpressionUUID->"0a3ade9a-a0df-43b4-940b-b6b2f03694ca"]
}, Open  ]],
Cell[1590719, 29818, 205, 4, 39, "Input",ExpressionUUID->"9102b127-74cb-4c68-9f94-1be59417a03e"],
Cell[1590927, 29824, 154, 3, 39, "Input",ExpressionUUID->"2729455f-6b68-41de-bffa-0abf056d5818"],
Cell[CellGroupData[{
Cell[1591106, 29831, 3935, 96, 249, "Input",ExpressionUUID->"1ab499e3-3359-4abf-9f59-e079a621283f"],
Cell[1595044, 29929, 2036, 40, 57, "Output",ExpressionUUID->"da12dc60-1e11-4922-b6a6-65926709b77d"]
}, Open  ]],
Cell[1597095, 29972, 1393, 37, 117, "Input",ExpressionUUID->"5dcb31c0-ea89-4460-ad20-5d4838817789"],
Cell[CellGroupData[{
Cell[1598513, 30013, 656, 16, 39, "Input",ExpressionUUID->"37335144-36ca-4b28-8b3d-a70d16f4e158"],
Cell[1599172, 30031, 12117, 309, 211, "Output",ExpressionUUID->"43cbbcf1-e96c-4ca7-9777-a9f357cd5f7e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1611350, 30347, 184, 3, 57, "Subsection",ExpressionUUID->"8c7df693-15d8-42a7-a447-159a5fed6064"],
Cell[1611537, 30352, 2306, 52, 917, "Text",ExpressionUUID->"7d699ce5-2b2f-49d9-bb5f-644db38711ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1613880, 30409, 250, 6, 79, "Subsection",ExpressionUUID->"3806c5f7-8754-45b9-bad8-ac21caa1b796"],
Cell[1614133, 30417, 228, 5, 29, "Text",ExpressionUUID->"212909c7-0273-441c-9908-2ccdfffafec0"]
}, Open  ]],
Cell[1614376, 30425, 205, 3, 57, "Subsection",ExpressionUUID->"22c88fd6-bd6b-4bf6-b1ac-d93a47db6c5f"],
Cell[CellGroupData[{
Cell[1614606, 30432, 167, 3, 32, "Subsection",ExpressionUUID->"7b42aa53-0654-4933-9695-767730b9c223"],
Cell[CellGroupData[{
Cell[1614798, 30439, 415, 8, 39, "Subsubsection",ExpressionUUID->"7e99dba4-8ffb-4270-a42a-1eaf83291df7"],
Cell[1615216, 30449, 1289, 31, 97, "Input",ExpressionUUID->"2fef8580-a720-43d6-a0f8-2d86a972c780"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1616542, 30485, 478, 9, 39, "Subsubsection",ExpressionUUID->"8e3d52c2-eb36-4e32-b8ed-ce7d469a7d27"],
Cell[1617023, 30496, 1356, 28, 117, "Input",ExpressionUUID->"d4a526f7-5b72-48e9-83ca-dd1c08ee4478"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1618416, 30529, 423, 8, 39, "Subsubsection",ExpressionUUID->"f7ad333e-258a-476a-981a-7b2037c766cc"],
Cell[1618842, 30539, 1032, 20, 117, "Input",ExpressionUUID->"cb4c070f-3d37-422c-a62d-c9c59b99c82c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1619911, 30564, 471, 9, 39, "Subsubsection",ExpressionUUID->"b99bff67-a696-40f0-bbf8-7b6c68d0b9ee"],
Cell[1620385, 30575, 206, 4, 39, "Input",ExpressionUUID->"050c52e9-6647-470d-a9aa-2b1a2cc90eea"],
Cell[1620594, 30581, 1062, 21, 117, "Input",ExpressionUUID->"0fbe64c2-1459-422c-b8e6-527287814f64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1621693, 30607, 523, 10, 39, "Subsubsection",ExpressionUUID->"e3111d0a-873b-46be-b28d-a88f64543811"],
Cell[1622219, 30619, 206, 4, 39, "Input",ExpressionUUID->"ecabc96f-0dfe-43a2-ad4a-a10fd834e275"],
Cell[1622428, 30625, 1060, 21, 117, "Input",ExpressionUUID->"0533a688-457e-4e40-8538-8fd22fd8ee10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1623525, 30651, 306, 6, 39, "Subsubsection",ExpressionUUID->"8a95361d-e0a3-4dca-bc4e-d8e251d7bde8"],
Cell[1623834, 30659, 615, 15, 79, "Input",ExpressionUUID->"c3f8d6f9-131c-44cd-b37c-fd8602f62fc0"],
Cell[CellGroupData[{
Cell[1624474, 30678, 462, 12, 98, "Input",ExpressionUUID->"31a8d74e-ec72-4dae-94e3-6efa636ea83e"],
Cell[1624939, 30692, 160, 3, 32, "Output",ExpressionUUID->"c3ea353b-f431-4e24-89e9-e4fa0358c1e9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1625148, 30701, 355, 7, 39, "Subsubsection",ExpressionUUID->"6aee55cd-f45a-45b8-9caf-368503deb3f7"],
Cell[CellGroupData[{
Cell[1625528, 30712, 631, 14, 79, "Input",ExpressionUUID->"72fbf9e7-d262-47bc-9ff9-dbb2d71d72b4"],
Cell[1626162, 30728, 287, 7, 26, "PrintTemporary",ExpressionUUID->"519ea52c-fcf4-4f4f-bdab-8e7230d1e881"]
}, Open  ]],
Cell[1626464, 30738, 504, 12, 98, "Input",ExpressionUUID->"dad995d8-26db-4fa5-a0da-ce7fb184c088"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

